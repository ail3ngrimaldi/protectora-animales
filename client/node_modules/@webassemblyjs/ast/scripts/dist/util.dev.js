"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function iterateProps(obj, iterator) {
  Object.keys(obj).forEach(function (key) {
    return iterator(_objectSpread({}, obj[key], {
      name: key
    }));
  });
}

function mapProps(obj) {
  return Object.keys(obj).map(function (key) {
    return _objectSpread({}, obj[key], {
      name: key
    });
  });
}

function filterProps(obj, filter) {
  var ret = {};
  Object.keys(obj).forEach(function (key) {
    if (filter(obj[key])) {
      ret[key] = obj[key];
    }
  });
  return ret;
}

function typeSignature(meta) {
  var type = meta.array ? "Array<".concat(meta.type, ">") : meta.type;

  if (meta.optional) {
    return "".concat(meta.name, "?: ").concat(type);
  } else if (meta.maybe) {
    return "".concat(meta.name, ": ?").concat(type);
  } else {
    return "".concat(meta.name, ": ").concat(type);
  }
}

var unique = function unique(items) {
  return Array.from(new Set(items));
};

module.exports = {
  iterateProps: iterateProps,
  mapProps: mapProps,
  filterProps: filterProps,
  typeSignature: typeSignature,
  unique: unique
};