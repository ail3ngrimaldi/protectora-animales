"use strict";

var _require = require("chai"),
    assert = _require.assert;

var _require2 = require("@webassemblyjs/wast-parser"),
    parse = _require2.parse;

var _require3 = require("../lib"),
    moduleContextFromModuleAST = _require3.moduleContextFromModuleAST;

var contextFromWast = function contextFromWast(wast) {
  return moduleContextFromModuleAST(parse(wast).body[0]);
};

describe("module context", function () {
  describe("start segment", function () {
    it("should return the start function offset", function () {
      var context = contextFromWast("\n        (module\n          (func)\n          (func)\n          (start 1)\n        )\n      ");
      assert.isOk(context.getStart());
      assert.typeOf(context.getStart(), "number");
      assert.equal(context.getStart(), 1);
    });
    it("should return null if no start function", function () {
      var context = contextFromWast("\n        (module (func))\n      ");
      assert.isNull(context.getStart());
    });
    it("should retrive the type of implemented functions", function () {
      var context = contextFromWast("\n        (module\n          (func (param i32) (result i64))\n          (func (param i64) (result i32))\n          (func (result i64))\n          (func)\n        )\n      ");
      assert.deepEqual(context.getFunction(0), {
        args: ["i32"],
        result: ["i64"]
      });
      assert.deepEqual(context.getFunction(1), {
        args: ["i64"],
        result: ["i32"]
      });
      assert.deepEqual(context.getFunction(2), {
        args: [],
        result: ["i64"]
      });
      assert.deepEqual(context.getFunction(3), {
        args: [],
        result: []
      });
    });
    it("should retrive the type of imported functions", function () {
      var context = contextFromWast("\n        (module\n          (import \"a\" \"a\" (func (param i32) (result i32)))\n          (import \"a\" \"b\" (func (result i64)))\n          (import \"a\" \"c\" (func))\n          (func (result f32))\n        )\n      ");
      assert.deepEqual(context.getFunction(0), {
        args: ["i32"],
        result: ["i32"]
      });
      assert.deepEqual(context.getFunction(1), {
        args: [],
        result: ["i64"]
      });
      assert.deepEqual(context.getFunction(2), {
        args: [],
        result: []
      });
      assert.deepEqual(context.getFunction(3), {
        args: [],
        result: ["f32"]
      });
    });
    it("should retrive the type of functions with type ref", function () {
      var context = contextFromWast("\n        (module\n          (type (func (param i32) (result i32)))\n          (type (func (result i64)))\n          (type (func))\n\n          (import \"a\" \"a\" (func (type 0)))\n          (import \"a\" \"b\" (func (type 1)))\n          (func (type 2))\n        )\n      ");
      assert.deepEqual(context.getFunction(0), {
        args: ["i32"],
        result: ["i32"]
      });
      assert.deepEqual(context.getFunction(1), {
        args: [],
        result: ["i64"]
      });
      assert.deepEqual(context.getFunction(2), {
        args: [],
        result: []
      });
    });
  });
});