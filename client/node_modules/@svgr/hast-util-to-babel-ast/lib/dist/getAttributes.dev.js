"use strict";

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

exports.__esModule = true;
exports["default"] = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _util = require("./util");

var _stringToObjectStyle = _interopRequireDefault(require("./stringToObjectStyle"));

var _mappings = require("./mappings");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj["default"] = obj;
    return newObj;
  }
}

function convertAriaAttribute(kebabKey) {
  var _kebabKey$split = kebabKey.split('-'),
      _kebabKey$split2 = _toArray(_kebabKey$split),
      aria = _kebabKey$split2[0],
      parts = _kebabKey$split2.slice(1);

  return "".concat(aria, "-").concat(parts.join('').toLowerCase());
}

function getKey(key, value, node) {
  var lowerCaseKey = key.toLowerCase();
  var mappedElementAttribute = _mappings.ELEMENT_ATTRIBUTE_MAPPING[node.name] && _mappings.ELEMENT_ATTRIBUTE_MAPPING[node.name][lowerCaseKey];
  var mappedAttribute = _mappings.ATTRIBUTE_MAPPING[lowerCaseKey];

  if (mappedElementAttribute || mappedAttribute) {
    return t.jsxIdentifier(mappedElementAttribute || mappedAttribute);
  }

  var kebabKey = (0, _util.kebabCase)(key);

  if (kebabKey.startsWith('aria-')) {
    return t.jsxIdentifier(convertAriaAttribute(kebabKey));
  }

  if (kebabKey.startsWith('data-')) {
    return t.jsxIdentifier(kebabKey);
  }

  return t.jsxIdentifier(key);
}

function getValue(key, value) {
  // Handle className
  if (Array.isArray(value)) {
    return t.stringLiteral((0, _util.replaceSpaces)(value.join(' ')));
  }

  if (key === 'style') {
    return t.jsxExpressionContainer((0, _stringToObjectStyle["default"])(value));
  }

  if ((0, _util.isNumeric)(value)) {
    return t.jsxExpressionContainer(t.numericLiteral(Number(value)));
  }

  return t.stringLiteral((0, _util.replaceSpaces)(value));
}

var getAttributes = function getAttributes(node) {
  var keys = Object.keys(node.properties);
  var attributes = [];
  var index = -1;

  while (++index < keys.length) {
    var key = keys[index];
    var value = node.properties[key];
    var attribute = t.jsxAttribute(getKey(key, value, node), getValue(key, value, node));
    attributes.push(attribute);
  }

  return attributes;
};

var _default = getAttributes;
exports["default"] = _default;