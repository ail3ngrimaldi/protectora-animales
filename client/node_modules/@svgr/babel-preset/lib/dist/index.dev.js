"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

exports.__esModule = true;
exports["default"] = void 0;

var _babelPluginAddJsxAttribute = _interopRequireDefault(require("@svgr/babel-plugin-add-jsx-attribute"));

var _babelPluginRemoveJsxAttribute = _interopRequireDefault(require("@svgr/babel-plugin-remove-jsx-attribute"));

var _babelPluginRemoveJsxEmptyExpression = _interopRequireDefault(require("@svgr/babel-plugin-remove-jsx-empty-expression"));

var _babelPluginReplaceJsxAttributeValue = _interopRequireDefault(require("@svgr/babel-plugin-replace-jsx-attribute-value"));

var _babelPluginSvgDynamicTitle = _interopRequireDefault(require("@svgr/babel-plugin-svg-dynamic-title"));

var _babelPluginSvgEmDimensions = _interopRequireDefault(require("@svgr/babel-plugin-svg-em-dimensions"));

var _babelPluginTransformReactNativeSvg = _interopRequireDefault(require("@svgr/babel-plugin-transform-react-native-svg"));

var _babelPluginTransformSvgComponent = _interopRequireDefault(require("@svgr/babel-plugin-transform-svg-component"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function getAttributeValue(value) {
  var literal = typeof value === 'string' && value.startsWith('{') && value.endsWith('}');
  return {
    value: literal ? value.slice(1, -1) : value,
    literal: literal
  };
}

function propsToAttributes(props) {
  return Object.keys(props).map(function (name) {
    var _getAttributeValue = getAttributeValue(props[name]),
        literal = _getAttributeValue.literal,
        value = _getAttributeValue.value;

    return {
      name: name,
      literal: literal,
      value: value
    };
  });
}

function replaceMapToValues(replaceMap) {
  return Object.keys(replaceMap).map(function (value) {
    var _getAttributeValue2 = getAttributeValue(replaceMap[value]),
        literal = _getAttributeValue2.literal,
        newValue = _getAttributeValue2.value;

    return {
      value: value,
      newValue: newValue,
      literal: literal
    };
  });
}

var plugin = function plugin(api, opts) {
  var toRemoveAttributes = ['xmlns', 'xmlnsXlink', 'version'];
  var toAddAttributes = [];

  if (opts.svgProps) {
    toAddAttributes = [].concat(_toConsumableArray(toAddAttributes), _toConsumableArray(propsToAttributes(opts.svgProps)));
  }

  if (opts.ref) {
    toAddAttributes = [].concat(_toConsumableArray(toAddAttributes), [{
      name: 'ref',
      value: 'svgRef',
      literal: true
    }]);
  }

  if (opts.expandProps) {
    toAddAttributes = [].concat(_toConsumableArray(toAddAttributes), [{
      name: 'props',
      spread: true,
      position: opts.expandProps
    }]);
  }

  if (!opts.dimensions) {
    toRemoveAttributes = [].concat(_toConsumableArray(toRemoveAttributes), ['width', 'height']);
  }

  var plugins = [[_babelPluginTransformSvgComponent["default"], opts]].concat(_toConsumableArray(opts.icon && opts.dimensions ? [_babelPluginSvgEmDimensions["default"]] : []), [[_babelPluginRemoveJsxAttribute["default"], {
    elements: ['svg', 'Svg'],
    attributes: toRemoveAttributes
  }], [_babelPluginAddJsxAttribute["default"], {
    elements: ['svg', 'Svg'],
    attributes: toAddAttributes
  }], _babelPluginRemoveJsxEmptyExpression["default"]]);

  if (opts.replaceAttrValues) {
    plugins.push([_babelPluginReplaceJsxAttributeValue["default"], {
      values: replaceMapToValues(opts.replaceAttrValues)
    }]);
  }

  if (opts.titleProp) {
    plugins.push(_babelPluginSvgDynamicTitle["default"]);
  }

  if (opts["native"]) {
    if (opts["native"].expo) {
      plugins.push([_babelPluginTransformReactNativeSvg["default"], opts["native"]]);
    } else {
      plugins.push(_babelPluginTransformReactNativeSvg["default"]);
    }
  }

  return {
    plugins: plugins
  };
};

var _default = plugin;
exports["default"] = _default;