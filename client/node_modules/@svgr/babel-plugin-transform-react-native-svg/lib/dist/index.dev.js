"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

exports.__esModule = true;
exports["default"] = void 0;
var elementToComponent = {
  svg: 'Svg',
  circle: 'Circle',
  clipPath: 'ClipPath',
  ellipse: 'Ellipse',
  g: 'G',
  linearGradient: 'LinearGradient',
  radialGradient: 'RadialGradient',
  line: 'Line',
  path: 'Path',
  pattern: 'Pattern',
  polygon: 'Polygon',
  polyline: 'Polyline',
  rect: 'Rect',
  symbol: 'Symbol',
  text: 'Text',
  textPath: 'TextPath',
  tspan: 'TSpan',
  use: 'Use',
  defs: 'Defs',
  stop: 'Stop',
  mask: 'Mask',
  image: 'Image'
};

var expoPrefix = function expoPrefix(component, expo) {
  // Prefix with 'Svg.' in the case we're transforming for Expo
  if (!expo) {
    return component;
  }

  return (component !== 'Svg' ? 'Svg.' : '') + component;
};

var plugin = function plugin(_ref, _ref2) {
  var t = _ref.types;
  var expo = _ref2.expo;

  function replaceElement(path, state) {
    var name = path.node.openingElement.name.name; // Replace element by react-native-svg components

    var component = elementToComponent[name];

    if (component) {
      var prefixedComponent = expoPrefix(component, expo);
      var openingElementName = path.get('openingElement.name');
      openingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));

      if (path.has('closingElement')) {
        var closingElementName = path.get('closingElement.name');
        closingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));
      }

      state.replacedComponents.add(prefixedComponent);
      return;
    } // Remove element if not supported


    state.unsupportedComponents.add(name);
    path.remove();
  }

  var svgElementVisitor = {
    JSXElement: function JSXElement(path, state) {
      if (!path.get('openingElement.name').isJSXIdentifier({
        name: 'svg'
      })) {
        return;
      }

      replaceElement(path, state);
      path.traverse(jsxElementVisitor, state);
    }
  };
  var jsxElementVisitor = {
    JSXElement: function JSXElement(path, state) {
      replaceElement(path, state);
    }
  };
  var importDeclarationVisitor = {
    ImportDeclaration: function ImportDeclaration(path, state) {
      if (path.get('source').isStringLiteral({
        value: 'react-native-svg'
      })) {
        state.replacedComponents.forEach(function (component) {
          if (path.get('specifiers').some(function (specifier) {
            return specifier.get('local').isIdentifier({
              name: component
            });
          })) {
            return;
          }

          path.pushContainer('specifiers', t.importSpecifier(t.identifier(component), t.identifier(component)));
        });
      } else if (path.get('source').isStringLiteral({
        value: 'expo'
      })) {
        path.pushContainer('specifiers', t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')));
      } else {
        return;
      }

      if (state.unsupportedComponents.size && !path.has('trailingComments')) {
        var componentList = _toConsumableArray(state.unsupportedComponents).join(', ');

        path.addComment('trailing', " SVGR has dropped some elements not supported by react-native-svg: ".concat(componentList, " "));
      }
    }
  };
  return {
    visitor: {
      Program: function Program(path, state) {
        state.replacedComponents = new Set();
        state.unsupportedComponents = new Set();
        path.traverse(svgElementVisitor, state);
        path.traverse(importDeclarationVisitor, state);
      }
    }
  };
};

var _default = plugin;
exports["default"] = _default;