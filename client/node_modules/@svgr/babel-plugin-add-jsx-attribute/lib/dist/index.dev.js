"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var positionMethod = {
  start: 'unshiftContainer',
  end: 'pushContainer'
};

var addJSXAttribute = function addJSXAttribute(_ref, opts) {
  var t = _ref.types,
      template = _ref.template;

  function getAttributeValue(_ref2) {
    var literal = _ref2.literal,
        value = _ref2.value;

    if (typeof value === 'boolean') {
      return t.jsxExpressionContainer(t.booleanLiteral(value));
    }

    if (typeof value === 'number') {
      return t.jsxExpressionContainer(t.numericLiteral(value));
    }

    if (typeof value === 'string' && literal) {
      return t.jsxExpressionContainer(template.ast(value).expression);
    }

    if (typeof value === 'string') {
      return t.stringLiteral(value);
    }

    return null;
  }

  function getAttribute(_ref3) {
    var spread = _ref3.spread,
        name = _ref3.name,
        value = _ref3.value,
        literal = _ref3.literal;

    if (spread) {
      return t.jsxSpreadAttribute(t.identifier(name));
    }

    return t.jsxAttribute(t.jsxIdentifier(name), getAttributeValue({
      value: value,
      literal: literal
    }));
  }

  return {
    visitor: {
      JSXOpeningElement: function JSXOpeningElement(path) {
        if (!opts.elements.includes(path.node.name.name)) return;
        opts.attributes.forEach(function (_ref4) {
          var name = _ref4.name,
              _ref4$value = _ref4.value,
              value = _ref4$value === void 0 ? null : _ref4$value,
              _ref4$spread = _ref4.spread,
              spread = _ref4$spread === void 0 ? false : _ref4$spread,
              _ref4$literal = _ref4.literal,
              literal = _ref4$literal === void 0 ? false : _ref4$literal,
              _ref4$position = _ref4.position,
              position = _ref4$position === void 0 ? 'end' : _ref4$position;
          var method = positionMethod[position];
          var newAttribute = getAttribute({
            spread: spread,
            name: name,
            value: value,
            literal: literal
          });
          var attributes = path.get('attributes');

          var isEqualAttribute = function isEqualAttribute(attribute) {
            if (spread) {
              return attribute.get('argument').isIdentifier({
                name: name
              });
            }

            return attribute.get('name').isJSXIdentifier({
              name: name
            });
          };

          var replaced = attributes.some(function (attribute) {
            if (!isEqualAttribute(attribute)) return false;
            attribute.replaceWith(newAttribute);
            return true;
          });

          if (!replaced) {
            path[method]('attributes', newAttribute);
          }
        });
      }
    }
  };
};

var _default = addJSXAttribute;
exports["default"] = _default;