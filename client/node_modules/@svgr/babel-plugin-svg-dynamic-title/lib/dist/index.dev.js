"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var elements = ['svg', 'Svg'];

var plugin = function plugin(_ref) {
  var t = _ref.types;
  return {
    visitor: {
      JSXElement: function JSXElement(path) {
        if (!elements.some(function (element) {
          return path.get('openingElement.name').isJSXIdentifier({
            name: element
          });
        })) {
          return;
        }

        function createTitle() {
          var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          return t.jsxElement(t.jsxOpeningElement(t.jsxIdentifier('title'), attributes), t.jsxClosingElement(t.jsxIdentifier('title')), children);
        }

        function getTitleElement(existingTitle) {
          var titleExpression = t.identifier('title');
          var titleElement = t.conditionalExpression(titleExpression, createTitle([t.jsxExpressionContainer(titleExpression)], existingTitle ? existingTitle.openingElement.attributes : []), t.nullLiteral());

          if (existingTitle && existingTitle.children && existingTitle.children.length) {
            // if title already exists
            // render as follows
            var fallbackTitleElement = existingTitle; // {title === undefined ? fallbackTitleElement : titleElement}

            var conditionalExpressionForTitle = t.conditionalExpression(t.binaryExpression('===', titleExpression, t.identifier('undefined')), fallbackTitleElement, titleElement);
            titleElement = t.jsxExpressionContainer(conditionalExpressionForTitle);
          } else {
            titleElement = t.jsxExpressionContainer(titleElement);
          }

          return titleElement;
        } // store the title element


        var titleElement;
        var hasTitle = path.get('children').some(function (childPath) {
          if (!childPath.isJSXElement()) return false;
          if (childPath.node === titleElement) return false;
          if (childPath.node.openingElement.name.name !== 'title') return false;
          titleElement = getTitleElement(childPath.node);
          childPath.replaceWith(titleElement);
          return true;
        }); // create a title element if not already create

        titleElement = titleElement || getTitleElement();

        if (!hasTitle) {
          // path.unshiftContainer is not working well :(
          // path.unshiftContainer('children', titleElement)
          path.node.children.unshift(titleElement);
          path.replaceWith(path.node);
        }
      }
    }
  };
};

var _default = plugin;
exports["default"] = _default;