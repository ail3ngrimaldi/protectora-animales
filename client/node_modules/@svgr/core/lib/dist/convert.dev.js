"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _state = require("./state");

var _config = require("./config");

var _plugins = require("./plugins");

function run(code, config, state) {
  var expandedState = (0, _state.expandState)(state);
  var plugins = (0, _plugins.getPlugins)(config, state).map(_plugins.resolvePlugin);
  var nextCode = String(code).replace('\0', ''); // eslint-disable-next-line no-restricted-syntax

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var plugin = _step.value;
      nextCode = plugin(nextCode, config, expandedState);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return nextCode;
}

function convert(code) {
  var config,
      state,
      _args = arguments;
  return regeneratorRuntime.async(function convert$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
          state = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
          _context.next = 4;
          return regeneratorRuntime.awrap((0, _config.loadConfig)(config, state));

        case 4:
          config = _context.sent;
          return _context.abrupt("return", run(code, config, state));

        case 6:
        case "end":
          return _context.stop();
      }
    }
  });
}

convert.sync = function (code) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  config = _config.loadConfig.sync(config, state);
  return run(code, config, state);
};

var _default = convert;
exports["default"] = _default;