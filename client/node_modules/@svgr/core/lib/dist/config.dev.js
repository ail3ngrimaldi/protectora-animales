"use strict";

exports.__esModule = true;
exports.resolveConfig = resolveConfig;
exports.resolveConfigFile = resolveConfigFile;
exports.loadConfig = loadConfig;
exports.DEFAULT_CONFIG = void 0;

var _cosmiconfig = _interopRequireDefault(require("cosmiconfig"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var DEFAULT_CONFIG = {
  h2xConfig: null,
  dimensions: true,
  expandProps: 'end',
  icon: false,
  "native": false,
  prettier: true,
  prettierConfig: null,
  ref: false,
  replaceAttrValues: null,
  svgProps: null,
  svgo: true,
  svgoConfig: null,
  template: null,
  titleProp: false,
  runtimeConfig: true,
  plugins: null
};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
var explorer = (0, _cosmiconfig["default"])('svgr', {
  sync: true,
  cache: true,
  rcExtensions: true
});

function resolveConfig(searchFrom, configFile) {
  var _result, result;

  return regeneratorRuntime.async(function resolveConfig$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(configFile == null)) {
            _context.next = 5;
            break;
          }

          _context.next = 3;
          return regeneratorRuntime.awrap(explorer.search(searchFrom));

        case 3:
          _result = _context.sent;
          return _context.abrupt("return", _result ? _result.config : null);

        case 5:
          _context.next = 7;
          return regeneratorRuntime.awrap(explorer.load(configFile));

        case 7:
          result = _context.sent;
          return _context.abrupt("return", result ? result.config : null);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  });
}

resolveConfig.sync = function (searchFrom, configFile) {
  if (configFile == null) {
    var _result2 = explorer.searchSync(searchFrom);

    return _result2 ? _result2.config : null;
  }

  var result = explorer.loadSync(configFile);
  return result ? result.config : null;
};

function resolveConfigFile(filePath) {
  var result;
  return regeneratorRuntime.async(function resolveConfigFile$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(explorer.search(filePath));

        case 2:
          result = _context2.sent;
          return _context2.abrupt("return", result ? result.filepath : null);

        case 4:
        case "end":
          return _context2.stop();
      }
    }
  });
}

resolveConfigFile.sync = function (filePath) {
  var result = explorer.searchSync(filePath);
  return result ? result.filepath : null;
};

function loadConfig(_ref) {
  var state,
      configFile,
      baseConfig,
      rcConfig,
      _args3 = arguments;
  return regeneratorRuntime.async(function loadConfig$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          state = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
          configFile = _ref.configFile, baseConfig = _objectWithoutPropertiesLoose(_ref, ["configFile"]);

          if (!(state.filePath && baseConfig.runtimeConfig !== false)) {
            _context3.next = 8;
            break;
          }

          _context3.next = 5;
          return regeneratorRuntime.awrap(resolveConfig(state.filePath, configFile));

        case 5:
          _context3.t0 = _context3.sent;
          _context3.next = 9;
          break;

        case 8:
          _context3.t0 = {};

        case 9:
          rcConfig = _context3.t0;
          return _context3.abrupt("return", _extends({}, DEFAULT_CONFIG, {}, rcConfig, {}, baseConfig));

        case 11:
        case "end":
          return _context3.stop();
      }
    }
  });
}

loadConfig.sync = function (_ref2) {
  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var configFile = _ref2.configFile,
      baseConfig = _objectWithoutPropertiesLoose(_ref2, ["configFile"]);

  var rcConfig = state.filePath && baseConfig.runtimeConfig !== false ? resolveConfig.sync(state.filePath, configFile) : {};
  return _extends({}, DEFAULT_CONFIG, {}, rcConfig, {}, baseConfig);
};