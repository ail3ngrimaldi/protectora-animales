'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var browserslist = require('browserslist');

var _require = require('./helpers'),
    compare = _require.compare,
    has = _require.has;

var external = require('./external');

var aliases = new Map([['and_chr', 'chrome'], ['and_ff', 'firefox'], ['ie_mob', 'ie'], ['ios_saf', 'ios'], ['op_mob', 'opera_mobile']]);
var validTargets = new Set(['android', 'chrome', 'edge', 'electron', 'firefox', 'ie', 'ios', 'node', 'opera', 'opera_mobile', 'phantom', 'safari', 'samsung']);

module.exports = function (targets) {
  if (_typeof(targets) !== 'object' || Array.isArray(targets)) {
    targets = {
      browsers: targets
    };
  }

  var _targets = targets,
      browsers = _targets.browsers,
      esmodules = _targets.esmodules,
      node = _targets.node,
      rest = _objectWithoutProperties(_targets, ["browsers", "esmodules", "node"]);

  var list = Object.entries(rest);

  if (browsers) {
    list.push.apply(list, _toConsumableArray(browserslist(browsers).map(function (it) {
      return it.split(' ');
    })));
  }

  if (esmodules) {
    list.push.apply(list, _toConsumableArray(Object.entries(external.modules)));
  }

  if (node) {
    list.push(['node', node === 'current' ? process.versions.node : node]);
  }

  var normalized = list.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        engine = _ref2[0],
        version = _ref2[1];

    if (has(browserslist.aliases, engine)) {
      engine = browserslist.aliases[engine];
    }

    if (aliases.has(engine)) {
      engine = aliases.get(engine);
    } else if (engine === 'android' && compare(version, '>', '4.4.4')) {
      engine = 'chrome';
    }

    return [engine, String(version)];
  }).filter(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        engine = _ref4[0];

    return validTargets.has(engine);
  }).sort(function (_ref5, _ref6) {
    var _ref7 = _slicedToArray(_ref5, 1),
        a = _ref7[0];

    var _ref8 = _slicedToArray(_ref6, 1),
        b = _ref8[0];

    return a < b ? -1 : a > b ? 1 : 0;
  });
  var reducedByMinVersion = new Map();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = normalized[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          engine = _step$value[0],
          version = _step$value[1];

      if (!reducedByMinVersion.has(engine) || compare(version, '<=', reducedByMinVersion.get(engine))) {
        reducedByMinVersion.set(engine, version);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return reducedByMinVersion;
};