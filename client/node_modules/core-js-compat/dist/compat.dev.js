'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('./helpers'),
    compare = _require.compare,
    has = _require.has,
    intersection = _require.intersection;

var data = require('./data');

var getModulesListForTargetVersion = require('./get-modules-list-for-target-version');

var modules = require('./modules');

var targetsParser = require('./targets-parser');

function checkModule(name, targets) {
  if (!has(data, name)) throw new TypeError("Incorrect module: ".concat(name));
  var requirements = data[name];
  var result = {
    required: false,
    targets: {}
  };
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = targets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          engine = _step$value[0],
          version = _step$value[1];

      if (!has(requirements, engine) || compare(version, '<', requirements[engine])) {
        result.required = true;
        result.targets[engine] = version;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

module.exports = function (_ref) {
  var targets = _ref.targets,
      filter = _ref.filter,
      version = _ref.version;
  var parsedTargets = targetsParser(targets);
  var result = {
    list: [],
    targets: {}
  };
  var $modules = Array.isArray(filter) ? filter : modules;

  if (filter instanceof RegExp) {
    $modules = $modules.filter(function (it) {
      return filter.test(it);
    });
  } else if (typeof filter == 'string') {
    $modules = $modules.filter(function (it) {
      return it.startsWith(filter);
    });
  }

  if (version) {
    $modules = intersection($modules, getModulesListForTargetVersion(version));
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = $modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var key = _step2.value;
      var check = checkModule(key, parsedTargets);

      if (check.required) {
        result.list.push(key);
        result.targets[key] = check.targets;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
};