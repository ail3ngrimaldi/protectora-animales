'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var getError = require('./get-error');
/**
 * Where the given list is non-null and contains error instances then consolidate and throw
 * @throws Error
 * @param {string} resourcePath The path to the resource being processed
 * @param {null|Array} candidates A possible Array with possible error elements
 */


function throwErrors(resourcePath, candidates) {
  var errors = !!candidates && candidates.filter(testIsError).map(getMessage);
  var hasError = !!errors && errors.length;

  if (hasError) {
    throw getError(['For resource: ' + resourcePath].concat(errors).join('\n'));
  }

  function testIsError(candidate) {
    return !!candidate && _typeof(candidate) === 'object' && candidate instanceof Error;
  }

  function getMessage(error) {
    return error.message;
  }
}

module.exports = throwErrors;