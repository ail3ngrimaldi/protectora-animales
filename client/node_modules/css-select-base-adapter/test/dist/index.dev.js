'use strict';

var assert = require('assert');

var data = require('./data');

var implementation = require('./implementation');

var baseAdapter = require('../');

var adapter = baseAdapter(implementation);

var getById = function getById(id) {
  return adapter.findOne(function (node) {
    return adapter.getAttributeValue(node, 'id') === id;
  }, data);
};

var getByName = function getByName(name) {
  return adapter.findAll(function (node) {
    return adapter.getName(node) === name;
  }, data);
};

var getByClass = function getByClass(className) {
  return adapter.findAll(function (node) {
    return adapter.getAttributeValue(node, 'class') === className;
  }, data);
};

var existsName = function existsName(name) {
  return adapter.existsOne(function (node) {
    return adapter.getName(node) === name;
  }, data);
};

var container = getById('container');
var strong = getByName('strong')[0];
var hello = strong.children[0];
var world = container.children[1];
describe('css-select-base-adapter', function () {
  it('getAttributeValue', function () {
    assert(container);
  });
  it('getName', function () {
    assert(strong);
  });
  it('findOne', function () {
    assert(container);
  });
  it('findAll', function () {
    var messages = getByClass('message');
    assert.equal(messages.length, 2);
    assert.equal(messages[0], container);
    assert.equal(messages[1], strong);
  });
  it('getParent', function () {
    var parent = adapter.getParent(strong);
    assert.equal(parent, container);
  });
  it('getSiblings', function () {
    var siblings = adapter.getSiblings(strong);
    assert.equal(siblings[0], strong);
    assert.equal(siblings[1], world);
  });
  it('getChildren', function () {
    var children = adapter.getChildren(container);
    assert.equal(children[0], strong);
  });
  it('getText', function () {
    var text = adapter.getText(container);
    assert.equal(text, 'Hello, World!');
  });
  it('isTag', function () {
    assert(adapter.isTag(container));
    assert(adapter.isTag(strong));
    assert(!adapter.isTag(hello));
  });
  it('hasAttrib', function () {
    assert(adapter.hasAttrib(container, 'id'));
    assert(!adapter.hasAttrib(strong, 'id'));
  });
  it('existsOne', function () {
    assert(existsName('strong'));
    assert(!existsName('blink'));
  });
  it('removeSubsets', function () {
    var removed = adapter.removeSubsets([container, strong, container]);
    assert.equal(removed.length, 1);
    assert.equal(removed[0], container);
  });
});