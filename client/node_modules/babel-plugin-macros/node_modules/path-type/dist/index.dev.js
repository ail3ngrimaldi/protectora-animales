'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require('util'),
    promisify = _require.promisify;

var fs = require('fs');

function isType(fsStatType, statsMethodName, filePath) {
  var stats;
  return regeneratorRuntime.async(function isType$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(typeof filePath !== 'string')) {
            _context.next = 2;
            break;
          }

          throw new TypeError("Expected a string, got ".concat(_typeof(filePath)));

        case 2:
          _context.prev = 2;
          _context.next = 5;
          return regeneratorRuntime.awrap(promisify(fs[fsStatType])(filePath));

        case 5:
          stats = _context.sent;
          return _context.abrupt("return", stats[statsMethodName]());

        case 9:
          _context.prev = 9;
          _context.t0 = _context["catch"](2);

          if (!(_context.t0.code === 'ENOENT')) {
            _context.next = 13;
            break;
          }

          return _context.abrupt("return", false);

        case 13:
          throw _context.t0;

        case 14:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[2, 9]]);
}

function isTypeSync(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError("Expected a string, got ".concat(_typeof(filePath)));
  }

  try {
    return fs[fsStatType](filePath)[statsMethodName]();
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false;
    }

    throw error;
  }
}

exports.isFile = isType.bind(null, 'stat', 'isFile');
exports.isDirectory = isType.bind(null, 'stat', 'isDirectory');
exports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');
exports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');
exports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');
exports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');