'use strict';

var errorEx = require('error-ex');

var fallback = require('json-parse-even-better-errors');

var _require = require('lines-and-columns'),
    LinesAndColumns = _require["default"];

var _require2 = require('@babel/code-frame'),
    codeFrameColumns = _require2.codeFrameColumns;

var JSONError = errorEx('JSONError', {
  fileName: errorEx.append('in %s'),
  codeFrame: errorEx.append('\n\n%s\n')
});

module.exports = function (string, reviver, filename) {
  if (typeof reviver === 'string') {
    filename = reviver;
    reviver = null;
  }

  try {
    try {
      return JSON.parse(string, reviver);
    } catch (error) {
      fallback(string, reviver);
      throw error;
    }
  } catch (error) {
    error.message = error.message.replace(/\n/g, '');
    var indexMatch = error.message.match(/in JSON at position (\d+) while parsing/);
    var jsonError = new JSONError(error);

    if (filename) {
      jsonError.fileName = filename;
    }

    if (indexMatch && indexMatch.length > 0) {
      var lines = new LinesAndColumns(string);
      var index = Number(indexMatch[1]);
      var location = lines.locationForIndex(index);
      var codeFrame = codeFrameColumns(string, {
        start: {
          line: location.line + 1,
          column: location.column + 1
        }
      }, {
        highlightCode: true
      });
      jsonError.codeFrame = codeFrame;
    }

    throw jsonError;
  }
};