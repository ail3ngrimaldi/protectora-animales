"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Explorer = void 0;

var _path = _interopRequireDefault(require("path"));

var _ExplorerBase = require("./ExplorerBase");

var _readFile = require("./readFile");

var _cacheWrapper = require("./cacheWrapper");

var _getDirectory = require("./getDirectory");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _asyncIterator(iterable) {
  var method;

  if (typeof Symbol !== "undefined") {
    if (Symbol.asyncIterator) {
      method = iterable[Symbol.asyncIterator];
      if (method != null) return method.call(iterable);
    }

    if (Symbol.iterator) {
      method = iterable[Symbol.iterator];
      if (method != null) return method.call(iterable);
    }
  }

  throw new TypeError("Object is not async iterable");
}

var Explorer =
/*#__PURE__*/
function (_ExplorerBase$Explore) {
  _inherits(Explorer, _ExplorerBase$Explore);

  function Explorer(options) {
    _classCallCheck(this, Explorer);

    return _possibleConstructorReturn(this, _getPrototypeOf(Explorer).call(this, options));
  }

  _createClass(Explorer, [{
    key: "search",
    value: function search() {
      var searchFrom,
          startDirectory,
          result,
          _args = arguments;
      return regeneratorRuntime.async(function search$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              searchFrom = _args.length > 0 && _args[0] !== undefined ? _args[0] : process.cwd();
              _context.next = 3;
              return regeneratorRuntime.awrap((0, _getDirectory.getDirectory)(searchFrom));

            case 3:
              startDirectory = _context.sent;
              _context.next = 6;
              return regeneratorRuntime.awrap(this.searchFromDirectory(startDirectory));

            case 6:
              result = _context.sent;
              return _context.abrupt("return", result);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "searchFromDirectory",
    value: function searchFromDirectory(dir) {
      var _this = this;

      var absoluteDir, run;
      return regeneratorRuntime.async(function searchFromDirectory$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              absoluteDir = _path["default"].resolve(process.cwd(), dir);

              run = function run() {
                var result, nextDir, transformResult;
                return regeneratorRuntime.async(function run$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return regeneratorRuntime.awrap(_this.searchDirectory(absoluteDir));

                      case 2:
                        result = _context2.sent;
                        nextDir = _this.nextDirectoryToSearch(absoluteDir, result);

                        if (!nextDir) {
                          _context2.next = 6;
                          break;
                        }

                        return _context2.abrupt("return", _this.searchFromDirectory(nextDir));

                      case 6:
                        _context2.next = 8;
                        return regeneratorRuntime.awrap(_this.config.transform(result));

                      case 8:
                        transformResult = _context2.sent;
                        return _context2.abrupt("return", transformResult);

                      case 10:
                      case "end":
                        return _context2.stop();
                    }
                  }
                });
              };

              if (!this.searchCache) {
                _context3.next = 4;
                break;
              }

              return _context3.abrupt("return", (0, _cacheWrapper.cacheWrapper)(this.searchCache, absoluteDir, run));

            case 4:
              return _context3.abrupt("return", run());

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "searchDirectory",
    value: function searchDirectory(dir) {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, place, placeResult;

      return regeneratorRuntime.async(function searchDirectory$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _context4.prev = 2;
              _iterator = _asyncIterator(this.config.searchPlaces);

            case 4:
              _context4.next = 6;
              return regeneratorRuntime.awrap(_iterator.next());

            case 6:
              _step = _context4.sent;
              _iteratorNormalCompletion = _step.done;
              _context4.next = 10;
              return regeneratorRuntime.awrap(_step.value);

            case 10:
              _value = _context4.sent;

              if (_iteratorNormalCompletion) {
                _context4.next = 21;
                break;
              }

              place = _value;
              _context4.next = 15;
              return regeneratorRuntime.awrap(this.loadSearchPlace(dir, place));

            case 15:
              placeResult = _context4.sent;

              if (!(this.shouldSearchStopWithResult(placeResult) === true)) {
                _context4.next = 18;
                break;
              }

              return _context4.abrupt("return", placeResult);

            case 18:
              _iteratorNormalCompletion = true;
              _context4.next = 4;
              break;

            case 21:
              _context4.next = 27;
              break;

            case 23:
              _context4.prev = 23;
              _context4.t0 = _context4["catch"](2);
              _didIteratorError = true;
              _iteratorError = _context4.t0;

            case 27:
              _context4.prev = 27;
              _context4.prev = 28;

              if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                _context4.next = 32;
                break;
              }

              _context4.next = 32;
              return regeneratorRuntime.awrap(_iterator["return"]());

            case 32:
              _context4.prev = 32;

              if (!_didIteratorError) {
                _context4.next = 35;
                break;
              }

              throw _iteratorError;

            case 35:
              return _context4.finish(32);

            case 36:
              return _context4.finish(27);

            case 37:
              return _context4.abrupt("return", null);

            case 38:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[2, 23, 27, 37], [28,, 32, 36]]);
    }
  }, {
    key: "loadSearchPlace",
    value: function loadSearchPlace(dir, place) {
      var filepath, fileContents, result;
      return regeneratorRuntime.async(function loadSearchPlace$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              filepath = _path["default"].join(dir, place);
              _context5.next = 3;
              return regeneratorRuntime.awrap((0, _readFile.readFile)(filepath));

            case 3:
              fileContents = _context5.sent;
              _context5.next = 6;
              return regeneratorRuntime.awrap(this.createCosmiconfigResult(filepath, fileContents));

            case 6:
              result = _context5.sent;
              return _context5.abrupt("return", result);

            case 8:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "loadFileContent",
    value: function loadFileContent(filepath, content) {
      var loader, loaderResult;
      return regeneratorRuntime.async(function loadFileContent$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!(content === null)) {
                _context6.next = 2;
                break;
              }

              return _context6.abrupt("return", null);

            case 2:
              if (!(content.trim() === '')) {
                _context6.next = 4;
                break;
              }

              return _context6.abrupt("return", undefined);

            case 4:
              loader = this.getLoaderEntryForFile(filepath);
              _context6.next = 7;
              return regeneratorRuntime.awrap(loader(filepath, content));

            case 7:
              loaderResult = _context6.sent;
              return _context6.abrupt("return", loaderResult);

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "createCosmiconfigResult",
    value: function createCosmiconfigResult(filepath, content) {
      var fileContent, result;
      return regeneratorRuntime.async(function createCosmiconfigResult$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return regeneratorRuntime.awrap(this.loadFileContent(filepath, content));

            case 2:
              fileContent = _context7.sent;
              result = this.loadedContentToCosmiconfigResult(filepath, fileContent);
              return _context7.abrupt("return", result);

            case 5:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "load",
    value: function load(filepath) {
      var _this2 = this;

      var absoluteFilePath, runLoad;
      return regeneratorRuntime.async(function load$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              this.validateFilePath(filepath);
              absoluteFilePath = _path["default"].resolve(process.cwd(), filepath);

              runLoad = function runLoad() {
                var fileContents, result, transformResult;
                return regeneratorRuntime.async(function runLoad$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        _context8.next = 2;
                        return regeneratorRuntime.awrap((0, _readFile.readFile)(absoluteFilePath, {
                          throwNotFound: true
                        }));

                      case 2:
                        fileContents = _context8.sent;
                        _context8.next = 5;
                        return regeneratorRuntime.awrap(_this2.createCosmiconfigResult(absoluteFilePath, fileContents));

                      case 5:
                        result = _context8.sent;
                        _context8.next = 8;
                        return regeneratorRuntime.awrap(_this2.config.transform(result));

                      case 8:
                        transformResult = _context8.sent;
                        return _context8.abrupt("return", transformResult);

                      case 10:
                      case "end":
                        return _context8.stop();
                    }
                  }
                });
              };

              if (!this.loadCache) {
                _context9.next = 5;
                break;
              }

              return _context9.abrupt("return", (0, _cacheWrapper.cacheWrapper)(this.loadCache, absoluteFilePath, runLoad));

            case 5:
              return _context9.abrupt("return", runLoad());

            case 6:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this);
    }
  }]);

  return Explorer;
}(_ExplorerBase.ExplorerBase);

exports.Explorer = Explorer;