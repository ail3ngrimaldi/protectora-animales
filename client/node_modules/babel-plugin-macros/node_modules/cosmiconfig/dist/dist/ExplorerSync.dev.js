"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExplorerSync = void 0;

var _path = _interopRequireDefault(require("path"));

var _ExplorerBase = require("./ExplorerBase");

var _readFile = require("./readFile");

var _cacheWrapper = require("./cacheWrapper");

var _getDirectory = require("./getDirectory");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var ExplorerSync =
/*#__PURE__*/
function (_ExplorerBase$Explore) {
  _inherits(ExplorerSync, _ExplorerBase$Explore);

  function ExplorerSync(options) {
    _classCallCheck(this, ExplorerSync);

    return _possibleConstructorReturn(this, _getPrototypeOf(ExplorerSync).call(this, options));
  }

  _createClass(ExplorerSync, [{
    key: "searchSync",
    value: function searchSync() {
      var searchFrom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();
      var startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom);
      var result = this.searchFromDirectorySync(startDirectory);
      return result;
    }
  }, {
    key: "searchFromDirectorySync",
    value: function searchFromDirectorySync(dir) {
      var _this = this;

      var absoluteDir = _path["default"].resolve(process.cwd(), dir);

      var run = function run() {
        var result = _this.searchDirectorySync(absoluteDir);

        var nextDir = _this.nextDirectoryToSearch(absoluteDir, result);

        if (nextDir) {
          return _this.searchFromDirectorySync(nextDir);
        }

        var transformResult = _this.config.transform(result);

        return transformResult;
      };

      if (this.searchCache) {
        return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);
      }

      return run();
    }
  }, {
    key: "searchDirectorySync",
    value: function searchDirectorySync(dir) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.config.searchPlaces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var place = _step.value;
          var placeResult = this.loadSearchPlaceSync(dir, place);

          if (this.shouldSearchStopWithResult(placeResult) === true) {
            return placeResult;
          }
        } // config not found

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }, {
    key: "loadSearchPlaceSync",
    value: function loadSearchPlaceSync(dir, place) {
      var filepath = _path["default"].join(dir, place);

      var content = (0, _readFile.readFileSync)(filepath);
      var result = this.createCosmiconfigResultSync(filepath, content);
      return result;
    }
  }, {
    key: "loadFileContentSync",
    value: function loadFileContentSync(filepath, content) {
      if (content === null) {
        return null;
      }

      if (content.trim() === '') {
        return undefined;
      }

      var loader = this.getLoaderEntryForFile(filepath);
      var loaderResult = loader(filepath, content);
      return loaderResult;
    }
  }, {
    key: "createCosmiconfigResultSync",
    value: function createCosmiconfigResultSync(filepath, content) {
      var fileContent = this.loadFileContentSync(filepath, content);
      var result = this.loadedContentToCosmiconfigResult(filepath, fileContent);
      return result;
    }
  }, {
    key: "loadSync",
    value: function loadSync(filepath) {
      var _this2 = this;

      this.validateFilePath(filepath);

      var absoluteFilePath = _path["default"].resolve(process.cwd(), filepath);

      var runLoadSync = function runLoadSync() {
        var content = (0, _readFile.readFileSync)(absoluteFilePath, {
          throwNotFound: true
        });

        var cosmiconfigResult = _this2.createCosmiconfigResultSync(absoluteFilePath, content);

        var transformResult = _this2.config.transform(cosmiconfigResult);

        return transformResult;
      };

      if (this.loadCache) {
        return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);
      }

      return runLoadSync();
    }
  }]);

  return ExplorerSync;
}(_ExplorerBase.ExplorerBase);

exports.ExplorerSync = ExplorerSync;