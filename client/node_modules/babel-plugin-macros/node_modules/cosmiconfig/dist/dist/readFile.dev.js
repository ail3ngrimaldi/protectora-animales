"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readFile = readFile;
exports.readFileSync = readFileSync;

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function fsReadFileAsync(pathname, encoding) {
  return regeneratorRuntime.async(function fsReadFileAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            _fs["default"].readFile(pathname, encoding, function (error, contents) {
              if (error) {
                reject(error);
                return;
              }

              resolve(contents);
            });
          }));

        case 1:
        case "end":
          return _context.stop();
      }
    }
  });
}

function readFile(filepath) {
  var options,
      throwNotFound,
      content,
      _args2 = arguments;
  return regeneratorRuntime.async(function readFile$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
          throwNotFound = options.throwNotFound === true;
          _context2.prev = 2;
          _context2.next = 5;
          return regeneratorRuntime.awrap(fsReadFileAsync(filepath, 'utf8'));

        case 5:
          content = _context2.sent;
          return _context2.abrupt("return", content);

        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2["catch"](2);

          if (!(throwNotFound === false && _context2.t0.code === 'ENOENT')) {
            _context2.next = 13;
            break;
          }

          return _context2.abrupt("return", null);

        case 13:
          throw _context2.t0;

        case 14:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[2, 9]]);
}

function readFileSync(filepath) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var throwNotFound = options.throwNotFound === true;

  try {
    var content = _fs["default"].readFileSync(filepath, 'utf8');

    return content;
  } catch (error) {
    if (throwNotFound === false && error.code === 'ENOENT') {
      return null;
    }

    throw error;
  }
}