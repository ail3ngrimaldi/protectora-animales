"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtensionDescription = getExtensionDescription;
exports.ExplorerBase = void 0;

var _path = _interopRequireDefault(require("path"));

var _loaders = require("./loaders");

var _getPropertyByPath = require("./getPropertyByPath");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var ExplorerBase =
/*#__PURE__*/
function () {
  function ExplorerBase(options) {
    _classCallCheck(this, ExplorerBase);

    if (options.cache === true) {
      this.loadCache = new Map();
      this.searchCache = new Map();
    }

    this.config = options;
    this.validateConfig();
  }

  _createClass(ExplorerBase, [{
    key: "clearLoadCache",
    value: function clearLoadCache() {
      if (this.loadCache) {
        this.loadCache.clear();
      }
    }
  }, {
    key: "clearSearchCache",
    value: function clearSearchCache() {
      if (this.searchCache) {
        this.searchCache.clear();
      }
    }
  }, {
    key: "clearCaches",
    value: function clearCaches() {
      this.clearLoadCache();
      this.clearSearchCache();
    }
  }, {
    key: "validateConfig",
    value: function validateConfig() {
      var config = this.config;
      config.searchPlaces.forEach(function (place) {
        var loaderKey = _path["default"].extname(place) || 'noExt';
        var loader = config.loaders[loaderKey];

        if (!loader) {
          throw new Error("No loader specified for ".concat(getExtensionDescription(place), ", so searchPlaces item \"").concat(place, "\" is invalid"));
        }

        if (typeof loader !== 'function') {
          throw new Error("loader for ".concat(getExtensionDescription(place), " is not a function (type provided: \"").concat(_typeof(loader), "\"), so searchPlaces item \"").concat(place, "\" is invalid"));
        }
      });
    }
  }, {
    key: "shouldSearchStopWithResult",
    value: function shouldSearchStopWithResult(result) {
      if (result === null) return false;
      if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;
      return true;
    }
  }, {
    key: "nextDirectoryToSearch",
    value: function nextDirectoryToSearch(currentDir, currentResult) {
      if (this.shouldSearchStopWithResult(currentResult)) {
        return null;
      }

      var nextDir = nextDirUp(currentDir);

      if (nextDir === currentDir || currentDir === this.config.stopDir) {
        return null;
      }

      return nextDir;
    }
  }, {
    key: "loadPackageProp",
    value: function loadPackageProp(filepath, content) {
      var parsedContent = _loaders.loaders.loadJson(filepath, content);

      var packagePropValue = (0, _getPropertyByPath.getPropertyByPath)(parsedContent, this.config.packageProp);
      return packagePropValue || null;
    }
  }, {
    key: "getLoaderEntryForFile",
    value: function getLoaderEntryForFile(filepath) {
      if (_path["default"].basename(filepath) === 'package.json') {
        var _loader = this.loadPackageProp.bind(this);

        return _loader;
      }

      var loaderKey = _path["default"].extname(filepath) || 'noExt';
      var loader = this.config.loaders[loaderKey];

      if (!loader) {
        throw new Error("No loader specified for ".concat(getExtensionDescription(filepath)));
      }

      return loader;
    }
  }, {
    key: "loadedContentToCosmiconfigResult",
    value: function loadedContentToCosmiconfigResult(filepath, loadedContent) {
      if (loadedContent === null) {
        return null;
      }

      if (loadedContent === undefined) {
        return {
          filepath: filepath,
          config: undefined,
          isEmpty: true
        };
      }

      return {
        config: loadedContent,
        filepath: filepath
      };
    }
  }, {
    key: "validateFilePath",
    value: function validateFilePath(filepath) {
      if (!filepath) {
        throw new Error('load must pass a non-empty string');
      }
    }
  }]);

  return ExplorerBase;
}();

exports.ExplorerBase = ExplorerBase;

function nextDirUp(dir) {
  return _path["default"].dirname(dir);
}

function getExtensionDescription(filepath) {
  var ext = _path["default"].extname(filepath);

  return ext ? "extension \"".concat(ext, "\"") : 'files without extensions';
}