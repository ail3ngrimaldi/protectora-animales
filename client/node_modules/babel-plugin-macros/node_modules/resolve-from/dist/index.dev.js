'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var path = require('path');

var Module = require('module');

var fs = require('fs');

var resolveFrom = function resolveFrom(fromDir, moduleId, silent) {
  if (typeof fromDir !== 'string') {
    throw new TypeError("Expected `fromDir` to be of type `string`, got `".concat(_typeof(fromDir), "`"));
  }

  if (typeof moduleId !== 'string') {
    throw new TypeError("Expected `moduleId` to be of type `string`, got `".concat(_typeof(moduleId), "`"));
  }

  try {
    fromDir = fs.realpathSync(fromDir);
  } catch (err) {
    if (err.code === 'ENOENT') {
      fromDir = path.resolve(fromDir);
    } else if (silent) {
      return null;
    } else {
      throw err;
    }
  }

  var fromFile = path.join(fromDir, 'noop.js');

  var resolveFileName = function resolveFileName() {
    return Module._resolveFilename(moduleId, {
      id: fromFile,
      filename: fromFile,
      paths: Module._nodeModulePaths(fromDir)
    });
  };

  if (silent) {
    try {
      return resolveFileName();
    } catch (err) {
      return null;
    }
  }

  return resolveFileName();
};

module.exports = function (fromDir, moduleId) {
  return resolveFrom(fromDir, moduleId);
};

module.exports.silent = function (fromDir, moduleId) {
  return resolveFrom(fromDir, moduleId, true);
};