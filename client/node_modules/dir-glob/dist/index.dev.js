'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var path = require('path');

var arrify = require('arrify');

var pathType = require('path-type');

var getExtensions = function getExtensions(extensions) {
  return extensions.length > 1 ? "{".concat(extensions.join(','), "}") : extensions[0];
};

var getPath = function getPath(filepath) {
  return filepath[0] === '!' ? filepath.slice(1) : filepath;
};

var addExtensions = function addExtensions(file, extensions) {
  if (path.extname(file)) {
    return "**/".concat(file);
  }

  return "**/".concat(file, ".").concat(getExtensions(extensions));
};

var getGlob = function getGlob(dir, opts) {
  opts = Object.assign({}, opts);

  if (opts.files && !Array.isArray(opts.files)) {
    throw new TypeError("`options.files` must be an `Array`, not `".concat(_typeof(opts.files), "`"));
  }

  if (opts.extensions && !Array.isArray(opts.extensions)) {
    throw new TypeError("`options.extensions` must be an `Array`, not `".concat(_typeof(opts.extensions), "`"));
  }

  if (opts.files && opts.extensions) {
    return opts.files.map(function (x) {
      return path.join(dir, addExtensions(x, opts.extensions));
    });
  } else if (opts.files) {
    return opts.files.map(function (x) {
      return path.join(dir, "**/".concat(x));
    });
  } else if (opts.extensions) {
    return [path.join(dir, "**/*.".concat(getExtensions(opts.extensions)))];
  }

  return [path.join(dir, '**')];
};

module.exports = function (input, opts) {
  return Promise.all(arrify(input).map(function (x) {
    return pathType.dir(getPath(x)).then(function (isDir) {
      return isDir ? getGlob(x, opts) : x;
    });
  })).then(function (globs) {
    return [].concat.apply([], globs);
  });
};

module.exports.sync = function (input, opts) {
  var globs = arrify(input).map(function (x) {
    return pathType.dirSync(getPath(x)) ? getGlob(x, opts) : x;
  });
  return [].concat.apply([], globs);
};