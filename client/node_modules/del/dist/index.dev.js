'use strict';

var path = require('path');

var globby = require('globby');

var isPathCwd = require('is-path-cwd');

var isPathInCwd = require('is-path-in-cwd');

var pify = require('pify');

var rimraf = require('rimraf');

var pMap = require('p-map');

var rimrafP = pify(rimraf);

function safeCheck(file) {
  if (isPathCwd(file)) {
    throw new Error('Cannot delete the current working directory. Can be overridden with the `force` option.');
  }

  if (!isPathInCwd(file)) {
    throw new Error('Cannot delete files/folders outside the current working directory. Can be overridden with the `force` option.');
  }
}

var del = function del(patterns, options) {
  options = Object.assign({}, options);
  var _options = options,
      force = _options.force,
      dryRun = _options.dryRun;
  delete options.force;
  delete options.dryRun;

  var mapper = function mapper(file) {
    if (!force) {
      safeCheck(file);
    }

    file = path.resolve(options.cwd || '', file);

    if (dryRun) {
      return file;
    }

    return rimrafP(file, {
      glob: false
    }).then(function () {
      return file;
    });
  };

  return globby(patterns, options).then(function (files) {
    return pMap(files, mapper, options);
  });
};

module.exports = del; // TODO: Remove this for the next major release

module.exports["default"] = del;

module.exports.sync = function (patterns, options) {
  options = Object.assign({}, options);
  var _options2 = options,
      force = _options2.force,
      dryRun = _options2.dryRun;
  delete options.force;
  delete options.dryRun;
  return globby.sync(patterns, options).map(function (file) {
    if (!force) {
      safeCheck(file);
    }

    file = path.resolve(options.cwd || '', file);

    if (!dryRun) {
      rimraf.sync(file, {
        glob: false
      });
    }

    return file;
  });
};