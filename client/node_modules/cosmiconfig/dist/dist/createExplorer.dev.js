//      
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require('path');

var loaders = require('./loaders');

var readFile = require('./readFile');

var cacheWrapper = require('./cacheWrapper');

var getDirectory = require('./getDirectory');

var getPropertyByPath = require('./getPropertyByPath');

var MODE_SYNC = 'sync'; // An object value represents a config object.
// null represents that the loader did not find anything relevant.
// undefined represents that the loader found something relevant
// but it was empty.

var Explorer =
/*#__PURE__*/
function () {
  function Explorer(options) {
    _classCallCheck(this, Explorer);

    this.loadCache = options.cache ? new Map() : null;
    this.loadSyncCache = options.cache ? new Map() : null;
    this.searchCache = options.cache ? new Map() : null;
    this.searchSyncCache = options.cache ? new Map() : null;
    this.config = options;
    this.validateConfig();
  }

  _createClass(Explorer, [{
    key: "clearLoadCache",
    value: function clearLoadCache() {
      if (this.loadCache) {
        this.loadCache.clear();
      }

      if (this.loadSyncCache) {
        this.loadSyncCache.clear();
      }
    }
  }, {
    key: "clearSearchCache",
    value: function clearSearchCache() {
      if (this.searchCache) {
        this.searchCache.clear();
      }

      if (this.searchSyncCache) {
        this.searchSyncCache.clear();
      }
    }
  }, {
    key: "clearCaches",
    value: function clearCaches() {
      this.clearLoadCache();
      this.clearSearchCache();
    }
  }, {
    key: "validateConfig",
    value: function validateConfig() {
      var config = this.config;
      config.searchPlaces.forEach(function (place) {
        var loaderKey = path.extname(place) || 'noExt';
        var loader = config.loaders[loaderKey];

        if (!loader) {
          throw new Error("No loader specified for ".concat(getExtensionDescription(place), ", so searchPlaces item \"").concat(place, "\" is invalid"));
        }
      });
    }
  }, {
    key: "search",
    value: function search(searchFrom) {
      var _this = this;

      searchFrom = searchFrom || process.cwd();
      return getDirectory(searchFrom).then(function (dir) {
        return _this.searchFromDirectory(dir);
      });
    }
  }, {
    key: "searchFromDirectory",
    value: function searchFromDirectory(dir) {
      var _this2 = this;

      var absoluteDir = path.resolve(process.cwd(), dir);

      var run = function run() {
        return _this2.searchDirectory(absoluteDir).then(function (result) {
          var nextDir = _this2.nextDirectoryToSearch(absoluteDir, result);

          if (nextDir) {
            return _this2.searchFromDirectory(nextDir);
          }

          return _this2.config.transform(result);
        });
      };

      if (this.searchCache) {
        return cacheWrapper(this.searchCache, absoluteDir, run);
      }

      return run();
    }
  }, {
    key: "searchSync",
    value: function searchSync(searchFrom) {
      searchFrom = searchFrom || process.cwd();
      var dir = getDirectory.sync(searchFrom);
      return this.searchFromDirectorySync(dir);
    }
  }, {
    key: "searchFromDirectorySync",
    value: function searchFromDirectorySync(dir) {
      var _this3 = this;

      var absoluteDir = path.resolve(process.cwd(), dir);

      var run = function run() {
        var result = _this3.searchDirectorySync(absoluteDir);

        var nextDir = _this3.nextDirectoryToSearch(absoluteDir, result);

        if (nextDir) {
          return _this3.searchFromDirectorySync(nextDir);
        }

        return _this3.config.transform(result);
      };

      if (this.searchSyncCache) {
        return cacheWrapper(this.searchSyncCache, absoluteDir, run);
      }

      return run();
    }
  }, {
    key: "searchDirectory",
    value: function searchDirectory(dir) {
      var _this4 = this;

      return this.config.searchPlaces.reduce(function (prevResultPromise, place) {
        return prevResultPromise.then(function (prevResult) {
          if (_this4.shouldSearchStopWithResult(prevResult)) {
            return prevResult;
          }

          return _this4.loadSearchPlace(dir, place);
        });
      }, Promise.resolve(null));
    }
  }, {
    key: "searchDirectorySync",
    value: function searchDirectorySync(dir) {
      var result = null;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.config.searchPlaces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var place = _step.value;
          result = this.loadSearchPlaceSync(dir, place);
          if (this.shouldSearchStopWithResult(result)) break;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  }, {
    key: "shouldSearchStopWithResult",
    value: function shouldSearchStopWithResult(result) {
      if (result === null) return false;
      if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;
      return true;
    }
  }, {
    key: "loadSearchPlace",
    value: function loadSearchPlace(dir, place) {
      var _this5 = this;

      var filepath = path.join(dir, place);
      return readFile(filepath).then(function (content) {
        return _this5.createCosmiconfigResult(filepath, content);
      });
    }
  }, {
    key: "loadSearchPlaceSync",
    value: function loadSearchPlaceSync(dir, place) {
      var filepath = path.join(dir, place);
      var content = readFile.sync(filepath);
      return this.createCosmiconfigResultSync(filepath, content);
    }
  }, {
    key: "nextDirectoryToSearch",
    value: function nextDirectoryToSearch(currentDir, currentResult) {
      if (this.shouldSearchStopWithResult(currentResult)) {
        return null;
      }

      var nextDir = nextDirUp(currentDir);

      if (nextDir === currentDir || currentDir === this.config.stopDir) {
        return null;
      }

      return nextDir;
    }
  }, {
    key: "loadPackageProp",
    value: function loadPackageProp(filepath, content) {
      var parsedContent = loaders.loadJson(filepath, content);
      var packagePropValue = getPropertyByPath(parsedContent, this.config.packageProp);
      return packagePropValue || null;
    }
  }, {
    key: "getLoaderEntryForFile",
    value: function getLoaderEntryForFile(filepath) {
      if (path.basename(filepath) === 'package.json') {
        var loader = this.loadPackageProp.bind(this);
        return {
          sync: loader,
          async: loader
        };
      }

      var loaderKey = path.extname(filepath) || 'noExt';
      return this.config.loaders[loaderKey] || {};
    }
  }, {
    key: "getSyncLoaderForFile",
    value: function getSyncLoaderForFile(filepath) {
      var entry = this.getLoaderEntryForFile(filepath);

      if (!entry.sync) {
        throw new Error("No sync loader specified for ".concat(getExtensionDescription(filepath)));
      }

      return entry.sync;
    }
  }, {
    key: "getAsyncLoaderForFile",
    value: function getAsyncLoaderForFile(filepath) {
      var entry = this.getLoaderEntryForFile(filepath);
      var loader = entry.async || entry.sync;

      if (!loader) {
        throw new Error("No async loader specified for ".concat(getExtensionDescription(filepath)));
      }

      return loader;
    }
  }, {
    key: "loadFileContent",
    value: function loadFileContent(mode, filepath, content) {
      if (content === null) {
        return null;
      }

      if (content.trim() === '') {
        return undefined;
      }

      var loader = mode === MODE_SYNC ? this.getSyncLoaderForFile(filepath) : this.getAsyncLoaderForFile(filepath);
      return loader(filepath, content);
    }
  }, {
    key: "loadedContentToCosmiconfigResult",
    value: function loadedContentToCosmiconfigResult(filepath, loadedContent) {
      if (loadedContent === null) {
        return null;
      }

      if (loadedContent === undefined) {
        return {
          filepath: filepath,
          config: undefined,
          isEmpty: true
        };
      }

      return {
        config: loadedContent,
        filepath: filepath
      };
    }
  }, {
    key: "createCosmiconfigResult",
    value: function createCosmiconfigResult(filepath, content) {
      var _this6 = this;

      return Promise.resolve().then(function () {
        return _this6.loadFileContent('async', filepath, content);
      }).then(function (loaderResult) {
        return _this6.loadedContentToCosmiconfigResult(filepath, loaderResult);
      });
    }
  }, {
    key: "createCosmiconfigResultSync",
    value: function createCosmiconfigResultSync(filepath, content) {
      var loaderResult = this.loadFileContent('sync', filepath, content);
      return this.loadedContentToCosmiconfigResult(filepath, loaderResult);
    }
  }, {
    key: "validateFilePath",
    value: function validateFilePath(filepath) {
      if (!filepath) {
        throw new Error('load and loadSync must pass a non-empty string');
      }
    }
  }, {
    key: "load",
    value: function load(filepath) {
      var _this7 = this;

      return Promise.resolve().then(function () {
        _this7.validateFilePath(filepath);

        var absoluteFilePath = path.resolve(process.cwd(), filepath);
        return cacheWrapper(_this7.loadCache, absoluteFilePath, function () {
          return readFile(absoluteFilePath, {
            throwNotFound: true
          }).then(function (content) {
            return _this7.createCosmiconfigResult(absoluteFilePath, content);
          }).then(_this7.config.transform);
        });
      });
    }
  }, {
    key: "loadSync",
    value: function loadSync(filepath) {
      var _this8 = this;

      this.validateFilePath(filepath);
      var absoluteFilePath = path.resolve(process.cwd(), filepath);
      return cacheWrapper(this.loadSyncCache, absoluteFilePath, function () {
        var content = readFile.sync(absoluteFilePath, {
          throwNotFound: true
        });

        var result = _this8.createCosmiconfigResultSync(absoluteFilePath, content);

        return _this8.config.transform(result);
      });
    }
  }]);

  return Explorer;
}();

module.exports = function createExplorer(options) {
  var explorer = new Explorer(options);
  return {
    search: explorer.search.bind(explorer),
    searchSync: explorer.searchSync.bind(explorer),
    load: explorer.load.bind(explorer),
    loadSync: explorer.loadSync.bind(explorer),
    clearLoadCache: explorer.clearLoadCache.bind(explorer),
    clearSearchCache: explorer.clearSearchCache.bind(explorer),
    clearCaches: explorer.clearCaches.bind(explorer)
  };
};

function nextDirUp(dir) {
  return path.dirname(dir);
}

function getExtensionDescription(filepath) {
  var ext = path.extname(filepath);
  return ext ? "extension \"".concat(ext, "\"") : 'files without extensions';
}