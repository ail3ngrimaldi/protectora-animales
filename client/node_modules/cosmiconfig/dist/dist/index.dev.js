//      
'use strict';

var os = require('os');

var createExplorer = require('./createExplorer');

var loaders = require('./loaders');

module.exports = cosmiconfig;

function cosmiconfig(moduleName, options) {
  options = options || {};
  var defaults = {
    packageProp: moduleName,
    searchPlaces: ['package.json', ".".concat(moduleName, "rc"), ".".concat(moduleName, "rc.json"), ".".concat(moduleName, "rc.yaml"), ".".concat(moduleName, "rc.yml"), ".".concat(moduleName, "rc.js"), "".concat(moduleName, ".config.js")],
    ignoreEmptySearchPlaces: true,
    stopDir: os.homedir(),
    cache: true,
    transform: identity
  };
  var normalizedOptions = Object.assign({}, defaults, options, {
    loaders: normalizeLoaders(options.loaders)
  });
  return createExplorer(normalizedOptions);
}

cosmiconfig.loadJs = loaders.loadJs;
cosmiconfig.loadJson = loaders.loadJson;
cosmiconfig.loadYaml = loaders.loadYaml;

function normalizeLoaders(rawLoaders) {
  var defaults = {
    '.js': {
      sync: loaders.loadJs,
      async: loaders.loadJs
    },
    '.json': {
      sync: loaders.loadJson,
      async: loaders.loadJson
    },
    '.yaml': {
      sync: loaders.loadYaml,
      async: loaders.loadYaml
    },
    '.yml': {
      sync: loaders.loadYaml,
      async: loaders.loadYaml
    },
    noExt: {
      sync: loaders.loadYaml,
      async: loaders.loadYaml
    }
  };

  if (!rawLoaders) {
    return defaults;
  }

  return Object.keys(rawLoaders).reduce(function (result, ext) {
    var entry = rawLoaders && rawLoaders[ext];

    if (typeof entry === 'function') {
      result[ext] = {
        sync: entry,
        async: entry
      };
    } else {
      result[ext] = entry;
    }

    return result;
  }, defaults);
}

function identity(x) {
  return x;
}