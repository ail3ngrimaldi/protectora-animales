'use strict';

var x = module.exports;
var ESC = "\x1B[";
var OSC = "\x1B]";
var BEL = "\x07";
var SEP = ';';
var isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';

x.cursorTo = function (x, y) {
  if (typeof x !== 'number') {
    throw new TypeError('The `x` argument is required');
  }

  if (typeof y !== 'number') {
    return ESC + (x + 1) + 'G';
  }

  return ESC + (y + 1) + ';' + (x + 1) + 'H';
};

x.cursorMove = function (x, y) {
  if (typeof x !== 'number') {
    throw new TypeError('The `x` argument is required');
  }

  var ret = '';

  if (x < 0) {
    ret += ESC + -x + 'D';
  } else if (x > 0) {
    ret += ESC + x + 'C';
  }

  if (y < 0) {
    ret += ESC + -y + 'A';
  } else if (y > 0) {
    ret += ESC + y + 'B';
  }

  return ret;
};

x.cursorUp = function (count) {
  return ESC + (typeof count === 'number' ? count : 1) + 'A';
};

x.cursorDown = function (count) {
  return ESC + (typeof count === 'number' ? count : 1) + 'B';
};

x.cursorForward = function (count) {
  return ESC + (typeof count === 'number' ? count : 1) + 'C';
};

x.cursorBackward = function (count) {
  return ESC + (typeof count === 'number' ? count : 1) + 'D';
};

x.cursorLeft = ESC + 'G';
x.cursorSavePosition = ESC + (isTerminalApp ? '7' : 's');
x.cursorRestorePosition = ESC + (isTerminalApp ? '8' : 'u');
x.cursorGetPosition = ESC + '6n';
x.cursorNextLine = ESC + 'E';
x.cursorPrevLine = ESC + 'F';
x.cursorHide = ESC + '?25l';
x.cursorShow = ESC + '?25h';

x.eraseLines = function (count) {
  var clear = '';

  for (var i = 0; i < count; i++) {
    clear += x.eraseLine + (i < count - 1 ? x.cursorUp() : '');
  }

  if (count) {
    clear += x.cursorLeft;
  }

  return clear;
};

x.eraseEndLine = ESC + 'K';
x.eraseStartLine = ESC + '1K';
x.eraseLine = ESC + '2K';
x.eraseDown = ESC + 'J';
x.eraseUp = ESC + '1J';
x.eraseScreen = ESC + '2J';
x.scrollUp = ESC + 'S';
x.scrollDown = ESC + 'T';
x.clearScreen = "\x1Bc";
x.clearTerminal = process.platform === 'win32' ? "".concat(x.eraseScreen).concat(ESC, "0f") : // 1. Erases the screen (Only done in case `2` is not supported)
// 2. Erases the whole screen including scrollback buffer
// 3. Moves cursor to the top-left position
// More info: https://www.real-world-systems.com/docs/ANSIcode.html
"".concat(x.eraseScreen).concat(ESC, "3J").concat(ESC, "H");
x.beep = BEL;

x.link = function (text, url) {
  return [OSC, '8', SEP, SEP, url, BEL, text, OSC, '8', SEP, SEP, BEL].join('');
};

x.image = function (buf, opts) {
  opts = opts || {};
  var ret = OSC + '1337;File=inline=1';

  if (opts.width) {
    ret += ";width=".concat(opts.width);
  }

  if (opts.height) {
    ret += ";height=".concat(opts.height);
  }

  if (opts.preserveAspectRatio === false) {
    ret += ';preserveAspectRatio=0';
  }

  return ret + ':' + buf.toString('base64') + BEL;
};

x.iTerm = {};

x.iTerm.setCwd = function (cwd) {
  return OSC + '50;CurrentDir=' + (cwd || process.cwd()) + BEL;
};