'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _path() {
  var data = _interopRequireDefault(require('path'));

  _path = function _path() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _realpathNative() {
  var data = require('realpath-native');

  _realpathNative = function _realpathNative() {
    return data;
  };

  return data;
}

function _console() {
  var data = require('@jest/console');

  _console = function _console() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _exit() {
  var data = _interopRequireDefault(require('exit'));

  _exit = function _exit() {
    return data;
  };

  return data;
}

function _gracefulFs() {
  var data = _interopRequireDefault(require('graceful-fs'));

  _gracefulFs = function _gracefulFs() {
    return data;
  };

  return data;
}

function _jestWatcher() {
  var data = require('jest-watcher');

  _jestWatcher = function _jestWatcher() {
    return data;
  };

  return data;
}

function _testResult() {
  var data = require('@jest/test-result');

  _testResult = function _testResult() {
    return data;
  };

  return data;
}

var _getNoTestsFoundMessage = _interopRequireDefault(require('./getNoTestsFoundMessage'));

var _runGlobalHook = _interopRequireDefault(require('./runGlobalHook'));

var _SearchSource = _interopRequireDefault(require('./SearchSource'));

var _TestScheduler = _interopRequireDefault(require('./TestScheduler'));

var _collectHandles = _interopRequireDefault(require('./collectHandles'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }

      _next(undefined);
    });
  };
}

var getTestPaths =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(globalConfig, context, outputStream, changedFiles, jestHooks, filter) {
    var source, data, shouldTestArray, filteredTests;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            source = new _SearchSource["default"](context);
            _context.next = 3;
            return source.getTestPaths(globalConfig, changedFiles, filter);

          case 3:
            data = _context.sent;

            if (!data.tests.length && globalConfig.onlyChanged && data.noSCM) {
              new (_console().CustomConsole)(outputStream, outputStream).log('Jest can only find uncommitted changed files in a git or hg ' + 'repository. If you make your project a git or hg ' + 'repository (`git init` or `hg init`), Jest will be able ' + 'to only run tests related to files changed since the last ' + 'commit.');
            }

            _context.next = 7;
            return Promise.all(data.tests.map(function (test) {
              return jestHooks.shouldRunTestSuite({
                config: test.context.config,
                duration: test.duration,
                testPath: test.path
              });
            }));

          case 7:
            shouldTestArray = _context.sent;
            filteredTests = data.tests.filter(function (_test, i) {
              return shouldTestArray[i];
            });
            return _context.abrupt("return", _objectSpread({}, data, {
              allTests: filteredTests.length,
              tests: filteredTests
            }));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTestPaths(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();

var processResults = function processResults(runResults, options) {
  var outputFile = options.outputFile,
      isJSON = options.json,
      onComplete = options.onComplete,
      outputStream = options.outputStream,
      testResultsProcessor = options.testResultsProcessor,
      collectHandles = options.collectHandles;

  if (collectHandles) {
    runResults.openHandles = collectHandles();
  } else {
    runResults.openHandles = [];
  }

  if (testResultsProcessor) {
    runResults = require(testResultsProcessor)(runResults);
  }

  if (isJSON) {
    if (outputFile) {
      var cwd = (0, _realpathNative().sync)(process.cwd());

      var filePath = _path()["default"].resolve(cwd, outputFile);

      _gracefulFs()["default"].writeFileSync(filePath, JSON.stringify((0, _jestUtil().formatTestResults)(runResults)));

      outputStream.write("Test results written to: ".concat(_path()["default"].relative(cwd, filePath), "\n"));
    } else {
      process.stdout.write(JSON.stringify((0, _jestUtil().formatTestResults)(runResults)));
    }
  }

  return onComplete && onComplete(runResults);
};

var testSchedulerContext = {
  firstRun: true,
  previousSuccess: true
};

var _default =
/*#__PURE__*/
function () {
  var _runJest = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(_ref4) {
    var contexts, globalConfig, outputStream, testWatcher, _ref4$jestHooks, jestHooks, startRun, changedFilesPromise, onComplete, failedTestsCache, filter, Sequencer, sequencer, allTests, _ref2, repos, noSCM, testRunData, testsPaths, hasTests, noTestsFoundMessage, newConfig, collectHandles, results;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            contexts = _ref4.contexts, globalConfig = _ref4.globalConfig, outputStream = _ref4.outputStream, testWatcher = _ref4.testWatcher, _ref4$jestHooks = _ref4.jestHooks, jestHooks = _ref4$jestHooks === void 0 ? new (_jestWatcher().JestHook)().getEmitter() : _ref4$jestHooks, startRun = _ref4.startRun, changedFilesPromise = _ref4.changedFilesPromise, onComplete = _ref4.onComplete, failedTestsCache = _ref4.failedTestsCache, filter = _ref4.filter;
            Sequencer = (0, _jestUtil().interopRequireDefault)(require(globalConfig.testSequencer))["default"];
            sequencer = new Sequencer();
            allTests = [];

            if (!(changedFilesPromise && globalConfig.watch)) {
              _context3.next = 11;
              break;
            }

            _context3.next = 7;
            return changedFilesPromise;

          case 7:
            _ref2 = _context3.sent;
            repos = _ref2.repos;
            noSCM = Object.keys(repos).every(function (scm) {
              return repos[scm].size === 0;
            });

            if (noSCM) {
              process.stderr.write('\n' + _chalk()["default"].bold('--watch') + ' is not supported without git/hg, please use --watchAll ' + '\n');
              (0, _exit()["default"])(1);
            }

          case 11:
            _context3.next = 13;
            return Promise.all(contexts.map(
            /*#__PURE__*/
            function () {
              var _ref3 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee2(context) {
                var matches;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.t0 = getTestPaths;
                        _context2.t1 = globalConfig;
                        _context2.t2 = context;
                        _context2.t3 = outputStream;
                        _context2.t4 = changedFilesPromise;

                        if (!_context2.t4) {
                          _context2.next = 9;
                          break;
                        }

                        _context2.next = 8;
                        return changedFilesPromise;

                      case 8:
                        _context2.t4 = _context2.sent;

                      case 9:
                        _context2.t5 = _context2.t4;
                        _context2.t6 = jestHooks;
                        _context2.t7 = filter;
                        _context2.next = 14;
                        return (0, _context2.t0)(_context2.t1, _context2.t2, _context2.t3, _context2.t5, _context2.t6, _context2.t7);

                      case 14:
                        matches = _context2.sent;
                        allTests = allTests.concat(matches.tests);
                        return _context2.abrupt("return", {
                          context: context,
                          matches: matches
                        });

                      case 17:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function (_x8) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 13:
            testRunData = _context3.sent;
            _context3.next = 16;
            return sequencer.sort(allTests);

          case 16:
            allTests = _context3.sent;

            if (!globalConfig.listTests) {
              _context3.next = 22;
              break;
            }

            testsPaths = Array.from(new Set(allTests.map(function (test) {
              return test.path;
            })));

            if (globalConfig.json) {
              console.log(JSON.stringify(testsPaths));
            } else {
              console.log(testsPaths.join('\n'));
            }

            onComplete && onComplete((0, _testResult().makeEmptyAggregatedTestResult)());
            return _context3.abrupt("return", null);

          case 22:
            if (globalConfig.onlyFailures && failedTestsCache) {
              allTests = failedTestsCache.filterTests(allTests);
              globalConfig = failedTestsCache.updateConfig(globalConfig);
            }

            hasTests = allTests.length > 0;

            if (!hasTests) {
              noTestsFoundMessage = (0, _getNoTestsFoundMessage["default"])(testRunData, globalConfig);

              if (globalConfig.passWithNoTests || globalConfig.findRelatedTests || globalConfig.lastCommit || globalConfig.onlyChanged) {
                new (_console().CustomConsole)(outputStream, outputStream).log(noTestsFoundMessage);
              } else {
                new (_console().CustomConsole)(outputStream, outputStream).error(noTestsFoundMessage);
                (0, _exit()["default"])(1);
              }
            } else if (allTests.length === 1 && globalConfig.silent !== true && globalConfig.verbose !== false) {
              newConfig = _objectSpread({}, globalConfig, {
                verbose: true
              });
              globalConfig = Object.freeze(newConfig);
            }

            if (globalConfig.detectOpenHandles) {
              collectHandles = (0, _collectHandles["default"])();
            }

            if (!hasTests) {
              _context3.next = 29;
              break;
            }

            _context3.next = 29;
            return (0, _runGlobalHook["default"])({
              allTests: allTests,
              globalConfig: globalConfig,
              moduleName: 'globalSetup'
            });

          case 29:
            if (!changedFilesPromise) {
              _context3.next = 33;
              break;
            }

            _context3.next = 32;
            return changedFilesPromise;

          case 32:
            testSchedulerContext.changedFiles = _context3.sent.changedFiles;

          case 33:
            _context3.next = 35;
            return new _TestScheduler["default"](globalConfig, {
              startRun: startRun
            }, testSchedulerContext).scheduleTests(allTests, testWatcher);

          case 35:
            results = _context3.sent;
            sequencer.cacheResults(allTests, results);

            if (!hasTests) {
              _context3.next = 40;
              break;
            }

            _context3.next = 40;
            return (0, _runGlobalHook["default"])({
              allTests: allTests,
              globalConfig: globalConfig,
              moduleName: 'globalTeardown'
            });

          case 40:
            return _context3.abrupt("return", processResults(results, {
              collectHandles: collectHandles,
              json: globalConfig.json,
              onComplete: onComplete,
              outputFile: globalConfig.outputFile,
              outputStream: outputStream,
              testResultsProcessor: globalConfig.testResultsProcessor
            }));

          case 41:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  function runJest(_x7) {
    return _runJest.apply(this, arguments);
  }

  return runJest;
}();

exports["default"] = _default;