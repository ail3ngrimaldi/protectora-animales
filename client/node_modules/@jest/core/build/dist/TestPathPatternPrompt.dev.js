'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _jestWatcher() {
  var data = require('jest-watcher');

  _jestWatcher = function _jestWatcher() {
    return data;
  };

  return data;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
} // TODO: Make underscored props `private`


var TestPathPatternPrompt =
/*#__PURE__*/
function (_jestWatcher$PatternP) {
  _inherits(TestPathPatternPrompt, _jestWatcher$PatternP);

  function TestPathPatternPrompt(pipe, prompt) {
    var _this;

    _classCallCheck(this, TestPathPatternPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestPathPatternPrompt).call(this, pipe, prompt));

    _defineProperty(_assertThisInitialized(_this), '_searchSources', void 0);

    _this._entityName = 'filenames';
    return _this;
  }

  _createClass(TestPathPatternPrompt, [{
    key: "_onChange",
    value: function _onChange(pattern, options) {
      _get(_getPrototypeOf(TestPathPatternPrompt.prototype), "_onChange", this).call(this, pattern, options);

      this._printPrompt(pattern);
    }
  }, {
    key: "_printPrompt",
    value: function _printPrompt(pattern) {
      var pipe = this._pipe;
      (0, _jestWatcher().printPatternCaret)(pattern, pipe);
      (0, _jestWatcher().printRestoredPatternCaret)(pattern, this._currentUsageRows, pipe);
    }
  }, {
    key: "_getMatchedTests",
    value: function _getMatchedTests(pattern) {
      var regex;

      try {
        regex = new RegExp(pattern, 'i');
      } catch (e) {}

      var tests = [];

      if (regex && this._searchSources) {
        this._searchSources.forEach(function (_ref) {
          var searchSource = _ref.searchSource;
          tests = tests.concat(searchSource.findMatchingTests(pattern).tests);
        });
      }

      return tests;
    }
  }, {
    key: "updateSearchSources",
    value: function updateSearchSources(searchSources) {
      this._searchSources = searchSources;
    }
  }]);

  return TestPathPatternPrompt;
}(_jestWatcher().PatternPrompt);

exports["default"] = TestPathPatternPrompt;