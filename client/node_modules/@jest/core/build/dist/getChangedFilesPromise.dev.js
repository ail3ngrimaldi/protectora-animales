'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _jestChangedFiles() {
  var data = require('jest-changed-files');

  _jestChangedFiles = function _jestChangedFiles() {
    return data;
  };

  return data;
}

function _jestMessageUtil() {
  var data = require('jest-message-util');

  _jestMessageUtil = function _jestMessageUtil() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var _default = function _default(globalConfig, configs) {
  if (globalConfig.onlyChanged) {
    var allRootsForAllProjects = configs.reduce(function (roots, config) {
      return [].concat(_toConsumableArray(roots), _toConsumableArray(config.roots || []));
    }, []);
    return (0, _jestChangedFiles().getChangedFilesForRoots)(allRootsForAllProjects, {
      changedSince: globalConfig.changedSince,
      lastCommit: globalConfig.lastCommit,
      withAncestor: globalConfig.changedFilesWithAncestor
    })["catch"](function (e) {
      var message = (0, _jestMessageUtil().formatExecError)(e, configs[0], {
        noStackTrace: true
      }).split('\n').filter(function (line) {
        return !line.includes('Command failed:');
      }).join('\n');
      console.error(_chalk()["default"].red("\n\n".concat(message)));
      process.exit(1); // We do process.exit, so this is dead code

      return Promise.reject(e);
    });
  }

  return undefined;
};

exports["default"] = _default;