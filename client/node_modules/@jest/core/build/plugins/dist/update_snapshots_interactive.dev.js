'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _jestWatcher() {
  var data = require('jest-watcher');

  _jestWatcher = function _jestWatcher() {
    return data;
  };

  return data;
}

var _SnapshotInteractiveMode = _interopRequireDefault(require('../SnapshotInteractiveMode'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var UpdateSnapshotInteractivePlugin =
/*#__PURE__*/
function (_jestWatcher$BaseWatc) {
  _inherits(UpdateSnapshotInteractivePlugin, _jestWatcher$BaseWatc);

  function UpdateSnapshotInteractivePlugin() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, UpdateSnapshotInteractivePlugin);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UpdateSnapshotInteractivePlugin)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), '_snapshotInteractiveMode', new _SnapshotInteractiveMode["default"](_this._stdout));

    _defineProperty(_assertThisInitialized(_this), '_failedSnapshotTestAssertions', []);

    _defineProperty(_assertThisInitialized(_this), 'isInternal', true);

    return _this;
  }

  _createClass(UpdateSnapshotInteractivePlugin, [{
    key: "getFailedSnapshotTestAssertions",
    value: function getFailedSnapshotTestAssertions(testResults) {
      var failedTestPaths = [];

      if (testResults.numFailedTests === 0 || !testResults.testResults) {
        return failedTestPaths;
      }

      testResults.testResults.forEach(function (testResult) {
        if (testResult.snapshot && testResult.snapshot.unmatched) {
          testResult.testResults.forEach(function (result) {
            if (result.status === 'failed') {
              failedTestPaths.push({
                fullName: result.fullName,
                path: testResult.testFilePath
              });
            }
          });
        }
      });
      return failedTestPaths;
    }
  }, {
    key: "apply",
    value: function apply(hooks) {
      var _this2 = this;

      hooks.onTestRunComplete(function (results) {
        _this2._failedSnapshotTestAssertions = _this2.getFailedSnapshotTestAssertions(results);

        if (_this2._snapshotInteractiveMode.isActive()) {
          _this2._snapshotInteractiveMode.updateWithResults(results);
        }
      });
    }
  }, {
    key: "onKey",
    value: function onKey(key) {
      if (this._snapshotInteractiveMode.isActive()) {
        this._snapshotInteractiveMode.put(key);
      }
    }
  }, {
    key: "run",
    value: function run(_globalConfig, updateConfigAndRun) {
      var _this3 = this;

      if (this._failedSnapshotTestAssertions.length) {
        return new Promise(function (res) {
          _this3._snapshotInteractiveMode.run(_this3._failedSnapshotTestAssertions, function (assertion, shouldUpdateSnapshot) {
            updateConfigAndRun({
              mode: 'watch',
              testNamePattern: assertion ? "^".concat(assertion.fullName, "$") : '',
              testPathPattern: assertion ? assertion.path : '',
              updateSnapshot: shouldUpdateSnapshot ? 'all' : 'none'
            });

            if (!_this3._snapshotInteractiveMode.isActive()) {
              res();
            }
          });
        });
      } else {
        return Promise.resolve();
      }
    }
  }, {
    key: "getUsageInfo",
    value: function getUsageInfo() {
      if (this._failedSnapshotTestAssertions && this._failedSnapshotTestAssertions.length > 0) {
        return {
          key: 'i',
          prompt: 'update failing snapshots interactively'
        };
      }

      return null;
    }
  }]);

  return UpdateSnapshotInteractivePlugin;
}(_jestWatcher().BaseWatchPlugin);

var _default = UpdateSnapshotInteractivePlugin;
exports["default"] = _default;