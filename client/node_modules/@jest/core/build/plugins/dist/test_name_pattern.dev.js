'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _jestWatcher() {
  var data = require('jest-watcher');

  _jestWatcher = function _jestWatcher() {
    return data;
  };

  return data;
}

var _TestNamePatternPrompt = _interopRequireDefault(require('../TestNamePatternPrompt'));

var _active_filters_message = _interopRequireDefault(require('../lib/active_filters_message'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var TestNamePatternPlugin =
/*#__PURE__*/
function (_jestWatcher$BaseWatc) {
  _inherits(TestNamePatternPlugin, _jestWatcher$BaseWatc);

  function TestNamePatternPlugin(options) {
    var _this;

    _classCallCheck(this, TestNamePatternPlugin);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestNamePatternPlugin).call(this, options));

    _defineProperty(_assertThisInitialized(_this), '_prompt', void 0);

    _defineProperty(_assertThisInitialized(_this), 'isInternal', void 0);

    _this._prompt = new (_jestWatcher().Prompt)();
    _this.isInternal = true;
    return _this;
  }

  _createClass(TestNamePatternPlugin, [{
    key: "getUsageInfo",
    value: function getUsageInfo() {
      return {
        key: 't',
        prompt: 'filter by a test name regex pattern'
      };
    }
  }, {
    key: "onKey",
    value: function onKey(key) {
      this._prompt.put(key);
    }
  }, {
    key: "run",
    value: function run(globalConfig, updateConfigAndRun) {
      var _this2 = this;

      return new Promise(function (res, rej) {
        var testNamePatternPrompt = new _TestNamePatternPrompt["default"](_this2._stdout, _this2._prompt);
        testNamePatternPrompt.run(function (value) {
          updateConfigAndRun({
            mode: 'watch',
            testNamePattern: value
          });
          res();
        }, rej, {
          header: (0, _active_filters_message["default"])(globalConfig)
        });
      });
    }
  }]);

  return TestNamePatternPlugin;
}(_jestWatcher().BaseWatchPlugin);

var _default = TestNamePatternPlugin;
exports["default"] = _default;