'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _base_reporter = _interopRequireDefault(require('./base_reporter'));

var _utils = require('./utils');

var _get_result_header = _interopRequireDefault(require('./get_result_header'));

var _get_snapshot_summary = _interopRequireDefault(require('./get_snapshot_summary'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var TEST_SUMMARY_THRESHOLD = 20;
var NPM_EVENTS = new Set(['prepublish', 'publish', 'postpublish', 'preinstall', 'install', 'postinstall', 'preuninstall', 'uninstall', 'postuninstall', 'preversion', 'version', 'postversion', 'pretest', 'test', 'posttest', 'prestop', 'stop', 'poststop', 'prestart', 'start', 'poststart', 'prerestart', 'restart', 'postrestart']);
var _process$env = process.env,
    npm_config_user_agent = _process$env.npm_config_user_agent,
    npm_lifecycle_event = _process$env.npm_lifecycle_event,
    npm_lifecycle_script = _process$env.npm_lifecycle_script;

var SummaryReporter =
/*#__PURE__*/
function (_base_reporter$defaul) {
  _inherits(SummaryReporter, _base_reporter$defaul);

  function SummaryReporter(globalConfig) {
    var _this;

    _classCallCheck(this, SummaryReporter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SummaryReporter).call(this));

    _defineProperty(_assertThisInitialized(_this), '_estimatedTime', void 0);

    _defineProperty(_assertThisInitialized(_this), '_globalConfig', void 0);

    _this._globalConfig = globalConfig;
    _this._estimatedTime = 0;
    return _this;
  } // If we write more than one character at a time it is possible that
  // Node.js exits in the middle of printing the result. This was first observed
  // in Node.js 0.10 and still persists in Node.js 6.7+.
  // Let's print the test failure summary character by character which is safer
  // when hundreds of tests are failing.


  _createClass(SummaryReporter, [{
    key: "_write",
    value: function _write(string) {
      for (var i = 0; i < string.length; i++) {
        process.stderr.write(string.charAt(i));
      }
    }
  }, {
    key: "onRunStart",
    value: function onRunStart(aggregatedResults, options) {
      _get(_getPrototypeOf(SummaryReporter.prototype), "onRunStart", this).call(this, aggregatedResults, options);

      this._estimatedTime = options.estimatedTime;
    }
  }, {
    key: "onRunComplete",
    value: function onRunComplete(contexts, aggregatedResults) {
      var numTotalTestSuites = aggregatedResults.numTotalTestSuites,
          testResults = aggregatedResults.testResults,
          wasInterrupted = aggregatedResults.wasInterrupted;

      if (numTotalTestSuites) {
        var lastResult = testResults[testResults.length - 1]; // Print a newline if the last test did not fail to line up newlines
        // similar to when an error would have been thrown in the test.

        if (!this._globalConfig.verbose && lastResult && !lastResult.numFailingTests && !lastResult.testExecError) {
          this.log('');
        }

        this._printSummary(aggregatedResults, this._globalConfig);

        this._printSnapshotSummary(aggregatedResults.snapshot, this._globalConfig);

        if (numTotalTestSuites) {
          var message = (0, _utils.getSummary)(aggregatedResults, {
            estimatedTime: this._estimatedTime
          });

          if (!this._globalConfig.silent) {
            message += '\n' + (wasInterrupted ? _chalk()["default"].bold.red('Test run was interrupted.') : this._getTestSummary(contexts, this._globalConfig));
          }

          this.log(message);
        }
      }
    }
  }, {
    key: "_printSnapshotSummary",
    value: function _printSnapshotSummary(snapshots, globalConfig) {
      if (snapshots.added || snapshots.filesRemoved || snapshots.unchecked || snapshots.unmatched || snapshots.updated) {
        var updateCommand;
        var event = npm_lifecycle_event || '';
        var prefix = NPM_EVENTS.has(event) ? '' : 'run ';
        var isYarn = typeof npm_config_user_agent === 'string' && npm_config_user_agent.includes('yarn');
        var client = isYarn ? 'yarn' : 'npm';
        var scriptUsesJest = typeof npm_lifecycle_script === 'string' && npm_lifecycle_script.includes('jest');

        if (globalConfig.watch || globalConfig.watchAll) {
          updateCommand = 'press `u`';
        } else if (event && scriptUsesJest) {
          updateCommand = "run `".concat(client + ' ' + prefix + event + (isYarn ? '' : ' --'), " -u`");
        } else {
          updateCommand = 're-run jest with `-u`';
        }

        var snapshotSummary = (0, _get_snapshot_summary["default"])(snapshots, globalConfig, updateCommand);
        snapshotSummary.forEach(this.log);
        this.log(''); // print empty line
      }
    }
  }, {
    key: "_printSummary",
    value: function _printSummary(aggregatedResults, globalConfig) {
      var _this2 = this;

      // If there were any failing tests and there was a large number of tests
      // executed, re-print the failing results at the end of execution output.
      var failedTests = aggregatedResults.numFailedTests;
      var runtimeErrors = aggregatedResults.numRuntimeErrorTestSuites;

      if (failedTests + runtimeErrors > 0 && aggregatedResults.numTotalTestSuites > TEST_SUMMARY_THRESHOLD) {
        this.log(_chalk()["default"].bold('Summary of all failing tests'));
        aggregatedResults.testResults.forEach(function (testResult) {
          var failureMessage = testResult.failureMessage;

          if (failureMessage) {
            _this2._write((0, _get_result_header["default"])(testResult, globalConfig) + '\n' + failureMessage + '\n');
          }
        });
        this.log(''); // print empty line
      }
    }
  }, {
    key: "_getTestSummary",
    value: function _getTestSummary(contexts, globalConfig) {
      var getMatchingTestsInfo = function getMatchingTestsInfo() {
        var prefix = globalConfig.findRelatedTests ? ' related to files matching ' : ' matching ';
        return _chalk()["default"].dim(prefix) + (0, _jestUtil().testPathPatternToRegExp)(globalConfig.testPathPattern).toString();
      };

      var testInfo = '';

      if (globalConfig.runTestsByPath) {
        testInfo = _chalk()["default"].dim(' within paths');
      } else if (globalConfig.onlyChanged) {
        testInfo = _chalk()["default"].dim(' related to changed files');
      } else if (globalConfig.testPathPattern) {
        testInfo = getMatchingTestsInfo();
      }

      var nameInfo = '';

      if (globalConfig.runTestsByPath) {
        nameInfo = ' ' + globalConfig.nonFlagArgs.map(function (p) {
          return "\"".concat(p, "\"");
        }).join(', ');
      } else if (globalConfig.testNamePattern) {
        nameInfo = _chalk()["default"].dim(' with tests matching ') + "\"".concat(globalConfig.testNamePattern, "\"");
      }

      var contextInfo = contexts.size > 1 ? _chalk()["default"].dim(' in ') + contexts.size + _chalk()["default"].dim(' projects') : '';
      return _chalk()["default"].dim('Ran all test suites') + testInfo + nameInfo + contextInfo + _chalk()["default"].dim('.');
    }
  }]);

  return SummaryReporter;
}(_base_reporter["default"]);

exports["default"] = SummaryReporter;