'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _default_reporter = _interopRequireDefault(require('./default_reporter'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var ICONS = _jestUtil().specialChars.ICONS;

var VerboseReporter =
/*#__PURE__*/
function (_default_reporter$def) {
  _inherits(VerboseReporter, _default_reporter$def);

  function VerboseReporter(globalConfig) {
    var _this;

    _classCallCheck(this, VerboseReporter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(VerboseReporter).call(this, globalConfig));

    _defineProperty(_assertThisInitialized(_this), '_globalConfig', void 0);

    _this._globalConfig = globalConfig;
    return _this;
  }

  _createClass(VerboseReporter, [{
    key: "onTestResult",
    value: function onTestResult(test, result, aggregatedResults) {
      _get(_getPrototypeOf(VerboseReporter.prototype), "testFinished", this).call(this, test.context.config, result, aggregatedResults);

      if (!result.skipped) {
        this.printTestFileHeader(result.testFilePath, test.context.config, result);

        if (!result.testExecError && !result.skipped) {
          this._logTestResults(result.testResults);
        }

        this.printTestFileFailureMessage(result.testFilePath, test.context.config, result);
      }

      _get(_getPrototypeOf(VerboseReporter.prototype), "forceFlushBufferedOutput", this).call(this);
    }
  }, {
    key: "_logTestResults",
    value: function _logTestResults(testResults) {
      this._logSuite(VerboseReporter.groupTestsBySuites(testResults), 0);

      this._logLine();
    }
  }, {
    key: "_logSuite",
    value: function _logSuite(suite, indentLevel) {
      var _this2 = this;

      if (suite.title) {
        this._logLine(suite.title, indentLevel);
      }

      this._logTests(suite.tests, indentLevel + 1);

      suite.suites.forEach(function (suite) {
        return _this2._logSuite(suite, indentLevel + 1);
      });
    }
  }, {
    key: "_getIcon",
    value: function _getIcon(status) {
      if (status === 'failed') {
        return _chalk()["default"].red(ICONS.failed);
      } else if (status === 'pending') {
        return _chalk()["default"].yellow(ICONS.pending);
      } else if (status === 'todo') {
        return _chalk()["default"].magenta(ICONS.todo);
      } else {
        return _chalk()["default"].green(ICONS.success);
      }
    }
  }, {
    key: "_logTest",
    value: function _logTest(test, indentLevel) {
      var status = this._getIcon(test.status);

      var time = test.duration ? " (".concat(test.duration.toFixed(0), "ms)") : '';

      this._logLine(status + ' ' + _chalk()["default"].dim(test.title + time), indentLevel);
    }
  }, {
    key: "_logTests",
    value: function _logTests(tests, indentLevel) {
      var _this3 = this;

      if (this._globalConfig.expand) {
        tests.forEach(function (test) {
          return _this3._logTest(test, indentLevel);
        });
      } else {
        var summedTests = tests.reduce(function (result, test) {
          if (test.status === 'pending') {
            result.pending.push(test);
          } else if (test.status === 'todo') {
            result.todo.push(test);
          } else {
            _this3._logTest(test, indentLevel);
          }

          return result;
        }, {
          pending: [],
          todo: []
        });

        if (summedTests.pending.length > 0) {
          summedTests.pending.forEach(this._logTodoOrPendingTest(indentLevel));
        }

        if (summedTests.todo.length > 0) {
          summedTests.todo.forEach(this._logTodoOrPendingTest(indentLevel));
        }
      }
    }
  }, {
    key: "_logTodoOrPendingTest",
    value: function _logTodoOrPendingTest(indentLevel) {
      var _this4 = this;

      return function (test) {
        var printedTestStatus = test.status === 'pending' ? 'skipped' : test.status;

        var icon = _this4._getIcon(test.status);

        var text = _chalk()["default"].dim("".concat(printedTestStatus, " ").concat(test.title));

        _this4._logLine("".concat(icon, " ").concat(text), indentLevel);
      };
    }
  }, {
    key: "_logLine",
    value: function _logLine(str, indentLevel) {
      var indentation = '  '.repeat(indentLevel || 0);
      this.log(indentation + (str || ''));
    }
  }], [{
    key: "filterTestResults",
    value: function filterTestResults(testResults) {
      return testResults.filter(function (_ref) {
        var status = _ref.status;
        return status !== 'pending';
      });
    }
  }, {
    key: "groupTestsBySuites",
    value: function groupTestsBySuites(testResults) {
      var root = {
        suites: [],
        tests: [],
        title: ''
      };
      testResults.forEach(function (testResult) {
        var targetSuite = root; // Find the target suite for this test,
        // creating nested suites as necessary.

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var title = _step.value;
            var matchingSuite = targetSuite.suites.find(function (s) {
              return s.title === title;
            });

            if (!matchingSuite) {
              matchingSuite = {
                suites: [],
                tests: [],
                title: title
              };
              targetSuite.suites.push(matchingSuite);
            }

            targetSuite = matchingSuite;
          };

          for (var _iterator = testResult.ancestorTitles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        targetSuite.tests.push(testResult);
      });
      return root;
    }
  }]);

  return VerboseReporter;
}(_default_reporter["default"]);

exports["default"] = VerboseReporter;