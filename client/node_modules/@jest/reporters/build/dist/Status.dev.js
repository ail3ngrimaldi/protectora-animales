'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _stringLength() {
  var data = _interopRequireDefault(require('string-length'));

  _stringLength = function _stringLength() {
    return data;
  };

  return data;
}

var _utils = require('./utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var RUNNING_TEXT = ' RUNS ';
var RUNNING = _chalk()["default"].reset.inverse.yellow.bold(RUNNING_TEXT) + ' ';
/**
 * This class is a perf optimization for sorting the list of currently
 * running tests. It tries to keep tests in the same positions without
 * shifting the whole list.
 */

var CurrentTestList =
/*#__PURE__*/
function () {
  function CurrentTestList() {
    _classCallCheck(this, CurrentTestList);

    _defineProperty(this, '_array', void 0);

    this._array = [];
  }

  _createClass(CurrentTestList, [{
    key: "add",
    value: function add(testPath, config) {
      var index = this._array.indexOf(null);

      var record = {
        config: config,
        testPath: testPath
      };

      if (index !== -1) {
        this._array[index] = record;
      } else {
        this._array.push(record);
      }
    }
  }, {
    key: "delete",
    value: function _delete(testPath) {
      var record = this._array.find(function (record) {
        return record !== null && record.testPath === testPath;
      });

      this._array[this._array.indexOf(record || null)] = null;
    }
  }, {
    key: "get",
    value: function get() {
      return this._array;
    }
  }]);

  return CurrentTestList;
}();
/**
 * A class that generates the CLI status of currently running tests
 * and also provides an ANSI escape sequence to remove status lines
 * from the terminal.
 */


var Status =
/*#__PURE__*/
function () {
  function Status() {
    _classCallCheck(this, Status);

    _defineProperty(this, '_cache', void 0);

    _defineProperty(this, '_callback', void 0);

    _defineProperty(this, '_currentTests', void 0);

    _defineProperty(this, '_done', void 0);

    _defineProperty(this, '_emitScheduled', void 0);

    _defineProperty(this, '_estimatedTime', void 0);

    _defineProperty(this, '_interval', void 0);

    _defineProperty(this, '_aggregatedResults', void 0);

    _defineProperty(this, '_showStatus', void 0);

    this._cache = null;
    this._currentTests = new CurrentTestList();
    this._done = false;
    this._emitScheduled = false;
    this._estimatedTime = 0;
    this._showStatus = false;
  }

  _createClass(Status, [{
    key: "onChange",
    value: function onChange(callback) {
      this._callback = callback;
    }
  }, {
    key: "runStarted",
    value: function runStarted(aggregatedResults, options) {
      var _this = this;

      this._estimatedTime = options && options.estimatedTime || 0;
      this._showStatus = options && options.showStatus;
      this._interval = setInterval(function () {
        return _this._tick();
      }, 1000);
      this._aggregatedResults = aggregatedResults;

      this._debouncedEmit();
    }
  }, {
    key: "runFinished",
    value: function runFinished() {
      this._done = true;
      if (this._interval) clearInterval(this._interval);

      this._emit();
    }
  }, {
    key: "testStarted",
    value: function testStarted(testPath, config) {
      this._currentTests.add(testPath, config);

      if (!this._showStatus) {
        this._emit();
      } else {
        this._debouncedEmit();
      }
    }
  }, {
    key: "testFinished",
    value: function testFinished(_config, testResult, aggregatedResults) {
      var testFilePath = testResult.testFilePath;
      this._aggregatedResults = aggregatedResults;

      this._currentTests["delete"](testFilePath);

      this._debouncedEmit();
    }
  }, {
    key: "get",
    value: function get() {
      if (this._cache) {
        return this._cache;
      }

      if (this._done) {
        return {
          clear: '',
          content: ''
        };
      }

      var width = process.stdout.columns;
      var content = '\n';

      this._currentTests.get().forEach(function (record) {
        if (record) {
          var config = record.config,
              testPath = record.testPath;
          var projectDisplayName = config.displayName ? (0, _utils.printDisplayName)(config) + ' ' : '';
          var prefix = RUNNING + projectDisplayName;
          content += (0, _utils.wrapAnsiString)(prefix + (0, _utils.trimAndFormatPath)((0, _stringLength()["default"])(prefix), config, testPath, width), width) + '\n';
        }
      });

      if (this._showStatus && this._aggregatedResults) {
        content += '\n' + (0, _utils.getSummary)(this._aggregatedResults, {
          estimatedTime: this._estimatedTime,
          roundTime: true,
          width: width
        });
      }

      var height = 0;

      for (var i = 0; i < content.length; i++) {
        if (content[i] === '\n') {
          height++;
        }
      }

      var clear = '\r\x1B[K\r\x1B[1A'.repeat(height);
      return this._cache = {
        clear: clear,
        content: content
      };
    }
  }, {
    key: "_emit",
    value: function _emit() {
      this._cache = null;
      if (this._callback) this._callback();
    }
  }, {
    key: "_debouncedEmit",
    value: function _debouncedEmit() {
      var _this2 = this;

      if (!this._emitScheduled) {
        // Perf optimization to avoid two separate renders When
        // one test finishes and another test starts executing.
        this._emitScheduled = true;
        setTimeout(function () {
          _this2._emit();

          _this2._emitScheduled = false;
        }, 100);
      }
    }
  }, {
    key: "_tick",
    value: function _tick() {
      this._debouncedEmit();
    }
  }]);

  return Status;
}();

exports["default"] = Status;