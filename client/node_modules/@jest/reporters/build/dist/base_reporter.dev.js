'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var preRunMessageRemove = _jestUtil().preRunMessage.remove;

var BaseReporter =
/*#__PURE__*/
function () {
  function BaseReporter() {
    _classCallCheck(this, BaseReporter);

    _defineProperty(this, '_error', void 0);
  }

  _createClass(BaseReporter, [{
    key: "log",
    value: function log(message) {
      process.stderr.write(message + '\n');
    }
  }, {
    key: "onRunStart",
    value: function onRunStart(_results, _options) {
      preRunMessageRemove(process.stderr);
    }
  }, {
    key: "onTestResult",
    value: function onTestResult(_test, _testResult, _results) {}
  }, {
    key: "onTestStart",
    value: function onTestStart(_test) {}
  }, {
    key: "onRunComplete",
    value: function onRunComplete(_contexts, _aggregatedResults) {}
  }, {
    key: "_setError",
    value: function _setError(error) {
      this._error = error;
    } // Return an error that occurred during reporting. This error will
    // define whether the test run was successful or failed.

  }, {
    key: "getLastError",
    value: function getLastError() {
      return this._error;
    }
  }]);

  return BaseReporter;
}();

exports["default"] = BaseReporter;