'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _utils = require('./utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]') return Array.from(iter);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var ARROW = " \u203A ";
var DOWN_ARROW = " \u21B3 ";
var DOT = " \u2022 ";

var FAIL_COLOR = _chalk()["default"].bold.red;

var OBSOLETE_COLOR = _chalk()["default"].bold.yellow;

var SNAPSHOT_ADDED = _chalk()["default"].bold.green;

var SNAPSHOT_NOTE = _chalk()["default"].dim;

var SNAPSHOT_REMOVED = _chalk()["default"].bold.green;

var SNAPSHOT_SUMMARY = _chalk()["default"].bold;

var SNAPSHOT_UPDATED = _chalk()["default"].bold.green;

var _default = function _default(snapshots, globalConfig, updateCommand) {
  var summary = [];
  summary.push(SNAPSHOT_SUMMARY('Snapshot Summary'));

  if (snapshots.added) {
    summary.push(SNAPSHOT_ADDED(ARROW + (0, _jestUtil().pluralize)('snapshot', snapshots.added) + ' written ') + "from ".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesAdded), "."));
  }

  if (snapshots.unmatched) {
    summary.push(FAIL_COLOR("".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot', snapshots.unmatched), " failed")) + " from ".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesUnmatched), ". ") + SNAPSHOT_NOTE('Inspect your code changes or ' + updateCommand + ' to update them.'));
  }

  if (snapshots.updated) {
    summary.push(SNAPSHOT_UPDATED(ARROW + (0, _jestUtil().pluralize)('snapshot', snapshots.updated) + ' updated ') + "from ".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesUpdated), "."));
  }

  if (snapshots.filesRemoved) {
    if (snapshots.didUpdate) {
      summary.push(SNAPSHOT_REMOVED("".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot file', snapshots.filesRemoved), " removed ")) + "from ".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesRemoved), "."));
    } else {
      summary.push(OBSOLETE_COLOR("".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot file', snapshots.filesRemoved), " obsolete ")) + "from ".concat((0, _jestUtil().pluralize)('test suite', snapshots.filesRemoved), ". ") + SNAPSHOT_NOTE("To remove ".concat(snapshots.filesRemoved === 1 ? 'it' : 'them all', ", ").concat(updateCommand, ".")));
    }
  }

  if (snapshots.filesRemovedList && snapshots.filesRemovedList.length) {
    var _snapshots$filesRemov = _toArray(snapshots.filesRemovedList),
        head = _snapshots$filesRemov[0],
        tail = _snapshots$filesRemov.slice(1);

    summary.push("  ".concat(DOWN_ARROW, " ").concat(DOT).concat((0, _utils.formatTestPath)(globalConfig, head)));
    tail.forEach(function (key) {
      summary.push("      ".concat(DOT).concat((0, _utils.formatTestPath)(globalConfig, key)));
    });
  }

  if (snapshots.unchecked) {
    if (snapshots.didUpdate) {
      summary.push(SNAPSHOT_REMOVED("".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot', snapshots.unchecked), " removed ")) + "from ".concat((0, _jestUtil().pluralize)('test suite', snapshots.uncheckedKeysByFile.length), "."));
    } else {
      summary.push(OBSOLETE_COLOR("".concat(ARROW).concat((0, _jestUtil().pluralize)('snapshot', snapshots.unchecked), " obsolete ")) + "from ".concat((0, _jestUtil().pluralize)('test suite', snapshots.uncheckedKeysByFile.length), ". ") + SNAPSHOT_NOTE("To remove ".concat(snapshots.unchecked === 1 ? 'it' : 'them all', ", ").concat(updateCommand, ".")));
    }

    snapshots.uncheckedKeysByFile.forEach(function (uncheckedFile) {
      summary.push("  ".concat(DOWN_ARROW).concat((0, _utils.formatTestPath)(globalConfig, uncheckedFile.filePath)));
      uncheckedFile.keys.forEach(function (key) {
        summary.push("      ".concat(DOT).concat(key));
      });
    });
  }

  return summary;
};

exports["default"] = _default;