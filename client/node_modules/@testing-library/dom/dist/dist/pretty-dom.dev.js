"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prettyDOM = prettyDOM;
exports.logDOM = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _prettyFormat = _interopRequireDefault(require("pretty-format"));

var _helpers = require("./helpers");

function inCypress(dom) {
  var window = dom.ownerDocument && dom.ownerDocument.defaultView || undefined;
  return typeof global !== 'undefined' && global.Cypress || typeof window !== 'undefined' && window.Cypress;
}

var inNode = function inNode() {
  return typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;
};

var getMaxLength = function getMaxLength(dom) {
  return inCypress(dom) ? 0 : typeof process !== 'undefined' && process.env.DEBUG_PRINT_LIMIT || 7000;
};

var _prettyFormat$default = _prettyFormat["default"].plugins,
    DOMElement = _prettyFormat$default.DOMElement,
    DOMCollection = _prettyFormat$default.DOMCollection;

function prettyDOM(dom, maxLength, options) {
  if (!dom) {
    dom = (0, _helpers.getDocument)().body;
  }

  if (typeof maxLength !== 'number') {
    maxLength = getMaxLength(dom);
  }

  if (maxLength === 0) {
    return '';
  }

  if (dom.documentElement) {
    dom = dom.documentElement;
  }

  var domTypeName = _typeof(dom);

  if (domTypeName === 'object') {
    domTypeName = dom.constructor.name;
  } else {
    // To don't fall with `in` operator
    dom = {};
  }

  if (!('outerHTML' in dom)) {
    throw new TypeError("Expected an element or document but got ".concat(domTypeName));
  }

  var debugContent = (0, _prettyFormat["default"])(dom, (0, _extends2["default"])({
    plugins: [DOMElement, DOMCollection],
    printFunctionName: false,
    highlight: inNode()
  }, options));
  return maxLength !== undefined && dom.outerHTML.length > maxLength ? "".concat(debugContent.slice(0, maxLength), "...") : debugContent;
}

var logDOM = function logDOM() {
  return console.log(prettyDOM.apply(void 0, arguments));
};
/* eslint no-console:0 */


exports.logDOM = logDOM;