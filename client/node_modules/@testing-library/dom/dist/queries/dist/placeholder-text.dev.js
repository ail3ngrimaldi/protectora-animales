"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findByPlaceholderText = exports.findAllByPlaceholderText = exports.getAllByPlaceholderText = exports.getByPlaceholderText = exports.queryAllByPlaceholderText = exports.queryByPlaceholderText = void 0;

var _allUtils = require("./all-utils");

var queryAllByPlaceholderText = _allUtils.queryAllByAttribute.bind(null, 'placeholder');

exports.queryAllByPlaceholderText = queryAllByPlaceholderText;

var getMultipleError = function getMultipleError(c, text) {
  return "Found multiple elements with the placeholder text of: ".concat(text);
};

var getMissingError = function getMissingError(c, text) {
  return "Unable to find an element with the placeholder text of: ".concat(text);
};

var _ref = (0, _allUtils.buildQueries)(queryAllByPlaceholderText, getMultipleError, getMissingError),
    _ref2 = _slicedToArray(_ref, 5),
    queryByPlaceholderText = _ref2[0],
    getAllByPlaceholderText = _ref2[1],
    getByPlaceholderText = _ref2[2],
    findAllByPlaceholderText = _ref2[3],
    findByPlaceholderText = _ref2[4];

exports.findByPlaceholderText = findByPlaceholderText;
exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;