"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findByTestId = exports.findAllByTestId = exports.getAllByTestId = exports.getByTestId = exports.queryAllByTestId = exports.queryByTestId = void 0;

var _allUtils = require("./all-utils");

var getTestIdAttribute = function getTestIdAttribute() {
  return (0, _allUtils.getConfig)().testIdAttribute;
};

var queryAllByTestId = function queryAllByTestId() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (0, _allUtils.queryAllByAttribute).apply(void 0, [getTestIdAttribute()].concat(args));
};

exports.queryAllByTestId = queryAllByTestId;

var getMultipleError = function getMultipleError(c, id) {
  return "Found multiple elements by: [".concat(getTestIdAttribute(), "=\"").concat(id, "\"]");
};

var getMissingError = function getMissingError(c, id) {
  return "Unable to find an element by: [".concat(getTestIdAttribute(), "=\"").concat(id, "\"]");
};

var _ref = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError),
    _ref2 = _slicedToArray(_ref, 5),
    queryByTestId = _ref2[0],
    getAllByTestId = _ref2[1],
    getByTestId = _ref2[2],
    findAllByTestId = _ref2[3],
    findByTestId = _ref2[4];

exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;