"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkHtmlElement = checkHtmlElement;
exports.parseCSS = parseCSS;
exports.deprecate = deprecate;
exports.getMessage = getMessage;
exports.matches = matches;
exports.normalize = normalize;
exports.getTag = getTag;
exports.getSingleElementValue = getSingleElementValue;
exports.compareArraysAsSet = compareArraysAsSet;
exports.HtmlElementTypeError = void 0;

var _redent = _interopRequireDefault(require("redent"));

var _jestMatcherUtils = require("jest-matcher-utils");

var _css = require("css");

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var HtmlElementTypeError =
/*#__PURE__*/
function (_Error) {
  _inherits(HtmlElementTypeError, _Error);

  function HtmlElementTypeError(received, matcherFn, context) {
    var _this;

    _classCallCheck(this, HtmlElementTypeError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HtmlElementTypeError).call(this));
    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this), matcherFn);
    }

    var withType = '';

    try {
      withType = (0, _jestMatcherUtils.printWithType)('Received', received, _jestMatcherUtils.printReceived);
    } catch (e) {// Can throw for Document:
      // https://github.com/jsdom/jsdom/issues/2304
    }

    _this.message = [(0, _jestMatcherUtils.matcherHint)("".concat(context.isNot ? '.not' : '', ".").concat(matcherFn.name), 'received', ''), '', "".concat((0, _jestMatcherUtils.RECEIVED_COLOR)('received'), " value must be an HTMLElement or an SVGElement."), withType].join('\n');
    return _this;
  }

  return HtmlElementTypeError;
}(_wrapNativeSuper(Error));

exports.HtmlElementTypeError = HtmlElementTypeError;

function checkHasWindow(htmlElement) {
  if (!htmlElement || !htmlElement.ownerDocument || !htmlElement.ownerDocument.defaultView) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    throw _construct(HtmlElementTypeError, [htmlElement].concat(args));
  }
}

function checkHtmlElement(htmlElement) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  checkHasWindow.apply(void 0, [htmlElement].concat(args));
  var window = htmlElement.ownerDocument.defaultView;

  if (!(htmlElement instanceof window.HTMLElement) && !(htmlElement instanceof window.SVGElement)) {
    throw _construct(HtmlElementTypeError, [htmlElement].concat(args));
  }
}

var InvalidCSSError =
/*#__PURE__*/
function (_Error2) {
  _inherits(InvalidCSSError, _Error2);

  function InvalidCSSError(received, matcherFn) {
    var _this2;

    _classCallCheck(this, InvalidCSSError);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(InvalidCSSError).call(this));
    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized(_this2), matcherFn);
    }

    _this2.message = [received.message, '', (0, _jestMatcherUtils.RECEIVED_COLOR)("Failing css:"), (0, _jestMatcherUtils.RECEIVED_COLOR)("".concat(received.css))].join('\n');
    return _this2;
  }

  return InvalidCSSError;
}(_wrapNativeSuper(Error));

function parseCSS(css) {
  var ast = (0, _css.parse)("selector { ".concat(css, " }"), {
    silent: true
  }).stylesheet;

  if (ast.parsingErrors && ast.parsingErrors.length > 0) {
    var _ast$parsingErrors$ = ast.parsingErrors[0],
        reason = _ast$parsingErrors$.reason,
        line = _ast$parsingErrors$.line;

    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    throw _construct(InvalidCSSError, [{
      css: css,
      message: "Syntax error parsing expected css: ".concat(reason, " on line: ").concat(line)
    }].concat(args));
  }

  var parsedRules = ast.rules[0].declarations.filter(function (d) {
    return d.type === 'declaration';
  }).reduce(function (obj, _ref) {
    var property = _ref.property,
        value = _ref.value;
    return Object.assign(obj, _defineProperty({}, property, value));
  }, {});
  return parsedRules;
}

function display(value) {
  return typeof value === 'string' ? value : (0, _jestMatcherUtils.stringify)(value);
}

function getMessage(matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return ["".concat(matcher, "\n"), "".concat(expectedLabel, ":\n").concat((0, _jestMatcherUtils.EXPECTED_COLOR)((0, _redent["default"])(display(expectedValue), 2))), "".concat(receivedLabel, ":\n").concat((0, _jestMatcherUtils.RECEIVED_COLOR)((0, _redent["default"])(display(receivedValue), 2)))].join('\n');
}

function matches(textToMatch, matcher) {
  if (matcher instanceof RegExp) {
    return matcher.test(textToMatch);
  } else {
    return textToMatch.includes(String(matcher));
  }
}

function deprecate(name, replacementText) {
  // Notify user that they are using deprecated functionality.
  // eslint-disable-next-line no-console
  console.warn("Warning: ".concat(name, " has been deprecated and will be removed in future updates."), replacementText);
}

function normalize(text) {
  return text.replace(/\s+/g, ' ').trim();
}

function getTag(element) {
  return element.tagName && element.tagName.toLowerCase();
}

function getSelectValue(_ref2) {
  var multiple = _ref2.multiple,
      options = _ref2.options;

  var selectedOptions = _toConsumableArray(options).filter(function (option) {
    return option.selected;
  });

  if (multiple) {
    return _toConsumableArray(selectedOptions).map(function (opt) {
      return opt.value;
    });
  }
  /* istanbul ignore if */


  if (selectedOptions.length === 0) {
    return undefined; // Couldn't make this happen, but just in case
  }

  return selectedOptions[0].value;
}

function getInputValue(inputElement) {
  switch (inputElement.type) {
    case 'number':
      return inputElement.value === '' ? null : Number(inputElement.value);

    case 'checkbox':
      return inputElement.checked;

    default:
      return inputElement.value;
  }
}

function getSingleElementValue(element) {
  /* istanbul ignore if */
  if (!element) {
    return undefined;
  }

  switch (element.tagName.toLowerCase()) {
    case 'input':
      return getInputValue(element);

    case 'select':
      return getSelectValue(element);

    default:
      return element.value;
  }
}

function compareArraysAsSet(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    return (0, _isEqual["default"])(new Set(a), new Set(b));
  }

  return undefined;
}