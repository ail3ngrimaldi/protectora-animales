"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveFormValues = toHaveFormValues;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _jestMatcherUtils = require("jest-matcher-utils");

var _jestDiff = _interopRequireDefault(require("jest-diff"));

var _isEqualWith = _interopRequireDefault(require("lodash/isEqualWith"));

var _uniq = _interopRequireDefault(require("lodash/uniq"));

var _css = _interopRequireDefault(require("css.escape"));

var _utils = require("./utils"); // Returns the combined value of several elements that have the same name
// e.g. radio buttons or groups of checkboxes


function getMultiElementValue(elements) {
  var types = (0, _uniq["default"])(elements.map(function (element) {
    return element.type;
  }));

  if (types.length !== 1) {
    throw new Error('Multiple form elements with the same name must be of the same type');
  }

  switch (types[0]) {
    case 'radio':
      {
        var theChosenOne = elements.find(function (radio) {
          return radio.checked;
        });
        return theChosenOne ? theChosenOne.value : undefined;
      }

    case 'checkbox':
      return elements.filter(function (checkbox) {
        return checkbox.checked;
      }).map(function (checkbox) {
        return checkbox.value;
      });

    default:
      // NOTE: Not even sure this is a valid use case, but just in case...
      return elements.map(function (element) {
        return element.value;
      });
  }
}

function getFormValue(container, name) {
  var elements = _toConsumableArray(container.querySelectorAll("[name=\"".concat((0, _css["default"])(name), "\"]")));
  /* istanbul ignore if */


  if (elements.length === 0) {
    return undefined; // shouldn't happen, but just in case
  }

  switch (elements.length) {
    case 1:
      return (0, _utils.getSingleElementValue)(elements[0]);

    default:
      return getMultiElementValue(elements);
  }
} // Strips the `[]` suffix off a form value name


function getPureName(name) {
  return /\[\]$/.test(name) ? name.slice(0, -2) : name;
}

function getAllFormValues(container) {
  var names = Array.from(container.elements).map(function (element) {
    return element.name;
  });
  return names.reduce(function (obj, name) {
    return (0, _extends2["default"])({}, obj, _defineProperty({}, getPureName(name), getFormValue(container, name)));
  }, {});
}

function toHaveFormValues(formElement, expectedValues) {
  var _this = this;

  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);

  if (!formElement.elements) {
    // TODO: Change condition to use instanceof against the appropriate element classes instead
    throw new Error('toHaveFormValues must be called on a form or a fieldset');
  }

  var formValues = getAllFormValues(formElement);
  return {
    pass: Object.entries(expectedValues).every(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          name = _ref3[0],
          expectedValue = _ref3[1];

      return (0, _isEqualWith["default"])(formValues[name], expectedValue, _utils.compareArraysAsSet);
    }),
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      var matcher = "".concat(_this.isNot ? '.not' : '', ".toHaveFormValues");
      var commonKeyValues = Object.keys(formValues).filter(function (key) {
        return expectedValues.hasOwnProperty(key);
      }).reduce(function (obj, key) {
        return (0, _extends2["default"])({}, obj, _defineProperty({}, key, formValues[key]));
      }, {});
      return [(0, _jestMatcherUtils.matcherHint)(matcher, 'element', ''), "Expected the element ".concat(to, " have form values"), (0, _jestDiff["default"])(expectedValues, commonKeyValues)].join('\n\n');
    }
  };
}