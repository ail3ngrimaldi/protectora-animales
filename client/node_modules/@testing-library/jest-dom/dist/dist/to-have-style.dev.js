"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveStyle = toHaveStyle;

var _jestMatcherUtils = require("jest-matcher-utils");

var _jestDiff = _interopRequireDefault(require("jest-diff"));

var _chalk = _interopRequireDefault(require("chalk"));

var _utils = require("./utils");

function getStyleDeclaration(document, css) {
  var styles = {}; // The next block is necessary to normalize colors

  var copy = document.createElement('div');
  Object.keys(css).forEach(function (property) {
    copy.style[property] = css[property];
    styles[property] = copy.style[property];
  });
  return styles;
}

function isSubset(styles, computedStyle) {
  return Object.entries(styles).every(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        prop = _ref2[0],
        value = _ref2[1];

    return computedStyle.getPropertyValue(prop.toLowerCase()) === value;
  });
}

function printoutStyles(styles) {
  return Object.keys(styles).sort().map(function (prop) {
    return "".concat(prop, ": ").concat(styles[prop], ";");
  }).join('\n');
} // Highlights only style rules that were expected but were not found in the
// received computed styles


function expectedDiff(expected, computedStyles) {
  var received = Array.from(computedStyles).filter(function (prop) {
    return expected[prop];
  }).reduce(function (obj, prop) {
    return Object.assign(obj, _defineProperty({}, prop, computedStyles.getPropertyValue(prop)));
  }, {});
  var diffOutput = (0, _jestDiff["default"])(printoutStyles(expected), printoutStyles(received)); // Remove the "+ Received" annotation because this is a one-way diff

  return diffOutput.replace("".concat(_chalk["default"].red('+ Received'), "\n"), '');
}

function toHaveStyle(htmlElement, css) {
  var _this = this;

  (0, _utils.checkHtmlElement)(htmlElement, toHaveStyle, this);
  var parsedCSS = (0, _utils.parseCSS)(css, toHaveStyle, this);
  var getComputedStyle = htmlElement.ownerDocument.defaultView.getComputedStyle;
  var expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS);
  var received = getComputedStyle(htmlElement);
  return {
    pass: isSubset(expected, received),
    message: function message() {
      var matcher = "".concat(_this.isNot ? '.not' : '', ".toHaveStyle");
      return [(0, _jestMatcherUtils.matcherHint)(matcher, 'element', ''), expectedDiff(expected, received)].join('\n\n');
    }
  };
}