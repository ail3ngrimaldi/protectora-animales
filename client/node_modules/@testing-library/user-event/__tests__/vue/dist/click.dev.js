"use strict";

var _vue = require("@testing-library/vue");

require("@testing-library/jest-dom/extend-expect");

var _src = _interopRequireDefault(require("../../src"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

afterEach(_vue.cleanup);
describe("userEvent.click", function () {
  it.each(["input", "textarea"])("should fire the correct events for <%s>", function (type) {
    var events = [];
    var eventsHandler = jest.fn(function (evt) {
      return events.push(evt.type);
    });

    var _render = (0, _vue.render)({
      render: function render(h) {
        return h(type, {
          attrs: {
            "data-testid": "element"
          },
          on: {
            mouseover: eventsHandler,
            mousemove: eventsHandler,
            mousedown: eventsHandler,
            focus: eventsHandler,
            mouseup: eventsHandler,
            click: eventsHandler
          }
        });
      }
    }),
        getByTestId = _render.getByTestId;

    _src["default"].click(getByTestId("element")); // baseElement is always <body>, si wasAnotherElementFocused is false


    expect(events).toEqual(["mouseover", "mousemove", "mousedown", "focus", "mouseup", "click"]);
  });
  it('should fire the correct events for <input type="checkbox">', function () {
    var events = [];
    var eventsHandler = jest.fn(function (evt) {
      return events.push(evt.type);
    });

    var _render2 = (0, _vue.render)({
      render: function render(h) {
        return h("input", {
          attrs: {
            type: "checkbox",
            "data-testid": "element"
          },
          on: {
            mouseover: eventsHandler,
            mousemove: eventsHandler,
            mousedown: eventsHandler,
            focus: eventsHandler,
            mouseup: eventsHandler,
            click: eventsHandler,
            change: eventsHandler
          }
        });
      }
    }),
        getByTestId = _render2.getByTestId;

    _src["default"].click(getByTestId("element"));

    expect(events).toEqual(["mouseover", "mousemove", "mousedown", "mouseup", "click", "change"]);
    expect(getByTestId("element")).toHaveProperty("checked", true);
  });
  it('should fire the correct events for <input type="checkbox" disabled>', function () {
    var events = [];
    var eventsHandler = jest.fn(function (evt) {
      return events.push(evt.type);
    });

    var _render3 = (0, _vue.render)({
      render: function render(h) {
        return h("input", {
          attrs: {
            type: "checkbox",
            "data-testid": "element",
            disabled: "disabled"
          },
          on: {
            mouseover: eventsHandler,
            mousemove: eventsHandler,
            mousedown: eventsHandler,
            focus: eventsHandler,
            mouseup: eventsHandler,
            click: eventsHandler,
            change: eventsHandler
          }
        });
      }
    }),
        getByTestId = _render3.getByTestId;

    _src["default"].click(getByTestId("element"));

    expect(events).toEqual([]);
    expect(getByTestId("element")).toHaveProperty("checked", false);
  });
  it('should fire the correct events for <input type="radio">', function () {
    var events = [];
    var eventsHandler = jest.fn(function (evt) {
      return events.push(evt.type);
    });

    var _render4 = (0, _vue.render)({
      render: function render(h) {
        return h("input", {
          attrs: {
            type: "radio",
            "data-testid": "element"
          },
          on: {
            mouseover: eventsHandler,
            mousemove: eventsHandler,
            mousedown: eventsHandler,
            focus: eventsHandler,
            mouseup: eventsHandler,
            click: eventsHandler,
            change: eventsHandler
          }
        });
      }
    }),
        getByTestId = _render4.getByTestId;

    _src["default"].click(getByTestId("element"));

    expect(events).toEqual(["mouseover", "mousemove", "mousedown", "mouseup", "click", "change"]);
    expect(getByTestId("element")).toHaveProperty("checked", true);
  });
  it('should fire the correct events for <input type="radio" disabled>', function () {
    var events = [];
    var eventsHandler = jest.fn(function (evt) {
      return events.push(evt.type);
    });

    var _render5 = (0, _vue.render)({
      render: function render(h) {
        return h("input", {
          attrs: {
            type: "radio",
            "data-testid": "element",
            disabled: "disabled"
          },
          on: {
            mouseover: eventsHandler,
            mousemove: eventsHandler,
            mousedown: eventsHandler,
            focus: eventsHandler,
            mouseup: eventsHandler,
            click: eventsHandler,
            change: eventsHandler
          }
        });
      }
    }),
        getByTestId = _render5.getByTestId;

    _src["default"].click(getByTestId("element"));

    expect(events).toEqual([]);
    expect(getByTestId("element")).toHaveProperty("checked", false);
  });
  it("should fire the correct events for <div>", function () {
    var events = [];
    var eventsHandler = jest.fn(function (evt) {
      return events.push(evt.type);
    });

    var _render6 = (0, _vue.render)({
      render: function render(h) {
        return h("div", {
          attrs: {
            "data-testid": "div"
          },
          on: {
            mouseover: eventsHandler,
            mousemove: eventsHandler,
            mousedown: eventsHandler,
            focus: eventsHandler,
            mouseup: eventsHandler,
            click: eventsHandler
          }
        });
      }
    }),
        getByTestId = _render6.getByTestId;

    _src["default"].click(getByTestId("div"));

    expect(events).toEqual(["mouseover", "mousemove", "mousedown", "mouseup", "click"]);
  });
  it("toggles the focus", function () {
    var _render7 = (0, _vue.render)({
      template: "\n      <div>\n        <input data-testid=\"A\" />\n        <input data-testid=\"B\" />\n      </div>"
    }),
        getByTestId = _render7.getByTestId;

    var a = getByTestId("A");
    var b = getByTestId("B");
    expect(a).not.toHaveFocus();
    expect(b).not.toHaveFocus();

    _src["default"].click(a);

    expect(a).toHaveFocus();
    expect(b).not.toHaveFocus();

    _src["default"].click(b);

    expect(a).not.toHaveFocus();
    expect(b).toHaveFocus();
  });
  it.each(["input", "textarea"])("gives focus to <%s> when clicking a <label> with for", function (type) {
    var _render8 = (0, _vue.render)({
      template: "\n        <div>\n          <label data-testid=\"label\" for=\"input\" />\n          <component is=\"".concat(type, "\" data-testid=\"input\" id=\"input\" />\n        </div>")
    }),
        getByTestId = _render8.getByTestId;

    _src["default"].click(getByTestId("label"));

    expect(getByTestId("input")).toHaveFocus();
  });
  it.each(["input", "textarea"])("gives focus to <%s> when clicking a <label> without htmlFor", function (type) {
    var _render9 = (0, _vue.render)({
      template: "\n        <label data-testid=\"label\">\n          My label text\n          <component is=\"".concat(type, "\" data-testid=\"input\" />\n        </label>")
    }),
        getByTestId = _render9.getByTestId;

    _src["default"].click(getByTestId("label"));

    expect(getByTestId("input")).toHaveFocus();
  });
  it.each(["input", "textarea"])("gives focus to <%s> when clicking on an element contained within a <label>", function (type) {
    var _render10 = (0, _vue.render)({
      template: "\n        <div>\n          <label for=\"input\" data-testid=\"label\">Label</Label>\n          <component is=\"".concat(type, "\" id=\"input\" data-testid=\"input\" />\n        </div>")
    }),
        getByText = _render10.getByText,
        getByTestId = _render10.getByTestId;

    _src["default"].click(getByText("Label"));

    expect(getByTestId("input")).toHaveFocus();
  });
  it('checks <input type="checkbox"> when clicking a <label> with htmlFor', function () {
    var _render11 = (0, _vue.render)({
      template: "\n      <div>\n        <label for=\"input\" data-testid=\"label\">\n          Label\n        </label>\n        <input id=\"input\" data-testid=\"input\" type=\"checkbox\" />\n      </div>"
    }),
        getByTestId = _render11.getByTestId;

    expect(getByTestId("input")).toHaveProperty("checked", false);

    _src["default"].click(getByTestId("label"));

    expect(getByTestId("input")).toHaveProperty("checked", true);
  });
  it('checks <input type="checkbox"> when clicking a <label> without htmlFor', function () {
    var _render12 = (0, _vue.render)({
      template: "\n      <div>\n        <label data-testid=\"label\">\n          Label\n          <input id=\"input\" data-testid=\"input\" type=\"checkbox\" />\n        </label>\n      </div>"
    }),
        getByTestId = _render12.getByTestId;

    expect(getByTestId("input")).toHaveProperty("checked", false);

    _src["default"].click(getByTestId("label"));

    expect(getByTestId("input")).toHaveProperty("checked", true);
  });
  it("should submit a form when clicking on a <button>", function () {
    var _render13 = (0, _vue.render)({
      template: "\n      <form @submit=\"$emit('submit')\">\n        <button>Submit</button>\n      </form>"
    }),
        getByText = _render13.getByText,
        emitted = _render13.emitted;

    _src["default"].click(getByText("Submit"));

    expect(emitted().submit).toHaveLength(1);
  });
  it('should not submit a form when clicking on a <button type="button">', function () {
    var _render14 = (0, _vue.render)({
      template: "\n      <form @submit=\"$emit('submit')\">\n        <button type=\"button\">Submit</button>\n      </form>"
    }),
        getByText = _render14.getByText,
        emitted = _render14.emitted;

    _src["default"].click(getByText("Submit"));

    expect(emitted()).toEqual({});
  });
});