"use strict";

var _vue = require("@testing-library/vue");

require("@testing-library/jest-dom/extend-expect");

var _src = _interopRequireDefault(require("../../src"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

afterEach(_vue.cleanup);
describe("userEvent.selectOptions", function () {
  it.each(["select", "select multiple"])("should fire the correct events for <%s>", function (type) {
    var events = [];
    var eventsHandler = jest.fn(function (evt) {
      return events.push(evt.type);
    });
    var multiple = type === "select multiple";
    var eventHandlers = {
      mouseover: eventsHandler,
      mousemove: eventsHandler,
      mousedown: eventsHandler,
      focus: eventsHandler,
      mouseup: eventsHandler,
      click: eventsHandler
    };

    var _render = (0, _vue.render)({
      render: function render(h) {
        return h("select", {
          attrs: _objectSpread({
            "data-testid": "element"
          }, multiple && {
            multiple: true
          }),
          on: eventHandlers
        }, [h("option", {
          attrs: {
            value: "1"
          }
        }, "1"), h("option", {
          attrs: {
            value: "2"
          }
        }, "2"), h("option", {
          attrs: {
            value: "3"
          }
        }, "3")]);
      }
    }),
        getByTestId = _render.getByTestId;

    _src["default"].selectOptions(getByTestId("element"), "1");

    expect(events).toEqual(["mouseover", "mousemove", "mousedown", "focus", "mouseup", "click", "mouseover", // The events repeat because we click on the child OPTION too
    "mousemove", // But these specifically are the events bubbling up to the <select>
    "mousedown", // "focus", // Focus event isn't being emitted?
    "mouseup", "click"]);
  });
  it("should fire the correct events on selected OPTION child with <select>", function () {
    function handleEvent(evt) {
      var optValue = parseInt(evt.target.value);
      events[optValue] = [].concat(_toConsumableArray(events[optValue] || []), [evt.type]);
    }

    var events = [];
    var eventsHandler = jest.fn(handleEvent);
    var eventHandlers = {
      mouseover: eventsHandler,
      mousemove: eventsHandler,
      mousedown: eventsHandler,
      focus: eventsHandler,
      mouseup: eventsHandler,
      click: eventsHandler
    };

    var _render2 = (0, _vue.render)({
      render: function render(h) {
        return h("select", {
          attrs: {
            "data-testid": "element"
          }
        }, [h("option", {
          attrs: {
            value: "1"
          },
          on: eventHandlers
        }, "1"), h("option", {
          attrs: {
            value: "2"
          },
          on: eventHandlers
        }, "2"), h("option", {
          attrs: {
            value: "3"
          },
          on: eventHandlers
        }, "3")]);
      }
    }),
        getByTestId = _render2.getByTestId;

    _src["default"].selectOptions(getByTestId("element"), ["2"]);

    expect(events[1]).toBe(undefined);
    expect(events[3]).toBe(undefined);
    expect(events[2]).toEqual(["mouseover", "mousemove", "mousedown", "focus", "mouseup", "click"]);
  });
  it("should fire the correct events on selected OPTION children with <select multiple>", function () {
    function handleEvent(evt) {
      var optValue = parseInt(evt.target.value);
      events[optValue] = [].concat(_toConsumableArray(events[optValue] || []), [evt.type]);
    }

    var events = [];
    var eventsHandler = jest.fn(handleEvent);
    var eventHandlers = {
      mouseover: eventsHandler,
      mousemove: eventsHandler,
      mousedown: eventsHandler,
      focus: eventsHandler,
      mouseup: eventsHandler,
      click: eventsHandler
    };

    var _render3 = (0, _vue.render)({
      render: function render(h) {
        return h("select", {
          attrs: {
            "data-testid": "element",
            multiple: true
          }
        }, [h("option", {
          attrs: {
            value: "1"
          },
          on: eventHandlers
        }, "1"), h("option", {
          attrs: {
            value: "2"
          },
          on: eventHandlers
        }, "2"), h("option", {
          attrs: {
            value: "3"
          },
          on: eventHandlers
        }, "3")]);
      }
    }),
        getByTestId = _render3.getByTestId;

    _src["default"].selectOptions(getByTestId("element"), ["1", "3"]);

    expect(events[2]).toBe(undefined);
    expect(events[1]).toEqual(["mouseover", "mousemove", "mousedown", "focus", "mouseup", "click"]);
    expect(events[3]).toEqual(["mouseover", "mousemove", "mousedown", "focus", "mouseup", "click"]);
  });
  it("sets the selected prop on the selected OPTION", function () {
    var _render4 = (0, _vue.render)({
      template: "\n        <form>\n          <select data-testid=\"element\" multiple>\n            <option value=\"1\" data-testid=\"val1\">1</option>\n            <option value=\"2\" data-testid=\"val2\">2</option>\n            <option value=\"3\" data-testid=\"val3\">3</option>\n          </select>\n        </form>"
    }),
        getByTestId = _render4.getByTestId;

    _src["default"].selectOptions(getByTestId("element"), ["1", "3"]);

    expect(getByTestId("val1").selected).toBe(true);
    expect(getByTestId("val2").selected).toBe(false);
    expect(getByTestId("val3").selected).toBe(true);
  });
  it("sets the selected prop on the selected OPTION using htmlFor", function () {
    var _render5 = (0, _vue.render)({
      template: "\n        <form>\n          <label htmlFor=\"select\">Example Select</label>\n          <select id=\"select\" data-testid=\"element\">\n            <option data-testid=\"val1\" value=\"1\">1</option>\n            <option data-testid=\"val2\" value=\"2\">2</option>\n            <option data-testid=\"val3\" value=\"3\">3</option>\n          </select>\n        </form>"
    }),
        getByTestId = _render5.getByTestId;

    _src["default"].selectOptions(getByTestId("element"), "2");

    expect(getByTestId("val1").selected).toBe(false);
    expect(getByTestId("val2").selected).toBe(true);
    expect(getByTestId("val3").selected).toBe(false);
  });
  it("sets the selected prop on the selected OPTION using nested SELECT", function () {
    var _render6 = (0, _vue.render)({
      template: "\n        <form>\n          <label>\n            Example Select\n            <select data-testid=\"element\">\n              <option data-testid=\"val1\" value=\"1\">1</option>\n              <option data-testid=\"val2\" value=\"2\">2</option>\n              <option data-testid=\"val3\" value=\"3\">3</option>\n            </select>\n          </label>\n        </form>"
    }),
        getByTestId = _render6.getByTestId;

    _src["default"].selectOptions(getByTestId("element"), "2");

    expect(getByTestId("val1").selected).toBe(false);
    expect(getByTestId("val2").selected).toBe(true);
    expect(getByTestId("val3").selected).toBe(false);
  });
});