'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CoaParam = require('./coaparam'),
    chalk = require('chalk');
/**
 * Argument
 *
 * Unnamed entity. From command line arguments passed as list of unnamed values.
 *
 * @class Arg
 * @extends CoaParam
 */


module.exports =
/*#__PURE__*/
function (_CoaParam) {
  _inherits(Arg, _CoaParam);

  /**
   * @constructs
   * @param {COA.Cmd} cmd - parent command
   */
  function Arg(cmd) {
    var _this;

    _classCallCheck(this, Arg);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Arg).call(this, cmd));

    _this._cmd._args.push(_assertThisInitialized(_this));

    return _this;
  }

  _createClass(Arg, [{
    key: "_saveVal",
    value: function _saveVal(args, val) {
      this._val && (val = this._val(val));
      var name = this._name;
      this._arr ? (args[name] || (args[name] = [])).push(val) : args[name] = val;
      return val;
    }
  }, {
    key: "_parse",
    value: function _parse(arg, args) {
      return this._saveVal(args, arg);
    }
  }, {
    key: "_checkParsed",
    value: function _checkParsed(opts, args) {
      return !args.hasOwnProperty(this._name);
    }
  }, {
    key: "_usage",
    value: function _usage() {
      var res = [];
      res.push(chalk.magentaBright(this._name.toUpperCase()), ' : ', this._title);
      this._req && res.push(' ', chalk.redBright('(required)'));
      return res.join('');
    }
  }, {
    key: "_requiredText",
    value: function _requiredText() {
      return "Missing required argument:\n  ".concat(this._usage());
    }
  }]);

  return Arg;
}(CoaParam);