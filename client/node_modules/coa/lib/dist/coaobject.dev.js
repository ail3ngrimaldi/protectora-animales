/* eslint-disable class-methods-use-this */
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Q = require('q');
/**
 * COA Object
 *
 * Base class for all COA-related objects
 *
 * --------|-----|-----|-----
 *         | Cmd | Opt | Arg
 * --------|-----|-----|-----
 *  name   | ✓   | ✓   | ✓
 *  title  | ✓   | ✓   | ✓
 *  comp   | ✓   | ✓   | ✓
 *  reject | ✓   | ✓   | ✓
 *  end    | ✓   | ✓   | ✓
 *  apply  | ✓   | ✓   | ✓
 *
 * @class CoaObject
 */


module.exports =
/*#__PURE__*/
function () {
  function CoaObject(cmd) {
    _classCallCheck(this, CoaObject);

    this._cmd = cmd;
    this._name = null;
    this._title = null;
    this._comp = null;
  }
  /**
   * Set a canonical identifier to be used anywhere in the API.
   *
   * @param {String} name - command, option or argument name
   * @returns {COA.CoaObject} - this instance (for chainability)
   */


  _createClass(CoaObject, [{
    key: "name",
    value: function name(_name) {
      this._name = _name;
      return this;
    }
    /**
     * Set a long description to be used anywhere in text messages.
     * @param {String} title - human readable entity title
     * @returns {COA.CoaObject} - this instance (for chainability)
     */

  }, {
    key: "title",
    value: function title(_title) {
      this._title = _title;
      return this;
    }
    /**
     * Set custom additional completion for current object.
     *
     * @param {Function} comp - completion generation function,
     *         invoked in the context of object instance.
     *         Accepts parameters:
     *                 - {Object} opts - completion options
     *         It can return promise or any other value threated as a result.
     * @returns {COA.CoaObject} - this instance (for chainability)
     */

  }, {
    key: "comp",
    value: function comp(_comp) {
      this._comp = _comp;
      return this;
    }
    /**
     * Apply function with arguments in a context of object instance.
     *
     * @param {Function} fn - body
     * @param {Array.<*>} args... - arguments
     * @returns {COA.CoaObject} - this instance (for chainability)
     */

  }, {
    key: "apply",
    value: function apply(fn) {
      arguments.length > 1 ? fn.apply(this, [].slice.call(arguments, 1)) : fn.call(this);
      return this;
    }
    /**
     * Return reject of actions results promise with error code.
     * Use in .act() for return with error.
     * @param {Object} reason - reject reason
     *         You can customize toString() method and exitCode property
     *         of reason object.
     * @returns {Q.promise} rejected promise
     */

  }, {
    key: "reject",
    value: function reject(reason) {
      return Q.reject(reason);
    }
    /**
     * Finish chain for current subcommand and return parent command instance.
     * @returns {COA.Cmd} parent command
     */

  }, {
    key: "end",
    value: function end() {
      return this._cmd;
    }
  }]);

  return CoaObject;
}();