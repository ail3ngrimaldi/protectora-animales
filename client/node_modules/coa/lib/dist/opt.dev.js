'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Q = require('q'),
    CoaParam = require('./coaparam'),
    chalk = require('chalk');
/**
 * Option
 *
 * Named entity. Options may have short and long keys for use from command line.
 *
 * @namespace
 * @class Opt
 * @extends CoaParam
 */


module.exports =
/*#__PURE__*/
function (_CoaParam) {
  _inherits(Opt, _CoaParam);

  /**
   * @constructs
   * @param {COA.Cmd} cmd - parent command
   */
  function Opt(cmd) {
    var _this;

    _classCallCheck(this, Opt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Opt).call(this, cmd));
    _this._short = null;
    _this._long = null;
    _this._flag = false;
    _this._only = false;

    _this._cmd._opts.push(_assertThisInitialized(_this));

    return _this;
  }
  /**
   * Set a short key for option to be used with one hyphen from command line.
   *
   * @param {String} short - short name
   * @returns {COA.Opt} - this instance (for chainability)
   */


  _createClass(Opt, [{
    key: "short",
    value: function short(_short) {
      this._short = _short;
      this._cmd._optsByKey["-".concat(_short)] = this;
      return this;
    }
    /**
     * Set a short key for option to be used with double hyphens from command line.
     *
     * @param {String} long - long name
     * @returns {COA.Opt} - this instance (for chainability)
     */

  }, {
    key: "long",
    value: function long(_long) {
      this._long = _long;
      this._cmd._optsByKey["--".concat(_long)] = this;
      return this;
    }
    /**
     * Make an option boolean, i.e. option without value.
     *
     * @returns {COA.Opt} - this instance (for chainability)
     */

  }, {
    key: "flag",
    value: function flag() {
      this._flag = true;
      return this;
    }
    /**
     * Makes an option to act as a command,
     * i.e. program will exit just after option action.
     *
     * @returns {COA.Opt} - this instance (for chainability)
     */

  }, {
    key: "only",
    value: function only() {
      this._only = true;
      return this;
    }
    /**
     * Add action for current option command.
     * This action is performed if the current option
     * is present in parsed options (with any value).
     *
     * @param {Function} act - action function,
     *         invoked in the context of command instance
     *         and has the parameters:
     *                 - {Object} opts - parsed options
     *                 - {Array} args - parsed arguments
     *                 - {Object} res - actions result accumulator
     *         It can return rejected promise by Cmd.reject (in case of error)
     *         or any other value treated as result.
     * @returns {COA.Opt} - this instance (for chainability)
     */

  }, {
    key: "act",
    value: function act(_act) {
      // Need function here for arguments
      var opt = this;

      this._cmd.act(function (opts) {
        var _this2 = this;

        if (!opts.hasOwnProperty(opt._name)) return;

        var res = _act.apply(this, arguments);

        if (!opt._only) return res;
        return Q.when(res, function (out) {
          return _this2.reject({
            toString: function toString() {
              return out.toString();
            },
            exitCode: 0
          });
        });
      });

      return this;
    }
  }, {
    key: "_saveVal",
    value: function _saveVal(opts, val) {
      this._val && (val = this._val(val));
      var name = this._name;
      this._arr ? (opts[name] || (opts[name] = [])).push(val) : opts[name] = val;
      return val;
    }
  }, {
    key: "_parse",
    value: function _parse(argv, opts) {
      return this._saveVal(opts, this._flag ? true : argv.shift());
    }
  }, {
    key: "_checkParsed",
    value: function _checkParsed(opts) {
      return !opts.hasOwnProperty(this._name);
    }
  }, {
    key: "_usage",
    value: function _usage() {
      var res = [],
          nameStr = this._name.toUpperCase();

      if (this._short) {
        res.push('-', chalk.greenBright(this._short));
        this._flag || res.push(' ' + nameStr);
        res.push(', ');
      }

      if (this._long) {
        res.push('--', chalk.green(this._long));
        this._flag || res.push('=' + nameStr);
      }

      res.push(' : ', this._title);
      this._req && res.push(' ', chalk.redBright('(required)'));
      return res.join('');
    }
  }, {
    key: "_requiredText",
    value: function _requiredText() {
      return "Missing required option:\n  ".concat(this._usage());
    }
  }]);

  return Opt;
}(CoaParam);