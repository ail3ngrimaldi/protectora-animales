'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('fs');

var CoaObject = require('./coaobject');
/**
 * COA Parameter
 *
 * Base class for options and arguments
 *
 * --------|-----|-----|-----
 *         | Cmd | Opt | Arg
 * --------|-----|-----|-----
 *  arr    |     | ✓   | ✓
 *  req    |     | ✓   | ✓
 *  val    |     | ✓   | ✓
 *  def    |     | ✓   | ✓
 *  input  |     | ✓   | ✓
 *  output |     | ✓   | ✓
 *
 * @class CoaParam
 * @extends CoaObject
 */


module.exports =
/*#__PURE__*/
function (_CoaObject) {
  _inherits(CoaParam, _CoaObject);

  function CoaParam(cmd) {
    var _this;

    _classCallCheck(this, CoaParam);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoaParam).call(this, cmd));
    _this._arr = false;
    _this._req = false;
    _this._val = undefined;
    _this._def = undefined;
    return _this;
  }
  /**
   * Makes a param accepts multiple values.
   * Otherwise, the value will be used by the latter passed.
   *
   * @returns {COA.CoaParam} - this instance (for chainability)
   */


  _createClass(CoaParam, [{
    key: "arr",
    value: function arr() {
      this._arr = true;
      return this;
    }
    /**
     * Makes a param required.
     *
     * @returns {COA.CoaParam} - this instance (for chainability)
     */

  }, {
    key: "req",
    value: function req() {
      this._req = true;
      return this;
    }
    /**
     * Set a validation (or value) function for param.
     * Value from command line passes through before becoming available from API.
     * Using for validation and convertion simple types to any values.
     *
     * @param {Function} val - validating function,
     *         invoked in the context of option instance
     *         and has one parameter with value from command line.
     * @returns {COA.CoaParam} - this instance (for chainability)
     */

  }, {
    key: "val",
    value: function val(_val) {
      this._val = _val;
      return this;
    }
    /**
     * Set a default value for param.
     * Default value passed through validation function as ordinary value.
     *
     * @param {*} def - default value of function generator
     * @returns {COA.CoaParam} - this instance (for chainability)
     */

  }, {
    key: "def",
    value: function def(_def) {
      this._def = _def;
      return this;
    }
    /**
     * Make option value inputting stream.
     * It's add useful validation and shortcut for STDIN.
     *
     * @returns {COA.CoaParam} - this instance (for chainability)
     */

  }, {
    key: "input",
    value: function input() {
      process.stdin.pause();
      return this.def(process.stdin).val(function (v) {
        if (typeof v !== 'string') return v;
        if (v === '-') return process.stdin;
        var s = fs.createReadStream(v, {
          encoding: 'utf8'
        });
        s.pause();
        return s;
      });
    }
    /**
     * Make option value outputing stream.
     * It's add useful validation and shortcut for STDOUT.
     *
     * @returns {COA.CoaParam} - this instance (for chainability)
     */

  }, {
    key: "output",
    value: function output() {
      return this.def(process.stdout).val(function (v) {
        if (typeof v !== 'string') return v;
        if (v === '-') return process.stdout;
        return fs.createWriteStream(v, {
          encoding: 'utf8'
        });
      });
    }
  }]);

  return CoaParam;
}(CoaObject);