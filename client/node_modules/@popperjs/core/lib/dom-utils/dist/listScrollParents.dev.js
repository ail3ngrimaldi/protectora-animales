"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = listScrollParents;

var _getScrollParent = _interopRequireDefault(require("./getScrollParent.js"));

var _getParentNode = _interopRequireDefault(require("./getParentNode.js"));

var _getNodeName = _interopRequireDefault(require("./getNodeName.js"));

var _getWindow = _interopRequireDefault(require("./getWindow.js"));

var _isScrollParent = _interopRequireDefault(require("./isScrollParent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the 
reference element's position.
*/
function listScrollParents(element, list) {
  if (list === void 0) {
    list = [];
  }

  var scrollParent = (0, _getScrollParent["default"])(element);
  var isBody = (0, _getNodeName["default"])(scrollParent) === 'body';
  var win = (0, _getWindow["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], (0, _isScrollParent["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents((0, _getParentNode["default"])(target)));
}