"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = loader;

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _postcss = _interopRequireDefault(require("postcss"));

var _package = _interopRequireDefault(require("postcss/package.json"));

var _loaderUtils = require("loader-utils");

var _options = _interopRequireDefault(require("./options.json"));

var _plugins = require("./plugins");

var _utils = require("./utils");

var _Warning = _interopRequireDefault(require("./Warning"));

var _CssSyntaxError = _interopRequireDefault(require("./CssSyntaxError"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/


function loader(content, map, meta) {
  var _this = this;

  var options = (0, _loaderUtils.getOptions)(this) || {};
  (0, _schemaUtils["default"])(_options["default"], options, {
    name: 'CSS Loader',
    baseDataPath: 'options'
  });
  var callback = this.async();
  var sourceMap = options.sourceMap || false;
  var plugins = [];

  if (options.modules) {
    plugins.push.apply(plugins, _toConsumableArray((0, _utils.getModulesPlugins)(options, this)));
  }

  var exportType = options.onlyLocals ? 'locals' : 'full';
  plugins.push((0, _plugins.icssParser)());

  if (options["import"] !== false && exportType === 'full') {
    plugins.push((0, _plugins.importParser)({
      filter: (0, _utils.getFilter)(options["import"], this.resourcePath)
    }));
  }

  if (options.url !== false && exportType === 'full') {
    plugins.push((0, _plugins.urlParser)({
      filter: (0, _utils.getFilter)(options.url, this.resourcePath, function (value) {
        return (0, _loaderUtils.isUrlRequest)(value);
      })
    }));
  } // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing


  if (meta) {
    var ast = meta.ast;

    if (ast && ast.type === 'postcss' && ast.version === _package["default"].version) {
      // eslint-disable-next-line no-param-reassign
      content = ast.root;
    }
  }

  (0, _postcss["default"])(plugins).process(content, {
    from: this.remainingRequest.split('!').pop(),
    to: this.currentRequest.split('!').pop(),
    map: options.sourceMap ? {
      // Some loaders (example `"postcss-loader": "1.x.x"`) always generates source map, we should remove it
      prev: sourceMap && map ? (0, _utils.normalizeSourceMap)(map) : null,
      inline: false,
      annotation: false
    } : false
  }).then(function (result) {
    result.warnings().forEach(function (warning) {
      return _this.emitWarning(new _Warning["default"](warning));
    });
    var imports = [];
    var exports = [];
    var replacers = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = result.messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var message = _step.value;

        // eslint-disable-next-line default-case
        switch (message.type) {
          case 'import':
            imports.push(message.value);
            break;

          case 'export':
            exports.push(message.value);
            break;

          case 'replacer':
            replacers.push(message.value);
            break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var importLoaders = options.importLoaders,
        localsConvention = options.localsConvention;
    var esModule = typeof options.esModule !== 'undefined' ? options.esModule : false;
    var importCode = (0, _utils.getImportCode)(_this, imports, exportType, sourceMap, importLoaders, esModule);
    var moduleCode = (0, _utils.getModuleCode)(_this, result, exportType, sourceMap, replacers);
    var exportCode = (0, _utils.getExportCode)(_this, exports, exportType, replacers, localsConvention, esModule);
    return callback(null, [importCode, moduleCode, exportCode].join(''));
  })["catch"](function (error) {
    callback(error.name === 'CssSyntaxError' ? new _CssSyntaxError["default"](error) : error);
  });
}