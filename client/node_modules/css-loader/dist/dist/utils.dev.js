"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeUrl = normalizeUrl;
exports.getFilter = getFilter;
exports.getModulesPlugins = getModulesPlugins;
exports.normalizeSourceMap = normalizeSourceMap;
exports.getImportCode = getImportCode;
exports.getModuleCode = getModuleCode;
exports.getExportCode = getExportCode;

var _path = _interopRequireDefault(require("path"));

var _loaderUtils = _interopRequireWildcard(require("loader-utils"));

var _normalizePath = _interopRequireDefault(require("normalize-path"));

var _cssesc = _interopRequireDefault(require("cssesc"));

var _postcssModulesValues = _interopRequireDefault(require("postcss-modules-values"));

var _postcssModulesLocalByDefault = _interopRequireDefault(require("postcss-modules-local-by-default"));

var _postcssModulesExtractImports = _interopRequireDefault(require("postcss-modules-extract-imports"));

var _postcssModulesScope = _interopRequireDefault(require("postcss-modules-scope"));

var _camelcase = _interopRequireDefault(require("camelcase"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/


var whitespace = '[\\x20\\t\\r\\n\\f]';
var unescapeRegExp = new RegExp("\\\\([\\da-f]{1,6}".concat(whitespace, "?|(").concat(whitespace, ")|.)"), 'ig');

function unescape(str) {
  return str.replace(unescapeRegExp, function (_, escaped, escapedWhitespace) {
    var high = "0x".concat(escaped) - 0x10000;
    /* eslint-disable line-comment-position */
    // NaN means non-codepoint
    // Workaround erroneous numeric interpretation of +"0x"
    // eslint-disable-next-line no-self-compare

    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
    // eslint-disable-next-line no-bitwise
    String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);
    /* eslint-enable line-comment-position */
  });
} // eslint-disable-next-line no-control-regex


var filenameReservedRegex = /[<>:"/\\|?*\x00-\x1F]/g; // eslint-disable-next-line no-control-regex

var reControlChars = /[\u0000-\u001f\u0080-\u009f]/g;
var reRelativePath = /^\.+/;

function getLocalIdent(loaderContext, localIdentName, localName, options) {
  if (!options.context) {
    // eslint-disable-next-line no-param-reassign
    options.context = loaderContext.rootContext;
  }

  var request = (0, _normalizePath["default"])(_path["default"].relative(options.context || '', loaderContext.resourcePath)); // eslint-disable-next-line no-param-reassign

  options.content = "".concat(options.hashPrefix + request, "+").concat(unescape(localName)); // Using `[path]` placeholder outputs `/` we need escape their
  // Also directories can contains invalid characters for css we need escape their too

  return (0, _cssesc["default"])(_loaderUtils["default"].interpolateName(loaderContext, localIdentName, options) // For `[hash]` placeholder
  .replace(/^((-?[0-9])|--)/, '_$1').replace(filenameReservedRegex, '-').replace(reControlChars, '-').replace(reRelativePath, '-').replace(/\./g, '-'), {
    isIdentifier: true
  }).replace(/\\\[local\\\]/gi, localName);
}

function normalizeUrl(url, isStringValue) {
  var normalizedUrl = url;

  if (isStringValue && /\\[\n]/.test(normalizedUrl)) {
    normalizedUrl = normalizedUrl.replace(/\\[\n]/g, '');
  }

  return (0, _loaderUtils.urlToRequest)(decodeURIComponent(unescape(normalizedUrl)));
}

function getFilter(filter, resourcePath) {
  var defaultFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return function (item) {
    if (defaultFilter && !defaultFilter(item)) {
      return false;
    }

    if (typeof filter === 'function') {
      return filter(item, resourcePath);
    }

    return true;
  };
}

function getModulesPlugins(options, loaderContext) {
  var modulesOptions = {
    mode: 'local',
    localIdentName: '[hash:base64]',
    getLocalIdent: getLocalIdent,
    hashPrefix: '',
    localIdentRegExp: null
  };

  if (typeof options.modules === 'boolean' || typeof options.modules === 'string') {
    modulesOptions.mode = typeof options.modules === 'string' ? options.modules : 'local';
  } else {
    modulesOptions = Object.assign({}, modulesOptions, options.modules);
  }

  return [_postcssModulesValues["default"], (0, _postcssModulesLocalByDefault["default"])({
    mode: modulesOptions.mode
  }), (0, _postcssModulesExtractImports["default"])(), (0, _postcssModulesScope["default"])({
    generateScopedName: function generateScopedName(exportName) {
      var localIdent = modulesOptions.getLocalIdent(loaderContext, modulesOptions.localIdentName, exportName, {
        context: modulesOptions.context,
        hashPrefix: modulesOptions.hashPrefix,
        regExp: modulesOptions.localIdentRegExp
      });

      if (!localIdent) {
        localIdent = getLocalIdent(loaderContext, modulesOptions.localIdentName, exportName, {
          context: modulesOptions.context,
          hashPrefix: modulesOptions.hashPrefix,
          regExp: modulesOptions.localIdentRegExp
        });
      }

      return localIdent;
    }
  })];
}

function normalizeSourceMap(map) {
  var newMap = map; // Some loader emit source map as string
  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.

  if (typeof newMap === 'string') {
    newMap = JSON.parse(newMap);
  } // Source maps should use forward slash because it is URLs (https://github.com/mozilla/source-map/issues/91)
  // We should normalize path because previous loaders like `sass-loader` using backslash when generate source map


  if (newMap.file) {
    newMap.file = (0, _normalizePath["default"])(newMap.file);
  }

  if (newMap.sourceRoot) {
    newMap.sourceRoot = (0, _normalizePath["default"])(newMap.sourceRoot);
  }

  if (newMap.sources) {
    newMap.sources = newMap.sources.map(function (source) {
      return (0, _normalizePath["default"])(source);
    });
  }

  return newMap;
}

function getImportPrefix(loaderContext, importLoaders) {
  if (importLoaders === false) {
    return '';
  }

  var numberImportedLoaders = parseInt(importLoaders, 10) || 0;
  var loadersRequest = loaderContext.loaders.slice(loaderContext.loaderIndex, loaderContext.loaderIndex + 1 + numberImportedLoaders).map(function (x) {
    return x.request;
  }).join('!');
  return "-!".concat(loadersRequest, "!");
}

function getImportCode(loaderContext, imports, exportType, sourceMap, importLoaders, esModule) {
  var importItems = [];
  var codeItems = [];
  var atRuleImportNames = new Map();
  var urlImportNames = new Map();
  var importPrefix;

  if (exportType === 'full') {
    importItems.push(esModule ? "import ___CSS_LOADER_API_IMPORT___ from ".concat((0, _loaderUtils.stringifyRequest)(loaderContext, require.resolve('./runtime/api')), ";") : "var ___CSS_LOADER_API_IMPORT___ = require(".concat((0, _loaderUtils.stringifyRequest)(loaderContext, require.resolve('./runtime/api')), ");"));
    codeItems.push(esModule ? "var exports = ___CSS_LOADER_API_IMPORT___(".concat(sourceMap, ");") : "exports = ___CSS_LOADER_API_IMPORT___(".concat(sourceMap, ");"));
  }

  imports.forEach(function (item) {
    // eslint-disable-next-line default-case
    switch (item.type) {
      case '@import':
        {
          var url = item.url,
              media = item.media;
          var preparedMedia = media ? ", ".concat(JSON.stringify(media)) : '';

          if (!(0, _loaderUtils.isUrlRequest)(url)) {
            codeItems.push("exports.push([module.id, ".concat(JSON.stringify("@import url(".concat(url, ");"))).concat(preparedMedia, "]);"));
            return;
          }

          var importName = atRuleImportNames.get(url);

          if (!importName) {
            if (!importPrefix) {
              importPrefix = getImportPrefix(loaderContext, importLoaders);
            }

            importName = "___CSS_LOADER_AT_RULE_IMPORT_".concat(atRuleImportNames.size, "___");
            importItems.push(esModule ? "import ".concat(importName, " from ").concat((0, _loaderUtils.stringifyRequest)(loaderContext, importPrefix + url), ";") : "var ".concat(importName, " = require(").concat((0, _loaderUtils.stringifyRequest)(loaderContext, importPrefix + url), ");"));
            atRuleImportNames.set(url, importName);
          }

          codeItems.push("exports.i(".concat(importName).concat(preparedMedia, ");"));
        }
        break;

      case 'url':
        {
          if (urlImportNames.size === 0) {
            importItems.push(esModule ? "import ___CSS_LOADER_GET_URL_IMPORT___ from ".concat((0, _loaderUtils.stringifyRequest)(loaderContext, require.resolve('./runtime/getUrl.js')), ";") : "var ___CSS_LOADER_GET_URL_IMPORT___ = require(".concat((0, _loaderUtils.stringifyRequest)(loaderContext, require.resolve('./runtime/getUrl.js')), ");"));
          }

          var replacementName = item.replacementName,
              _url = item.url,
              hash = item.hash,
              needQuotes = item.needQuotes;

          var _importName = urlImportNames.get(_url);

          if (!_importName) {
            _importName = "___CSS_LOADER_URL_IMPORT_".concat(urlImportNames.size, "___");
            importItems.push(esModule ? "import ".concat(_importName, " from ").concat((0, _loaderUtils.stringifyRequest)(loaderContext, _url), ";") : "var ".concat(_importName, " = require(").concat((0, _loaderUtils.stringifyRequest)(loaderContext, _url), ");"));
            urlImportNames.set(_url, _importName);
          }

          var getUrlOptions = [].concat(hash ? ["hash: ".concat(JSON.stringify(hash))] : []).concat(needQuotes ? 'needQuotes: true' : []);
          var preparedOptions = getUrlOptions.length > 0 ? ", { ".concat(getUrlOptions.join(', '), " }") : '';
          codeItems.push("var ".concat(replacementName, " = ___CSS_LOADER_GET_URL_IMPORT___(").concat(_importName).concat(preparedOptions, ");"));
        }
        break;

      case 'icss-import':
        {
          var _importName2 = item.importName,
              _url2 = item.url,
              _media = item.media;

          var _preparedMedia = _media ? ", ".concat(JSON.stringify(_media)) : ', ""';

          if (!importPrefix) {
            importPrefix = getImportPrefix(loaderContext, importLoaders);
          }

          importItems.push(esModule ? "import ".concat(_importName2, " from ").concat((0, _loaderUtils.stringifyRequest)(loaderContext, importPrefix + _url2), ";") : "var ".concat(_importName2, " = require(").concat((0, _loaderUtils.stringifyRequest)(loaderContext, importPrefix + _url2), ");"));

          if (exportType === 'full') {
            codeItems.push("exports.i(".concat(_importName2).concat(_preparedMedia, ", true);"));
          }
        }
        break;
    }
  });
  var items = importItems.concat(codeItems);
  return items.length > 0 ? "// Imports\n".concat(items.join('\n'), "\n") : '';
}

function getModuleCode(loaderContext, result, exportType, sourceMap, replacers) {
  if (exportType !== 'full') {
    return '';
  }

  var css = result.css,
      map = result.map;
  var sourceMapValue = sourceMap && map ? ",".concat(map) : '';
  var cssCode = JSON.stringify(css);
  replacers.forEach(function (replacer) {
    var type = replacer.type,
        replacementName = replacer.replacementName;

    if (type === 'url') {
      cssCode = cssCode.replace(new RegExp(replacementName, 'g'), function () {
        return "\" + ".concat(replacementName, " + \"");
      });
    }

    if (type === 'icss-import') {
      var importName = replacer.importName,
          localName = replacer.localName;
      cssCode = cssCode.replace(new RegExp(replacementName, 'g'), function () {
        return "\" + ".concat(importName, ".locals[").concat(JSON.stringify(localName), "] + \"");
      });
    }
  });
  return "// Module\nexports.push([module.id, ".concat(cssCode, ", \"\"").concat(sourceMapValue, "]);\n");
}

function dashesCamelCase(str) {
  return str.replace(/-+(\w)/g, function (match, firstLetter) {
    return firstLetter.toUpperCase();
  });
}

function getExportCode(loaderContext, exports, exportType, replacers, localsConvention, esModule) {
  var exportItems = [];
  var exportLocalsCode;

  if (exports.length > 0) {
    var exportLocals = [];

    var addExportedLocal = function addExportedLocal(name, value) {
      exportLocals.push("\t".concat(JSON.stringify(name), ": ").concat(JSON.stringify(value)));
    };

    exports.forEach(function (item) {
      var name = item.name,
          value = item.value;

      switch (localsConvention) {
        case 'camelCase':
          {
            addExportedLocal(name, value);
            var modifiedName = (0, _camelcase["default"])(name);

            if (modifiedName !== name) {
              addExportedLocal(modifiedName, value);
            }

            break;
          }

        case 'camelCaseOnly':
          {
            addExportedLocal((0, _camelcase["default"])(name), value);
            break;
          }

        case 'dashes':
          {
            addExportedLocal(name, value);

            var _modifiedName = dashesCamelCase(name);

            if (_modifiedName !== name) {
              addExportedLocal(_modifiedName, value);
            }

            break;
          }

        case 'dashesOnly':
          {
            addExportedLocal(dashesCamelCase(name), value);
            break;
          }

        case 'asIs':
        default:
          addExportedLocal(name, value);
          break;
      }
    });
    exportLocalsCode = exportLocals.join(',\n');
    replacers.forEach(function (replacer) {
      if (replacer.type === 'icss-import') {
        var replacementName = replacer.replacementName,
            importName = replacer.importName,
            localName = replacer.localName;
        exportLocalsCode = exportLocalsCode.replace(new RegExp(replacementName, 'g'), function () {
          return exportType === 'locals' ? "\" + ".concat(importName, "[").concat(JSON.stringify(localName), "] + \"") : "\" + ".concat(importName, ".locals[").concat(JSON.stringify(localName), "] + \"");
        });
      }
    });
  }

  if (exportType === 'locals') {
    exportItems.push("".concat(esModule ? 'export default' : 'module.exports =', " ").concat(exportLocalsCode ? "{\n".concat(exportLocalsCode, "\n}") : '{}', ";"));
  } else {
    if (exportLocalsCode) {
      exportItems.push("exports.locals = {\n".concat(exportLocalsCode, "\n};"));
    }

    exportItems.push("".concat(esModule ? 'export default' : 'module.exports =', " exports;"));
  }

  return "// Exports\n".concat(exportItems.join('\n'), "\n");
}