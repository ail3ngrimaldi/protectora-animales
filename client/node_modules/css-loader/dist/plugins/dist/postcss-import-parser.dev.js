"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

var _loaderUtils = require("loader-utils");

var _utils = require("../utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var pluginName = 'postcss-import-parser';

function getParsedValue(node) {
  if (node.type === 'function' && node.value.toLowerCase() === 'url') {
    var nodes = node.nodes;
    var isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
    var url = isStringValue ? nodes[0].value : _postcssValueParser["default"].stringify(nodes);
    return {
      url: url,
      isStringValue: isStringValue
    };
  }

  if (node.type === 'string') {
    var _url = node.value;
    return {
      url: _url,
      isStringValue: true
    };
  }

  return null;
}

function parseImport(params) {
  var _ref = (0, _postcssValueParser["default"])(params),
      nodes = _ref.nodes;

  if (nodes.length === 0) {
    return null;
  }

  var value = getParsedValue(nodes[0]);

  if (!value) {
    return null;
  }

  var url = value.url;

  if (url.trim().length === 0) {
    return null;
  }

  if ((0, _loaderUtils.isUrlRequest)(url)) {
    var isStringValue = value.isStringValue;
    url = (0, _utils.normalizeUrl)(url, isStringValue);
  }

  return {
    url: url,
    media: _postcssValueParser["default"].stringify(nodes.slice(1)).trim().toLowerCase()
  };
}

function walkAtRules(css, result, filter) {
  var items = [];
  css.walkAtRules(/^import$/i, function (atRule) {
    // Convert only top-level @import
    if (atRule.parent.type !== 'root') {
      return;
    }

    if (atRule.nodes) {
      result.warn("It looks like you didn't end your @import statement correctly. " + 'Child nodes are attached to it.', {
        node: atRule
      });
      return;
    }

    var parsed = parseImport(atRule.params);

    if (!parsed) {
      // eslint-disable-next-line consistent-return
      return result.warn("Unable to find uri in '".concat(atRule.toString(), "'"), {
        node: atRule
      });
    }

    if (filter && !filter(parsed)) {
      return;
    }

    atRule.remove();
    items.push(parsed);
  });
  return items;
}

var _default = _postcss["default"].plugin(pluginName, function (options) {
  return function process(css, result) {
    var items = walkAtRules(css, result, options.filter);
    items.forEach(function (item) {
      var url = item.url,
          media = item.media;
      result.messages.push({
        pluginName: pluginName,
        type: 'import',
        value: {
          type: '@import',
          url: url,
          media: media
        }
      });
    });
  };
});

exports["default"] = _default;