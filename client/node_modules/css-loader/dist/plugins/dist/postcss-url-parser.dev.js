"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

var _utils = require("../utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var pluginName = 'postcss-url-parser';
var isUrlFunc = /url/i;
var isImageSetFunc = /^(?:-webkit-)?image-set$/i;
var needParseDecl = /(?:url|(?:-webkit-)?image-set)\(/i;

function getNodeFromUrlFunc(node) {
  return node.nodes && node.nodes[0];
}

function walkUrls(parsed, callback) {
  parsed.walk(function (node) {
    if (node.type !== 'function') {
      return;
    }

    if (isUrlFunc.test(node.value)) {
      var nodes = node.nodes;
      var isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
      var url = isStringValue ? nodes[0].value : _postcssValueParser["default"].stringify(nodes);
      callback(getNodeFromUrlFunc(node), url, false, isStringValue); // Do not traverse inside `url`
      // eslint-disable-next-line consistent-return

      return false;
    }

    if (isImageSetFunc.test(node.value)) {
      node.nodes.forEach(function (nNode) {
        var type = nNode.type,
            value = nNode.value;

        if (type === 'function' && isUrlFunc.test(value)) {
          var _nodes = nNode.nodes;

          var _isStringValue = _nodes.length !== 0 && _nodes[0].type === 'string';

          var _url = _isStringValue ? _nodes[0].value : _postcssValueParser["default"].stringify(_nodes);

          callback(getNodeFromUrlFunc(nNode), _url, false, _isStringValue);
        }

        if (type === 'string') {
          callback(nNode, value, true, true);
        }
      }); // Do not traverse inside `image-set`
      // eslint-disable-next-line consistent-return

      return false;
    }
  });
}

function getUrlsFromValue(value, result, filter, decl) {
  if (!needParseDecl.test(value)) {
    return;
  }

  var parsed = (0, _postcssValueParser["default"])(value);
  var urls = [];
  walkUrls(parsed, function (node, url, needQuotes, isStringValue) {
    if (url.trim().replace(/\\[\r\n]/g, '').length === 0) {
      result.warn("Unable to find uri in '".concat(decl ? decl.toString() : value, "'"), {
        node: decl
      });
      return;
    }

    if (filter && !filter(url)) {
      return;
    }

    var splittedUrl = url.split(/(\?)?#/);

    var _splittedUrl = _slicedToArray(splittedUrl, 3),
        urlWithoutHash = _splittedUrl[0],
        singleQuery = _splittedUrl[1],
        hashValue = _splittedUrl[2];

    var hash = singleQuery || hashValue ? "".concat(singleQuery ? '?' : '').concat(hashValue ? "#".concat(hashValue) : '') : '';
    var normalizedUrl = (0, _utils.normalizeUrl)(urlWithoutHash, isStringValue);
    urls.push({
      node: node,
      url: normalizedUrl,
      hash: hash,
      needQuotes: needQuotes
    });
  }); // eslint-disable-next-line consistent-return

  return {
    parsed: parsed,
    urls: urls
  };
}

function walkDecls(css, result, filter) {
  var items = [];
  css.walkDecls(function (decl) {
    var item = getUrlsFromValue(decl.value, result, filter, decl);

    if (!item || item.urls.length === 0) {
      return;
    }

    items.push({
      decl: decl,
      parsed: item.parsed,
      urls: item.urls
    });
  });
  return items;
}

function flatten(array) {
  return array.reduce(function (a, b) {
    return a.concat(b);
  }, []);
}

function collectUniqueUrlsWithNodes(array) {
  return array.reduce(function (accumulator, currentValue) {
    var url = currentValue.url,
        needQuotes = currentValue.needQuotes,
        hash = currentValue.hash,
        node = currentValue.node;
    var found = accumulator.find(function (item) {
      return url === item.url && needQuotes === item.needQuotes && hash === item.hash;
    });

    if (!found) {
      accumulator.push({
        url: url,
        hash: hash,
        needQuotes: needQuotes,
        nodes: [node]
      });
    } else {
      found.nodes.push(node);
    }

    return accumulator;
  }, []);
}

var _default = _postcss["default"].plugin(pluginName, function (options) {
  return function process(css, result) {
    var traversed = walkDecls(css, result, options.filter);
    var flattenTraversed = flatten(traversed.map(function (item) {
      return item.urls;
    }));
    var urlsWithNodes = collectUniqueUrlsWithNodes(flattenTraversed);
    var replacers = new Map();
    urlsWithNodes.forEach(function (urlWithNodes, index) {
      var url = urlWithNodes.url,
          hash = urlWithNodes.hash,
          needQuotes = urlWithNodes.needQuotes,
          nodes = urlWithNodes.nodes;
      var replacementName = "___CSS_LOADER_URL_REPLACEMENT_".concat(index, "___");
      result.messages.push({
        pluginName: pluginName,
        type: 'import',
        value: {
          type: 'url',
          replacementName: replacementName,
          url: url,
          needQuotes: needQuotes,
          hash: hash
        }
      }, {
        pluginName: pluginName,
        type: 'replacer',
        value: {
          type: 'url',
          replacementName: replacementName
        }
      });
      nodes.forEach(function (node) {
        replacers.set(node, replacementName);
      });
    });
    traversed.forEach(function (item) {
      walkUrls(item.parsed, function (node) {
        var replacementName = replacers.get(node);

        if (!replacementName) {
          return;
        } // eslint-disable-next-line no-param-reassign


        node.type = 'word'; // eslint-disable-next-line no-param-reassign

        node.value = replacementName;
      }); // eslint-disable-next-line no-param-reassign

      item.decl.value = item.parsed.toString();
    });
  };
});

exports["default"] = _default;