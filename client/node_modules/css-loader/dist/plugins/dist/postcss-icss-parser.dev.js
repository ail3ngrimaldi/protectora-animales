"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _icssUtils = require("icss-utils");

var _loaderUtils = require("loader-utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var pluginName = 'postcss-icss-parser';

function normalizeIcssImports(icssImports) {
  return Object.keys(icssImports).reduce(function (accumulator, url) {
    var tokensMap = icssImports[url];
    var tokens = Object.keys(tokensMap);

    if (tokens.length === 0) {
      return accumulator;
    }

    var normalizedUrl = (0, _loaderUtils.urlToRequest)(url);

    if (!accumulator[normalizedUrl]) {
      // eslint-disable-next-line no-param-reassign
      accumulator[normalizedUrl] = tokensMap;
    } else {
      // eslint-disable-next-line no-param-reassign
      accumulator[normalizedUrl] = _objectSpread({}, accumulator[normalizedUrl], {}, tokensMap);
    }

    return accumulator;
  }, {});
}

var _default = _postcss["default"].plugin(pluginName, function () {
  return function process(css, result) {
    var importReplacements = Object.create(null);

    var _ref = (0, _icssUtils.extractICSS)(css),
        icssImports = _ref.icssImports,
        icssExports = _ref.icssExports;

    var normalizedIcssImports = normalizeIcssImports(icssImports);
    Object.keys(normalizedIcssImports).forEach(function (url, importIndex) {
      var importName = "___CSS_LOADER_ICSS_IMPORT_".concat(importIndex, "___");
      result.messages.push({
        pluginName: pluginName,
        type: 'import',
        value: {
          type: 'icss-import',
          importName: importName,
          url: url
        }
      });
      var tokenMap = normalizedIcssImports[url];
      var tokens = Object.keys(tokenMap);
      tokens.forEach(function (token, replacementIndex) {
        var replacementName = "___CSS_LOADER_ICSS_IMPORT_".concat(importIndex, "_REPLACEMENT_").concat(replacementIndex, "___");
        var localName = tokenMap[token];
        importReplacements[token] = replacementName;
        result.messages.push({
          pluginName: pluginName,
          type: 'replacer',
          value: {
            type: 'icss-import',
            importName: importName,
            replacementName: replacementName,
            localName: localName
          }
        });
      });
    });

    if (Object.keys(importReplacements).length > 0) {
      (0, _icssUtils.replaceSymbols)(css, importReplacements);
    }

    Object.keys(icssExports).forEach(function (name) {
      var value = (0, _icssUtils.replaceValueSymbols)(icssExports[name], importReplacements);
      result.messages.push({
        pluginName: pluginName,
        type: 'export',
        value: {
          name: name,
          value: value
        }
      });
    });
  };
});

exports["default"] = _default;