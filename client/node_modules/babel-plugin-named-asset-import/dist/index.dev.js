'use strict';

var _require = require('path'),
    extname = _require.extname;

function namedAssetImportPlugin(_ref) {
  var t = _ref.types;
  var visited = new WeakSet();

  function generateNewSourcePath(loaderMap, moduleName, sourcePath) {
    var ext = extname(sourcePath).substr(1);
    var extMap = loaderMap[ext];
    return extMap[moduleName] ? extMap[moduleName].replace(/\[path\]/, sourcePath) : sourcePath;
  }

  function replaceMatchingSpecifiers(path, loaderMap, callback) {
    var sourcePath = path.node.source.value;
    var ext = extname(sourcePath).substr(1);

    if (visited.has(path.node) || sourcePath.indexOf('!') !== -1) {
      return;
    }

    if (loaderMap[ext]) {
      path.replaceWithMultiple(path.node.specifiers.map(function (specifier) {
        var newSpecifier = callback(specifier, sourcePath);
        visited.add(newSpecifier);
        return newSpecifier;
      }));
    }
  }

  return {
    visitor: {
      ExportNamedDeclaration: function ExportNamedDeclaration(path, _ref2) {
        var loaderMap = _ref2.opts.loaderMap;

        if (!path.node.source) {
          return;
        }

        replaceMatchingSpecifiers(path, loaderMap, function (specifier, sourcePath) {
          if (t.isExportDefaultSpecifier(specifier)) {
            return t.exportDeclaration([t.exportDefaultSpecifier(t.identifier(specifier.local.name))], t.stringLiteral(sourcePath));
          }

          return t.exportNamedDeclaration(null, [t.exportSpecifier(t.identifier(specifier.local.name), t.identifier(specifier.exported.name))], t.stringLiteral(generateNewSourcePath(loaderMap, specifier.local.name, sourcePath)));
        });
      },
      ImportDeclaration: function ImportDeclaration(path, _ref3) {
        var loaderMap = _ref3.opts.loaderMap;
        replaceMatchingSpecifiers(path, loaderMap, function (specifier, sourcePath) {
          if (t.isImportDefaultSpecifier(specifier)) {
            return t.importDeclaration([t.importDefaultSpecifier(t.identifier(specifier.local.name))], t.stringLiteral(sourcePath));
          }

          return t.importDeclaration([t.importSpecifier(t.identifier(specifier.local.name), t.identifier(specifier.imported.name))], t.stringLiteral(generateNewSourcePath(loaderMap, specifier.imported.name, sourcePath)));
        });
      }
    }
  };
}

module.exports = namedAssetImportPlugin;