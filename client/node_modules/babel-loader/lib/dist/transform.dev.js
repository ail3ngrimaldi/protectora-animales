"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var babel = require("@babel/core");

var promisify = require("pify");

var LoaderError = require("./Error");

var transform = promisify(babel.transform);

module.exports =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(source, options) {
    var result, _result, ast, code, map, metadata, sourceType;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return transform(source, options);

          case 3:
            result = _context.sent;
            _context.next = 9;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            throw _context.t0.message && _context.t0.codeFrame ? new LoaderError(_context.t0) : _context.t0;

          case 9:
            if (result) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return", null);

          case 11:
            // We don't return the full result here because some entries are not
            // really serializable. For a full list of properties see here:
            // https://github.com/babel/babel/blob/master/packages/babel-core/src/transformation/index.js
            // For discussion on this topic see here:
            // https://github.com/babel/babel-loader/pull/629
            _result = result, ast = _result.ast, code = _result.code, map = _result.map, metadata = _result.metadata, sourceType = _result.sourceType;

            if (map && (!map.sourcesContent || !map.sourcesContent.length)) {
              map.sourcesContent = [source];
            }

            return _context.abrupt("return", {
              ast: ast,
              code: code,
              map: map,
              metadata: metadata,
              sourceType: sourceType
            });

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 6]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

module.exports.version = babel.version;