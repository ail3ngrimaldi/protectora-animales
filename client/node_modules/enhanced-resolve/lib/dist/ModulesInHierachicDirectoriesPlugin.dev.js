/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var forEachBail = require("./forEachBail");

var getPaths = require("./getPaths");

module.exports =
/*#__PURE__*/
function () {
  function ModulesInHierachicDirectoriesPlugin(source, directories, target) {
    _classCallCheck(this, ModulesInHierachicDirectoriesPlugin);

    this.source = source;
    this.directories = [].concat(directories);
    this.target = target;
  }

  _createClass(ModulesInHierachicDirectoriesPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ModulesInHierachicDirectoriesPlugin", function (request, resolveContext, callback) {
        var fs = resolver.fileSystem;
        var addrs = getPaths(request.path).paths.map(function (p) {
          return _this.directories.map(function (d) {
            return resolver.join(p, d);
          });
        }).reduce(function (array, p) {
          array.push.apply(array, p);
          return array;
        }, []);
        forEachBail(addrs, function (addr, callback) {
          fs.stat(addr, function (err, stat) {
            if (!err && stat && stat.isDirectory()) {
              var obj = Object.assign({}, request, {
                path: addr,
                request: "./" + request.request
              });
              var message = "looking for modules in " + addr;
              return resolver.doResolve(target, obj, message, resolveContext, callback);
            }

            if (resolveContext.log) resolveContext.log(addr + " doesn't exist or is not a directory");
            if (resolveContext.missing) resolveContext.missing.add(addr);
            return callback();
          });
        }, callback);
      });
    }
  }]);

  return ModulesInHierachicDirectoriesPlugin;
}();