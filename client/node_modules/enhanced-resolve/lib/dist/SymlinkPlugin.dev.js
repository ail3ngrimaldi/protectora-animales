/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var getPaths = require("./getPaths");

var forEachBail = require("./forEachBail");

module.exports =
/*#__PURE__*/
function () {
  function SymlinkPlugin(source, target) {
    _classCallCheck(this, SymlinkPlugin);

    this.source = source;
    this.target = target;
  }

  _createClass(SymlinkPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var target = resolver.ensureHook(this.target);
      var fs = resolver.fileSystem;
      resolver.getHook(this.source).tapAsync("SymlinkPlugin", function (request, resolveContext, callback) {
        var pathsResult = getPaths(request.path);
        var pathSeqments = pathsResult.seqments;
        var paths = pathsResult.paths;
        var containsSymlink = false;
        forEachBail.withIndex(paths, function (path, idx, callback) {
          fs.readlink(path, function (err, result) {
            if (!err && result) {
              pathSeqments[idx] = result;
              containsSymlink = true; // Shortcut when absolute symlink found

              if (/^(\/|[a-zA-Z]:($|\\))/.test(result)) return callback(null, idx);
            }

            callback();
          });
        }, function (err, idx) {
          if (!containsSymlink) return callback();
          var resultSeqments = typeof idx === "number" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();
          var result = resultSeqments.reverse().reduce(function (a, b) {
            return resolver.join(a, b);
          });
          var obj = Object.assign({}, request, {
            path: result
          });
          resolver.doResolve(target, obj, "resolved symlink to " + result, resolveContext, callback);
        });
      });
    }
  }]);

  return SymlinkPlugin;
}();