/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function ResultPlugin(source) {
    _classCallCheck(this, ResultPlugin);

    this.source = source;
  }

  _createClass(ResultPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      this.source.tapAsync("ResultPlugin", function (request, resolverContext, callback) {
        var obj = Object.assign({}, request);
        if (resolverContext.log) resolverContext.log("reporting result " + obj.path);
        resolver.hooks.result.callAsync(obj, resolverContext, function (err) {
          if (err) return callback(err);
          callback(null, obj);
        });
      });
    }
  }]);

  return ResultPlugin;
}();