/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require("graceful-fs");

var NodeJsInputFileSystem =
/*#__PURE__*/
function () {
  function NodeJsInputFileSystem() {
    _classCallCheck(this, NodeJsInputFileSystem);
  }

  _createClass(NodeJsInputFileSystem, [{
    key: "readdir",
    value: function readdir(path, callback) {
      fs.readdir(path, function (err, files) {
        callback(err, files && files.map(function (file) {
          return file.normalize ? file.normalize("NFC") : file;
        }));
      });
    }
  }, {
    key: "readdirSync",
    value: function readdirSync(path) {
      var files = fs.readdirSync(path);
      return files && files.map(function (file) {
        return file.normalize ? file.normalize("NFC") : file;
      });
    }
  }]);

  return NodeJsInputFileSystem;
}();

var fsMethods = ["stat", "statSync", "readFile", "readFileSync", "readlink", "readlinkSync"];

for (var _i = 0, _fsMethods = fsMethods; _i < _fsMethods.length; _i++) {
  var key = _fsMethods[_i];
  Object.defineProperty(NodeJsInputFileSystem.prototype, key, {
    configurable: true,
    writable: true,
    value: fs[key].bind(fs)
  });
}

module.exports = NodeJsInputFileSystem;