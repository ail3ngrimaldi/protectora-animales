/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getCacheId(request, withContext) {
  return JSON.stringify({
    context: withContext ? request.context : "",
    path: request.path,
    query: request.query,
    request: request.request
  });
}

module.exports =
/*#__PURE__*/
function () {
  function UnsafeCachePlugin(source, filterPredicate, cache, withContext, target) {
    _classCallCheck(this, UnsafeCachePlugin);

    this.source = source;
    this.filterPredicate = filterPredicate;
    this.withContext = withContext;
    this.cache = cache || {};
    this.target = target;
  }

  _createClass(UnsafeCachePlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("UnsafeCachePlugin", function (request, resolveContext, callback) {
        if (!_this.filterPredicate(request)) return callback();
        var cacheId = getCacheId(request, _this.withContext);
        var cacheEntry = _this.cache[cacheId];

        if (cacheEntry) {
          return callback(null, cacheEntry);
        }

        resolver.doResolve(target, request, null, resolveContext, function (err, result) {
          if (err) return callback(err);
          if (result) return callback(null, _this.cache[cacheId] = result);
          callback();
        });
      });
    }
  }]);

  return UnsafeCachePlugin;
}();