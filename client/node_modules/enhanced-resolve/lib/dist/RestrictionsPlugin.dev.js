/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var slashCode = "/".charCodeAt(0);
var backslashCode = "\\".charCodeAt(0);

var isInside = function isInside(path, parent) {
  if (!path.startsWith(parent)) return false;
  if (path.length === parent.length) return true;
  var charCode = path.charCodeAt(parent.length);
  return charCode === slashCode || charCode === backslashCode;
};

module.exports =
/*#__PURE__*/
function () {
  function RestrictionsPlugin(source, restrictions) {
    _classCallCheck(this, RestrictionsPlugin);

    this.source = source;
    this.restrictions = restrictions;
  }

  _createClass(RestrictionsPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      resolver.getHook(this.source).tapAsync("RestrictionsPlugin", function (request, resolveContext, callback) {
        if (typeof request.path === "string") {
          var path = request.path;

          for (var i = 0; i < _this.restrictions.length; i++) {
            var rule = _this.restrictions[i];

            if (typeof rule === "string") {
              if (!isInside(path, rule)) {
                if (resolveContext.log) {
                  resolveContext.log("".concat(path, " is not inside of the restriction ").concat(rule));
                }

                return callback(null, null);
              }
            } else if (!rule.test(path)) {
              if (resolveContext.log) {
                resolveContext.log("".concat(path, " doesn't match the restriction ").concat(rule));
              }

              return callback(null, null);
            }
          }
        }

        callback();
      });
    }
  }]);

  return RestrictionsPlugin;
}();