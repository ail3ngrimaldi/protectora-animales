/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function FileExistsPlugin(source, target) {
    _classCallCheck(this, FileExistsPlugin);

    this.source = source;
    this.target = target;
  }

  _createClass(FileExistsPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var target = resolver.ensureHook(this.target);
      var fs = resolver.fileSystem;
      resolver.getHook(this.source).tapAsync("FileExistsPlugin", function (request, resolveContext, callback) {
        var file = request.path;
        fs.stat(file, function (err, stat) {
          if (err || !stat) {
            if (resolveContext.missing) resolveContext.missing.add(file);
            if (resolveContext.log) resolveContext.log(file + " doesn't exist");
            return callback();
          }

          if (!stat.isFile()) {
            if (resolveContext.missing) resolveContext.missing.add(file);
            if (resolveContext.log) resolveContext.log(file + " is not a file");
            return callback();
          }

          resolver.doResolve(target, request, "existing file: " + file, resolveContext, callback);
        });
      });
    }
  }]);

  return FileExistsPlugin;
}();