/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Storage =
/*#__PURE__*/
function () {
  function Storage(duration) {
    _classCallCheck(this, Storage);

    this.duration = duration;
    this.running = new Map();
    this.data = new Map();
    this.levels = [];

    if (duration > 0) {
      this.levels.push(new Set(), new Set(), new Set(), new Set(), new Set(), new Set(), new Set(), new Set(), new Set());

      for (var i = 8000; i < duration; i += 500) {
        this.levels.push(new Set());
      }
    }

    this.count = 0;
    this.interval = null;
    this.needTickCheck = false;
    this.nextTick = null;
    this.passive = true;
    this.tick = this.tick.bind(this);
  }

  _createClass(Storage, [{
    key: "ensureTick",
    value: function ensureTick() {
      if (!this.interval && this.duration > 0 && !this.nextTick) this.interval = setInterval(this.tick, Math.floor(this.duration / this.levels.length));
    }
  }, {
    key: "finished",
    value: function finished(name, err, result) {
      var callbacks = this.running.get(name);
      this.running["delete"](name);

      if (this.duration > 0) {
        this.data.set(name, [err, result]);
        var levelData = this.levels[0];
        this.count -= levelData.size;
        levelData.add(name);
        this.count += levelData.size;
        this.ensureTick();
      }

      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i](err, result);
      }
    }
  }, {
    key: "finishedSync",
    value: function finishedSync(name, err, result) {
      if (this.duration > 0) {
        this.data.set(name, [err, result]);
        var levelData = this.levels[0];
        this.count -= levelData.size;
        levelData.add(name);
        this.count += levelData.size;
        this.ensureTick();
      }
    }
  }, {
    key: "provide",
    value: function provide(name, provider, callback) {
      var _this = this;

      if (typeof name !== "string") {
        callback(new TypeError("path must be a string"));
        return;
      }

      var running = this.running.get(name);

      if (running) {
        running.push(callback);
        return;
      }

      if (this.duration > 0) {
        this.checkTicks();
        var data = this.data.get(name);

        if (data) {
          return process.nextTick(function () {
            callback.apply(null, data);
          });
        }
      }

      this.running.set(name, running = [callback]);
      provider(name, function (err, result) {
        _this.finished(name, err, result);
      });
    }
  }, {
    key: "provideSync",
    value: function provideSync(name, provider) {
      if (typeof name !== "string") {
        throw new TypeError("path must be a string");
      }

      if (this.duration > 0) {
        this.checkTicks();
        var data = this.data.get(name);

        if (data) {
          if (data[0]) throw data[0];
          return data[1];
        }
      }

      var result;

      try {
        result = provider(name);
      } catch (e) {
        this.finishedSync(name, e);
        throw e;
      }

      this.finishedSync(name, null, result);
      return result;
    }
  }, {
    key: "tick",
    value: function tick() {
      var decay = this.levels.pop();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = decay[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;
          this.data["delete"](item);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.count -= decay.size;
      decay.clear();
      this.levels.unshift(decay);

      if (this.count === 0) {
        clearInterval(this.interval);
        this.interval = null;
        this.nextTick = null;
        return true;
      } else if (this.nextTick) {
        this.nextTick += Math.floor(this.duration / this.levels.length);
        var time = new Date().getTime();

        if (this.nextTick > time) {
          this.nextTick = null;
          this.interval = setInterval(this.tick, Math.floor(this.duration / this.levels.length));
          return true;
        }
      } else if (this.passive) {
        clearInterval(this.interval);
        this.interval = null;
        this.nextTick = new Date().getTime() + Math.floor(this.duration / this.levels.length);
      } else {
        this.passive = true;
      }
    }
  }, {
    key: "checkTicks",
    value: function checkTicks() {
      this.passive = false;

      if (this.nextTick) {
        while (!this.tick()) {
          ;
        }
      }
    }
  }, {
    key: "purge",
    value: function purge(what) {
      if (!what) {
        this.count = 0;
        clearInterval(this.interval);
        this.nextTick = null;
        this.data.clear();
        this.levels.forEach(function (level) {
          level.clear();
        });
      } else if (typeof what === "string") {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.data.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;
            if (key.startsWith(what)) this.data["delete"](key);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } else {
        for (var i = what.length - 1; i >= 0; i--) {
          this.purge(what[i]);
        }
      }
    }
  }]);

  return Storage;
}();

module.exports =
/*#__PURE__*/
function () {
  function CachedInputFileSystem(fileSystem, duration) {
    var _this2 = this;

    _classCallCheck(this, CachedInputFileSystem);

    this.fileSystem = fileSystem;
    this._statStorage = new Storage(duration);
    this._readdirStorage = new Storage(duration);
    this._readFileStorage = new Storage(duration);
    this._readJsonStorage = new Storage(duration);
    this._readlinkStorage = new Storage(duration);
    this._stat = this.fileSystem.stat ? this.fileSystem.stat.bind(this.fileSystem) : null;
    if (!this._stat) this.stat = null;
    this._statSync = this.fileSystem.statSync ? this.fileSystem.statSync.bind(this.fileSystem) : null;
    if (!this._statSync) this.statSync = null;
    this._readdir = this.fileSystem.readdir ? this.fileSystem.readdir.bind(this.fileSystem) : null;
    if (!this._readdir) this.readdir = null;
    this._readdirSync = this.fileSystem.readdirSync ? this.fileSystem.readdirSync.bind(this.fileSystem) : null;
    if (!this._readdirSync) this.readdirSync = null;
    this._readFile = this.fileSystem.readFile ? this.fileSystem.readFile.bind(this.fileSystem) : null;
    if (!this._readFile) this.readFile = null;
    this._readFileSync = this.fileSystem.readFileSync ? this.fileSystem.readFileSync.bind(this.fileSystem) : null;
    if (!this._readFileSync) this.readFileSync = null;

    if (this.fileSystem.readJson) {
      this._readJson = this.fileSystem.readJson.bind(this.fileSystem);
    } else if (this.readFile) {
      this._readJson = function (path, callback) {
        _this2.readFile(path, function (err, buffer) {
          if (err) return callback(err);
          var data;

          try {
            data = JSON.parse(buffer.toString("utf-8"));
          } catch (e) {
            return callback(e);
          }

          callback(null, data);
        });
      };
    } else {
      this.readJson = null;
    }

    if (this.fileSystem.readJsonSync) {
      this._readJsonSync = this.fileSystem.readJsonSync.bind(this.fileSystem);
    } else if (this.readFileSync) {
      this._readJsonSync = function (path) {
        var buffer = _this2.readFileSync(path);

        var data = JSON.parse(buffer.toString("utf-8"));
        return data;
      };
    } else {
      this.readJsonSync = null;
    }

    this._readlink = this.fileSystem.readlink ? this.fileSystem.readlink.bind(this.fileSystem) : null;
    if (!this._readlink) this.readlink = null;
    this._readlinkSync = this.fileSystem.readlinkSync ? this.fileSystem.readlinkSync.bind(this.fileSystem) : null;
    if (!this._readlinkSync) this.readlinkSync = null;
  }

  _createClass(CachedInputFileSystem, [{
    key: "stat",
    value: function stat(path, callback) {
      this._statStorage.provide(path, this._stat, callback);
    }
  }, {
    key: "readdir",
    value: function readdir(path, callback) {
      this._readdirStorage.provide(path, this._readdir, callback);
    }
  }, {
    key: "readFile",
    value: function readFile(path, callback) {
      this._readFileStorage.provide(path, this._readFile, callback);
    }
  }, {
    key: "readJson",
    value: function readJson(path, callback) {
      this._readJsonStorage.provide(path, this._readJson, callback);
    }
  }, {
    key: "readlink",
    value: function readlink(path, callback) {
      this._readlinkStorage.provide(path, this._readlink, callback);
    }
  }, {
    key: "statSync",
    value: function statSync(path) {
      return this._statStorage.provideSync(path, this._statSync);
    }
  }, {
    key: "readdirSync",
    value: function readdirSync(path) {
      return this._readdirStorage.provideSync(path, this._readdirSync);
    }
  }, {
    key: "readFileSync",
    value: function readFileSync(path) {
      return this._readFileStorage.provideSync(path, this._readFileSync);
    }
  }, {
    key: "readJsonSync",
    value: function readJsonSync(path) {
      return this._readJsonStorage.provideSync(path, this._readJsonSync);
    }
  }, {
    key: "readlinkSync",
    value: function readlinkSync(path) {
      return this._readlinkStorage.provideSync(path, this._readlinkSync);
    }
  }, {
    key: "purge",
    value: function purge(what) {
      this._statStorage.purge(what);

      this._readdirStorage.purge(what);

      this._readFileStorage.purge(what);

      this._readlinkStorage.purge(what);

      this._readJsonStorage.purge(what);
    }
  }]);

  return CachedInputFileSystem;
}();