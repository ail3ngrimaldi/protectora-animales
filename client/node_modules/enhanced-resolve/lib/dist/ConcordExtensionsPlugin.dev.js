/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var concord = require("./concord");

var DescriptionFileUtils = require("./DescriptionFileUtils");

var forEachBail = require("./forEachBail");

module.exports =
/*#__PURE__*/
function () {
  function ConcordExtensionsPlugin(source, options, target) {
    _classCallCheck(this, ConcordExtensionsPlugin);

    this.source = source;
    this.options = options;
    this.target = target;
  }

  _createClass(ConcordExtensionsPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ConcordExtensionsPlugin", function (request, resolveContext, callback) {
        var concordField = DescriptionFileUtils.getField(request.descriptionFileData, "concord");
        if (!concordField) return callback();
        var extensions = concord.getExtensions(request.context, concordField);
        if (!extensions) return callback();
        forEachBail(extensions, function (appending, callback) {
          var obj = Object.assign({}, request, {
            path: request.path + appending,
            relativePath: request.relativePath && request.relativePath + appending
          });
          resolver.doResolve(target, obj, "concord extension: " + appending, resolveContext, callback);
        }, function (err, result) {
          if (err) return callback(err); // Don't allow other processing

          if (result === undefined) return callback(null, null);
          callback(null, result);
        });
      });
    }
  }]);

  return ConcordExtensionsPlugin;
}();