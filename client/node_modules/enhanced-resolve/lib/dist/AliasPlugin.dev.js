/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function startsWith(string, searchString) {
  var stringLength = string.length;
  var searchLength = searchString.length; // early out if the search length is greater than the search string

  if (searchLength > stringLength) {
    return false;
  }

  var index = -1;

  while (++index < searchLength) {
    if (string.charCodeAt(index) !== searchString.charCodeAt(index)) {
      return false;
    }
  }

  return true;
}

module.exports =
/*#__PURE__*/
function () {
  function AliasPlugin(source, options, target) {
    _classCallCheck(this, AliasPlugin);

    this.source = source;
    this.options = Array.isArray(options) ? options : [options];
    this.target = target;
  }

  _createClass(AliasPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("AliasPlugin", function (request, resolveContext, callback) {
        var innerRequest = request.request || request.path;
        if (!innerRequest) return callback();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _this.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;

            if (innerRequest === item.name || !item.onlyModule && startsWith(innerRequest, item.name + "/")) {
              if (innerRequest !== item.alias && !startsWith(innerRequest, item.alias + "/")) {
                var newRequestStr = item.alias + innerRequest.substr(item.name.length);
                var obj = Object.assign({}, request, {
                  request: newRequestStr
                });
                return resolver.doResolve(target, obj, "aliased with mapping '" + item.name + "': '" + item.alias + "' to '" + newRequestStr + "'", resolveContext, function (err, result) {
                  if (err) return callback(err); // Don't allow other aliasing or raw request

                  if (result === undefined) return callback(null, null);
                  callback(null, result);
                });
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return callback();
      });
    }
  }]);

  return AliasPlugin;
}();