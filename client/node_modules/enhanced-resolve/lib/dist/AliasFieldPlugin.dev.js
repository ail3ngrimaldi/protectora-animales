/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DescriptionFileUtils = require("./DescriptionFileUtils");

var getInnerRequest = require("./getInnerRequest");

module.exports =
/*#__PURE__*/
function () {
  function AliasFieldPlugin(source, field, target) {
    _classCallCheck(this, AliasFieldPlugin);

    this.source = source;
    this.field = field;
    this.target = target;
  }

  _createClass(AliasFieldPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("AliasFieldPlugin", function (request, resolveContext, callback) {
        if (!request.descriptionFileData) return callback();
        var innerRequest = getInnerRequest(resolver, request);
        if (!innerRequest) return callback();
        var fieldData = DescriptionFileUtils.getField(request.descriptionFileData, _this.field);

        if (_typeof(fieldData) !== "object") {
          if (resolveContext.log) resolveContext.log("Field '" + _this.field + "' doesn't contain a valid alias configuration");
          return callback();
        }

        var data1 = fieldData[innerRequest];
        var data2 = fieldData[innerRequest.replace(/^\.\//, "")];
        var data = typeof data1 !== "undefined" ? data1 : data2;
        if (data === innerRequest) return callback();
        if (data === undefined) return callback();

        if (data === false) {
          var ignoreObj = Object.assign({}, request, {
            path: false
          });
          return callback(null, ignoreObj);
        }

        var obj = Object.assign({}, request, {
          path: request.descriptionFileRoot,
          request: data
        });
        resolver.doResolve(target, obj, "aliased from description file " + request.descriptionFilePath + " with mapping '" + innerRequest + "' to '" + data + "'", resolveContext, function (err, result) {
          if (err) return callback(err); // Don't allow other aliasing or raw request

          if (result === undefined) return callback(null, null);
          callback(null, result);
        });
      });
    }
  }]);

  return AliasFieldPlugin;
}();