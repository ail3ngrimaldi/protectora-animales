/*
MIT License http://www.opensource.org/licenses/mit-license.php
Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DescriptionFileUtils = require("./DescriptionFileUtils");

module.exports =
/*#__PURE__*/
function () {
  function DescriptionFilePlugin(source, filenames, target) {
    _classCallCheck(this, DescriptionFilePlugin);

    this.source = source;
    this.filenames = [].concat(filenames);
    this.target = target;
  }

  _createClass(DescriptionFilePlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("DescriptionFilePlugin", function (request, resolveContext, callback) {
        var directory = request.path;
        DescriptionFileUtils.loadDescriptionFile(resolver, directory, _this.filenames, resolveContext, function (err, result) {
          if (err) return callback(err);

          if (!result) {
            if (resolveContext.missing) {
              _this.filenames.forEach(function (filename) {
                resolveContext.missing.add(resolver.join(directory, filename));
              });
            }

            if (resolveContext.log) resolveContext.log("No description file found");
            return callback();
          }

          var relativePath = "." + request.path.substr(result.directory.length).replace(/\\/g, "/");
          var obj = Object.assign({}, request, {
            descriptionFilePath: result.path,
            descriptionFileData: result.content,
            descriptionFileRoot: result.directory,
            relativePath: relativePath
          });
          resolver.doResolve(target, obj, "using description file: " + result.path + " (relative path: " + relativePath + ")", resolveContext, function (err, result) {
            if (err) return callback(err); // Don't allow other processing

            if (result === undefined) return callback(null, null);
            callback(null, result);
          });
        });
      });
    }
  }]);

  return DescriptionFilePlugin;
}();