/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require("path");

module.exports =
/*#__PURE__*/
function () {
  function MainFieldPlugin(source, options, target) {
    _classCallCheck(this, MainFieldPlugin);

    this.source = source;
    this.options = options;
    this.target = target;
  }

  _createClass(MainFieldPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("MainFieldPlugin", function (request, resolveContext, callback) {
        if (request.path !== request.descriptionFileRoot) return callback();
        if (request.alreadyTriedMainField === request.descriptionFilePath) return callback();
        var content = request.descriptionFileData;
        var filename = path.basename(request.descriptionFilePath);
        var mainModule;
        var field = _this.options.name;

        if (Array.isArray(field)) {
          var current = content;

          for (var j = 0; j < field.length; j++) {
            if (current === null || _typeof(current) !== "object") {
              current = null;
              break;
            }

            current = current[field[j]];
          }

          if (typeof current === "string") {
            mainModule = current;
          }
        } else {
          if (typeof content[field] === "string") {
            mainModule = content[field];
          }
        }

        if (!mainModule) return callback();
        if (_this.options.forceRelative && !/^\.\.?\//.test(mainModule)) mainModule = "./" + mainModule;
        var obj = Object.assign({}, request, {
          request: mainModule,
          alreadyTriedMainField: request.descriptionFilePath
        });
        return resolver.doResolve(target, obj, "use " + mainModule + " from " + _this.options.name + " in " + filename, resolveContext, callback);
      });
    }
  }]);

  return MainFieldPlugin;
}();