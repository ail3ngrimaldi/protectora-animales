/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function ParsePlugin(source, target) {
    _classCallCheck(this, ParsePlugin);

    this.source = source;
    this.target = target;
  }

  _createClass(ParsePlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ParsePlugin", function (request, resolveContext, callback) {
        var parsed = resolver.parse(request.request);
        var obj = Object.assign({}, request, parsed);

        if (request.query && !parsed.query) {
          obj.query = request.query;
        }

        if (parsed && resolveContext.log) {
          if (parsed.module) resolveContext.log("Parsed request is a module");
          if (parsed.directory) resolveContext.log("Parsed request is a directory");
        }

        resolver.doResolve(target, obj, null, resolveContext, callback);
      });
    }
  }]);

  return ParsePlugin;
}();