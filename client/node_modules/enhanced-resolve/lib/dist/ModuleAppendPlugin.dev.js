/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function ModuleAppendPlugin(source, appending, target) {
    _classCallCheck(this, ModuleAppendPlugin);

    this.source = source;
    this.appending = appending;
    this.target = target;
  }

  _createClass(ModuleAppendPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ModuleAppendPlugin", function (request, resolveContext, callback) {
        var i = request.request.indexOf("/"),
            j = request.request.indexOf("\\");
        var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
        var moduleName, remainingRequest;

        if (p < 0) {
          moduleName = request.request;
          remainingRequest = "";
        } else {
          moduleName = request.request.substr(0, p);
          remainingRequest = request.request.substr(p);
        }

        if (moduleName === "." || moduleName === "..") return callback();
        var moduleFinalName = moduleName + _this.appending;
        var obj = Object.assign({}, request, {
          request: moduleFinalName + remainingRequest
        });
        resolver.doResolve(target, obj, "module variation " + moduleFinalName, resolveContext, callback);
      });
    }
  }]);

  return ModuleAppendPlugin;
}();