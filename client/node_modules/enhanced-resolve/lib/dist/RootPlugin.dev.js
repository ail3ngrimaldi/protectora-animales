/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/
"use strict";
/** @typedef {import("./Resolver")} Resolver */

/** @typedef {import("./Resolver").ResolveStepHook} ResolveStepHook */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RootPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {string | ResolveStepHook} source source hook
   * @param {Array<string>} root roots
   * @param {string | ResolveStepHook} target target hook
   */
  function RootPlugin(source, root, target) {
    _classCallCheck(this, RootPlugin);

    this.root = root;
    this.source = source;
    this.target = target;
  }
  /**
   * @param {Resolver} resolver the resolver
   * @returns {void}
   */


  _createClass(RootPlugin, [{
    key: "apply",
    value: function apply(resolver) {
      var _this = this;

      var target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("RootPlugin", function (request, resolveContext, callback) {
        var req = request.request;
        if (!req) return callback();
        if (!req.startsWith("/")) return callback();
        var path = resolver.join(_this.root, req.slice(1));
        var obj = Object.assign(request, {
          path: path,
          relativePath: request.relativePath && path
        });
        resolver.doResolve(target, obj, "root path ".concat(_this.root), resolveContext, callback);
      });
    }
  }]);

  return RootPlugin;
}();

module.exports = RootPlugin;