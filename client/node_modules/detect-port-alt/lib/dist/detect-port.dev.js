'use strict';

var debug = require('debug')('detect-port');

var net = require('net');

var address = require('address');

module.exports = function (port, host, callback) {
  if (typeof port === 'function') {
    callback = port;
    port = null;
  } else if (typeof host === 'function') {
    callback = host;
    host = null;
  }

  port = parseInt(port) || 0;
  var maxPort = port + 10;

  if (maxPort > 65535) {
    maxPort = 65535;
  }

  debug('detect free port between [%s, %s)', port, maxPort);

  if (typeof callback === 'function') {
    return tryListen(host, port, maxPort, callback);
  } // promise


  return new Promise(function (resolve, reject) {
    tryListen(host, port, maxPort, function (error, realPort) {
      if (error) {
        reject(error);
      } else {
        resolve(realPort);
      }
    });
  });
};

function tryListen(host, port, maxPort, callback) {
  function handleError() {
    port++;

    if (port >= maxPort) {
      debug('port: %s >= maxPort: %s, give up and use random port', port, maxPort);
      port = 0;
      maxPort = 0;
    }

    tryListen(host, port, maxPort, callback);
  } // 1. check specified host (or null)


  listen(port, host, function (err, realPort) {
    // ignore random listening
    if (port === 0) {
      return callback(err, realPort);
    }

    if (err) {
      return handleError(err);
    } // 2. check default host


    listen(port, null, function (err) {
      if (err) {
        return handleError(err);
      } // 3. check localhost


      listen(port, 'localhost', function (err) {
        if (err) {
          return handleError(err);
        } // 4. check current ip


        var ip;

        try {
          ip = address.ip();
        } catch (err) {
          // Skip the `ip` check if `address.ip()` fails
          return callback(null, realPort);
        }

        listen(port, ip, function (err, realPort) {
          if (err) {
            return handleError(err);
          }

          callback(null, realPort);
        });
      });
    });
  });
}

function listen(port, hostname, callback) {
  var server = new net.Server();
  server.on('error', function (err) {
    debug('listen %s:%s error: %s', hostname, port, err);
    server.close();

    if (err.code === 'ENOTFOUND') {
      debug('ignore dns ENOTFOUND error, get free %s:%s', hostname, port);
      return callback(null, port);
    }

    return callback(err);
  });
  server.listen(port, hostname, function () {
    port = server.address().port;
    server.close();
    debug('get free %s:%s', hostname, port);
    return callback(null, port);
  });
}