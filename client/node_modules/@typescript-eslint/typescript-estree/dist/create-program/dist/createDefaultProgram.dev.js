"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var debug_1 = __importDefault(require("debug"));

var path_1 = __importDefault(require("path"));

var ts = __importStar(require("typescript"));

var shared_1 = require("./shared");

var log = debug_1["default"]('typescript-eslint:typescript-estree:createDefaultProgram');
/**
 * @param code The code of the file being linted
 * @param extra The config object
 * @param extra.tsconfigRootDir The root directory for relative tsconfig paths
 * @param extra.projects Provided tsconfig paths
 * @returns If found, returns the source file corresponding to the code and the containing program
 */

function createDefaultProgram(code, extra) {
  log('Getting default program for: %s', extra.filePath || 'unnamed file');

  if (!extra.projects || extra.projects.length !== 1) {
    return undefined;
  }

  var tsconfigPath = shared_1.getTsconfigPath(extra.projects[0], extra);
  var commandLine = ts.getParsedCommandLineOfConfigFile(tsconfigPath, shared_1.createDefaultCompilerOptionsFromExtra(extra), Object.assign(Object.assign({}, ts.sys), {
    onUnRecoverableConfigFileDiagnostic: function onUnRecoverableConfigFileDiagnostic() {}
  }));

  if (!commandLine) {
    return undefined;
  }

  var compilerHost = ts.createCompilerHost(commandLine.options,
  /* setParentNodes */
  true);
  var oldReadFile = compilerHost.readFile;

  compilerHost.readFile = function (fileName) {
    return path_1["default"].normalize(fileName) === path_1["default"].normalize(extra.filePath) ? code : oldReadFile(fileName);
  };

  var program = ts.createProgram([extra.filePath], commandLine.options, compilerHost);
  var ast = program.getSourceFile(extra.filePath);
  return ast && {
    ast: ast,
    program: program
  };
}

exports.createDefaultProgram = createDefaultProgram;