"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var debug_1 = __importDefault(require("debug"));

var ts = __importStar(require("typescript"));

var shared_1 = require("./shared");

var log = debug_1["default"]('typescript-eslint:typescript-estree:createIsolatedProgram');
/**
 * @param code The code of the file being linted
 * @returns Returns a new source file and program corresponding to the linted code
 */

function createIsolatedProgram(code, extra) {
  log('Getting isolated program in %s mode for: %s', extra.jsx ? 'TSX' : 'TS', extra.filePath);
  var compilerHost = {
    fileExists: function fileExists() {
      return true;
    },
    getCanonicalFileName: function getCanonicalFileName() {
      return extra.filePath;
    },
    getCurrentDirectory: function getCurrentDirectory() {
      return '';
    },
    getDirectories: function getDirectories() {
      return [];
    },
    getDefaultLibFileName: function getDefaultLibFileName() {
      return 'lib.d.ts';
    },
    // TODO: Support Windows CRLF
    getNewLine: function getNewLine() {
      return '\n';
    },
    getSourceFile: function getSourceFile(filename) {
      return ts.createSourceFile(filename, code, ts.ScriptTarget.Latest,
      /* setParentNodes */
      true, shared_1.getScriptKind(extra, filename));
    },
    readFile: function readFile() {
      return undefined;
    },
    useCaseSensitiveFileNames: function useCaseSensitiveFileNames() {
      return true;
    },
    writeFile: function writeFile() {
      return null;
    }
  };
  var program = ts.createProgram([extra.filePath], Object.assign({
    noResolve: true,
    target: ts.ScriptTarget.Latest,
    jsx: extra.jsx ? ts.JsxEmit.Preserve : undefined
  }, shared_1.createDefaultCompilerOptionsFromExtra(extra)), compilerHost);
  var ast = program.getSourceFile(extra.filePath);

  if (!ast) {
    throw new Error('Expected an ast to be returned for the single-file isolated program.');
  }

  return {
    ast: ast,
    program: program
  };
}

exports.createIsolatedProgram = createIsolatedProgram;