"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var visitor_keys_1 = require("./visitor-keys"); // eslint-disable-next-line @typescript-eslint/no-explicit-any


function isValidNode(x) {
  return x !== null && _typeof(x) === 'object' && typeof x.type === 'string';
}

function getVisitorKeysForNode(allVisitorKeys, node) {
  var keys = allVisitorKeys[node.type];
  return keys !== null && keys !== void 0 ? keys : [];
}

var SimpleTraverser =
/*#__PURE__*/
function () {
  function SimpleTraverser(_ref) {
    var enter = _ref.enter;

    _classCallCheck(this, SimpleTraverser);

    this.allVisitorKeys = visitor_keys_1.visitorKeys;
    this.enter = enter;
  }

  _createClass(SimpleTraverser, [{
    key: "traverse",
    value: function traverse(node, parent) {
      if (!isValidNode(node)) {
        return;
      }

      this.enter(node, parent);
      var keys = getVisitorKeysForNode(this.allVisitorKeys, node);

      if (keys.length < 1) {
        return;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;
          var childOrChildren = node[key];

          if (Array.isArray(childOrChildren)) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = childOrChildren[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var child = _step2.value;
                this.traverse(child, node);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          } else {
            this.traverse(childOrChildren, node);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return SimpleTraverser;
}();

function simpleTraverse(startingNode, options) {
  new SimpleTraverser(options).traverse(startingNode, undefined);
}

exports.simpleTraverse = simpleTraverse;