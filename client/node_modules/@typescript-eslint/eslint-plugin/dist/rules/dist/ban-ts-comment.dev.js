"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

var defaultOptions = [{
  'ts-expect-error': true,
  'ts-ignore': true,
  'ts-nocheck': true,
  'ts-check': false
}];
exports["default"] = util.createRule({
  name: 'ban-ts-comment',
  meta: {
    type: 'problem',
    docs: {
      description: 'Bans `// @ts-<directive>` comments from being used',
      category: 'Best Practices',
      recommended: false
    },
    messages: {
      tsDirectiveComment: 'Do not use "// @ts-{{directive}}" because it alters compilation errors.'
    },
    schema: [{
      type: 'object',
      properties: {
        'ts-expect-error': {
          type: 'boolean',
          "default": true
        },
        'ts-ignore': {
          type: 'boolean',
          "default": true
        },
        'ts-nocheck': {
          type: 'boolean',
          "default": true
        },
        'ts-check': {
          type: 'boolean',
          "default": false
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: defaultOptions,
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var tsCommentRegExp = /^\/*\s*@ts-(expect-error|ignore|check|nocheck)/;
    var sourceCode = context.getSourceCode();
    return {
      Program: function Program() {
        var comments = sourceCode.getAllComments();
        comments.forEach(function (comment) {
          var _a;

          if (comment.type !== experimental_utils_1.AST_TOKEN_TYPES.Line) {
            return;
          }

          var _ref3 = (_a = tsCommentRegExp.exec(comment.value)) !== null && _a !== void 0 ? _a : [],
              _ref4 = _slicedToArray(_ref3, 2),
              directive = _ref4[1];

          var fullDirective = "ts-".concat(directive);

          if (options[fullDirective]) {
            context.report({
              data: {
                directive: directive
              },
              node: comment,
              messageId: 'tsDirectiveComment'
            });
          }
        });
      }
    };
  }
});