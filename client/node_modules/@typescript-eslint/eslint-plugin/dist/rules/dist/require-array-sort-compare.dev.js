"use strict";

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'require-array-sort-compare',
  defaultOptions: [],
  meta: {
    type: 'problem',
    docs: {
      description: 'Requires `Array#sort` calls to always provide a `compareFunction`',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    messages: {
      requireCompare: "Require 'compare' argument."
    },
    schema: []
  },
  create: function create(context) {
    var service = util.getParserServices(context);
    var checker = service.program.getTypeChecker();
    return {
      ":matches(CallExpression, OptionalCallExpression)[arguments.length=0] > :matches(MemberExpression, OptionalMemberExpression)[property.name='sort'][computed=false]": function matchesCallExpressionOptionalCallExpressionArgumentsLength0MatchesMemberExpressionOptionalMemberExpressionPropertyNameSortComputedFalse(callee) {
        var tsNode = service.esTreeNodeToTSNodeMap.get(callee.object);
        var calleeObjType = util.getConstrainedTypeAtLocation(checker, tsNode);

        if (util.isTypeArrayTypeOrUnionOfArrayTypes(calleeObjType, checker)) {
          context.report({
            node: callee.parent,
            messageId: 'requireCompare'
          });
        }
      }
    };
  }
});