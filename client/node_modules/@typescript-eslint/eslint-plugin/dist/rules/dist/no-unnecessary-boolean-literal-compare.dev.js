"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var tsutils = __importStar(require("tsutils"));

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-unnecessary-boolean-literal-compare',
  meta: {
    docs: {
      description: 'Flags unnecessary equality comparisons against boolean literals',
      category: 'Stylistic Issues',
      recommended: false,
      requiresTypeChecking: true
    },
    fixable: 'code',
    messages: {
      direct: 'This expression unnecessarily compares a boolean value to a boolean instead of using it directly.',
      negated: 'This expression unnecessarily compares a boolean value to a boolean instead of negating it.'
    },
    schema: [],
    type: 'suggestion'
  },
  defaultOptions: [],
  create: function create(context) {
    var parserServices = util.getParserServices(context);
    var checker = parserServices.program.getTypeChecker();

    function getBooleanComparison(node) {
      var comparison = deconstructComparison(node);

      if (!comparison) {
        return undefined;
      }

      var expressionType = checker.getTypeAtLocation(parserServices.esTreeNodeToTSNodeMap.get(comparison.expression));

      if (!tsutils.isTypeFlagSet(expressionType, ts.TypeFlags.Boolean | ts.TypeFlags.BooleanLiteral)) {
        return undefined;
      }

      return comparison;
    }

    function deconstructComparison(node) {
      var comparisonType = util.getEqualsKind(node.operator);

      if (!comparisonType) {
        return undefined;
      }

      for (var _i = 0, _arr = [[node.right, node.left], [node.left, node.right]]; _i < _arr.length; _i++) {
        var _arr$_i = _slicedToArray(_arr[_i], 2),
            against = _arr$_i[0],
            expression = _arr$_i[1];

        if (against.type !== experimental_utils_1.AST_NODE_TYPES.Literal || typeof against.value !== 'boolean') {
          continue;
        }

        var value = against.value;
        var negated = node.operator.startsWith('!');
        return {
          forTruthy: value ? !negated : negated,
          expression: expression,
          negated: negated,
          range: expression.range[0] < against.range[0] ? [expression.range[1], against.range[1]] : [against.range[1], expression.range[1]]
        };
      }

      return undefined;
    }

    return {
      BinaryExpression: function BinaryExpression(node) {
        var comparison = getBooleanComparison(node);

        if (comparison) {
          context.report({
            fix:
            /*#__PURE__*/
            regeneratorRuntime.mark(function fix(fixer) {
              return regeneratorRuntime.wrap(function fix$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return fixer.removeRange(comparison.range);

                    case 2:
                      if (comparison.forTruthy) {
                        _context.next = 5;
                        break;
                      }

                      _context.next = 5;
                      return fixer.insertTextBefore(node, '!');

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, fix);
            }),
            messageId: comparison.negated ? 'negated' : 'direct',
            node: node
          });
        }
      }
    };
  }
});