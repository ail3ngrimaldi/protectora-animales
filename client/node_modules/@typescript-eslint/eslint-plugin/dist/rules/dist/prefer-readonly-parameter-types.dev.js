"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'prefer-readonly-parameter-types',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Requires that function parameters are typed as readonly to prevent accidental mutation of inputs',
      category: 'Possible Errors',
      recommended: false,
      requiresTypeChecking: true
    },
    schema: [{
      type: 'object',
      additionalProperties: false,
      properties: {
        checkParameterProperties: {
          type: 'boolean'
        }
      }
    }],
    messages: {
      shouldBeReadonly: 'Parameter should be a read only type.'
    }
  },
  defaultOptions: [{
    checkParameterProperties: true
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        checkParameterProperties = _ref2[0].checkParameterProperties;

    var _util$getParserServic = util.getParserServices(context),
        esTreeNodeToTSNodeMap = _util$getParserServic.esTreeNodeToTSNodeMap,
        program = _util$getParserServic.program;

    var checker = program.getTypeChecker();
    return _defineProperty({}, [experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression, experimental_utils_1.AST_NODE_TYPES.FunctionDeclaration, experimental_utils_1.AST_NODE_TYPES.FunctionExpression, experimental_utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration, experimental_utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, experimental_utils_1.AST_NODE_TYPES.TSDeclareFunction, experimental_utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, experimental_utils_1.AST_NODE_TYPES.TSFunctionType, experimental_utils_1.AST_NODE_TYPES.TSMethodSignature].join(', '), function (node) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = node.params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var param = _step.value;

          if (!checkParameterProperties && param.type === experimental_utils_1.AST_NODE_TYPES.TSParameterProperty) {
            continue;
          }

          var actualParam = param.type === experimental_utils_1.AST_NODE_TYPES.TSParameterProperty ? param.parameter : param;
          var tsNode = esTreeNodeToTSNodeMap.get(actualParam);
          var type = checker.getTypeAtLocation(tsNode);
          var isReadOnly = util.isTypeReadonly(checker, type);

          if (!isReadOnly) {
            context.report({
              node: actualParam,
              messageId: 'shouldBeReadonly'
            });
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    });
  }
});