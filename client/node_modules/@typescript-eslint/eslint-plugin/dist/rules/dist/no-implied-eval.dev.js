"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ts = __importStar(require("typescript"));

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var tsutils = __importStar(require("tsutils"));

var util = __importStar(require("../util"));

var FUNCTION_CONSTRUCTOR = 'Function';
var EVAL_LIKE_METHODS = new Set(['setImmediate', 'setInterval', 'setTimeout', 'execScript']);
exports["default"] = util.createRule({
  name: 'no-implied-eval',
  meta: {
    docs: {
      description: 'Disallow the use of `eval()`-like methods',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    messages: {
      noImpliedEvalError: 'Implied eval. Consider passing a function.',
      noFunctionConstructor: 'Implied eval. Do not use the Function constructor to create functions.'
    },
    schema: [],
    type: 'suggestion'
  },
  defaultOptions: [],
  create: function create(context) {
    var parserServices = util.getParserServices(context);
    var checker = parserServices.program.getTypeChecker();

    function getCalleeName(node) {
      if (node.type === experimental_utils_1.AST_NODE_TYPES.Identifier) {
        return node.name;
      }

      if (node.type === experimental_utils_1.AST_NODE_TYPES.MemberExpression && node.object.type === experimental_utils_1.AST_NODE_TYPES.Identifier && node.object.name === 'window') {
        if (node.property.type === experimental_utils_1.AST_NODE_TYPES.Identifier) {
          return node.property.name;
        }

        if (node.property.type === experimental_utils_1.AST_NODE_TYPES.Literal && typeof node.property.value === 'string') {
          return node.property.value;
        }
      }

      return null;
    }

    function isFunctionType(node) {
      var tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);
      var type = checker.getTypeAtLocation(tsNode);
      var symbol = type.getSymbol();

      if (symbol && tsutils.isSymbolFlagSet(symbol, ts.SymbolFlags.Function | ts.SymbolFlags.Method)) {
        return true;
      }

      var signatures = checker.getSignaturesOfType(type, ts.SignatureKind.Call);
      return signatures.length > 0;
    }

    function isFunction(node) {
      switch (node.type) {
        case experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression:
        case experimental_utils_1.AST_NODE_TYPES.FunctionDeclaration:
        case experimental_utils_1.AST_NODE_TYPES.FunctionExpression:
          return true;

        case experimental_utils_1.AST_NODE_TYPES.MemberExpression:
        case experimental_utils_1.AST_NODE_TYPES.Identifier:
          return isFunctionType(node);

        case experimental_utils_1.AST_NODE_TYPES.CallExpression:
          return node.callee.type === experimental_utils_1.AST_NODE_TYPES.Identifier && node.callee.name === 'bind' || isFunctionType(node);

        default:
          return false;
      }
    }

    function checkImpliedEval(node) {
      var calleeName = getCalleeName(node.callee);

      if (calleeName === null) {
        return;
      }

      if (calleeName === FUNCTION_CONSTRUCTOR) {
        context.report({
          node: node,
          messageId: 'noFunctionConstructor'
        });
        return;
      }

      if (node.arguments.length === 0) {
        return;
      }

      var _node$arguments = _slicedToArray(node.arguments, 1),
          handler = _node$arguments[0];

      if (EVAL_LIKE_METHODS.has(calleeName) && !isFunction(handler)) {
        context.report({
          node: handler,
          messageId: 'noImpliedEvalError'
        });
      }
    }

    return {
      NewExpression: checkImpliedEval,
      CallExpression: checkImpliedEval
    };
  }
});