"use strict";

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'prefer-function-type',
  meta: {
    docs: {
      description: 'Use function types instead of interfaces with call signatures',
      category: 'Best Practices',
      recommended: false
    },
    fixable: 'code',
    messages: {
      functionTypeOverCallableType: "{{ type }} has only a call signature - use '{{ sigSuggestion }}' instead."
    },
    schema: [],
    type: 'suggestion'
  },
  defaultOptions: [],
  create: function create(context) {
    var sourceCode = context.getSourceCode();
    /**
     * Checks if there the interface has exactly one supertype that isn't named 'Function'
     * @param node The node being checked
     */

    function hasOneSupertype(node) {
      if (!node["extends"] || node["extends"].length === 0) {
        return false;
      }

      if (node["extends"].length !== 1) {
        return true;
      }

      var expr = node["extends"][0].expression;
      return expr.type !== experimental_utils_1.AST_NODE_TYPES.Identifier || expr.name !== 'Function';
    }
    /**
     * @param parent The parent of the call signature causing the diagnostic
     */


    function shouldWrapSuggestion(parent) {
      if (!parent) {
        return false;
      }

      switch (parent.type) {
        case experimental_utils_1.AST_NODE_TYPES.TSUnionType:
        case experimental_utils_1.AST_NODE_TYPES.TSIntersectionType:
        case experimental_utils_1.AST_NODE_TYPES.TSArrayType:
          return true;

        default:
          return false;
      }
    }
    /**
     * @param call The call signature causing the diagnostic
     * @param parent The parent of the call
     * @returns The suggestion to report
     */


    function renderSuggestion(call, parent) {
      var start = call.range[0];
      var colonPos = call.returnType.range[0] - start;
      var text = sourceCode.getText().slice(start, call.range[1]);
      var suggestion = "".concat(text.slice(0, colonPos), " =>").concat(text.slice(colonPos + 1));

      if (shouldWrapSuggestion(parent.parent)) {
        suggestion = "(".concat(suggestion, ")");
      }

      if (parent.type === experimental_utils_1.AST_NODE_TYPES.TSInterfaceDeclaration) {
        if (typeof parent.typeParameters !== 'undefined') {
          return "type ".concat(sourceCode.getText().slice(parent.id.range[0], parent.typeParameters.range[1]), " = ").concat(suggestion);
        }

        return "type ".concat(parent.id.name, " = ").concat(suggestion);
      }

      return suggestion.endsWith(';') ? suggestion.slice(0, -1) : suggestion;
    }
    /**
     * @param member The TypeElement being checked
     * @param node The parent of member being checked
     */


    function checkMember(member, node) {
      if ((member.type === experimental_utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration || member.type === experimental_utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration) && typeof member.returnType !== 'undefined') {
        var suggestion = renderSuggestion(member, node);
        var fixStart = node.type === experimental_utils_1.AST_NODE_TYPES.TSTypeLiteral ? node.range[0] : sourceCode.getTokens(node).filter(function (token) {
          return token.type === experimental_utils_1.AST_TOKEN_TYPES.Keyword && token.value === 'interface';
        })[0].range[0];
        context.report({
          node: member,
          messageId: 'functionTypeOverCallableType',
          data: {
            type: node.type === experimental_utils_1.AST_NODE_TYPES.TSTypeLiteral ? 'Type literal' : 'Interface',
            sigSuggestion: suggestion
          },
          fix: function fix(fixer) {
            return fixer.replaceTextRange([fixStart, node.range[1]], suggestion);
          }
        });
      }
    }

    return {
      TSInterfaceDeclaration: function TSInterfaceDeclaration(node) {
        if (!hasOneSupertype(node) && node.body.body.length === 1) {
          checkMember(node.body.body[0], node);
        }
      },
      'TSTypeLiteral[members.length = 1]': function TSTypeLiteralMembersLength1(node) {
        checkMember(node.members[0], node);
      }
    };
  }
});