"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

exports["default"] = util.createRule({
  name: 'no-untyped-public-signature',
  meta: {
    deprecated: true,
    replacedBy: ['explicit-module-boundary-types'],
    docs: {
      description: 'Disallow untyped public methods',
      category: 'Best Practices',
      recommended: false
    },
    messages: {
      noReturnType: 'Public method has no return type.',
      untypedParameter: 'Public method parameters should be typed.'
    },
    schema: [{
      allowAdditionalProperties: false,
      properties: {
        ignoredMethods: {
          type: 'array',
          items: {
            type: 'string'
          }
        }
      },
      type: 'object'
    }],
    type: 'suggestion'
  },
  defaultOptions: [{
    ignoredMethods: []
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var ignoredMethods = new Set(options.ignoredMethods);

    function isPublicMethod(node) {
      return node.accessibility === 'public' || !node.accessibility;
    }

    function isIgnoredMethod(node, ignoredMethods) {
      if (node.key.type === experimental_utils_1.AST_NODE_TYPES.Literal && typeof node.key.value === 'string') {
        return ignoredMethods.has(node.key.value);
      }

      if (node.key.type === experimental_utils_1.AST_NODE_TYPES.TemplateLiteral && node.key.expressions.length === 0) {
        return ignoredMethods.has(node.key.quasis[0].value.raw);
      }

      if (!node.computed && node.key.type === experimental_utils_1.AST_NODE_TYPES.Identifier) {
        return ignoredMethods.has(node.key.name);
      }

      return false;
    }

    function isParamTyped(node) {
      return !!node.typeAnnotation && node.typeAnnotation.typeAnnotation.type !== experimental_utils_1.AST_NODE_TYPES.TSAnyKeyword;
    }

    function isReturnTyped(node) {
      if (!node) {
        return false;
      }

      return node.typeAnnotation && node.typeAnnotation.type !== experimental_utils_1.AST_NODE_TYPES.TSAnyKeyword;
    }

    return {
      'TSAbstractMethodDefinition, MethodDefinition': function TSAbstractMethodDefinitionMethodDefinition(node) {
        if (isPublicMethod(node) && !isIgnoredMethod(node, ignoredMethods)) {
          var paramIdentifiers = node.value.params.filter(function (param) {
            return param.type === experimental_utils_1.AST_NODE_TYPES.Identifier;
          });
          var identifiersHaveTypes = paramIdentifiers.every(isParamTyped);

          if (!identifiersHaveTypes) {
            context.report({
              node: node,
              messageId: 'untypedParameter',
              data: {}
            });
          }

          if (node.kind !== 'constructor' && node.kind !== 'set' && !isReturnTyped(node.value.returnType)) {
            context.report({
              node: node,
              messageId: 'noReturnType',
              data: {}
            });
          }
        }
      }
    };
  }
});