"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'triple-slash-reference',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Sets preference level for triple slash directives versus ES6-style import declarations',
      category: 'Best Practices',
      recommended: 'error'
    },
    messages: {
      tripleSlashReference: 'Do not use a triple slash reference for {{module}}, use `import` style instead.'
    },
    schema: [{
      type: 'object',
      properties: {
        lib: {
          "enum": ['always', 'never']
        },
        path: {
          "enum": ['always', 'never']
        },
        types: {
          "enum": ['always', 'never', 'prefer-import']
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{
    lib: 'always',
    path: 'never',
    types: 'prefer-import'
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ref2$ = _ref2[0],
        lib = _ref2$.lib,
        path = _ref2$.path,
        types = _ref2$.types;

    var programNode;
    var sourceCode = context.getSourceCode();
    var references = [];

    function hasMatchingReference(source) {
      references.forEach(function (reference) {
        if (reference.importName === source.value) {
          context.report({
            node: reference.comment,
            messageId: 'tripleSlashReference',
            data: {
              module: reference.importName
            }
          });
        }
      });
    }

    return {
      ImportDeclaration: function ImportDeclaration(node) {
        if (programNode) {
          hasMatchingReference(node.source);
        }
      },
      TSImportEqualsDeclaration: function TSImportEqualsDeclaration(node) {
        if (programNode) {
          var source = node.moduleReference.expression;
          hasMatchingReference(source);
        }
      },
      Program: function Program(node) {
        if (lib === 'always' && path === 'always' && types == 'always') {
          return;
        }

        programNode = node;
        var referenceRegExp = /^\/\s*<reference\s*(types|path|lib)\s*=\s*["|'](.*)["|']/;
        var commentsBefore = sourceCode.getCommentsBefore(programNode);
        commentsBefore.forEach(function (comment) {
          if (comment.type !== experimental_utils_1.AST_TOKEN_TYPES.Line) {
            return;
          }

          var referenceResult = referenceRegExp.exec(comment.value);

          if (referenceResult) {
            if (referenceResult[1] === 'types' && types === 'never' || referenceResult[1] === 'path' && path === 'never' || referenceResult[1] === 'lib' && lib === 'never') {
              context.report({
                node: comment,
                messageId: 'tripleSlashReference',
                data: {
                  module: referenceResult[2]
                }
              });
              return;
            }

            if (referenceResult[1] === 'types' && types === 'prefer-import') {
              references.push({
                comment: comment,
                importName: referenceResult[2]
              });
            }
          }
        });
      }
    };
  }
});