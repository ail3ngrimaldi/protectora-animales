"use strict";

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-extra-non-null-assertion',
  meta: {
    type: 'problem',
    docs: {
      description: 'Disallow extra non-null assertion',
      category: 'Stylistic Issues',
      recommended: false
    },
    fixable: 'code',
    schema: [],
    messages: {
      noExtraNonNullAssertion: 'Forbidden extra non-null assertion.'
    }
  },
  defaultOptions: [],
  create: function create(context) {
    function checkExtraNonNullAssertion(node) {
      context.report({
        node: node,
        messageId: 'noExtraNonNullAssertion',
        fix: function fix(fixer) {
          return fixer.removeRange([node.range[1] - 1, node.range[1]]);
        }
      });
    }

    return {
      'TSNonNullExpression > TSNonNullExpression': checkExtraNonNullAssertion,
      'OptionalMemberExpression > TSNonNullExpression': checkExtraNonNullAssertion,
      'OptionalCallExpression > TSNonNullExpression.callee': checkExtraNonNullAssertion
    };
  }
});