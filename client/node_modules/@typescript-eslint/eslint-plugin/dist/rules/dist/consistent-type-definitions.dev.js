"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'consistent-type-definitions',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Consistent with type definition either `interface` or `type`',
      category: 'Stylistic Issues',
      // too opinionated to be recommended
      recommended: false
    },
    messages: {
      interfaceOverType: 'Use an `interface` instead of a `type`.',
      typeOverInterface: 'Use a `type` instead of an `interface`.'
    },
    schema: [{
      "enum": ['interface', 'type']
    }],
    fixable: 'code'
  },
  defaultOptions: ['interface'],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        option = _ref2[0];

    var sourceCode = context.getSourceCode();
    return {
      "TSTypeAliasDeclaration[typeAnnotation.type='TSTypeLiteral']": function TSTypeAliasDeclarationTypeAnnotationTypeTSTypeLiteral(node) {
        if (option === 'interface') {
          context.report({
            node: node.id,
            messageId: 'interfaceOverType',
            fix: function fix(fixer) {
              var _a;

              var typeNode = (_a = node.typeParameters) !== null && _a !== void 0 ? _a : node.id;
              var fixes = [];
              var firstToken = sourceCode.getFirstToken(node);

              if (firstToken) {
                fixes.push(fixer.replaceText(firstToken, 'interface'));
                fixes.push(fixer.replaceTextRange([typeNode.range[1], node.typeAnnotation.range[0]], ' '));
              }

              var afterToken = sourceCode.getTokenAfter(node.typeAnnotation);

              if (afterToken && afterToken.type === experimental_utils_1.AST_TOKEN_TYPES.Punctuator && afterToken.value === ';') {
                fixes.push(fixer.remove(afterToken));
              }

              return fixes;
            }
          });
        }
      },
      TSInterfaceDeclaration: function TSInterfaceDeclaration(node) {
        if (option === 'type') {
          context.report({
            node: node.id,
            messageId: 'typeOverInterface',
            fix: function fix(fixer) {
              var _a;

              var typeNode = (_a = node.typeParameters) !== null && _a !== void 0 ? _a : node.id;
              var fixes = [];
              var firstToken = sourceCode.getFirstToken(node);

              if (firstToken) {
                fixes.push(fixer.replaceText(firstToken, 'type'));
                fixes.push(fixer.replaceTextRange([typeNode.range[1], node.body.range[0]], ' = '));
              }

              if (node["extends"]) {
                node["extends"].forEach(function (heritage) {
                  var typeIdentifier = sourceCode.getText(heritage);
                  fixes.push(fixer.insertTextAfter(node.body, " & ".concat(typeIdentifier)));
                });
              }

              return fixes;
            }
          });
        }
      }
    };
  }
});