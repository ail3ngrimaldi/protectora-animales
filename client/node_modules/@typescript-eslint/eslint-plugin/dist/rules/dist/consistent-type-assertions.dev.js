"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

exports["default"] = util.createRule({
  name: 'consistent-type-assertions',
  meta: {
    type: 'suggestion',
    docs: {
      category: 'Best Practices',
      description: 'Enforces consistent usage of type assertions',
      recommended: 'error'
    },
    messages: {
      as: "Use 'as {{cast}}' instead of '<{{cast}}>'.",
      'angle-bracket': "Use '<{{cast}}>' instead of 'as {{cast}}'.",
      never: 'Do not use any type assertions.',
      unexpectedObjectTypeAssertion: 'Always prefer const x: T = { ... }.'
    },
    schema: [{
      oneOf: [{
        type: 'object',
        properties: {
          assertionStyle: {
            "enum": ['never']
          }
        },
        additionalProperties: false,
        required: ['assertionStyle']
      }, {
        type: 'object',
        properties: {
          assertionStyle: {
            "enum": ['as', 'angle-bracket']
          },
          objectLiteralTypeAssertions: {
            "enum": ['allow', 'allow-as-parameter', 'never']
          }
        },
        additionalProperties: false,
        required: ['assertionStyle']
      }]
    }]
  },
  defaultOptions: [{
    assertionStyle: 'as',
    objectLiteralTypeAssertions: 'allow'
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var sourceCode = context.getSourceCode();

    function isConst(node) {
      if (node.type !== experimental_utils_1.AST_NODE_TYPES.TSTypeReference) {
        return false;
      }

      return node.typeName.type === experimental_utils_1.AST_NODE_TYPES.Identifier && node.typeName.name === 'const';
    }

    function reportIncorrectAssertionType(node) {
      // If this node is `as const`, then don't report an error.
      if (isConst(node.typeAnnotation)) {
        return;
      }

      var messageId = options.assertionStyle;
      context.report({
        node: node,
        messageId: messageId,
        data: messageId !== 'never' ? {
          cast: sourceCode.getText(node.typeAnnotation)
        } : {}
      });
    }

    function checkType(node) {
      switch (node.type) {
        case experimental_utils_1.AST_NODE_TYPES.TSAnyKeyword:
        case experimental_utils_1.AST_NODE_TYPES.TSUnknownKeyword:
          return false;

        case experimental_utils_1.AST_NODE_TYPES.TSTypeReference:
          return (// Ignore `as const` and `<const>`
            !isConst(node) || // Allow qualified names which have dots between identifiers, `Foo.Bar`
            node.typeName.type === experimental_utils_1.AST_NODE_TYPES.TSQualifiedName
          );

        default:
          return true;
      }
    }

    function checkExpression(node) {
      if (options.assertionStyle === 'never' || options.objectLiteralTypeAssertions === 'allow' || node.expression.type !== experimental_utils_1.AST_NODE_TYPES.ObjectExpression) {
        return;
      }

      if (options.objectLiteralTypeAssertions === 'allow-as-parameter' && node.parent && (node.parent.type === experimental_utils_1.AST_NODE_TYPES.NewExpression || node.parent.type === experimental_utils_1.AST_NODE_TYPES.CallExpression || node.parent.type === experimental_utils_1.AST_NODE_TYPES.OptionalCallExpression || node.parent.type === experimental_utils_1.AST_NODE_TYPES.ThrowStatement || node.parent.type === experimental_utils_1.AST_NODE_TYPES.AssignmentPattern)) {
        return;
      }

      if (checkType(node.typeAnnotation) && node.expression.type === experimental_utils_1.AST_NODE_TYPES.ObjectExpression) {
        context.report({
          node: node,
          messageId: 'unexpectedObjectTypeAssertion'
        });
      }
    }

    return {
      TSTypeAssertion: function TSTypeAssertion(node) {
        if (options.assertionStyle !== 'angle-bracket') {
          reportIncorrectAssertionType(node);
          return;
        }

        checkExpression(node);
      },
      TSAsExpression: function TSAsExpression(node) {
        if (options.assertionStyle !== 'as') {
          reportIncorrectAssertionType(node);
          return;
        }

        checkExpression(node);
      }
    };
  }
});