"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'restrict-plus-operands',
  meta: {
    type: 'problem',
    docs: {
      description: 'When adding two variables, operands must both be of type number or of type string',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    messages: {
      notNumbers: "Operands of '+' operation must either be both strings or both numbers.",
      notStrings: "Operands of '+' operation must either be both strings or both numbers. Consider using a template literal.",
      notBigInts: "Operands of '+' operation must be both bigints."
    },
    schema: [{
      type: 'object',
      additionalProperties: false,
      properties: {
        checkCompoundAssignments: {
          type: 'boolean'
        }
      }
    }]
  },
  defaultOptions: [{
    checkCompoundAssignments: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        checkCompoundAssignments = _ref2[0].checkCompoundAssignments;

    var service = util.getParserServices(context);
    var typeChecker = service.program.getTypeChecker();
    /**
     * Helper function to get base type of node
     */

    function getBaseTypeOfLiteralType(type) {
      if (type.isNumberLiteral()) {
        return 'number';
      }

      if (type.isStringLiteral()) {
        return 'string';
      } // is BigIntLiteral


      if (type.flags & ts.TypeFlags.BigIntLiteral) {
        return 'bigint';
      }

      if (type.isUnion()) {
        var types = type.types.map(getBaseTypeOfLiteralType);
        return types.every(function (value) {
          return value === types[0];
        }) ? types[0] : 'invalid';
      }

      var stringType = typeChecker.typeToString(type);

      if (stringType === 'number' || stringType === 'string' || stringType === 'bigint') {
        return stringType;
      }

      return 'invalid';
    }
    /**
     * Helper function to get base type of node
     * @param node the node to be evaluated.
     */


    function getNodeType(node) {
      var tsNode = service.esTreeNodeToTSNodeMap.get(node);
      var type = util.getConstrainedTypeAtLocation(typeChecker, tsNode);
      return getBaseTypeOfLiteralType(type);
    }

    function checkPlusOperands(node) {
      var leftType = getNodeType(node.left);
      var rightType = getNodeType(node.right);

      if (leftType === 'invalid' || rightType === 'invalid' || leftType !== rightType) {
        if (leftType === 'string' || rightType === 'string') {
          context.report({
            node: node,
            messageId: 'notStrings'
          });
        } else if (leftType === 'bigint' || rightType === 'bigint') {
          context.report({
            node: node,
            messageId: 'notBigInts'
          });
        } else {
          context.report({
            node: node,
            messageId: 'notNumbers'
          });
        }
      }
    }

    return {
      "BinaryExpression[operator='+']": checkPlusOperands,
      "AssignmentExpression[operator='+=']": function AssignmentExpressionOperator(node) {
        if (checkCompoundAssignments) {
          checkPlusOperands(node);
        }
      }
    };
  }
});