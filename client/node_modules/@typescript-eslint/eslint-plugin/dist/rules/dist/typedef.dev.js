"use strict";

var _properties, _ref;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'typedef',
  meta: {
    docs: {
      description: 'Requires type annotations to exist',
      category: 'Stylistic Issues',
      recommended: false
    },
    messages: {
      expectedTypedef: 'Expected a type annotation.',
      expectedTypedefNamed: 'Expected {{name}} to have a type annotation.'
    },
    schema: [{
      type: 'object',
      properties: (_properties = {}, _defineProperty(_properties, "arrayDestructuring"
      /* ArrayDestructuring */
      , {
        type: 'boolean'
      }), _defineProperty(_properties, "arrowParameter"
      /* ArrowParameter */
      , {
        type: 'boolean'
      }), _defineProperty(_properties, "memberVariableDeclaration"
      /* MemberVariableDeclaration */
      , {
        type: 'boolean'
      }), _defineProperty(_properties, "objectDestructuring"
      /* ObjectDestructuring */
      , {
        type: 'boolean'
      }), _defineProperty(_properties, "parameter"
      /* Parameter */
      , {
        type: 'boolean'
      }), _defineProperty(_properties, "propertyDeclaration"
      /* PropertyDeclaration */
      , {
        type: 'boolean'
      }), _defineProperty(_properties, "variableDeclaration"
      /* VariableDeclaration */
      , {
        type: 'boolean'
      }), _defineProperty(_properties, "variableDeclarationIgnoreFunction"
      /* VariableDeclarationIgnoreFunction */
      , {
        type: 'boolean'
      }), _properties)
    }],
    type: 'suggestion'
  },
  defaultOptions: [(_ref = {}, _defineProperty(_ref, "arrowParameter"
  /* ArrowParameter */
  , true), _defineProperty(_ref, "memberVariableDeclaration"
  /* MemberVariableDeclaration */
  , true), _defineProperty(_ref, "parameter"
  /* Parameter */
  , true), _defineProperty(_ref, "propertyDeclaration"
  /* PropertyDeclaration */
  , true), _ref)],
  create: function create(context, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 1),
        options = _ref3[0];

    function report(location, name) {
      context.report({
        node: location,
        messageId: name ? 'expectedTypedefNamed' : 'expectedTypedef',
        data: {
          name: name
        }
      });
    }

    function getNodeName(node) {
      return node.type === experimental_utils_1.AST_NODE_TYPES.Identifier ? node.name : undefined;
    }

    function isForOfStatementContext(node) {
      var current = node.parent;

      while (current) {
        switch (current.type) {
          case experimental_utils_1.AST_NODE_TYPES.VariableDeclarator:
          case experimental_utils_1.AST_NODE_TYPES.VariableDeclaration:
          case experimental_utils_1.AST_NODE_TYPES.ObjectPattern:
          case experimental_utils_1.AST_NODE_TYPES.ArrayPattern:
          case experimental_utils_1.AST_NODE_TYPES.Property:
            current = current.parent;
            break;

          case experimental_utils_1.AST_NODE_TYPES.ForOfStatement:
            return true;

          default:
            current = undefined;
        }
      }

      return false;
    }

    function checkParameters(params) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var param = _step.value;
          var annotationNode = void 0;

          switch (param.type) {
            case experimental_utils_1.AST_NODE_TYPES.AssignmentPattern:
              annotationNode = param.left;
              break;

            case experimental_utils_1.AST_NODE_TYPES.TSParameterProperty:
              annotationNode = param.parameter; // Check TS parameter property with default value like `constructor(private param: string = 'something') {}`

              if (annotationNode && annotationNode.type === experimental_utils_1.AST_NODE_TYPES.AssignmentPattern) {
                annotationNode = annotationNode.left;
              }

              break;

            default:
              annotationNode = param;
              break;
          }

          if (annotationNode !== undefined && !annotationNode.typeAnnotation) {
            report(param, getNodeName(param));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    function isVariableDeclarationIgnoreFunction(node) {
      return !!options["variableDeclarationIgnoreFunction"
      /* VariableDeclarationIgnoreFunction */
      ] && (node.type === experimental_utils_1.AST_NODE_TYPES.FunctionExpression || node.type === experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression);
    }

    return {
      ArrayPattern: function ArrayPattern(node) {
        if (options["arrayDestructuring"
        /* ArrayDestructuring */
        ] && !node.typeAnnotation && !isForOfStatementContext(node)) {
          report(node);
        }
      },
      ArrowFunctionExpression: function ArrowFunctionExpression(node) {
        if (options["arrowParameter"
        /* ArrowParameter */
        ]) {
          checkParameters(node.params);
        }
      },
      ClassProperty: function ClassProperty(node) {
        if (node.value && isVariableDeclarationIgnoreFunction(node.value)) {
          return;
        }

        if (options["memberVariableDeclaration"
        /* MemberVariableDeclaration */
        ] && !node.typeAnnotation) {
          report(node, node.key.type === experimental_utils_1.AST_NODE_TYPES.Identifier ? node.key.name : undefined);
        }
      },
      'FunctionDeclaration, FunctionExpression': function FunctionDeclarationFunctionExpression(node) {
        if (options["parameter"
        /* Parameter */
        ]) {
          checkParameters(node.params);
        }
      },
      ObjectPattern: function ObjectPattern(node) {
        if (options["objectDestructuring"
        /* ObjectDestructuring */
        ] && !node.typeAnnotation && !isForOfStatementContext(node)) {
          report(node);
        }
      },
      'TSIndexSignature, TSPropertySignature': function TSIndexSignatureTSPropertySignature(node) {
        if (options["propertyDeclaration"
        /* PropertyDeclaration */
        ] && !node.typeAnnotation) {
          report(node, node.type === experimental_utils_1.AST_NODE_TYPES.TSPropertySignature ? getNodeName(node.key) : undefined);
        }
      },
      VariableDeclarator: function VariableDeclarator(node) {
        if (!options["variableDeclaration"
        /* VariableDeclaration */
        ] || node.id.typeAnnotation || node.id.type === experimental_utils_1.AST_NODE_TYPES.ArrayPattern && !options["arrayDestructuring"
        /* ArrayDestructuring */
        ] || node.id.type === experimental_utils_1.AST_NODE_TYPES.ObjectPattern && !options["objectDestructuring"
        /* ObjectDestructuring */
        ] || node.init && isVariableDeclarationIgnoreFunction(node.init)) {
          return;
        }

        var current = node.parent;

        while (current) {
          switch (current.type) {
            case experimental_utils_1.AST_NODE_TYPES.VariableDeclaration:
              // Keep looking upwards
              current = current.parent;
              break;

            case experimental_utils_1.AST_NODE_TYPES.ForOfStatement:
            case experimental_utils_1.AST_NODE_TYPES.ForInStatement:
              // Stop traversing and don't report an error
              return;

            default:
              // Stop traversing
              current = undefined;
              break;
          }
        }

        report(node, getNodeName(node.id));
      }
    };
  }
});