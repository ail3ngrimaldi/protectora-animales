"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

var Usefulness;

(function (Usefulness) {
  Usefulness[Usefulness["Always"] = 0] = "Always";
  Usefulness["Never"] = "will";
  Usefulness["Sometimes"] = "may";
})(Usefulness || (Usefulness = {}));

exports["default"] = util.createRule({
  name: 'no-base-to-string',
  meta: {
    docs: {
      description: 'Requires that `.toString()` is only called on objects which provide useful information when stringified',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    messages: {
      baseToString: "'{{name}} {{certainty}} evaluate to '[object Object]' when stringified."
    },
    schema: [{
      type: 'object',
      properties: {
        ignoreTaggedTemplateExpressions: {
          type: 'boolean',
          "default": true
        },
        ignoredTypeNames: {
          type: 'array',
          items: {
            type: 'string'
          }
        }
      },
      additionalProperties: false
    }],
    type: 'suggestion'
  },
  defaultOptions: [{
    ignoreTaggedTemplateExpressions: true,
    ignoredTypeNames: ['RegExp']
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        option = _ref2[0];

    var _a;

    var parserServices = util.getParserServices(context);
    var typeChecker = parserServices.program.getTypeChecker();
    var ignoredTypeNames = (_a = option.ignoredTypeNames) !== null && _a !== void 0 ? _a : [];

    function checkExpression(node, type) {
      if (node.type === experimental_utils_1.AST_NODE_TYPES.Literal) {
        return;
      }

      var certainty = collectToStringCertainty(type !== null && type !== void 0 ? type : typeChecker.getTypeAtLocation(parserServices.esTreeNodeToTSNodeMap.get(node)));

      if (certainty === Usefulness.Always) {
        return;
      }

      context.report({
        data: {
          certainty: certainty,
          name: context.getSourceCode().getText(node)
        },
        messageId: 'baseToString',
        node: node
      });
    }

    function collectToStringCertainty(type) {
      var toString = typeChecker.getPropertyOfType(type, 'toString');
      var declarations = toString === null || toString === void 0 ? void 0 : toString.getDeclarations();

      if (!toString || !declarations || declarations.length === 0) {
        return Usefulness.Always;
      } // Patch for old version TypeScript, the Boolean type definition missing toString()


      if (type.flags & ts.TypeFlags.Boolean || type.flags & ts.TypeFlags.BooleanLiteral) {
        return Usefulness.Always;
      }

      if (ignoredTypeNames.includes(util.getTypeName(typeChecker, type))) {
        return Usefulness.Always;
      }

      if (declarations.every(function (_ref3) {
        var parent = _ref3.parent;
        return !ts.isInterfaceDeclaration(parent) || parent.name.text !== 'Object';
      })) {
        return Usefulness.Always;
      }

      if (!type.isUnion()) {
        return Usefulness.Never;
      }

      var allSubtypesUseful = true;
      var someSubtypeUseful = false;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = type.types[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var subType = _step.value;
          var subtypeUsefulness = collectToStringCertainty(subType);

          if (subtypeUsefulness !== Usefulness.Always && allSubtypesUseful) {
            allSubtypesUseful = false;
          }

          if (subtypeUsefulness !== Usefulness.Never && !someSubtypeUseful) {
            someSubtypeUseful = true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (allSubtypesUseful && someSubtypeUseful) {
        return Usefulness.Always;
      }

      if (someSubtypeUseful) {
        return Usefulness.Sometimes;
      }

      return Usefulness.Never;
    }

    return {
      'AssignmentExpression[operator = "+="], BinaryExpression[operator = "+"]': function AssignmentExpressionOperatorBinaryExpressionOperator(node) {
        var leftType = typeChecker.getTypeAtLocation(parserServices.esTreeNodeToTSNodeMap.get(node.left));
        var rightType = typeChecker.getTypeAtLocation(parserServices.esTreeNodeToTSNodeMap.get(node.right));

        if (util.getTypeName(typeChecker, leftType) === 'string') {
          checkExpression(node.right, rightType);
        } else if (util.getTypeName(typeChecker, rightType) === 'string') {
          checkExpression(node.left, leftType);
        }
      },
      'CallExpression > MemberExpression.callee > Identifier[name = "toString"].property': function CallExpressionMemberExpressionCalleeIdentifierNameToStringProperty(node) {
        var memberExpr = node.parent;
        checkExpression(memberExpr.object);
      },
      TemplateLiteral: function TemplateLiteral(node) {
        if (node.parent && node.parent.type === experimental_utils_1.AST_NODE_TYPES.TaggedTemplateExpression) {
          return;
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = node.expressions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var expression = _step2.value;
            checkExpression(expression);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    };
  }
});