"use strict";

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-for-in-array',
  meta: {
    docs: {
      description: 'Disallow iterating over an array with a for-in loop',
      category: 'Best Practices',
      recommended: 'error',
      requiresTypeChecking: true
    },
    messages: {
      forInViolation: 'For-in loops over arrays are forbidden. Use for-of or array.forEach instead.'
    },
    schema: [],
    type: 'problem'
  },
  defaultOptions: [],
  create: function create(context) {
    return {
      ForInStatement: function ForInStatement(node) {
        var parserServices = util.getParserServices(context);
        var checker = parserServices.program.getTypeChecker();
        var originalNode = parserServices.esTreeNodeToTSNodeMap.get(node);
        var type = util.getConstrainedTypeAtLocation(checker, originalNode.expression);

        if (util.isTypeArrayTypeOrUnionOfArrayTypes(type, checker) || (type.flags & ts.TypeFlags.StringLike) !== 0) {
          context.report({
            node: node,
            messageId: 'forInViolation'
          });
        }
      }
    };
  }
});