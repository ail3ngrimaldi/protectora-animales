"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var camelcase_1 = __importDefault(require("eslint/lib/rules/camelcase"));

var util = __importStar(require("../util"));

var schema = util.deepMerge(Array.isArray(camelcase_1["default"].meta.schema) ? camelcase_1["default"].meta.schema[0] : camelcase_1["default"].meta.schema, {
  properties: {
    genericType: {
      "enum": ['always', 'never']
    }
  }
});
exports["default"] = util.createRule({
  name: 'camelcase',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce camelCase naming convention',
      category: 'Stylistic Issues',
      recommended: 'error',
      extendsBaseRule: true
    },
    deprecated: true,
    replacedBy: ['naming-convention'],
    schema: [schema],
    messages: camelcase_1["default"].meta.messages
  },
  defaultOptions: [{
    allow: ['^UNSAFE_'],
    ignoreDestructuring: false,
    properties: 'never',
    genericType: 'never'
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var _a, _b;

    var rules = camelcase_1["default"].create(context);
    var TS_PROPERTY_TYPES = [experimental_utils_1.AST_NODE_TYPES.TSPropertySignature, experimental_utils_1.AST_NODE_TYPES.ClassProperty, experimental_utils_1.AST_NODE_TYPES.TSParameterProperty, experimental_utils_1.AST_NODE_TYPES.TSAbstractClassProperty];
    var genericType = options.genericType;
    var properties = options.properties;
    var allow = (_b = (_a = options.allow) === null || _a === void 0 ? void 0 : _a.map(function (entry) {
      return {
        name: entry,
        regex: new RegExp(entry)
      };
    })) !== null && _b !== void 0 ? _b : [];
    /**
     * Checks if a string contains an underscore and isn't all upper-case
     * @param  name The string to check.
     */

    function isUnderscored(name) {
      // if there's an underscore, it might be A_CONSTANT, which is okay
      return name.includes('_') && name !== name.toUpperCase();
    }
    /**
     * Checks if a string match the ignore list
     * @param name The string to check.
     * @returns if the string is ignored
     * @private
     */


    function isAllowed(name) {
      return allow.findIndex(function (entry) {
        return name === entry.name || entry.regex.test(name);
      }) !== -1;
    }
    /**
     * Checks if the the node is a valid TypeScript property type.
     * @param node the node to be validated.
     * @returns true if the node is a TypeScript property type.
     * @private
     */


    function isTSPropertyType(node) {
      if (TS_PROPERTY_TYPES.includes(node.type)) {
        return true;
      }

      if (node.type === experimental_utils_1.AST_NODE_TYPES.AssignmentPattern) {
        return node.parent !== undefined && TS_PROPERTY_TYPES.includes(node.parent.type);
      }

      return false;
    }

    function report(node) {
      context.report({
        node: node,
        messageId: 'notCamelCase',
        data: {
          name: node.name
        }
      });
    }

    return {
      Identifier: function Identifier(node) {
        /*
         * Leading and trailing underscores are commonly used to flag
         * private/protected identifiers, strip them
         */
        var name = node.name.replace(/^_+|_+$/g, ''); // First, we ignore the node if it match the ignore list

        if (isAllowed(name)) {
          return;
        } // Check TypeScript specific nodes


        var parent = node.parent;

        if (parent && isTSPropertyType(parent)) {
          if (properties === 'always' && isUnderscored(name)) {
            report(node);
          }

          return;
        }

        if (parent && parent.type === experimental_utils_1.AST_NODE_TYPES.TSTypeParameter) {
          if (genericType === 'always' && isUnderscored(name)) {
            report(node);
          }

          return;
        }

        if (parent && parent.type === experimental_utils_1.AST_NODE_TYPES.OptionalMemberExpression) {
          // Report underscored object names
          if (properties === 'always' && parent.object.type === experimental_utils_1.AST_NODE_TYPES.Identifier && parent.object.name === node.name && isUnderscored(name)) {
            report(node);
          }

          return;
        } // Let the base rule deal with the rest


        rules.Identifier(node);
      }
    };
  }
});