"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'restrict-template-expressions',
  meta: {
    type: 'problem',
    docs: {
      description: 'Enforce template literal expressions to be of string type',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    messages: {
      invalidType: 'Invalid type "{{type}}" of template literal expression.'
    },
    schema: [{
      type: 'object',
      properties: {
        allowNumber: {
          type: 'boolean'
        },
        allowBoolean: {
          type: 'boolean'
        },
        allowAny: {
          type: 'boolean'
        },
        allowNullable: {
          type: 'boolean'
        }
      }
    }]
  },
  defaultOptions: [{}],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var service = util.getParserServices(context);
    var typeChecker = service.program.getTypeChecker();

    function isUnderlyingTypePrimitive(type) {
      if (util.isTypeFlagSet(type, ts.TypeFlags.StringLike)) {
        return true;
      }

      if (options.allowNumber && util.isTypeFlagSet(type, ts.TypeFlags.NumberLike | ts.TypeFlags.BigIntLike)) {
        return true;
      }

      if (options.allowBoolean && util.isTypeFlagSet(type, ts.TypeFlags.BooleanLike)) {
        return true;
      }

      if (options.allowAny && util.isTypeFlagSet(type, ts.TypeFlags.Any)) {
        return true;
      }

      if (options.allowNullable && util.isTypeFlagSet(type, ts.TypeFlags.Null | ts.TypeFlags.Undefined)) {
        return true;
      }

      return false;
    }

    return {
      TemplateLiteral: function TemplateLiteral(node) {
        // don't check tagged template literals
        if (node.parent.type === experimental_utils_1.AST_NODE_TYPES.TaggedTemplateExpression) {
          return;
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = node.expressions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var expression = _step.value;
            var expressionType = util.getConstrainedTypeAtLocation(typeChecker, service.esTreeNodeToTSNodeMap.get(expression));

            if (!isInnerUnionOrIntersectionConformingTo(expressionType, isUnderlyingTypePrimitive)) {
              context.report({
                node: expression,
                messageId: 'invalidType',
                data: {
                  type: typeChecker.typeToString(expressionType)
                }
              });
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    };

    function isInnerUnionOrIntersectionConformingTo(type, predicate) {
      return rec(type);

      function rec(innerType) {
        if (innerType.isUnion()) {
          return innerType.types.every(rec);
        }

        if (innerType.isIntersection()) {
          return innerType.types.some(rec);
        }

        return predicate(innerType);
      }
    }
  }
});