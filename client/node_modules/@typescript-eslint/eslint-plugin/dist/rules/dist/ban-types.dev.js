"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));

function removeSpaces(str) {
  return str.replace(/ /g, '');
}

function stringifyTypeName(node, sourceCode) {
  return removeSpaces(sourceCode.getText(node));
}

function getCustomMessage(bannedType) {
  if (bannedType === null) {
    return '';
  }

  if (typeof bannedType === 'string') {
    return " ".concat(bannedType);
  }

  if (bannedType.message) {
    return " ".concat(bannedType.message);
  }

  return '';
}
/*
  Defaults for this rule should be treated as an "all or nothing"
  merge, so we need special handling here.

  See: https://github.com/typescript-eslint/typescript-eslint/issues/686
 */


var defaultTypes = {
  String: {
    message: 'Use string instead',
    fixWith: 'string'
  },
  Boolean: {
    message: 'Use boolean instead',
    fixWith: 'boolean'
  },
  Number: {
    message: 'Use number instead',
    fixWith: 'number'
  },
  Object: {
    message: 'Use Record<string, any> instead',
    fixWith: 'Record<string, any>'
  },
  Symbol: {
    message: 'Use symbol instead',
    fixWith: 'symbol'
  }
};
exports["default"] = util.createRule({
  name: 'ban-types',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Bans specific types from being used',
      category: 'Best Practices',
      recommended: 'error'
    },
    fixable: 'code',
    messages: {
      bannedTypeMessage: "Don't use '{{name}}' as a type.{{customMessage}}"
    },
    schema: [{
      type: 'object',
      properties: {
        types: {
          type: 'object',
          additionalProperties: {
            oneOf: [{
              type: 'null'
            }, {
              type: 'string'
            }, {
              type: 'object',
              properties: {
                message: {
                  type: 'string'
                },
                fixWith: {
                  type: 'string'
                }
              },
              additionalProperties: false
            }]
          }
        },
        extendDefaults: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{}],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var _a, _b;

    var extendDefaults = (_a = options.extendDefaults) !== null && _a !== void 0 ? _a : true;
    var customTypes = (_b = options.types) !== null && _b !== void 0 ? _b : {};
    var types = Object.assign(Object.assign({}, extendDefaults ? defaultTypes : {}), customTypes);
    var bannedTypes = new Map(Object.entries(types).map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          type = _ref4[0],
          data = _ref4[1];

      return [removeSpaces(type), data];
    }));

    function checkBannedTypes(typeNode) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stringifyTypeName(typeNode, context.getSourceCode());
      var bannedType = bannedTypes.get(name);

      if (bannedType !== undefined) {
        var customMessage = getCustomMessage(bannedType);
        var fixWith = bannedType && _typeof(bannedType) === 'object' && bannedType.fixWith;
        context.report({
          node: typeNode,
          messageId: 'bannedTypeMessage',
          data: {
            name: name,
            customMessage: customMessage
          },
          fix: fixWith ? function (fixer) {
            return fixer.replaceText(typeNode, fixWith);
          } : null
        });
      }
    }

    return Object.assign(Object.assign(Object.assign({}, bannedTypes.has('null') && {
      TSNullKeyword: function TSNullKeyword(node) {
        checkBannedTypes(node, 'null');
      }
    }), bannedTypes.has('undefined') && {
      TSUndefinedKeyword: function TSUndefinedKeyword(node) {
        checkBannedTypes(node, 'undefined');
      }
    }), {
      TSTypeLiteral: function TSTypeLiteral(node) {
        if (node.members.length) {
          return;
        }

        checkBannedTypes(node);
      },
      TSTypeReference: function TSTypeReference(_ref5) {
        var typeName = _ref5.typeName;
        checkBannedTypes(typeName);
      }
    });
  }
});