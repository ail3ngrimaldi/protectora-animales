"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

var getMemberExpressionName = function getMemberExpressionName(member) {
  if (!member.computed) {
    return member.property.name;
  }

  if (member.property.type === experimental_utils_1.AST_NODE_TYPES.Literal && typeof member.property.value === 'string') {
    return member.property.value;
  }

  return null;
};

exports["default"] = util.createRule({
  name: 'prefer-reduce-type-parameter',
  meta: {
    type: 'problem',
    docs: {
      category: 'Best Practices',
      recommended: false,
      description: 'Prefer using type parameter when calling `Array#reduce` instead of casting',
      requiresTypeChecking: true
    },
    messages: {
      preferTypeParameter: 'Unnecessary cast: Array#reduce accepts a type parameter for the default value.'
    },
    fixable: 'code',
    schema: []
  },
  defaultOptions: [],
  create: function create(context) {
    var service = util.getParserServices(context);
    var checker = service.program.getTypeChecker();
    return {
      ':matches(CallExpression, OptionalCallExpression) > :matches(MemberExpression, OptionalMemberExpression).callee': function matchesCallExpressionOptionalCallExpressionMatchesMemberExpressionOptionalMemberExpressionCallee(callee) {
        if (getMemberExpressionName(callee) !== 'reduce') {
          return;
        }

        var _callee$parent$argume = _slicedToArray(callee.parent.arguments, 2),
            secondArg = _callee$parent$argume[1];

        if (callee.parent.arguments.length < 2 || !util.isTypeAssertion(secondArg)) {
          return;
        } // Get the symbol of the `reduce` method.


        var tsNode = service.esTreeNodeToTSNodeMap.get(callee.object);
        var calleeObjType = util.getConstrainedTypeAtLocation(checker, tsNode); // Check the owner type of the `reduce` method.

        if (checker.isArrayType(calleeObjType)) {
          context.report({
            messageId: 'preferTypeParameter',
            node: secondArg,
            fix: function fix(fixer) {
              return [fixer.removeRange([secondArg.range[0], secondArg.expression.range[0]]), fixer.removeRange([secondArg.expression.range[1], secondArg.range[1]]), fixer.insertTextAfter(callee, "<".concat(context.getSourceCode().getText(secondArg.typeAnnotation), ">"))];
            }
          });
          return;
        }
      }
    };
  }
});