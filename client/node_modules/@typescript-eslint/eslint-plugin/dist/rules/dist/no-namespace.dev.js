"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-namespace',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Disallow the use of custom TypeScript modules and namespaces',
      category: 'Best Practices',
      recommended: 'error'
    },
    messages: {
      moduleSyntaxIsPreferred: 'ES2015 module syntax is preferred over custom TypeScript modules and namespaces.'
    },
    schema: [{
      type: 'object',
      properties: {
        allowDeclarations: {
          type: 'boolean'
        },
        allowDefinitionFiles: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{
    allowDeclarations: false,
    allowDefinitionFiles: true
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ref2$ = _ref2[0],
        allowDeclarations = _ref2$.allowDeclarations,
        allowDefinitionFiles = _ref2$.allowDefinitionFiles;

    var filename = context.getFilename();
    return {
      "TSModuleDeclaration[global!=true][id.type='Identifier']": function TSModuleDeclarationGlobalTrueIdTypeIdentifier(node) {
        if (node.parent && node.parent.type === experimental_utils_1.AST_NODE_TYPES.TSModuleDeclaration || allowDefinitionFiles && util.isDefinitionFile(filename) || allowDeclarations && node.declare === true) {
          return;
        }

        context.report({
          node: node,
          messageId: 'moduleSyntaxIsPreferred'
        });
      }
    };
  }
});