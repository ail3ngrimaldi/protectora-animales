"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ts = __importStar(require("typescript"));

var dot_notation_1 = __importDefault(require("eslint/lib/rules/dot-notation"));

var util_1 = require("../util");

exports["default"] = util_1.createRule({
  name: 'dot-notation',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'enforce dot notation whenever possible',
      category: 'Best Practices',
      recommended: false,
      extendsBaseRule: true,
      requiresTypeChecking: true
    },
    schema: [{
      type: 'object',
      properties: {
        allowKeywords: {
          type: 'boolean',
          "default": true
        },
        allowPattern: {
          type: 'string',
          "default": ''
        },
        allowPrivateClassPropertyAccess: {
          tyoe: 'boolean',
          "default": false
        }
      },
      additionalProperties: false
    }],
    fixable: dot_notation_1["default"].meta.fixable,
    messages: dot_notation_1["default"].meta.messages
  },
  defaultOptions: [{
    allowPrivateClassPropertyAccess: false,
    allowKeywords: true,
    allowPattern: ''
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var rules = dot_notation_1["default"].create(context);
    var allowPrivateClassPropertyAccess = options.allowPrivateClassPropertyAccess;
    var parserServices = util_1.getParserServices(context);
    var typeChecker = parserServices.program.getTypeChecker();
    return {
      MemberExpression: function MemberExpression(node) {
        var _a, _b, _c;

        if (allowPrivateClassPropertyAccess && node.computed) {
          // for perf reasons - only fetch the symbol if we have to
          var objectSymbol = typeChecker.getSymbolAtLocation(parserServices.esTreeNodeToTSNodeMap.get(node.property));

          if (((_c = (_b = (_a = objectSymbol === null || objectSymbol === void 0 ? void 0 : objectSymbol.getDeclarations()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.modifiers) === null || _c === void 0 ? void 0 : _c[0].kind) === ts.SyntaxKind.PrivateKeyword) {
            return;
          }
        }

        rules.MemberExpression(node);
      }
    };
  }
});