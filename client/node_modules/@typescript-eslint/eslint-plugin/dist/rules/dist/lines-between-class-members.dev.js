"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var lines_between_class_members_1 = __importDefault(require("eslint/lib/rules/lines-between-class-members"));

var util = __importStar(require("../util"));

var schema = util.deepMerge(Object.assign({}, lines_between_class_members_1["default"].meta.schema), {
  1: {
    exceptAfterOverload: {
      type: 'booleean',
      "default": true
    }
  }
});
exports["default"] = util.createRule({
  name: 'lines-between-class-members',
  meta: {
    type: 'layout',
    docs: {
      description: 'Require or disallow an empty line between class members',
      category: 'Stylistic Issues',
      recommended: false,
      extendsBaseRule: true
    },
    fixable: 'whitespace',
    schema: schema,
    messages: lines_between_class_members_1["default"].meta.messages
  },
  defaultOptions: ['always', {
    exceptAfterOverload: true,
    exceptAfterSingleLine: false
  }],
  create: function create(context, options) {
    var _a;

    var rules = lines_between_class_members_1["default"].create(context);
    var exceptAfterOverload = ((_a = options[1]) === null || _a === void 0 ? void 0 : _a.exceptAfterOverload) && options[0] === 'always';

    function isOverload(node) {
      return node.type === experimental_utils_1.AST_NODE_TYPES.MethodDefinition && node.value.type === experimental_utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression;
    }

    return {
      ClassBody: function ClassBody(node) {
        var body = exceptAfterOverload ? node.body.filter(function (node) {
          return !isOverload(node);
        }) : node.body;
        rules.ClassBody(Object.assign(Object.assign({}, node), {
          body: body
        }));
      }
    };
  }
});