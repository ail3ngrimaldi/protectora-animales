"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var no_empty_function_1 = __importDefault(require("eslint/lib/rules/no-empty-function"));

var util = __importStar(require("../util"));

var schema = util.deepMerge(Array.isArray(no_empty_function_1["default"].meta.schema) ? no_empty_function_1["default"].meta.schema[0] : no_empty_function_1["default"].meta.schema, {
  properties: {
    allow: {
      items: {
        "enum": ['functions', 'arrowFunctions', 'generatorFunctions', 'methods', 'generatorMethods', 'getters', 'setters', 'constructors', 'private-constructors', 'protected-constructors']
      }
    }
  }
});
exports["default"] = util.createRule({
  name: 'no-empty-function',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Disallow empty functions',
      category: 'Best Practices',
      recommended: 'error',
      extendsBaseRule: true
    },
    schema: [schema],
    messages: no_empty_function_1["default"].meta.messages
  },
  defaultOptions: [{
    allow: []
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ref2$0$allow = _ref2[0].allow,
        allow = _ref2$0$allow === void 0 ? [] : _ref2$0$allow;

    var rules = no_empty_function_1["default"].create(context);
    var isAllowedProtectedConstructors = allow.includes('protected-constructors');
    var isAllowedPrivateConstructors = allow.includes('private-constructors');
    /**
     * Check if the method body is empty
     * @param node the node to be validated
     * @returns true if the body is empty
     * @private
     */

    function isBodyEmpty(node) {
      return !node.body || node.body.body.length === 0;
    }
    /**
     * Check if method has parameter properties
     * @param node the node to be validated
     * @returns true if the body has parameter properties
     * @private
     */


    function hasParameterProperties(node) {
      return node.params && node.params.some(function (param) {
        return param.type === experimental_utils_1.AST_NODE_TYPES.TSParameterProperty;
      });
    }
    /**
     * @param node the node to be validated
     * @returns true if the constructor is allowed to be empty
     * @private
     */


    function isAllowedEmptyConstructor(node) {
      var parent = node.parent;

      if (isBodyEmpty(node) && (parent === null || parent === void 0 ? void 0 : parent.type) === experimental_utils_1.AST_NODE_TYPES.MethodDefinition && parent.kind === 'constructor') {
        var accessibility = parent.accessibility;
        return (// allow protected constructors
          accessibility === 'protected' && isAllowedProtectedConstructors || // allow private constructors
          accessibility === 'private' && isAllowedPrivateConstructors || // allow constructors which have parameter properties
          hasParameterProperties(node)
        );
      }

      return false;
    }

    return Object.assign(Object.assign({}, rules), {
      FunctionExpression: function FunctionExpression(node) {
        if (isAllowedEmptyConstructor(node)) {
          return;
        }

        rules.FunctionExpression(node);
      }
    });
  }
});