"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

exports["default"] = util.createRule({
  name: 'no-empty-interface',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Disallow the declaration of empty interfaces',
      category: 'Best Practices',
      recommended: 'error',
      suggestion: true
    },
    fixable: 'code',
    messages: {
      noEmpty: 'An empty interface is equivalent to `{}`.',
      noEmptyWithSuper: 'An interface declaring no members is equivalent to its supertype.'
    },
    schema: [{
      type: 'object',
      additionalProperties: false,
      properties: {
        allowSingleExtends: {
          type: 'boolean'
        }
      }
    }]
  },
  defaultOptions: [{
    allowSingleExtends: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        allowSingleExtends = _ref2[0].allowSingleExtends;

    return {
      TSInterfaceDeclaration: function TSInterfaceDeclaration(node) {
        var sourceCode = context.getSourceCode();
        var filename = context.getFilename();

        if (node.body.body.length !== 0) {
          // interface contains members --> Nothing to report
          return;
        }

        var extend = node["extends"];

        if (!extend || extend.length === 0) {
          context.report({
            node: node.id,
            messageId: 'noEmpty'
          });
        } else if (extend.length === 1) {
          // interface extends exactly 1 interface --> Report depending on rule setting
          if (!allowSingleExtends) {
            var fix = function fix(fixer) {
              var typeParam = '';

              if (node.typeParameters) {
                typeParam = sourceCode.getText(node.typeParameters);
              }

              return fixer.replaceText(node, "type ".concat(sourceCode.getText(node.id)).concat(typeParam, " = ").concat(sourceCode.getText(extend[0])));
            }; // Check if interface is within ambient declaration


            var useAutoFix = true;

            if (util.isDefinitionFile(filename)) {
              var scope = context.getScope();

              if (scope.block.parent && scope.block.parent.type === experimental_utils_1.AST_NODE_TYPES.TSModuleDeclaration && scope.block.parent.declare) {
                useAutoFix = false;
              }
            }

            context.report(Object.assign({
              node: node.id,
              messageId: 'noEmptyWithSuper'
            }, useAutoFix ? {
              fix: fix
            } : {
              suggest: [{
                messageId: 'noEmptyWithSuper',
                fix: fix
              }]
            }));
          }
        }
      }
    };
  }
});