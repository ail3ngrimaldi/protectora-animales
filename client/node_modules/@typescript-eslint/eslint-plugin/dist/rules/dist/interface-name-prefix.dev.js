"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));
/**
 * Parses a given value as options.
 */


function parseOptions(_ref) {
  var _ref2 = _slicedToArray(_ref, 1),
      options = _ref2[0];

  if (options === 'always') {
    return {
      prefixWithI: 'always',
      allowUnderscorePrefix: false
    };
  }

  if (options !== 'never' && options.prefixWithI === 'always') {
    return {
      prefixWithI: 'always',
      allowUnderscorePrefix: !!options.allowUnderscorePrefix
    };
  }

  return {
    prefixWithI: 'never'
  };
}

exports.parseOptions = parseOptions;
exports["default"] = util.createRule({
  name: 'interface-name-prefix',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Require that interface names should or should not prefixed with `I`',
      category: 'Stylistic Issues',
      // this will always be recommended as there's no reason to use this convention
      // https://github.com/typescript-eslint/typescript-eslint/issues/374
      recommended: 'error'
    },
    deprecated: true,
    replacedBy: ['naming-convention'],
    messages: {
      noPrefix: 'Interface name must not be prefixed with "I".',
      alwaysPrefix: 'Interface name must be prefixed with "I".'
    },
    schema: [{
      oneOf: [{
        "enum": [// Deprecated, equivalent to: { prefixWithI: 'never' }
        'never', // Deprecated, equivalent to: { prefixWithI: 'always', allowUnderscorePrefix: false }
        'always']
      }, {
        type: 'object',
        properties: {
          prefixWithI: {
            type: 'string',
            "enum": ['never']
          }
        },
        additionalProperties: false
      }, {
        type: 'object',
        properties: {
          prefixWithI: {
            type: 'string',
            "enum": ['always']
          },
          allowUnderscorePrefix: {
            type: 'boolean'
          }
        },
        required: ['prefixWithI'],
        additionalProperties: false
      }]
    }]
  },
  defaultOptions: [{
    prefixWithI: 'never'
  }],
  create: function create(context, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        options = _ref4[0];

    var parsedOptions = parseOptions([options]);
    /**
     * Checks if a string is prefixed with "I".
     * @param name The string to check
     */

    function isPrefixedWithI(name) {
      return /^I[A-Z]/.test(name);
    }
    /**
     * Checks if a string is prefixed with "I" or "_I".
     * @param name The string to check
     */


    function isPrefixedWithIOrUnderscoreI(name) {
      return /^_?I[A-Z]/.test(name);
    }

    return {
      TSInterfaceDeclaration: function TSInterfaceDeclaration(node) {
        if (parsedOptions.prefixWithI === 'never') {
          if (isPrefixedWithIOrUnderscoreI(node.id.name)) {
            context.report({
              node: node.id,
              messageId: 'noPrefix'
            });
          }
        } else {
          if (parsedOptions.allowUnderscorePrefix) {
            if (!isPrefixedWithIOrUnderscoreI(node.id.name)) {
              context.report({
                node: node.id,
                messageId: 'alwaysPrefix'
              });
            }
          } else {
            if (!isPrefixedWithI(node.id.name)) {
              context.report({
                node: node.id,
                messageId: 'alwaysPrefix'
              });
            }
          }
        }
      }
    };
  }
});