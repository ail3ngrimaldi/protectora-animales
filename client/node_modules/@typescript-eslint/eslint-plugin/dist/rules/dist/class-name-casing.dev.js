"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'class-name-casing',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Require PascalCased class and interface names',
      category: 'Best Practices',
      recommended: 'error'
    },
    deprecated: true,
    replacedBy: ['naming-convention'],
    messages: {
      notPascalCased: "{{friendlyName}} '{{name}}' must be PascalCased."
    },
    schema: [{
      type: 'object',
      properties: {
        allowUnderscorePrefix: {
          type: 'boolean',
          "default": false
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{
    allowUnderscorePrefix: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var UNDERSCORE = '_';
    /**
     * Determine if the string is Upper cased
     * @param str
     */

    function isUpperCase(str) {
      return str === str.toUpperCase();
    }
    /**
     * Determine if the identifier name is PascalCased
     * @param name The identifier name
     */


    function isPascalCase(name) {
      var startIndex = options.allowUnderscorePrefix && name.startsWith(UNDERSCORE) ? 1 : 0;
      return isUpperCase(name.charAt(startIndex)) && !name.includes(UNDERSCORE, startIndex);
    }
    /**
     * Report a class declaration as invalid
     * @param decl The declaration
     * @param id The name of the declaration
     */


    function report(decl, id) {
      var friendlyName;

      switch (decl.type) {
        case experimental_utils_1.AST_NODE_TYPES.ClassDeclaration:
        case experimental_utils_1.AST_NODE_TYPES.ClassExpression:
          friendlyName = decl["abstract"] ? 'Abstract class' : 'Class';
          break;

        case experimental_utils_1.AST_NODE_TYPES.TSInterfaceDeclaration:
          friendlyName = 'Interface';
          break;
      }

      context.report({
        node: id,
        messageId: 'notPascalCased',
        data: {
          friendlyName: friendlyName,
          name: id.name
        }
      });
    }

    return {
      'ClassDeclaration, TSInterfaceDeclaration, ClassExpression': function ClassDeclarationTSInterfaceDeclarationClassExpression(node) {
        // class expressions (i.e. export default class {}) are OK
        if (node.id && !isPascalCase(node.id.name)) {
          report(node, node.id);
        }
      },
      "VariableDeclarator[init.type='ClassExpression']": function VariableDeclaratorInitTypeClassExpression(node) {
        if (node.id.type === experimental_utils_1.AST_NODE_TYPES.ArrayPattern || node.id.type === experimental_utils_1.AST_NODE_TYPES.ObjectPattern) {// TODO - handle the BindingPattern case maybe?

          /*
          // this example makes me barf, but it's valid code
          var { bar } = class {
            static bar() { return 2 }
          }
          */
        } else {
          var id = node.id;
          var nodeInit = node.init;

          if (id && !nodeInit.id && !isPascalCase(id.name)) {
            report(nodeInit, id);
          }
        }
      }
    };
  }
});