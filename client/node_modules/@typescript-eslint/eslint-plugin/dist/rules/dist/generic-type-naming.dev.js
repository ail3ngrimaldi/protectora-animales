"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'generic-type-naming',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforces naming of generic type variables',
      category: 'Stylistic Issues',
      // too opinionated to be recommended
      recommended: false
    },
    deprecated: true,
    replacedBy: ['naming-convention'],
    messages: {
      paramNotMatchRule: 'Type parameter {{name}} does not match rule {{rule}}.'
    },
    schema: [{
      type: 'string'
    }]
  },
  defaultOptions: [// Matches: T , TA , TAbc , TA1Bca , T1 , T2
  '^T([A-Z0-9][a-zA-Z0-9]*){0,1}$'],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        rule = _ref2[0];

    var regex = new RegExp(rule);
    return {
      TSTypeParameter: function TSTypeParameter(node) {
        var name = node.name.name;

        if (name && !regex.test(name)) {
          context.report({
            node: node,
            messageId: 'paramNotMatchRule',
            data: {
              name: name,
              rule: rule
            }
          });
        }
      }
    };
  }
});