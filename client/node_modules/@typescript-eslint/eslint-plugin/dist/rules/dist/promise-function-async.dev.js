"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'promise-function-async',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Requires any function or method that returns a Promise to be marked async',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    messages: {
      missingAsync: 'Functions that return promises must be async.'
    },
    schema: [{
      type: 'object',
      properties: {
        allowAny: {
          type: 'boolean'
        },
        allowedPromiseNames: {
          type: 'array',
          items: {
            type: 'string'
          }
        },
        checkArrowFunctions: {
          type: 'boolean'
        },
        checkFunctionDeclarations: {
          type: 'boolean'
        },
        checkFunctionExpressions: {
          type: 'boolean'
        },
        checkMethodDeclarations: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{
    allowAny: true,
    allowedPromiseNames: [],
    checkArrowFunctions: true,
    checkFunctionDeclarations: true,
    checkFunctionExpressions: true,
    checkMethodDeclarations: true
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ref2$ = _ref2[0],
        allowAny = _ref2$.allowAny,
        allowedPromiseNames = _ref2$.allowedPromiseNames,
        checkArrowFunctions = _ref2$.checkArrowFunctions,
        checkFunctionDeclarations = _ref2$.checkFunctionDeclarations,
        checkFunctionExpressions = _ref2$.checkFunctionExpressions,
        checkMethodDeclarations = _ref2$.checkMethodDeclarations;

    var allAllowedPromiseNames = new Set(['Promise'].concat(_toConsumableArray(allowedPromiseNames)));
    var parserServices = util.getParserServices(context);
    var checker = parserServices.program.getTypeChecker();

    function validateNode(node) {
      var originalNode = parserServices.esTreeNodeToTSNodeMap.get(node);
      var signatures = checker.getTypeAtLocation(originalNode).getCallSignatures();

      if (!signatures.length) {
        return;
      }

      var returnType = checker.getReturnTypeOfSignature(signatures[0]);

      if (!util.containsAllTypesByName(returnType, allowAny, allAllowedPromiseNames)) {
        return;
      }

      if (node.parent && (node.parent.type === experimental_utils_1.AST_NODE_TYPES.Property || node.parent.type === experimental_utils_1.AST_NODE_TYPES.MethodDefinition) && (node.parent.kind === 'get' || node.parent.kind === 'set')) {
        return;
      }

      context.report({
        messageId: 'missingAsync',
        node: node
      });
    }

    return {
      'ArrowFunctionExpression[async = false]': function ArrowFunctionExpressionAsyncFalse(node) {
        if (checkArrowFunctions) {
          validateNode(node);
        }
      },
      'FunctionDeclaration[async = false]': function FunctionDeclarationAsyncFalse(node) {
        if (checkFunctionDeclarations) {
          validateNode(node);
        }
      },
      'FunctionExpression[async = false]': function FunctionExpressionAsyncFalse(node) {
        if (node.parent && 'kind' in node.parent && node.parent.kind === 'method') {
          if (checkMethodDeclarations) {
            validateNode(node.parent);
          }
        } else if (checkFunctionExpressions) {
          validateNode(node);
        }
      }
    };
  }
});