"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-extraneous-class',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Forbids the use of classes as namespaces',
      category: 'Best Practices',
      recommended: false
    },
    schema: [{
      type: 'object',
      additionalProperties: false,
      properties: {
        allowConstructorOnly: {
          type: 'boolean'
        },
        allowEmpty: {
          type: 'boolean'
        },
        allowStaticOnly: {
          type: 'boolean'
        },
        allowWithDecorator: {
          type: 'boolean'
        }
      }
    }],
    messages: {
      empty: 'Unexpected empty class.',
      onlyStatic: 'Unexpected class with only static properties.',
      onlyConstructor: 'Unexpected class with only a constructor.'
    }
  },
  defaultOptions: [{
    allowConstructorOnly: false,
    allowEmpty: false,
    allowStaticOnly: false,
    allowWithDecorator: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ref2$ = _ref2[0],
        allowConstructorOnly = _ref2$.allowConstructorOnly,
        allowEmpty = _ref2$.allowEmpty,
        allowStaticOnly = _ref2$.allowStaticOnly,
        allowWithDecorator = _ref2$.allowWithDecorator;

    var isAllowWithDecorator = function isAllowWithDecorator(node) {
      return !!(allowWithDecorator && node && node.decorators && node.decorators.length);
    };

    return {
      ClassBody: function ClassBody(node) {
        var parent = node.parent;

        if (!parent || parent.superClass) {
          return;
        }

        var reportNode = 'id' in parent && parent.id ? parent.id : parent;

        if (node.body.length === 0) {
          if (allowEmpty || isAllowWithDecorator(parent)) {
            return;
          }

          context.report({
            node: reportNode,
            messageId: 'empty'
          });
          return;
        }

        var onlyStatic = true;
        var onlyConstructor = true;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = node.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var prop = _step.value;

            if ('kind' in prop && prop.kind === 'constructor') {
              if (prop.value.params.some(function (param) {
                return param.type === experimental_utils_1.AST_NODE_TYPES.TSParameterProperty;
              })) {
                onlyConstructor = false;
                onlyStatic = false;
              }
            } else {
              onlyConstructor = false;

              if ('static' in prop && !prop["static"]) {
                onlyStatic = false;
              }
            }

            if (!(onlyStatic || onlyConstructor)) {
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (onlyConstructor) {
          if (!allowConstructorOnly) {
            context.report({
              node: reportNode,
              messageId: 'onlyConstructor'
            });
          }

          return;
        }

        if (onlyStatic && !allowStaticOnly) {
          context.report({
            node: reportNode,
            messageId: 'onlyStatic'
          });
        }
      }
    };
  }
});