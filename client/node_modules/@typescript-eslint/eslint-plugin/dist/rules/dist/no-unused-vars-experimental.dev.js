"use strict";
/* eslint-disable no-fallthrough */

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

exports.DEFAULT_IGNORED_REGEX_STRING = '^_';
exports["default"] = util.createRule({
  name: 'no-unused-vars-experimental',
  meta: {
    type: 'problem',
    docs: {
      description: 'Disallow unused variables and arguments',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    schema: [{
      type: 'object',
      properties: {
        ignoredNamesRegex: {
          oneOf: [{
            type: 'string'
          }, {
            type: 'boolean',
            "enum": [false]
          }]
        },
        ignoreArgsIfArgsAfterAreUsed: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }],
    messages: {
      unused: "{{type}} '{{name}}' is declared but its value is never read.",
      unusedWithIgnorePattern: "{{type}} '{{name}}' is declared but its value is never read. Allowed unused names must match {{pattern}}.",
      unusedImport: 'All imports in import declaration are unused.',
      unusedTypeParameters: 'All type parameters are unused.'
    }
  },
  defaultOptions: [{
    ignoredNamesRegex: exports.DEFAULT_IGNORED_REGEX_STRING,
    ignoreArgsIfArgsAfterAreUsed: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        userOptions = _ref2[0];

    var _a;

    var parserServices = util.getParserServices(context);
    var tsProgram = parserServices.program;
    var afterAllDiagnosticsCallbacks = [];
    var options = {
      ignoredNames: userOptions && typeof userOptions.ignoredNamesRegex === 'string' ? new RegExp(userOptions.ignoredNamesRegex) : null,
      ignoreArgsIfArgsAfterAreUsed: (_a = userOptions.ignoreArgsIfArgsAfterAreUsed) !== null && _a !== void 0 ? _a : false
    };

    function handleIdentifier(identifier) {
      function report(type) {
        var node = parserServices.tsNodeToESTreeNodeMap.get(identifier);
        var regex = options.ignoredNames;
        var name = identifier.getText();

        if (regex) {
          if (!regex.test(name)) {
            context.report({
              node: node,
              messageId: 'unusedWithIgnorePattern',
              data: {
                name: name,
                type: type,
                pattern: regex.toString()
              }
            });
          }
        } else {
          context.report({
            node: node,
            messageId: 'unused',
            data: {
              name: name,
              type: type
            }
          });
        }
      }

      var parent = identifier.parent; // is a single variable diagnostic

      switch (parent.kind) {
        case ts.SyntaxKind.BindingElement:
        case ts.SyntaxKind.ObjectBindingPattern:
          report('Destructured Variable');
          break;

        case ts.SyntaxKind.ClassDeclaration:
          report('Class');
          break;

        case ts.SyntaxKind.EnumDeclaration:
          report('Enum');
          break;

        case ts.SyntaxKind.FunctionDeclaration:
          report('Function');
          break;
        // this won't happen because there are specific nodes that wrap up named/default import identifiers
        // case ts.SyntaxKind.ImportDeclaration:
        // import equals is always treated as a variable

        case ts.SyntaxKind.ImportEqualsDeclaration: // the default import is NOT used, but a named import is used

        case ts.SyntaxKind.ImportClause: // a named import is NOT used, but either another named import, or the default import is used

        case ts.SyntaxKind.ImportSpecifier: // a namespace import is NOT used, but the default import is used

        case ts.SyntaxKind.NamespaceImport:
          // eslint-disable-next-line @typescript-eslint/internal/prefer-ast-types-enum
          report('Import');
          break;

        case ts.SyntaxKind.InterfaceDeclaration:
          report('Interface');
          break;

        case ts.SyntaxKind.MethodDeclaration:
          report('Method');
          break;

        case ts.SyntaxKind.Parameter:
          handleParameterDeclaration(identifier, parent);
          break;

        case ts.SyntaxKind.PropertyDeclaration:
          // eslint-disable-next-line @typescript-eslint/internal/prefer-ast-types-enum
          report('Property');
          break;

        case ts.SyntaxKind.TypeAliasDeclaration:
          report('Type');
          break;

        case ts.SyntaxKind.TypeParameter:
          handleTypeParam(identifier);
          break;

        case ts.SyntaxKind.VariableDeclaration:
          report('Variable');
          break;

        default:
          throw new Error("Unknown node with kind ".concat(parent.kind, "."));
        // TODO - should we just handle this gracefully?
        // report('Unknown Node');
        // break;
      }
    }

    var unusedParameters = new Set();

    function handleParameterDeclaration(identifier, parent) {
      var name = identifier.getText(); // regardless of if the paramter is ignored, track that it had a diagnostic fired on it

      unusedParameters.add(identifier);
      /*
      NOTE - Typescript will automatically ignore parameters that have a
             leading underscore in their name. We cannot do anything about this.
      */

      function report() {
        var node = parserServices.tsNodeToESTreeNodeMap.get(identifier);
        context.report({
          node: node,
          messageId: 'unused',
          data: {
            name: name,
            type: 'Parameter'
          }
        });
      }

      var isLastParameter = parent.parent.parameters.indexOf(parent) === parent.parent.parameters.length - 1;

      if (!isLastParameter && options.ignoreArgsIfArgsAfterAreUsed) {
        // once all diagnostics are processed, we can check if the following args are unused
        afterAllDiagnosticsCallbacks.push(function () {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = parent.parent.parameters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var param = _step.value;

              if (!unusedParameters.has(param.name)) {
                return;
              }
            } // none of the following params were unused, so report

          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          report();
        });
      } else {
        report();
      }
    }

    function handleImportDeclaration(parent) {
      // the entire import statement is unused

      /*
      NOTE - Typescript will automatically ignore imports that have a
             leading underscore in their name. We cannot do anything about this.
      */
      context.report({
        messageId: 'unusedImport',
        node: parserServices.tsNodeToESTreeNodeMap.get(parent)
      });
    }

    function handleDestructure(parent) {
      // the entire destructure is unused
      // note that this case only ever triggers for simple, single-level destructured objects
      // i.e. these will not trigger it:
      // - const {a:_a, b, c: {d}} = z;
      // - const [a, b] = c;
      parent.elements.forEach(function (element) {
        if (element.kind === ts.SyntaxKind.BindingElement) {
          var name = element.name;

          if (name.kind === ts.SyntaxKind.Identifier) {
            handleIdentifier(name);
          }
        }
      });
    }

    function handleTypeParamList(node) {
      // the entire generic decl list is unused

      /*
      NOTE - Typescript will automatically ignore generics that have a
             leading underscore in their name. We cannot do anything about this.
      */
      var parent = parserServices.tsNodeToESTreeNodeMap.get(node);
      context.report({
        messageId: 'unusedTypeParameters',
        node: parent.typeParameters
      });
    }

    function handleTypeParam(identifier) {
      context.report({
        node: parserServices.tsNodeToESTreeNodeMap.get(identifier),
        messageId: 'unused',
        data: {
          name: identifier.getText(),
          type: 'Type Parameter'
        }
      });
    }

    return {
      'Program:exit': function ProgramExit(program) {
        var tsNode = parserServices.esTreeNodeToTSNodeMap.get(program);
        var sourceFile = util.getSourceFileOfNode(tsNode);
        var diagnostics = tsProgram.getSemanticDiagnostics(sourceFile);
        diagnostics.forEach(function (diag) {
          if (isUnusedDiagnostic(diag.code)) {
            if (diag.start !== undefined) {
              var node = util.getTokenAtPosition(sourceFile, diag.start);
              var parent = node.parent;

              if (isIdentifier(node)) {
                handleIdentifier(node);
              } else if (isImport(parent)) {
                handleImportDeclaration(parent);
              } else if (isDestructure(parent)) {
                handleDestructure(parent);
              } else if (isGeneric(node, parent)) {
                handleTypeParamList(parent);
              }
            }
          }
        }); // trigger all the checks to be done after all the diagnostics have been evaluated

        afterAllDiagnosticsCallbacks.forEach(function (cb) {
          return cb();
        });
      }
    };
  }
});
/**
 * Checks if the diagnostic code is one of the expected "unused var" codes
 */

function isUnusedDiagnostic(code) {
  return [6133, 6138, 6192, 6196, 6198, 6199, 6205].includes(code);
}
/**
 * Checks if the given node is a destructuring pattern
 */


function isDestructure(node) {
  return node.kind === ts.SyntaxKind.ObjectBindingPattern || node.kind === ts.SyntaxKind.ArrayBindingPattern;
}

function isImport(node) {
  return node.kind === ts.SyntaxKind.ImportDeclaration;
}

function isIdentifier(node) {
  return node.kind === ts.SyntaxKind.Identifier;
}

function isGeneric(node, parent) {
  return node.kind === ts.SyntaxKind.LessThanToken && parent.typeParameters !== undefined;
}