"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'prefer-nullish-coalescing',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce the usage of the nullish coalescing operator instead of logical chaining',
      category: 'Best Practices',
      recommended: false,
      suggestion: true,
      requiresTypeChecking: true
    },
    fixable: 'code',
    messages: {
      preferNullish: 'Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.'
    },
    schema: [{
      type: 'object',
      properties: {
        ignoreConditionalTests: {
          type: 'boolean'
        },
        ignoreMixedLogicalExpressions: {
          type: 'boolean'
        },
        forceSuggestionFixer: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{
    ignoreConditionalTests: true,
    ignoreMixedLogicalExpressions: true,
    forceSuggestionFixer: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ref2$ = _ref2[0],
        ignoreConditionalTests = _ref2$.ignoreConditionalTests,
        ignoreMixedLogicalExpressions = _ref2$.ignoreMixedLogicalExpressions,
        forceSuggestionFixer = _ref2$.forceSuggestionFixer;

    var parserServices = util.getParserServices(context);
    var sourceCode = context.getSourceCode();
    var checker = parserServices.program.getTypeChecker();
    return {
      'LogicalExpression[operator = "||"]': function LogicalExpressionOperator(node) {
        var _marked =
        /*#__PURE__*/
        regeneratorRuntime.mark(fix);

        var tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);
        var type = checker.getTypeAtLocation(tsNode.left);
        var isNullish = util.isNullableType(type, {
          allowUndefined: true
        });

        if (!isNullish) {
          return;
        }

        if (ignoreConditionalTests === true && isConditionalTest(node)) {
          return;
        }

        var isMixedLogical = isMixedLogicalExpression(node);

        if (ignoreMixedLogicalExpressions === true && isMixedLogical) {
          return;
        }

        var barBarOperator = util.nullThrows(sourceCode.getTokenAfter(node.left, function (token) {
          return token.type === experimental_utils_1.AST_TOKEN_TYPES.Punctuator && token.value === node.operator;
        }), util.NullThrowsReasons.MissingToken('operator', node.type));

        function fix(fixer) {
          return regeneratorRuntime.wrap(function fix$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(node.parent && util.isLogicalOrOperator(node.parent))) {
                    _context.next = 10;
                    break;
                  }

                  if (!(node.left.type === experimental_utils_1.AST_NODE_TYPES.LogicalExpression && !util.isLogicalOrOperator(node.left.left))) {
                    _context.next = 6;
                    break;
                  }

                  _context.next = 4;
                  return fixer.insertTextBefore(node.left.right, '(');

                case 4:
                  _context.next = 8;
                  break;

                case 6:
                  _context.next = 8;
                  return fixer.insertTextBefore(node.left, '(');

                case 8:
                  _context.next = 10;
                  return fixer.insertTextAfter(node.right, ')');

                case 10:
                  _context.next = 12;
                  return fixer.replaceText(barBarOperator, '??');

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _marked);
        }

        var fixer = isMixedLogical || forceSuggestionFixer ? // suggestion instead for cases where we aren't sure if the fixer is completely safe
        {
          suggest: [{
            messageId: 'preferNullish',
            fix: fix
          }]
        } : {
          fix: fix
        };
        context.report(Object.assign({
          node: barBarOperator,
          messageId: 'preferNullish'
        }, fixer));
      }
    };
  }
});

function isConditionalTest(node) {
  var parents = new Set([node]);
  var current = node.parent;

  while (current) {
    parents.add(current);

    if ((current.type === experimental_utils_1.AST_NODE_TYPES.ConditionalExpression || current.type === experimental_utils_1.AST_NODE_TYPES.DoWhileStatement || current.type === experimental_utils_1.AST_NODE_TYPES.IfStatement || current.type === experimental_utils_1.AST_NODE_TYPES.ForStatement || current.type === experimental_utils_1.AST_NODE_TYPES.WhileStatement) && parents.has(current.test)) {
      return true;
    }

    if ([experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression, experimental_utils_1.AST_NODE_TYPES.FunctionExpression].includes(current.type)) {
      /**
       * This is a weird situation like:
       * `if (() => a || b) {}`
       * `if (function () { return a || b }) {}`
       */
      return false;
    }

    current = current.parent;
  }

  return false;
}

function isMixedLogicalExpression(node) {
  var seen = new Set();
  var queue = [node.parent, node.left, node.right];

  for (var _i2 = 0, _queue = queue; _i2 < _queue.length; _i2++) {
    var current = _queue[_i2];

    if (seen.has(current)) {
      continue;
    }

    seen.add(current);

    if (current && current.type === experimental_utils_1.AST_NODE_TYPES.LogicalExpression) {
      if (current.operator === '&&') {
        return true;
      } else if (current.operator === '||') {
        // check the pieces of the node to catch cases like `a || b || c && d`
        queue.push(current.parent, current.left, current.right);
      }
    }
  }

  return false;
}