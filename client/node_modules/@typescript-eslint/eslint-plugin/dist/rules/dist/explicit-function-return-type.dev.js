"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

var explicitReturnTypeUtils_1 = require("../util/explicitReturnTypeUtils");

exports["default"] = util.createRule({
  name: 'explicit-function-return-type',
  meta: {
    type: 'problem',
    docs: {
      description: 'Require explicit return types on functions and class methods',
      category: 'Stylistic Issues',
      recommended: 'warn'
    },
    messages: {
      missingReturnType: 'Missing return type on function.'
    },
    schema: [{
      type: 'object',
      properties: {
        allowExpressions: {
          type: 'boolean'
        },
        allowTypedFunctionExpressions: {
          type: 'boolean'
        },
        allowHigherOrderFunctions: {
          type: 'boolean'
        },
        allowDirectConstAssertionInArrowFunctions: {
          type: 'boolean'
        },
        allowConciseArrowFunctionExpressionsStartingWithVoid: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{
    allowExpressions: false,
    allowTypedFunctionExpressions: true,
    allowHigherOrderFunctions: true,
    allowDirectConstAssertionInArrowFunctions: true,
    allowConciseArrowFunctionExpressionsStartingWithVoid: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var sourceCode = context.getSourceCode();
    return {
      'ArrowFunctionExpression, FunctionExpression': function ArrowFunctionExpressionFunctionExpression(node) {
        if (options.allowConciseArrowFunctionExpressionsStartingWithVoid && node.type === experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression && node.expression && node.body.type === experimental_utils_1.AST_NODE_TYPES.UnaryExpression && node.body.operator === 'void') {
          return;
        }

        explicitReturnTypeUtils_1.checkFunctionExpressionReturnType(node, options, sourceCode, function (loc) {
          return context.report({
            node: node,
            loc: loc,
            messageId: 'missingReturnType'
          });
        });
      },
      FunctionDeclaration: function FunctionDeclaration(node) {
        explicitReturnTypeUtils_1.checkFunctionReturnType(node, options, sourceCode, function (loc) {
          return context.report({
            node: node,
            loc: loc,
            messageId: 'missingReturnType'
          });
        });
      }
    };
  }
});