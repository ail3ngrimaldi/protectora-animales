"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var tsutils = __importStar(require("tsutils"));

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'return-await',
  meta: {
    docs: {
      description: 'Enforces consistent returning of awaited values',
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true,
      extendsBaseRule: 'no-return-await'
    },
    fixable: 'code',
    type: 'problem',
    messages: {
      nonPromiseAwait: 'Returning an awaited value that is not a promise is not allowed.',
      disallowedPromiseAwait: 'Returning an awaited promise is not allowed in this context.',
      requiredPromiseAwait: 'Returning an awaited promise is required in this context.'
    },
    schema: [{
      "enum": ['in-try-catch', 'always', 'never']
    }]
  },
  defaultOptions: ['in-try-catch'],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        option = _ref2[0];

    var parserServices = util.getParserServices(context);
    var checker = parserServices.program.getTypeChecker();
    var sourceCode = context.getSourceCode();
    var scopeInfo = null;

    function enterFunction(node) {
      scopeInfo = {
        hasAsync: node.async
      };
    }

    function inTryCatch(node) {
      var ancestor = node.parent;

      while (ancestor && !ts.isFunctionLike(ancestor)) {
        if (tsutils.isTryStatement(ancestor) || tsutils.isCatchClause(ancestor)) {
          return true;
        }

        ancestor = ancestor.parent;
      }

      return false;
    } // function findTokensToRemove()


    function removeAwait(fixer, node) {
      var awaitNode = node.type === experimental_utils_1.AST_NODE_TYPES.ReturnStatement ? node.argument : node.body; // Should always be an await node; but let's be safe.

      /* istanbul ignore if */

      if (!util.isAwaitExpression(awaitNode)) {
        return null;
      }

      var awaitToken = sourceCode.getFirstToken(awaitNode, util.isAwaitKeyword); // Should always be the case; but let's be safe.

      /* istanbul ignore if */

      if (!awaitToken) {
        return null;
      }

      var startAt = awaitToken.range[0];
      var endAt = awaitToken.range[1]; // Also remove any extraneous whitespace after `await`, if there is any.

      var nextToken = sourceCode.getTokenAfter(awaitToken, {
        includeComments: true
      });

      if (nextToken) {
        endAt = nextToken.range[0];
      }

      return fixer.removeRange([startAt, endAt]);
    }

    function insertAwait(fixer, node) {
      var targetNode = node.type === experimental_utils_1.AST_NODE_TYPES.ReturnStatement ? node.argument : node.body; // There should always be a target node; but let's be safe.

      /* istanbul ignore if */

      if (!targetNode) {
        return null;
      }

      return fixer.insertTextBefore(targetNode, 'await ');
    }

    function test(node, expression) {
      var child;
      var isAwait = tsutils.isAwaitExpression(expression);

      if (isAwait) {
        child = expression.getChildAt(1);
      } else {
        child = expression;
      }

      var type = checker.getTypeAtLocation(child);
      var isThenable = tsutils.isThenableType(checker, expression, type);

      if (!isAwait && !isThenable) {
        return;
      }

      if (isAwait && !isThenable) {
        context.report({
          messageId: 'nonPromiseAwait',
          node: node,
          fix: function fix(fixer) {
            return removeAwait(fixer, node);
          }
        });
        return;
      }

      if (option === 'always') {
        if (!isAwait && isThenable) {
          context.report({
            messageId: 'requiredPromiseAwait',
            node: node,
            fix: function fix(fixer) {
              return insertAwait(fixer, node);
            }
          });
        }

        return;
      }

      if (option === 'never') {
        if (isAwait) {
          context.report({
            messageId: 'disallowedPromiseAwait',
            node: node,
            fix: function fix(fixer) {
              return removeAwait(fixer, node);
            }
          });
        }

        return;
      }

      if (option === 'in-try-catch') {
        var isInTryCatch = inTryCatch(expression);

        if (isAwait && !isInTryCatch) {
          context.report({
            messageId: 'disallowedPromiseAwait',
            node: node,
            fix: function fix(fixer) {
              return removeAwait(fixer, node);
            }
          });
        } else if (!isAwait && isInTryCatch) {
          context.report({
            messageId: 'requiredPromiseAwait',
            node: node,
            fix: function fix(fixer) {
              return insertAwait(fixer, node);
            }
          });
        }

        return;
      }
    }

    return {
      FunctionDeclaration: enterFunction,
      FunctionExpression: enterFunction,
      ArrowFunctionExpression: enterFunction,
      'ArrowFunctionExpression[async = true]:exit': function ArrowFunctionExpressionAsyncTrueExit(node) {
        if (node.body.type !== experimental_utils_1.AST_NODE_TYPES.BlockStatement) {
          var expression = parserServices.esTreeNodeToTSNodeMap.get(node.body);
          test(node, expression);
        }
      },
      ReturnStatement: function ReturnStatement(node) {
        if (!scopeInfo || !scopeInfo.hasAsync) {
          return;
        }

        var originalNode = parserServices.esTreeNodeToTSNodeMap.get(node);
        var expression = originalNode.expression;

        if (!expression) {
          return;
        }

        test(node, expression);
      }
    };
  }
});