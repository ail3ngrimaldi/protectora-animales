"use strict";

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tsutils = __importStar(require("tsutils"));

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'await-thenable',
  meta: {
    docs: {
      description: 'Disallows awaiting a value that is not a Thenable',
      category: 'Best Practices',
      recommended: 'error',
      requiresTypeChecking: true
    },
    messages: {
      "await": 'Unexpected `await` of a non-Promise (non-"Thenable") value.'
    },
    schema: [],
    type: 'problem'
  },
  defaultOptions: [],
  create: function create(context) {
    var parserServices = util.getParserServices(context);
    var checker = parserServices.program.getTypeChecker();
    return {
      AwaitExpression: function AwaitExpression(node) {
        var originalNode = parserServices.esTreeNodeToTSNodeMap.get(node);
        var type = checker.getTypeAtLocation(originalNode.expression);

        if (!tsutils.isTypeFlagSet(type, ts.TypeFlags.Any) && !tsutils.isTypeFlagSet(type, ts.TypeFlags.Unknown) && !tsutils.isThenableType(checker, originalNode.expression, type)) {
          context.report({
            messageId: 'await',
            node: node
          });
        }
      }
    };
  }
});