"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-parameter-properties',
  meta: {
    type: 'problem',
    docs: {
      description: 'Disallow the use of parameter properties in class constructors',
      category: 'Stylistic Issues',
      // too opinionated to be recommended
      recommended: false
    },
    messages: {
      noParamProp: 'Property {{parameter}} cannot be declared in the constructor.'
    },
    schema: [{
      type: 'object',
      properties: {
        allows: {
          type: 'array',
          items: {
            "enum": ['readonly', 'private', 'protected', 'public', 'private readonly', 'protected readonly', 'public readonly']
          },
          minItems: 1
        }
      },
      additionalProperties: false
    }]
  },
  defaultOptions: [{
    allows: []
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        allows = _ref2[0].allows;

    /**
     * Gets the modifiers of `node`.
     * @param node the node to be inspected.
     */
    function getModifiers(node) {
      var modifiers = [];

      if (node.accessibility) {
        modifiers.push(node.accessibility);
      }

      if (node.readonly) {
        modifiers.push('readonly');
      }

      return modifiers.filter(Boolean).join(' ');
    }

    return {
      TSParameterProperty: function TSParameterProperty(node) {
        var modifiers = getModifiers(node);

        if (!allows.includes(modifiers)) {
          // HAS to be an identifier or assignment or TSC will throw
          if (node.parameter.type !== experimental_utils_1.AST_NODE_TYPES.Identifier && node.parameter.type !== experimental_utils_1.AST_NODE_TYPES.AssignmentPattern) {
            return;
          }

          var name = node.parameter.type === experimental_utils_1.AST_NODE_TYPES.Identifier ? node.parameter.name : // has to be an Identifier or TSC will throw an error
          node.parameter.left.name;
          context.report({
            node: node,
            messageId: 'noParamProp',
            data: {
              parameter: name
            }
          });
        }
      }
    };
  }
});