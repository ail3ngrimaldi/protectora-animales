"use strict";

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'prefer-as-const',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Prefer usage of `as const` over literal type',
      category: 'Best Practices',
      recommended: false,
      suggestion: true
    },
    fixable: 'code',
    messages: {
      preferConstAssertion: 'Expected a `const` instead of a literal type assertion.',
      variableConstAssertion: 'Expected a `const` assertion instead of a literal type annotation.',
      variableSuggest: 'You should use `as const` instead of type annotation.'
    },
    schema: []
  },
  defaultOptions: [],
  create: function create(context) {
    function compareTypes(valueNode, typeNode, canFix) {
      if (valueNode.type === experimental_utils_1.AST_NODE_TYPES.Literal && typeNode.type === experimental_utils_1.AST_NODE_TYPES.TSLiteralType && 'raw' in typeNode.literal && valueNode.raw === typeNode.literal.raw) {
        if (canFix) {
          context.report({
            node: typeNode,
            messageId: 'preferConstAssertion',
            fix: function fix(fixer) {
              return fixer.replaceText(typeNode, 'const');
            }
          });
        } else {
          context.report({
            node: typeNode,
            messageId: 'variableConstAssertion',
            suggest: [{
              messageId: 'variableSuggest',
              fix: function fix(fixer) {
                return [fixer.remove(typeNode.parent), fixer.insertTextAfter(valueNode, ' as const')];
              }
            }]
          });
        }
      }
    }

    return {
      TSAsExpression: function TSAsExpression(node) {
        compareTypes(node.expression, node.typeAnnotation, true);
      },
      TSTypeAssertion: function TSTypeAssertion(node) {
        compareTypes(node.expression, node.typeAnnotation, true);
      },
      VariableDeclarator: function VariableDeclarator(node) {
        if (node.init && node.id.typeAnnotation) {
          compareTypes(node.init, node.id.typeAnnotation.typeAnnotation, false);
        }
      }
    };
  }
});