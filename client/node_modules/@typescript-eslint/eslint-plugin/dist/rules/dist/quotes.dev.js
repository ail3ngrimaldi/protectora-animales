"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var quotes_1 = __importDefault(require("eslint/lib/rules/quotes"));

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'quotes',
  meta: {
    type: 'layout',
    docs: {
      description: 'Enforce the consistent use of either backticks, double, or single quotes',
      category: 'Stylistic Issues',
      recommended: false,
      extendsBaseRule: true
    },
    fixable: 'code',
    messages: quotes_1["default"].meta.messages,
    schema: quotes_1["default"].meta.schema
  },
  defaultOptions: ['double', {
    allowTemplateLiterals: false,
    avoidEscape: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        option = _ref2[0];

    var rules = quotes_1["default"].create(context);

    function isAllowedAsNonBacktick(node) {
      var parent = node.parent;

      switch (parent === null || parent === void 0 ? void 0 : parent.type) {
        case experimental_utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition:
        case experimental_utils_1.AST_NODE_TYPES.TSMethodSignature:
        case experimental_utils_1.AST_NODE_TYPES.TSPropertySignature:
        case experimental_utils_1.AST_NODE_TYPES.TSModuleDeclaration:
        case experimental_utils_1.AST_NODE_TYPES.TSLiteralType:
        case experimental_utils_1.AST_NODE_TYPES.TSExternalModuleReference:
          return true;

        case experimental_utils_1.AST_NODE_TYPES.TSEnumMember:
          return node === parent.id;

        case experimental_utils_1.AST_NODE_TYPES.TSAbstractClassProperty:
        case experimental_utils_1.AST_NODE_TYPES.ClassProperty:
          return node === parent.key;

        default:
          return false;
      }
    }

    return {
      Literal: function Literal(node) {
        if (option === 'backtick' && isAllowedAsNonBacktick(node)) {
          return;
        }

        rules.Literal(node);
      },
      TemplateLiteral: function TemplateLiteral(node) {
        rules.TemplateLiteral(node);
      }
    };
  }
});