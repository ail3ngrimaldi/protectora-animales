"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var no_magic_numbers_1 = __importDefault(require("eslint/lib/rules/no-magic-numbers"));

var util = __importStar(require("../util"));

var baseRuleSchema = Array.isArray(no_magic_numbers_1["default"].meta.schema) ? no_magic_numbers_1["default"].meta.schema[0] : no_magic_numbers_1["default"].meta.schema;
exports["default"] = util.createRule({
  name: 'no-magic-numbers',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Disallow magic numbers',
      category: 'Best Practices',
      recommended: false,
      extendsBaseRule: true
    },
    // Extend base schema with additional property to ignore TS numeric literal types
    schema: [Object.assign(Object.assign({}, baseRuleSchema), {
      properties: Object.assign(Object.assign({}, baseRuleSchema.properties), {
        ignoreNumericLiteralTypes: {
          type: 'boolean'
        },
        ignoreEnums: {
          type: 'boolean'
        },
        ignoreReadonlyClassProperties: {
          type: 'boolean'
        }
      })
    })],
    messages: no_magic_numbers_1["default"].meta.messages
  },
  defaultOptions: [{
    ignore: [],
    ignoreArrayIndexes: false,
    enforceConst: false,
    detectObjects: false,
    ignoreNumericLiteralTypes: false,
    ignoreEnums: false,
    ignoreReadonlyClassProperties: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var rules = no_magic_numbers_1["default"].create(context);
    return {
      Literal: function Literal(node) {
        var _a; // Check if the node is a TypeScript enum declaration


        if (options.ignoreEnums && isParentTSEnumDeclaration(node)) {
          return;
        } // Check TypeScript specific nodes for Numeric Literal


        if (options.ignoreNumericLiteralTypes && typeof node.value === 'number' && isTSNumericLiteralType(node)) {
          return;
        } // Check if the node is a readonly class property


        if (typeof node.value === 'number' && isParentTSReadonlyClassProperty(node)) {
          if (options.ignoreReadonlyClassProperties) {
            return;
          }

          var fullNumberNode = node;
          var raw = node.raw;

          if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === experimental_utils_1.AST_NODE_TYPES.UnaryExpression && // the base rule only shows the operator for negative numbers
          // https://github.com/eslint/eslint/blob/9dfc8501fb1956c90dc11e6377b4cb38a6bea65d/lib/rules/no-magic-numbers.js#L126
          node.parent.operator === '-') {
            fullNumberNode = node.parent;
            raw = "".concat(node.parent.operator).concat(node.raw);
          }

          context.report({
            messageId: 'noMagic',
            node: fullNumberNode,
            data: {
              raw: raw
            }
          });
          return;
        } // Let the base rule deal with the rest


        rules.Literal(node);
      }
    };
  }
});
/**
 * Gets the true parent of the literal, handling prefixed numbers (-1 / +1)
 */

function getLiteralParent(node) {
  var _a;

  if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === experimental_utils_1.AST_NODE_TYPES.UnaryExpression && ['-', '+'].includes(node.parent.operator)) {
    return node.parent.parent;
  }

  return node.parent;
}
/**
 * Checks if the node grandparent is a Typescript type alias declaration
 * @param node the node to be validated.
 * @returns true if the node grandparent is a Typescript type alias declaration
 * @private
 */


function isGrandparentTSTypeAliasDeclaration(node) {
  var _a, _b;

  return ((_b = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.type) === experimental_utils_1.AST_NODE_TYPES.TSTypeAliasDeclaration;
}
/**
 * Checks if the node grandparent is a Typescript union type and its parent is a type alias declaration
 * @param node the node to be validated.
 * @returns true if the node grandparent is a Typescript union type and its parent is a type alias declaration
 * @private
 */


function isGrandparentTSUnionType(node) {
  var _a, _b;

  if (((_b = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.type) === experimental_utils_1.AST_NODE_TYPES.TSUnionType) {
    return isGrandparentTSTypeAliasDeclaration(node.parent);
  }

  return false;
}
/**
 * Checks if the node parent is a Typescript enum member
 * @param node the node to be validated.
 * @returns true if the node parent is a Typescript enum member
 * @private
 */


function isParentTSEnumDeclaration(node) {
  var parent = getLiteralParent(node);
  return (parent === null || parent === void 0 ? void 0 : parent.type) === experimental_utils_1.AST_NODE_TYPES.TSEnumMember;
}
/**
 * Checks if the node parent is a Typescript literal type
 * @param node the node to be validated.
 * @returns true if the node parent is a Typescript literal type
 * @private
 */


function isParentTSLiteralType(node) {
  var _a;

  return ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === experimental_utils_1.AST_NODE_TYPES.TSLiteralType;
}
/**
 * Checks if the node is a valid TypeScript numeric literal type.
 * @param node the node to be validated.
 * @returns true if the node is a TypeScript numeric literal type.
 * @private
 */


function isTSNumericLiteralType(node) {
  var _a; // For negative numbers, use the parent node


  if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === experimental_utils_1.AST_NODE_TYPES.UnaryExpression && node.parent.operator === '-') {
    node = node.parent;
  } // If the parent node is not a TSLiteralType, early return


  if (!isParentTSLiteralType(node)) {
    return false;
  } // If the grandparent is a TSTypeAliasDeclaration, ignore


  if (isGrandparentTSTypeAliasDeclaration(node)) {
    return true;
  } // If the grandparent is a TSUnionType and it's parent is a TSTypeAliasDeclaration, ignore


  if (isGrandparentTSUnionType(node)) {
    return true;
  }

  return false;
}
/**
 * Checks if the node parent is a readonly class property
 * @param node the node to be validated.
 * @returns true if the node parent is a readonly class property
 * @private
 */


function isParentTSReadonlyClassProperty(node) {
  var parent = getLiteralParent(node);

  if ((parent === null || parent === void 0 ? void 0 : parent.type) === experimental_utils_1.AST_NODE_TYPES.ClassProperty && parent.readonly) {
    return true;
  }

  return false;
}