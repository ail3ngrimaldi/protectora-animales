"use strict";

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var tsutils_1 = require("tsutils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-unsafe-return',
  meta: {
    type: 'problem',
    docs: {
      description: 'Disallows returning any from a function',
      category: 'Possible Errors',
      recommended: false,
      requiresTypeChecking: true
    },
    messages: {
      unsafeReturn: 'Unsafe return of an {{type}} typed value',
      unsafeReturnAssignment: 'Unsafe return of type {{sender}} from function with return type {{receiver}}.'
    },
    schema: []
  },
  defaultOptions: [],
  create: function create(context) {
    var _util$getParserServic = util.getParserServices(context),
        program = _util$getParserServic.program,
        esTreeNodeToTSNodeMap = _util$getParserServic.esTreeNodeToTSNodeMap;

    var checker = program.getTypeChecker();

    function getParentFunctionNode(node) {
      var current = node.parent;

      while (current) {
        if (current.type === experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression || current.type === experimental_utils_1.AST_NODE_TYPES.FunctionDeclaration || current.type === experimental_utils_1.AST_NODE_TYPES.FunctionExpression) {
          return current;
        }

        current = current.parent;
      } // this shouldn't happen in correct code, but someone may attempt to parse bad code
      // the parser won't error, so we shouldn't throw here

      /* istanbul ignore next */


      return null;
    }

    function checkReturn(returnNode) {
      var reportingNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : returnNode;
      var tsNode = esTreeNodeToTSNodeMap.get(returnNode);
      var anyType = util.isAnyOrAnyArrayTypeDiscriminated(tsNode, checker);

      if (anyType !== 2
      /* Safe */
      ) {
          return context.report({
            node: reportingNode,
            messageId: 'unsafeReturn',
            data: {
              type: anyType === 0
              /* Any */
              ? 'any' : 'any[]'
            }
          });
        }

      var functionNode = getParentFunctionNode(returnNode);
      /* istanbul ignore if */

      if (!functionNode) {
        return;
      } // function has an explicit return type, so ensure it's a safe return


      var returnNodeType = util.getConstrainedTypeAtLocation(checker, esTreeNodeToTSNodeMap.get(returnNode));
      var functionTSNode = esTreeNodeToTSNodeMap.get(functionNode); // function expressions will not have their return type modified based on receiver typing
      // so we have to use the contextual typing in these cases, i.e.
      // const foo1: () => Set<string> = () => new Set<any>();
      // the return type of the arrow function is Set<any> even though the variable is typed as Set<string>

      var functionType = tsutils_1.isExpression(functionTSNode) ? util.getContextualType(checker, functionTSNode) : checker.getTypeAtLocation(functionTSNode);

      if (!functionType) {
        functionType = checker.getTypeAtLocation(functionTSNode);
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = functionType.getCallSignatures()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var signature = _step.value;
          var functionReturnType = signature.getReturnType();

          if (returnNodeType === functionReturnType) {
            // don't bother checking if they're the same
            // either the function is explicitly declared to return the same type
            // or there was no declaration, so the return type is implicit
            return;
          }

          var result = util.isUnsafeAssignment(returnNodeType, functionReturnType, checker);

          if (!result) {
            return;
          }

          var sender = result.sender,
              receiver = result.receiver;
          return context.report({
            node: reportingNode,
            messageId: 'unsafeReturnAssignment',
            data: {
              sender: checker.typeToString(sender),
              receiver: checker.typeToString(receiver)
            }
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return {
      ReturnStatement: function ReturnStatement(node) {
        var argument = node.argument;

        if (!argument) {
          return;
        }

        checkReturn(argument, node);
      },
      'ArrowFunctionExpression > :not(BlockStatement).body': checkReturn
    };
  }
});