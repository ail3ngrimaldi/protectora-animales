"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tsutils = __importStar(require("tsutils"));

var ts = __importStar(require("typescript"));

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-floating-promises',
  meta: {
    docs: {
      description: 'Requires Promise-like values to be handled appropriately',
      category: 'Best Practices',
      recommended: false,
      suggestion: true,
      requiresTypeChecking: true
    },
    messages: {
      floating: 'Promises must be handled appropriately.',
      floatingVoid: 'Promises must be handled appropriately' + ' or explicitly marked as ignored with the `void` operator.',
      floatingFixVoid: 'Add void operator to ignore.'
    },
    schema: [{
      type: 'object',
      properties: {
        ignoreVoid: {
          type: 'boolean'
        },
        ignoreIIFE: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }],
    type: 'problem'
  },
  defaultOptions: [{
    ignoreVoid: false,
    ignoreIIFE: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        options = _ref2[0];

    var parserServices = util.getParserServices(context);
    var checker = parserServices.program.getTypeChecker();
    var sourceCode = context.getSourceCode();
    return {
      ExpressionStatement: function ExpressionStatement(node) {
        var _parserServices$esTre = parserServices.esTreeNodeToTSNodeMap.get(node),
            expression = _parserServices$esTre.expression;

        if (options.ignoreIIFE && isAsyncIife(node)) {
          return;
        }

        if (isUnhandledPromise(checker, expression)) {
          if (options.ignoreVoid) {
            context.report({
              node: node,
              messageId: 'floatingVoid',
              suggest: [{
                messageId: 'floatingFixVoid',
                fix: function fix(fixer) {
                  var code = sourceCode.getText(node);
                  code = "void ".concat(code);
                  return fixer.replaceText(node, code);
                }
              }]
            });
          } else {
            context.report({
              node: node,
              messageId: 'floating'
            });
          }
        }
      }
    };

    function isAsyncIife(node) {
      if (node.expression.type !== experimental_utils_1.AST_NODE_TYPES.CallExpression) {
        return false;
      }

      return node.expression.type === experimental_utils_1.AST_NODE_TYPES.CallExpression && (node.expression.callee.type === experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression || node.expression.callee.type === experimental_utils_1.AST_NODE_TYPES.FunctionExpression);
    }

    function isUnhandledPromise(checker, node) {
      // First, check expressions whose resulting types may not be promise-like
      if (ts.isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.CommaToken) {
        // Any child in a comma expression could return a potentially unhandled
        // promise, so we check them all regardless of whether the final returned
        // value is promise-like.
        return isUnhandledPromise(checker, node.left) || isUnhandledPromise(checker, node.right);
      }

      if (ts.isVoidExpression(node) && !options.ignoreVoid) {
        // Similarly, a `void` expression always returns undefined, so we need to
        // see what's inside it without checking the type of the overall expression.
        return isUnhandledPromise(checker, node.expression);
      } // Check the type. At this point it can't be unhandled if it isn't a promise


      if (!isPromiseLike(checker, node)) {
        return false;
      }

      if (ts.isCallExpression(node)) {
        // If the outer expression is a call, it must be either a `.then()` or
        // `.catch()` that handles the promise.
        return !isPromiseCatchCallWithHandler(node) && !isPromiseThenCallWithRejectionHandler(node) && !isPromiseFinallyCallWithHandler(node);
      } else if (ts.isConditionalExpression(node)) {
        // We must be getting the promise-like value from one of the branches of the
        // ternary. Check them directly.
        return isUnhandledPromise(checker, node.whenFalse) || isUnhandledPromise(checker, node.whenTrue);
      } else if (ts.isPropertyAccessExpression(node) || ts.isIdentifier(node) || ts.isNewExpression(node)) {
        // If it is just a property access chain or a `new` call (e.g. `foo.bar` or
        // `new Promise()`), the promise is not handled because it doesn't have the
        // necessary then/catch call at the end of the chain.
        return true;
      } // We conservatively return false for all other types of expressions because
      // we don't want to accidentally fail if the promise is handled internally but
      // we just can't tell.


      return false;
    }
  }
}); // Modified from tsutils.isThenable() to only consider thenables which can be
// rejected/caught via a second parameter. Original source (MIT licensed):
//
//   https://github.com/ajafff/tsutils/blob/49d0d31050b44b81e918eae4fbaf1dfe7b7286af/util/type.ts#L95-L125

function isPromiseLike(checker, node) {
  var type = checker.getTypeAtLocation(node);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = tsutils.unionTypeParts(checker.getApparentType(type))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var ty = _step.value;
      var then = ty.getProperty('then');

      if (then === undefined) {
        continue;
      }

      var thenType = checker.getTypeOfSymbolAtLocation(then, node);

      if (hasMatchingSignature(thenType, function (signature) {
        return signature.parameters.length >= 2 && isFunctionParam(checker, signature.parameters[0], node) && isFunctionParam(checker, signature.parameters[1], node);
      })) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
}

function hasMatchingSignature(type, matcher) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = tsutils.unionTypeParts(type)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var t = _step2.value;

      if (t.getCallSignatures().some(matcher)) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return false;
}

function isFunctionParam(checker, param, node) {
  var type = checker.getApparentType(checker.getTypeOfSymbolAtLocation(param, node));
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = tsutils.unionTypeParts(type)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var t = _step3.value;

      if (t.getCallSignatures().length !== 0) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return false;
}

function isPromiseCatchCallWithHandler(expression) {
  return tsutils.isPropertyAccessExpression(expression.expression) && expression.expression.name.text === 'catch' && expression.arguments.length >= 1;
}

function isPromiseThenCallWithRejectionHandler(expression) {
  return tsutils.isPropertyAccessExpression(expression.expression) && expression.expression.name.text === 'then' && expression.arguments.length >= 2;
}

function isPromiseFinallyCallWithHandler(expression) {
  return tsutils.isPropertyAccessExpression(expression.expression) && expression.expression.name.text === 'finally' && expression.arguments.length >= 1;
}