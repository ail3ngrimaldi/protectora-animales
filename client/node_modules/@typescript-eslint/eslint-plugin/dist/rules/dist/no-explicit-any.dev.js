"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var util = __importStar(require("../util"));

exports["default"] = util.createRule({
  name: 'no-explicit-any',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Disallow usage of the `any` type',
      category: 'Best Practices',
      recommended: 'warn',
      suggestion: true
    },
    fixable: 'code',
    messages: {
      unexpectedAny: 'Unexpected any. Specify a different type.',
      suggestUnknown: 'Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.',
      suggestNever: "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
    },
    schema: [{
      type: 'object',
      additionalProperties: false,
      properties: {
        fixToUnknown: {
          type: 'boolean'
        },
        ignoreRestArgs: {
          type: 'boolean'
        }
      }
    }]
  },
  defaultOptions: [{
    fixToUnknown: false,
    ignoreRestArgs: false
  }],
  create: function create(context, _ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ref2$ = _ref2[0],
        ignoreRestArgs = _ref2$.ignoreRestArgs,
        fixToUnknown = _ref2$.fixToUnknown;

    /**
     * Checks if the node is an arrow function, function/constructor declaration or function expression
     * @param node the node to be validated.
     * @returns true if the node is any kind of function declaration or expression
     * @private
     */
    function isNodeValidFunction(node) {
      return [experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression, experimental_utils_1.AST_NODE_TYPES.FunctionDeclaration, experimental_utils_1.AST_NODE_TYPES.FunctionExpression, experimental_utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, experimental_utils_1.AST_NODE_TYPES.TSFunctionType, experimental_utils_1.AST_NODE_TYPES.TSConstructorType, experimental_utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration, experimental_utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, experimental_utils_1.AST_NODE_TYPES.TSMethodSignature, experimental_utils_1.AST_NODE_TYPES.TSDeclareFunction].includes(node.type);
    }
    /**
     * Checks if the node is a rest element child node of a function
     * @param node the node to be validated.
     * @returns true if the node is a rest element child node of a function
     * @private
     */


    function isNodeRestElementInFunction(node) {
      return node.type === experimental_utils_1.AST_NODE_TYPES.RestElement && typeof node.parent !== 'undefined' && isNodeValidFunction(node.parent);
    }
    /**
     * Checks if the node is a TSTypeOperator node with a readonly operator
     * @param node the node to be validated.
     * @returns true if the node is a TSTypeOperator node with a readonly operator
     * @private
     */


    function isNodeReadonlyTSTypeOperator(node) {
      return node.type === experimental_utils_1.AST_NODE_TYPES.TSTypeOperator && node.operator === 'readonly';
    }
    /**
     * Checks if the node is a TSTypeReference node with an Array identifier
     * @param node the node to be validated.
     * @returns true if the node is a TSTypeReference node with an Array identifier
     * @private
     */


    function isNodeValidArrayTSTypeReference(node) {
      return node.type === experimental_utils_1.AST_NODE_TYPES.TSTypeReference && typeof node.typeName !== 'undefined' && node.typeName.type === experimental_utils_1.AST_NODE_TYPES.Identifier && ['Array', 'ReadonlyArray'].includes(node.typeName.name);
    }
    /**
     * Checks if the node is a valid TSTypeOperator or TSTypeReference node
     * @param node the node to be validated.
     * @returns true if the node is a valid TSTypeOperator or TSTypeReference node
     * @private
     */


    function isNodeValidTSType(node) {
      return isNodeReadonlyTSTypeOperator(node) || isNodeValidArrayTSTypeReference(node);
    }
    /**
     * Checks if the great grand-parent node is a RestElement node in a function
     * @param node the node to be validated.
     * @returns true if the great grand-parent node is a RestElement node in a function
     * @private
     */


    function isGreatGrandparentRestElement(node) {
      var _a, _b;

      return ((_b = (_a = node === null || node === void 0 ? void 0 : node.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.parent) != null && isNodeRestElementInFunction(node.parent.parent.parent);
    }
    /**
     * Checks if the great great grand-parent node is a valid RestElement node in a function
     * @param node the node to be validated.
     * @returns true if the great great grand-parent node is a valid RestElement node in a function
     * @private
     */


    function isGreatGreatGrandparentRestElement(node) {
      var _a, _b, _c;

      return ((_c = (_b = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.parent) != null && isNodeValidTSType(node.parent.parent) && isNodeRestElementInFunction(node.parent.parent.parent.parent);
    }
    /**
     * Checks if the great grand-parent or the great great grand-parent node is a RestElement node
     * @param node the node to be validated.
     * @returns true if the great grand-parent or the great great grand-parent node is a RestElement node
     * @private
     */


    function isNodeDescendantOfRestElementInFunction(node) {
      return isGreatGrandparentRestElement(node) || isGreatGreatGrandparentRestElement(node);
    }

    return {
      TSAnyKeyword: function TSAnyKeyword(node) {
        if (ignoreRestArgs && isNodeDescendantOfRestElementInFunction(node)) {
          return;
        }

        var fixOrSuggest = {
          fix: null,
          suggest: [{
            messageId: 'suggestUnknown',
            fix: function fix(fixer) {
              return fixer.replaceText(node, 'unknown');
            }
          }, {
            messageId: 'suggestNever',
            fix: function fix(fixer) {
              return fixer.replaceText(node, 'never');
            }
          }]
        };

        if (fixToUnknown) {
          fixOrSuggest.fix = function (fixer) {
            return fixer.replaceText(node, 'unknown');
          };
        }

        context.report(Object.assign({
          node: node,
          messageId: 'unexpectedAny'
        }, fixOrSuggest));
      }
    };
  }
});