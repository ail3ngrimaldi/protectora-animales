"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tsutils = __importStar(require("tsutils"));

var ts = __importStar(require("typescript"));

var util = __importStar(require("../util"));

var util_1 = require("../util");

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");

var functionScopeBoundaries = [experimental_utils_1.AST_NODE_TYPES.ArrowFunctionExpression, experimental_utils_1.AST_NODE_TYPES.FunctionDeclaration, experimental_utils_1.AST_NODE_TYPES.FunctionExpression, experimental_utils_1.AST_NODE_TYPES.MethodDefinition].join(', ');
exports["default"] = util.createRule({
  name: 'prefer-readonly',
  meta: {
    docs: {
      description: "Requires that private members are marked as `readonly` if they're never modified outside of the constructor",
      category: 'Best Practices',
      recommended: false,
      requiresTypeChecking: true
    },
    fixable: 'code',
    messages: {
      preferReadonly: "Member '{{name}}' is never reassigned; mark it as `readonly`."
    },
    schema: [{
      allowAdditionalProperties: false,
      properties: {
        onlyInlineLambdas: {
          type: 'boolean'
        }
      },
      type: 'object'
    }],
    type: 'suggestion'
  },
  defaultOptions: [{
    onlyInlineLambdas: false
  }],
  create: function create(context, _ref) {
    var _ref3;

    var _ref2 = _slicedToArray(_ref, 1),
        onlyInlineLambdas = _ref2[0].onlyInlineLambdas;

    var parserServices = util.getParserServices(context);
    var checker = parserServices.program.getTypeChecker();
    var classScopeStack = [];

    function handlePropertyAccessExpression(node, parent, classScope) {
      if (ts.isBinaryExpression(parent)) {
        handleParentBinaryExpression(node, parent, classScope);
        return;
      }

      if (ts.isDeleteExpression(parent) || isDestructuringAssignment(node)) {
        classScope.addVariableModification(node);
        return;
      }

      if (ts.isPostfixUnaryExpression(parent) || ts.isPrefixUnaryExpression(parent)) {
        handleParentPostfixOrPrefixUnaryExpression(parent, classScope);
      }
    }

    function handleParentBinaryExpression(node, parent, classScope) {
      if (parent.left === node && tsutils.isAssignmentKind(parent.operatorToken.kind)) {
        classScope.addVariableModification(node);
      }
    }

    function handleParentPostfixOrPrefixUnaryExpression(node, classScope) {
      if (node.operator === ts.SyntaxKind.PlusPlusToken || node.operator === ts.SyntaxKind.MinusMinusToken) {
        classScope.addVariableModification(node.operand);
      }
    }

    function isDestructuringAssignment(node) {
      var current = node.parent;

      while (current) {
        var parent = current.parent;

        if (ts.isObjectLiteralExpression(parent) || ts.isArrayLiteralExpression(parent) || ts.isSpreadAssignment(parent) || ts.isSpreadElement(parent) && ts.isArrayLiteralExpression(parent.parent)) {
          current = parent;
        } else if (ts.isBinaryExpression(parent)) {
          return parent.left === current && parent.operatorToken.kind === ts.SyntaxKind.EqualsToken;
        } else {
          break;
        }
      }

      return false;
    }

    function isConstructor(node) {
      return node.type === experimental_utils_1.AST_NODE_TYPES.MethodDefinition && node.kind === 'constructor';
    }

    function isFunctionScopeBoundaryInStack(node) {
      if (classScopeStack.length === 0) {
        return false;
      }

      var tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);

      if (ts.isConstructorDeclaration(tsNode)) {
        return false;
      }

      return tsutils.isFunctionScopeBoundary(tsNode);
    }

    function getEsNodesFromViolatingNode(violatingNode) {
      if (ts.isParameterPropertyDeclaration(violatingNode, violatingNode.parent)) {
        return {
          esNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode.name),
          nameNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode.name)
        };
      }

      return {
        esNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode),
        nameNode: parserServices.tsNodeToESTreeNodeMap.get(violatingNode.name)
      };
    }

    return _ref3 = {
      'ClassDeclaration, ClassExpression': function ClassDeclarationClassExpression(node) {
        classScopeStack.push(new ClassScope(checker, parserServices.esTreeNodeToTSNodeMap.get(node), onlyInlineLambdas));
      },
      'ClassDeclaration, ClassExpression:exit': function ClassDeclarationClassExpressionExit() {
        var finalizedClassScope = classScopeStack.pop();
        var sourceCode = context.getSourceCode();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var violatingNode = _step.value;

            var _getEsNodesFromViolat = getEsNodesFromViolatingNode(violatingNode),
                esNode = _getEsNodesFromViolat.esNode,
                nameNode = _getEsNodesFromViolat.nameNode;

            context.report({
              data: {
                name: sourceCode.getText(nameNode)
              },
              fix: function fix(fixer) {
                return fixer.insertTextBefore(nameNode, 'readonly ');
              },
              messageId: 'preferReadonly',
              node: esNode
            });
          };

          for (var _iterator = finalizedClassScope.finalizeUnmodifiedPrivateNonReadonlys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      },
      MemberExpression: function MemberExpression(node) {
        if (classScopeStack.length !== 0 && !node.computed) {
          var tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);
          handlePropertyAccessExpression(tsNode, tsNode.parent, classScopeStack[classScopeStack.length - 1]);
        }
      }
    }, _defineProperty(_ref3, functionScopeBoundaries, function (node) {
      if (isConstructor(node)) {
        classScopeStack[classScopeStack.length - 1].enterConstructor(parserServices.esTreeNodeToTSNodeMap.get(node));
      } else if (isFunctionScopeBoundaryInStack(node)) {
        classScopeStack[classScopeStack.length - 1].enterNonConstructor();
      }
    }), _defineProperty(_ref3, "".concat(functionScopeBoundaries, ":exit"), function exit(node) {
      if (isConstructor(node)) {
        classScopeStack[classScopeStack.length - 1].exitConstructor();
      } else if (isFunctionScopeBoundaryInStack(node)) {
        classScopeStack[classScopeStack.length - 1].exitNonConstructor();
      }
    }), _ref3;
  }
});
var OUTSIDE_CONSTRUCTOR = -1;
var DIRECTLY_INSIDE_CONSTRUCTOR = 0;

var ClassScope =
/*#__PURE__*/
function () {
  function ClassScope(checker, classNode, onlyInlineLambdas) {
    _classCallCheck(this, ClassScope);

    this.checker = checker;
    this.onlyInlineLambdas = onlyInlineLambdas;
    this.privateModifiableMembers = new Map();
    this.privateModifiableStatics = new Map();
    this.memberVariableModifications = new Set();
    this.staticVariableModifications = new Set();
    this.constructorScopeDepth = OUTSIDE_CONSTRUCTOR;
    this.checker = checker;
    this.classType = checker.getTypeAtLocation(classNode);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = classNode.members[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var member = _step2.value;

        if (ts.isPropertyDeclaration(member)) {
          this.addDeclaredVariable(member);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  _createClass(ClassScope, [{
    key: "addDeclaredVariable",
    value: function addDeclaredVariable(node) {
      if (!tsutils.isModifierFlagSet(node, ts.ModifierFlags.Private) || tsutils.isModifierFlagSet(node, ts.ModifierFlags.Readonly) || ts.isComputedPropertyName(node.name)) {
        return;
      }

      if (this.onlyInlineLambdas && node.initializer !== undefined && !ts.isArrowFunction(node.initializer)) {
        return;
      }

      (tsutils.isModifierFlagSet(node, ts.ModifierFlags.Static) ? this.privateModifiableStatics : this.privateModifiableMembers).set(node.name.getText(), node);
    }
  }, {
    key: "addVariableModification",
    value: function addVariableModification(node) {
      var modifierType = this.checker.getTypeAtLocation(node.expression);

      if (!modifierType.getSymbol() || !util_1.typeIsOrHasBaseType(modifierType, this.classType)) {
        return;
      }

      var modifyingStatic = tsutils.isObjectType(modifierType) && tsutils.isObjectFlagSet(modifierType, ts.ObjectFlags.Anonymous);

      if (!modifyingStatic && this.constructorScopeDepth === DIRECTLY_INSIDE_CONSTRUCTOR) {
        return;
      }

      (modifyingStatic ? this.staticVariableModifications : this.memberVariableModifications).add(node.name.text);
    }
  }, {
    key: "enterConstructor",
    value: function enterConstructor(node) {
      this.constructorScopeDepth = DIRECTLY_INSIDE_CONSTRUCTOR;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = node.parameters[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var parameter = _step3.value;

          if (tsutils.isModifierFlagSet(parameter, ts.ModifierFlags.Private)) {
            this.addDeclaredVariable(parameter);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }, {
    key: "exitConstructor",
    value: function exitConstructor() {
      this.constructorScopeDepth = OUTSIDE_CONSTRUCTOR;
    }
  }, {
    key: "enterNonConstructor",
    value: function enterNonConstructor() {
      if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {
        this.constructorScopeDepth += 1;
      }
    }
  }, {
    key: "exitNonConstructor",
    value: function exitNonConstructor() {
      if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {
        this.constructorScopeDepth -= 1;
      }
    }
  }, {
    key: "finalizeUnmodifiedPrivateNonReadonlys",
    value: function finalizeUnmodifiedPrivateNonReadonlys() {
      var _this = this;

      this.memberVariableModifications.forEach(function (variableName) {
        _this.privateModifiableMembers["delete"](variableName);
      });
      this.staticVariableModifications.forEach(function (variableName) {
        _this.privateModifiableStatics["delete"](variableName);
      });
      return [].concat(_toConsumableArray(Array.from(this.privateModifiableMembers.values())), _toConsumableArray(Array.from(this.privateModifiableStatics.values())));
    }
  }]);

  return ClassScope;
}();