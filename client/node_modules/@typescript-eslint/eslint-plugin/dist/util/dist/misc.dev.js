"use strict";
/**
 * @fileoverview Really small utility functions that didn't deserve their own files
 */

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
/**
 * Check if the context file name is *.d.ts or *.d.tsx
 */


function isDefinitionFile(fileName) {
  return /\.d\.tsx?$/i.test(fileName || '');
}

exports.isDefinitionFile = isDefinitionFile;
/**
 * Upper cases the first character or the string
 */

function upperCaseFirst(str) {
  return str[0].toUpperCase() + str.slice(1);
}

exports.upperCaseFirst = upperCaseFirst;

function arraysAreEqual(a, b, eq) {
  return a === b || a !== undefined && b !== undefined && a.length === b.length && a.every(function (x, idx) {
    return eq(x, b[idx]);
  });
}

exports.arraysAreEqual = arraysAreEqual;
/** Returns the first non-`undefined` result. */

function findFirstResult(inputs, getResult) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var element = _step.value;
      var result = getResult(element);

      if (result !== undefined) {
        return result;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return undefined;
}

exports.findFirstResult = findFirstResult;
/**
 * Gets a string representation of the name of the index signature.
 */

function getNameFromIndexSignature(node) {
  var propName = node.parameters.find(function (parameter) {
    return parameter.type === experimental_utils_1.AST_NODE_TYPES.Identifier;
  });
  return propName ? propName.name : '(index signature)';
}

exports.getNameFromIndexSignature = getNameFromIndexSignature;
/**
 * Gets a string name representation of the name of the given MethodDefinition
 * or ClassProperty node, with handling for computed property names.
 */

function getNameFromMember(member, sourceCode) {
  var _sourceCode$text;

  if (member.key.type === experimental_utils_1.AST_NODE_TYPES.Identifier) {
    return member.key.name;
  }

  if (member.key.type === experimental_utils_1.AST_NODE_TYPES.Literal) {
    return "".concat(member.key.value);
  }

  return (_sourceCode$text = sourceCode.text).slice.apply(_sourceCode$text, _toConsumableArray(member.key.range));
}

exports.getNameFromMember = getNameFromMember;

function getEnumNames(myEnum) {
  return Object.keys(myEnum).filter(function (x) {
    return isNaN(parseInt(x));
  });
}

exports.getEnumNames = getEnumNames;