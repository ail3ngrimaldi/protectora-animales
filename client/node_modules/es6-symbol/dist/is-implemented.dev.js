"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var global = require("ext/global-this"),
    validTypes = {
  object: true,
  symbol: true
};

module.exports = function () {
  var _Symbol = global.Symbol;
  var symbol;
  if (typeof _Symbol !== "function") return false;
  symbol = _Symbol("test symbol");

  try {
    String(symbol);
  } catch (e) {
    return false;
  } // Return 'true' also for polyfills


  if (!validTypes[_typeof(_Symbol.iterator)]) return false;
  if (!validTypes[_typeof(_Symbol.toPrimitive)]) return false;
  if (!validTypes[_typeof(_Symbol.toStringTag)]) return false;
  return true;
};