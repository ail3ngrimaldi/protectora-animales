"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 1.12.7
var object,
    self,
    hasProp = {}.hasOwnProperty;
object = require('utila').object;
module.exports = self = {
  sanitize: function sanitize(val) {
    return self._toChildren(val);
  },
  _toChildren: function _toChildren(val) {
    var ref;

    if (object.isBareObject(val)) {
      return self._objectToChildren(val);
    } else if (Array.isArray(val)) {
      return self._arrayToChildren(val);
    } else if (val === null || typeof val === 'undefined') {
      return [];
    } else if ((ref = _typeof(val)) === 'string' || ref === 'number') {
      return [String(val)];
    } else {
      throw Error("not a valid child node: `" + val);
    }
  },
  _objectToChildren: function _objectToChildren(o) {
    var a, cur, key, val;
    a = [];

    for (key in o) {
      if (!hasProp.call(o, key)) continue;
      val = o[key];
      cur = {};
      cur[key] = self.sanitize(val);
      a.push(cur);
    }

    return a;
  },
  _arrayToChildren: function _arrayToChildren(a) {
    var i, len, ret, v;
    ret = [];

    for (i = 0, len = a.length; i < len; i++) {
      v = a[i];
      ret.push(self._toNode(v));
    }

    return ret;
  },
  _toNode: function _toNode(o) {
    var key, keys, obj, ref;

    if ((ref = _typeof(o)) === 'string' || ref === 'number') {
      return String(o);
    } else if (object.isBareObject(o)) {
      keys = Object.keys(o);

      if (keys.length !== 1) {
        throw Error("a node must only have one key as tag name");
      }

      key = keys[0];
      obj = {};
      obj[key] = self._toChildren(o[key]);
      return obj;
    } else {
      throw Error("not a valid node: `" + o + "`");
    }
  }
};