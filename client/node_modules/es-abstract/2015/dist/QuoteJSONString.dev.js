'use strict';

var GetIntrinsic = require('../GetIntrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var callBound = require('../helpers/callBound');

var forEach = require('../helpers/forEach');

var $charCodeAt = callBound('String.prototype.charCodeAt');
var $numberToString = callBound('Number.prototype.toString');
var $toLowerCase = callBound('String.prototype.toLowerCase');
var $strSlice = callBound('String.prototype.slice');
var $strSplit = callBound('String.prototype.split');

var Type = require('./Type'); // https://ecma-international.org/ecma-262/7.0/#sec-quotejsonstring


var escapes = {
  "\b": 'b',
  "\f": 'f',
  "\n": 'n',
  "\r": 'r',
  "\t": 't'
};

module.exports = function QuoteJSONString(value) {
  if (Type(value) !== 'String') {
    throw new $TypeError('Assertion failed: `value` must be a String');
  }

  var product = '"';

  if (value) {
    forEach($strSplit(value), function (C) {
      if (C === '"' || C === '\\') {
        product += "\\" + C;
      } else if (C === "\b" || C === "\f" || C === "\n" || C === "\r" || C === "\t") {
        var abbrev = escapes[C];
        product += "\\" + abbrev;
      } else {
        var cCharCode = $charCodeAt(C, 0);

        if (cCharCode < 0x20) {
          product += "\\u" + $toLowerCase($strSlice('0000' + $numberToString(cCharCode, 16), -4));
        } else {
          product += C;
        }
      }
    });
  }

  product += '"';
  return product;
};