"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _data = _interopRequireDefault(require("core-js-compat/data"));

var _corejs3ShippedProposals = _interopRequireDefault(require("@babel/compat-data/corejs3-shipped-proposals"));

var _getModulesListForTargetVersion = _interopRequireDefault(require("core-js-compat/get-modules-list-for-target-version"));

var _helperCompilationTargets = require("@babel/helper-compilation-targets");

var _builtInDefinitions = require("./built-in-definitions");

var _utils = require("../../utils");

var _debug = require("../../debug");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var NO_DIRECT_POLYFILL_IMPORT = "\n  When setting `useBuiltIns: 'usage'`, polyfills are automatically imported when needed.\n  Please remove the direct import of `core-js` or use `useBuiltIns: 'entry'` instead.";
var corejs3PolyfillsWithoutProposals = Object.keys(_data["default"]).filter(function (name) {
  return !name.startsWith("esnext.");
}).reduce(function (memo, key) {
  memo[key] = _data["default"][key];
  return memo;
}, {});

var corejs3PolyfillsWithShippedProposals = _corejs3ShippedProposals["default"].reduce(function (memo, key) {
  memo[key] = _data["default"][key];
  return memo;
}, Object.assign({}, corejs3PolyfillsWithoutProposals));

function _default(_, _ref) {
  var corejs = _ref.corejs,
      include = _ref.include,
      exclude = _ref.exclude,
      polyfillTargets = _ref.polyfillTargets,
      proposals = _ref.proposals,
      shippedProposals = _ref.shippedProposals,
      debug = _ref.debug;
  var polyfills = (0, _helperCompilationTargets.filterItems)(proposals ? _data["default"] : shippedProposals ? corejs3PolyfillsWithShippedProposals : corejs3PolyfillsWithoutProposals, include, exclude, polyfillTargets, null);
  var available = new Set((0, _getModulesListForTargetVersion["default"])(corejs.version));

  function resolveKey(path, computed) {
    var node = path.node,
        parent = path.parent,
        scope = path.scope;
    if (path.isStringLiteral()) return node.value;
    var name = node.name;
    var isIdentifier = path.isIdentifier();
    if (isIdentifier && !(computed || parent.computed)) return name;

    if (!isIdentifier || scope.getBindingIdentifier(name)) {
      var _path$evaluate = path.evaluate(),
          value = _path$evaluate.value;

      if (typeof value === "string") return value;
    }
  }

  function resolveSource(path) {
    var node = path.node,
        scope = path.scope;
    var builtIn, instanceType;

    if (node) {
      builtIn = node.name;

      if (!path.isIdentifier() || scope.getBindingIdentifier(builtIn)) {
        var _path$evaluate2 = path.evaluate(),
            deopt = _path$evaluate2.deopt,
            value = _path$evaluate2.value;

        if (value !== undefined) {
          instanceType = (0, _utils.getType)(value);
        } else if (deopt && deopt.isIdentifier()) {
          builtIn = deopt.node.name;
        }
      }
    }

    return {
      builtIn: builtIn,
      instanceType: instanceType,
      isNamespaced: (0, _utils.isNamespaced)(path)
    };
  }

  var addAndRemovePolyfillImports = {
    ImportDeclaration: function ImportDeclaration(path) {
      if ((0, _utils.isPolyfillSource)((0, _utils.getImportSource)(path))) {
        console.warn(NO_DIRECT_POLYFILL_IMPORT);
        path.remove();
      }
    },
    Program: {
      enter: function enter(path) {
        path.get("body").forEach(function (bodyPath) {
          if ((0, _utils.isPolyfillSource)((0, _utils.getRequireSource)(bodyPath))) {
            console.warn(NO_DIRECT_POLYFILL_IMPORT);
            bodyPath.remove();
          }
        });
      },
      exit: function exit(path) {
        var _this = this;

        var filtered = (0, _utils.intersection)(polyfills, this.polyfillsSet, available);
        var reversed = Array.from(filtered).reverse();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = reversed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var module = _step.value;

            if (!this.injectedPolyfills.has(module)) {
              (0, _utils.createImport)(path, module);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        filtered.forEach(function (module) {
          return _this.injectedPolyfills.add(module);
        });
      }
    },
    Import: function Import() {
      this.addUnsupported(_builtInDefinitions.PromiseDependencies);
    },
    Function: function Function(_ref2) {
      var node = _ref2.node;

      if (node.async) {
        this.addUnsupported(_builtInDefinitions.PromiseDependencies);
      }
    },
    "ForOfStatement|ArrayPattern": function ForOfStatementArrayPattern() {
      this.addUnsupported(_builtInDefinitions.CommonIterators);
    },
    SpreadElement: function SpreadElement(_ref3) {
      var parentPath = _ref3.parentPath;

      if (!parentPath.isObjectExpression()) {
        this.addUnsupported(_builtInDefinitions.CommonIterators);
      }
    },
    YieldExpression: function YieldExpression(_ref4) {
      var node = _ref4.node;

      if (node.delegate) {
        this.addUnsupported(_builtInDefinitions.CommonIterators);
      }
    },
    ReferencedIdentifier: function ReferencedIdentifier(_ref5) {
      var name = _ref5.node.name,
          scope = _ref5.scope;
      if (scope.getBindingIdentifier(name)) return;
      this.addBuiltInDependencies(name);
    },
    MemberExpression: function MemberExpression(path) {
      var source = resolveSource(path.get("object"));
      var key = resolveKey(path.get("property"));
      this.addPropertyDependencies(source, key);
    },
    ObjectPattern: function ObjectPattern(path) {
      var parentPath = path.parentPath,
          parent = path.parent,
          key = path.key;
      var source;

      if (parentPath.isVariableDeclarator()) {
        source = resolveSource(parentPath.get("init"));
      } else if (parentPath.isAssignmentExpression()) {
        source = resolveSource(parentPath.get("right"));
      } else if (parentPath.isFunctionExpression()) {
        var grand = parentPath.parentPath;

        if (grand.isCallExpression() || grand.isNewExpression()) {
          if (grand.node.callee === parent) {
            source = resolveSource(grand.get("arguments")[key]);
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = path.get("properties")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var property = _step2.value;

          if (property.isObjectProperty()) {
            var _key = resolveKey(property.get("key"));

            this.addPropertyDependencies(source, _key);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    },
    BinaryExpression: function BinaryExpression(path) {
      if (path.node.operator !== "in") return;
      var source = resolveSource(path.get("right"));
      var key = resolveKey(path.get("left"), true);
      this.addPropertyDependencies(source, key);
    }
  };
  return {
    name: "corejs3-usage",
    pre: function pre() {
      this.injectedPolyfills = new Set();
      this.polyfillsSet = new Set();

      this.addUnsupported = function (builtIn) {
        var modules = Array.isArray(builtIn) ? builtIn : [builtIn];
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var module = _step3.value;
            this.polyfillsSet.add(module);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      };

      this.addBuiltInDependencies = function (builtIn) {
        if ((0, _utils.has)(_builtInDefinitions.BuiltIns, builtIn)) {
          var BuiltInDependencies = _builtInDefinitions.BuiltIns[builtIn];
          this.addUnsupported(BuiltInDependencies);
        }
      };

      this.addPropertyDependencies = function () {
        var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var key = arguments.length > 1 ? arguments[1] : undefined;
        var builtIn = source.builtIn,
            instanceType = source.instanceType,
            isNamespaced = source.isNamespaced;
        if (isNamespaced) return;

        if (_builtInDefinitions.PossibleGlobalObjects.has(builtIn)) {
          this.addBuiltInDependencies(key);
        } else if ((0, _utils.has)(_builtInDefinitions.StaticProperties, builtIn)) {
          var BuiltInProperties = _builtInDefinitions.StaticProperties[builtIn];

          if ((0, _utils.has)(BuiltInProperties, key)) {
            var StaticPropertyDependencies = BuiltInProperties[key];
            return this.addUnsupported(StaticPropertyDependencies);
          }
        }

        if (!(0, _utils.has)(_builtInDefinitions.InstanceProperties, key)) return;
        var InstancePropertyDependencies = _builtInDefinitions.InstanceProperties[key];

        if (instanceType) {
          InstancePropertyDependencies = InstancePropertyDependencies.filter(function (m) {
            return m.includes(instanceType) || _builtInDefinitions.CommonInstanceDependencies.has(m);
          });
        }

        this.addUnsupported(InstancePropertyDependencies);
      };
    },
    post: function post() {
      if (debug) {
        (0, _debug.logUsagePolyfills)(this.injectedPolyfills, this.file.opts.filename, polyfillTargets, _data["default"]);
      }
    },
    visitor: addAndRemovePolyfillImports
  };
}