"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.registerDatabase=registerDatabase;exports.enableLogging=exports.ServerValue=exports.Reference=exports.Query=exports.OnDisconnect=exports.Database=exports.DataSnapshot=void 0;var _app=_interopRequireDefault(require("@firebase/app"));var _util=require("@firebase/util");var _logger=require("@firebase/logger");var _component=require("@firebase/component");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance");}function _iterableToArrayLimit(arr,i){if(!(Symbol.iterator in Object(arr)||Object.prototype.toString.call(arr)==="[object Arguments]")){return;}var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 * @constructor
 */var DOMStorageWrapper=/*#__PURE__*/function(){/**
     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
     */function DOMStorageWrapper(domStorage_){_classCallCheck(this,DOMStorageWrapper);this.domStorage_=domStorage_;// Use a prefix to avoid collisions with other stuff saved by the app.
this.prefix_='firebase:';}/**
     * @param {string} key The key to save the value under
     * @param {?Object} value The value being stored, or null to remove the key.
     */_createClass(DOMStorageWrapper,[{key:"set",value:function set(key,value){if(value==null){this.domStorage_.removeItem(this.prefixedName_(key));}else{this.domStorage_.setItem(this.prefixedName_(key),(0,_util.stringify)(value));}}/**
     * @param {string} key
     * @return {*} The value that was stored under this key, or null
     */},{key:"get",value:function get(key){var storedVal=this.domStorage_.getItem(this.prefixedName_(key));if(storedVal==null){return null;}else{return(0,_util.jsonEval)(storedVal);}}/**
     * @param {string} key
     */},{key:"remove",value:function remove(key){this.domStorage_.removeItem(this.prefixedName_(key));}/**
     * @param {string} name
     * @return {string}
     */},{key:"prefixedName_",value:function prefixedName_(name){return this.prefix_+name;}},{key:"toString",value:function toString(){return this.domStorage_.toString();}}]);return DOMStorageWrapper;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 *
 * @constructor
 */var MemoryStorage=/*#__PURE__*/function(){function MemoryStorage(){_classCallCheck(this,MemoryStorage);this.cache_={};this.isInMemoryStorage=true;}_createClass(MemoryStorage,[{key:"set",value:function set(key,value){if(value==null){delete this.cache_[key];}else{this.cache_[key]=value;}}},{key:"get",value:function get(key){if((0,_util.contains)(this.cache_,key)){return this.cache_[key];}return null;}},{key:"remove",value:function remove(key){delete this.cache_[key];}}]);return MemoryStorage;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param {string} domStorageName Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @return {?} Turning off type information until a common interface is defined.
 */var createStoragefor=function createStoragefor(domStorageName){try{// NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
// so it must be inside the try/catch.
if(typeof window!=='undefined'&&typeof window[domStorageName]!=='undefined'){// Need to test cache. Just because it's here doesn't mean it works
var domStorage=window[domStorageName];domStorage.setItem('firebase:sentinel','cache');domStorage.removeItem('firebase:sentinel');return new DOMStorageWrapper(domStorage);}}catch(e){}// Failed to create wrapper.  Just return in-memory storage.
// TODO: log?
return new MemoryStorage();};/** A storage object that lasts across sessions */var PersistentStorage=createStoragefor('localStorage');/** A storage object that only lasts one session */var SessionStorage=createStoragefor('sessionStorage');/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var logClient=new _logger.Logger('@firebase/database');/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 * @type {function(): number} Generated ID.
 */var LUIDGenerator=function(){var id=1;return function(){return id++;};}();/**
 * Sha1 hash of the input string
 * @param {!string} str The string to hash
 * @return {!string} The resulting hash
 */var sha1=function sha1(str){var utf8Bytes=(0,_util.stringToByteArray)(str);var sha1=new _util.Sha1();sha1.update(utf8Bytes);var sha1Bytes=sha1.digest();return _util.base64.encodeByteArray(sha1Bytes);};/**
 * @param {...*} varArgs
 * @return {string}
 * @private
 */var buildLogMessage_=function buildLogMessage_(){var message='';for(var i=0;i<arguments.length;i++){var arg=i<0||arguments.length<=i?undefined:arguments[i];if(Array.isArray(arg)||arg&&_typeof(arg)==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any
typeof arg.length==='number'){message+=buildLogMessage_.apply(null,arg);}else if(_typeof(arg)==='object'){message+=(0,_util.stringify)(arg);}else{message+=arg;}message+=' ';}return message;};/**
 * Use this for all debug messages in Firebase.
 * @type {?function(string)}
 */var logger=null;/**
 * Flag to check for log availability on first log message
 * @type {boolean}
 * @private
 */var firstLog_=true;/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
 * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
 */var enableLogging=function enableLogging(logger_,persistent){(0,_util.assert)(!persistent||logger_===true||logger_===false,"Can't turn on custom loggers persistently.");if(logger_===true){logClient.logLevel=_logger.LogLevel.VERBOSE;logger=logClient.log.bind(logClient);if(persistent){SessionStorage.set('logging_enabled',true);}}else if(typeof logger_==='function'){logger=logger_;}else{logger=null;SessionStorage.remove('logging_enabled');}};/**
 *
 * @param {...(string|Arguments)} varArgs
 */exports.enableLogging=enableLogging;var log=function log(){if(firstLog_===true){firstLog_=false;if(logger===null&&SessionStorage.get('logging_enabled')===true){enableLogging(true);}}if(logger){for(var _len=arguments.length,varArgs=new Array(_len),_key2=0;_key2<_len;_key2++){varArgs[_key2]=arguments[_key2];}var message=buildLogMessage_.apply(null,varArgs);logger(message);}};/**
 * @param {!string} prefix
 * @return {function(...[*])}
 */var logWrapper=function logWrapper(prefix){return function(){for(var _len2=arguments.length,varArgs=new Array(_len2),_key3=0;_key3<_len2;_key3++){varArgs[_key3]=arguments[_key3];}log.apply(void 0,[prefix].concat(varArgs));};};/**
 * @param {...string} varArgs
 */var error=function error(){var message='FIREBASE INTERNAL ERROR: '+buildLogMessage_.apply(void 0,arguments);logClient.error(message);};/**
 * @param {...string} varArgs
 */var fatal=function fatal(){var message="FIREBASE FATAL ERROR: ".concat(buildLogMessage_.apply(void 0,arguments));logClient.error(message);throw new Error(message);};/**
 * @param {...*} varArgs
 */var warn=function warn(){var message='FIREBASE WARNING: '+buildLogMessage_.apply(void 0,arguments);logClient.warn(message);};/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */var warnIfPageIsSecure=function warnIfPageIsSecure(){// Be very careful accessing browser globals. Who knows what may or may not exist.
if(typeof window!=='undefined'&&window.location&&window.location.protocol&&window.location.protocol.indexOf('https:')!==-1){warn('Insecure Firebase access from a secure page. '+'Please use https in calls to new Firebase().');}};/**
 * Returns true if data is NaN, or +/- Infinity.
 * @param {*} data
 * @return {boolean}
 */var isInvalidJSONNumber=function isInvalidJSONNumber(data){return typeof data==='number'&&(data!==data||// NaN
data===Number.POSITIVE_INFINITY||data===Number.NEGATIVE_INFINITY);};/**
 * @param {function()} fn
 */var executeWhenDOMReady=function executeWhenDOMReady(fn){if((0,_util.isNodeSdk)()||document.readyState==='complete'){fn();}else{// Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
// fire before onload), but fall back to onload.
var called=false;var wrappedFn=function wrappedFn(){if(!document.body){setTimeout(wrappedFn,Math.floor(10));return;}if(!called){called=true;fn();}};if(document.addEventListener){document.addEventListener('DOMContentLoaded',wrappedFn,false);// fallback to onload.
window.addEventListener('load',wrappedFn,false);// eslint-disable-next-line @typescript-eslint/no-explicit-any
}else if(document.attachEvent){// IE.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
document.attachEvent('onreadystatechange',function(){if(document.readyState==='complete'){wrappedFn();}});// fallback to onload.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
window.attachEvent('onload',wrappedFn);// jQuery has an extra hack for IE that we could employ (based on
// http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
// I'm hoping we don't need it.
}}};/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 * @type {!string}
 */var MIN_NAME='[MIN_NAME]';/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 * @type {!string}
 */var MAX_NAME='[MAX_NAME]';/**
 * Compares valid Firebase key names, plus min and max name
 * @param {!string} a
 * @param {!string} b
 * @return {!number}
 */var nameCompare=function nameCompare(a,b){if(a===b){return 0;}else if(a===MIN_NAME||b===MAX_NAME){return-1;}else if(b===MIN_NAME||a===MAX_NAME){return 1;}else{var aAsInt=tryParseInt(a),bAsInt=tryParseInt(b);if(aAsInt!==null){if(bAsInt!==null){return aAsInt-bAsInt===0?a.length-b.length:aAsInt-bAsInt;}else{return-1;}}else if(bAsInt!==null){return 1;}else{return a<b?-1:1;}}};/**
 * @param {!string} a
 * @param {!string} b
 * @return {!number} comparison result.
 */var stringCompare=function stringCompare(a,b){if(a===b){return 0;}else if(a<b){return-1;}else{return 1;}};/**
 * @param {string} key
 * @param {Object} obj
 * @return {*}
 */var requireKey=function requireKey(key,obj){if(obj&&key in obj){return obj[key];}else{throw new Error('Missing required key ('+key+') in object: '+(0,_util.stringify)(obj));}};/**
 * @param {*} obj
 * @return {string}
 */var ObjectToUniqueKey=function ObjectToUniqueKey(obj){if(_typeof(obj)!=='object'||obj===null){return(0,_util.stringify)(obj);}var keys=[];// eslint-disable-next-line guard-for-in
for(var k in obj){keys.push(k);}// Export as json, but with the keys sorted.
keys.sort();var key='{';for(var i=0;i<keys.length;i++){if(i!==0){key+=',';}key+=(0,_util.stringify)(keys[i]);key+=':';key+=ObjectToUniqueKey(obj[keys[i]]);}key+='}';return key;};/**
 * Splits a string into a number of smaller segments of maximum size
 * @param {!string} str The string
 * @param {!number} segsize The maximum number of chars in the string.
 * @return {Array.<string>} The string, split into appropriately-sized chunks
 */var splitStringBySize=function splitStringBySize(str,segsize){var len=str.length;if(len<=segsize){return[str];}var dataSegs=[];for(var c=0;c<len;c+=segsize){if(c+segsize>len){dataSegs.push(str.substring(c,len));}else{dataSegs.push(str.substring(c,c+segsize));}}return dataSegs;};/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param obj The object or array to iterate over
 * @param fn The function to apply
 */function each(obj,fn){for(var key in obj){if(obj.hasOwnProperty(key)){fn(key,obj[key]);}}}/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param {!number} v A double
 * @return {string}
 */var doubleToIEEE754String=function doubleToIEEE754String(v){(0,_util.assert)(!isInvalidJSONNumber(v),'Invalid JSON number');// MJL
var ebits=11,fbits=52;var bias=(1<<ebits-1)-1;var s,e,f,ln,i;// Compute sign, exponent, fraction
// Skip NaN / Infinity handling --MJL.
if(v===0){e=0;f=0;s=1/v===-Infinity?1:0;}else{s=v<0;v=Math.abs(v);if(v>=Math.pow(2,1-bias)){// Normalized
ln=Math.min(Math.floor(Math.log(v)/Math.LN2),bias);e=ln+bias;f=Math.round(v*Math.pow(2,fbits-ln)-Math.pow(2,fbits));}else{// Denormalized
e=0;f=Math.round(v/Math.pow(2,1-bias-fbits));}}// Pack sign, exponent, fraction
var bits=[];for(i=fbits;i;i-=1){bits.push(f%2?1:0);f=Math.floor(f/2);}for(i=ebits;i;i-=1){bits.push(e%2?1:0);e=Math.floor(e/2);}bits.push(s?1:0);bits.reverse();var str=bits.join('');// Return the data as a hex string. --MJL
var hexByteString='';for(i=0;i<64;i+=8){var hexByte=parseInt(str.substr(i,8),2).toString(16);if(hexByte.length===1){hexByte='0'+hexByte;}hexByteString=hexByteString+hexByte;}return hexByteString.toLowerCase();};/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 * @return {boolean}
 */var isChromeExtensionContentScript=function isChromeExtensionContentScript(){return!!((typeof window==="undefined"?"undefined":_typeof(window))==='object'&&window['chrome']&&window['chrome']['extension']&&!/^chrome/.test(window.location.href));};/**
 * Used to detect if we're in a Windows 8 Store app.
 * @return {boolean}
 */var isWindowsStoreApp=function isWindowsStoreApp(){// Check for the presence of a couple WinRT globals
return(typeof Windows==="undefined"?"undefined":_typeof(Windows))==='object'&&_typeof(Windows.UI)==='object';};/**
 * Converts a server error code to a Javascript Error
 * @param {!string} code
 * @param {!Query} query
 * @return {Error}
 */var errorForServerCode=function errorForServerCode(code,query){var reason='Unknown Error';if(code==='too_big'){reason='The data requested exceeds the maximum size '+'that can be accessed with a single request.';}else if(code==='permission_denied'){reason="Client doesn't have permission to access the desired data.";}else if(code==='unavailable'){reason='The service is unavailable';}var error=new Error(code+' at '+query.path.toString()+': '+reason);// eslint-disable-next-line @typescript-eslint/no-explicit-any
error.code=code.toUpperCase();return error;};/**
 * Used to test for integer-looking strings
 * @type {RegExp}
 * @private
 */var INTEGER_REGEXP_=new RegExp('^-?(0*)\\d{1,10}$');/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 * @param {!string} str
 * @return {?number}
 */var tryParseInt=function tryParseInt(str){if(INTEGER_REGEXP_.test(str)){var intVal=Number(str);if(intVal>=-2147483648&&intVal<=2147483647){return intVal;}}return null;};/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param {!function()} fn The code to guard.
 */var exceptionGuard=function exceptionGuard(fn){try{fn();}catch(e){// Re-throw exception when it's safe.
setTimeout(function(){// It used to be that "throw e" would result in a good console error with
// relevant context, but as of Chrome 39, you just get the firebase.js
// file/line number where we re-throw it, which is useless. So we log
// e.stack explicitly.
var stack=e.stack||'';warn('Exception was thrown by user callback.',stack);throw e;},Math.floor(0));}};/**
 * @return {boolean} true if we think we're currently being crawled.
 */var beingCrawled=function beingCrawled(){var userAgent=(typeof window==="undefined"?"undefined":_typeof(window))==='object'&&window['navigator']&&window['navigator']['userAgent']||'';// For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
// believe to support JavaScript/AJAX rendering.
// NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
// would have seen the page" is flaky if we don't treat it as a crawler.
return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0;};/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param {Function} fn Function to run.
 * @param {number} time Milliseconds to wait before running.
 * @return {number|Object} The setTimeout() return value.
 */var setTimeoutNonBlocking=function setTimeoutNonBlocking(fn,time){var timeout=setTimeout(fn,time);// eslint-disable-next-line @typescript-eslint/no-explicit-any
if(_typeof(timeout)==='object'&&timeout['unref']){// eslint-disable-next-line @typescript-eslint/no-explicit-any
timeout['unref']();}return timeout;};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */var Path=/*#__PURE__*/function(){/**
     * @param {string|Array.<string>} pathOrString Path string to parse,
     *      or another path, or the raw tokens array
     * @param {number=} pieceNum
     */function Path(pathOrString,pieceNum){_classCallCheck(this,Path);if(pieceNum===void 0){this.pieces_=pathOrString.split('/');// Remove empty pieces.
var copyTo=0;for(var i=0;i<this.pieces_.length;i++){if(this.pieces_[i].length>0){this.pieces_[copyTo]=this.pieces_[i];copyTo++;}}this.pieces_.length=copyTo;this.pieceNum_=0;}else{this.pieces_=pathOrString;this.pieceNum_=pieceNum;}}/**
     * Singleton to represent an empty path
     *
     * @const
     */_createClass(Path,[{key:"getFront",value:function getFront(){if(this.pieceNum_>=this.pieces_.length){return null;}return this.pieces_[this.pieceNum_];}/**
     * @return {number} The number of segments in this path
     */},{key:"getLength",value:function getLength(){return this.pieces_.length-this.pieceNum_;}/**
     * @return {!Path}
     */},{key:"popFront",value:function popFront(){var pieceNum=this.pieceNum_;if(pieceNum<this.pieces_.length){pieceNum++;}return new Path(this.pieces_,pieceNum);}/**
     * @return {?string}
     */},{key:"getBack",value:function getBack(){if(this.pieceNum_<this.pieces_.length){return this.pieces_[this.pieces_.length-1];}return null;}},{key:"toString",value:function toString(){var pathString='';for(var i=this.pieceNum_;i<this.pieces_.length;i++){if(this.pieces_[i]!==''){pathString+='/'+this.pieces_[i];}}return pathString||'/';}},{key:"toUrlEncodedString",value:function toUrlEncodedString(){var pathString='';for(var i=this.pieceNum_;i<this.pieces_.length;i++){if(this.pieces_[i]!==''){pathString+='/'+encodeURIComponent(String(this.pieces_[i]));}}return pathString||'/';}/**
     * Shallow copy of the parts of the path.
     *
     * @param {number=} begin
     * @return {!Array<string>}
     */},{key:"slice",value:function slice(){var begin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;return this.pieces_.slice(this.pieceNum_+begin);}/**
     * @return {?Path}
     */},{key:"parent",value:function parent(){if(this.pieceNum_>=this.pieces_.length){return null;}var pieces=[];for(var i=this.pieceNum_;i<this.pieces_.length-1;i++){pieces.push(this.pieces_[i]);}return new Path(pieces,0);}/**
     * @param {string|!Path} childPathObj
     * @return {!Path}
     */},{key:"child",value:function child(childPathObj){var pieces=[];for(var i=this.pieceNum_;i<this.pieces_.length;i++){pieces.push(this.pieces_[i]);}if(childPathObj instanceof Path){for(var _i=childPathObj.pieceNum_;_i<childPathObj.pieces_.length;_i++){pieces.push(childPathObj.pieces_[_i]);}}else{var childPieces=childPathObj.split('/');for(var _i2=0;_i2<childPieces.length;_i2++){if(childPieces[_i2].length>0){pieces.push(childPieces[_i2]);}}}return new Path(pieces,0);}/**
     * @return {boolean} True if there are no segments in this path
     */},{key:"isEmpty",value:function isEmpty(){return this.pieceNum_>=this.pieces_.length;}/**
     * @param {!Path} outerPath
     * @param {!Path} innerPath
     * @return {!Path} The path from outerPath to innerPath
     */},{key:"equals",/**
     *
     * @param {Path} other
     * @return {boolean} true if paths are the same.
     */value:function equals(other){if(this.getLength()!==other.getLength()){return false;}for(var i=this.pieceNum_,j=other.pieceNum_;i<=this.pieces_.length;i++,j++){if(this.pieces_[i]!==other.pieces_[j]){return false;}}return true;}/**
     *
     * @param {!Path} other
     * @return {boolean} True if this path is a parent (or the same as) other
     */},{key:"contains",value:function contains(other){var i=this.pieceNum_;var j=other.pieceNum_;if(this.getLength()>other.getLength()){return false;}while(i<this.pieces_.length){if(this.pieces_[i]!==other.pieces_[j]){return false;}++i;++j;}return true;}}],[{key:"relativePath",value:function relativePath(outerPath,innerPath){var outer=outerPath.getFront(),inner=innerPath.getFront();if(outer===null){return innerPath;}else if(outer===inner){return Path.relativePath(outerPath.popFront(),innerPath.popFront());}else{throw new Error('INTERNAL ERROR: innerPath ('+innerPath+') is not within '+'outerPath ('+outerPath+')');}}/**
     * @param {!Path} left
     * @param {!Path} right
     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
     */},{key:"comparePaths",value:function comparePaths(left,right){var leftKeys=left.slice();var rightKeys=right.slice();for(var i=0;i<leftKeys.length&&i<rightKeys.length;i++){var cmp=nameCompare(leftKeys[i],rightKeys[i]);if(cmp!==0){return cmp;}}if(leftKeys.length===rightKeys.length){return 0;}return leftKeys.length<rightKeys.length?-1:1;}},{key:"Empty",get:function get(){return new Path('');}}]);return Path;}();// end Path
/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */var ValidationPath=/*#__PURE__*/function(){/**
     * @param {!Path} path Initial Path.
     * @param {string} errorPrefix_ Prefix for any error messages.
     */function ValidationPath(path,errorPrefix_){_classCallCheck(this,ValidationPath);this.errorPrefix_=errorPrefix_;/** @type {!Array<string>} */this.parts_=path.slice();/** @type {number} Initialize to number of '/' chars needed in path. */this.byteLength_=Math.max(1,this.parts_.length);for(var i=0;i<this.parts_.length;i++){this.byteLength_+=(0,_util.stringLength)(this.parts_[i]);}this.checkValid_();}/** @const {number} Maximum key depth. */_createClass(ValidationPath,[{key:"push",/** @param {string} child */value:function push(child){// Count the needed '/'
if(this.parts_.length>0){this.byteLength_+=1;}this.parts_.push(child);this.byteLength_+=(0,_util.stringLength)(child);this.checkValid_();}},{key:"pop",value:function pop(){var last=this.parts_.pop();this.byteLength_-=(0,_util.stringLength)(last);// Un-count the previous '/'
if(this.parts_.length>0){this.byteLength_-=1;}}},{key:"checkValid_",value:function checkValid_(){if(this.byteLength_>ValidationPath.MAX_PATH_LENGTH_BYTES){throw new Error(this.errorPrefix_+'has a key path longer than '+ValidationPath.MAX_PATH_LENGTH_BYTES+' bytes ('+this.byteLength_+').');}if(this.parts_.length>ValidationPath.MAX_PATH_DEPTH){throw new Error(this.errorPrefix_+'path specified exceeds the maximum depth that can be written ('+ValidationPath.MAX_PATH_DEPTH+') or object contains a cycle '+this.toErrorString());}}/**
     * String for use in error messages - uses '.' notation for path.
     *
     * @return {string}
     */},{key:"toErrorString",value:function toErrorString(){if(this.parts_.length===0){return'';}return"in property '"+this.parts_.join('.')+"'";}}],[{key:"MAX_PATH_DEPTH",get:function get(){return 32;}/** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */},{key:"MAX_PATH_LENGTH_BYTES",get:function get(){return 768;}}]);return ValidationPath;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var PROTOCOL_VERSION='5';var VERSION_PARAM='v';var TRANSPORT_SESSION_PARAM='s';var REFERER_PARAM='r';var FORGE_REF='f';var FORGE_DOMAIN='firebaseio.com';var LAST_SESSION_PARAM='ls';var APPLICATION_ID_PARAM='p';var WEBSOCKET='websocket';var LONG_POLLING='long_polling';/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class that holds metadata about a Repo object
 *
 * @constructor
 */var RepoInfo=/*#__PURE__*/function(){/**
     * @param host Hostname portion of the url for the repo
     * @param secure Whether or not this repo is accessed over ssl
     * @param namespace The namespace represented by the repo
     * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
     * @param nodeAdmin Whether this instance uses Admin SDK credentials
     * @param persistenceKey Override the default session persistence storage key
     */function RepoInfo(host,secure,namespace,webSocketOnly){var nodeAdmin=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var persistenceKey=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'';var includeNamespaceInQueryParams=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;_classCallCheck(this,RepoInfo);this.secure=secure;this.namespace=namespace;this.webSocketOnly=webSocketOnly;this.nodeAdmin=nodeAdmin;this.persistenceKey=persistenceKey;this.includeNamespaceInQueryParams=includeNamespaceInQueryParams;this.host=host.toLowerCase();this.domain=this.host.substr(this.host.indexOf('.')+1);this.internalHost=PersistentStorage.get('host:'+host)||this.host;}_createClass(RepoInfo,[{key:"needsQueryParam",value:function needsQueryParam(){return this.host!==this.internalHost||this.isCustomHost()||this.includeNamespaceInQueryParams;}},{key:"isCacheableHost",value:function isCacheableHost(){return this.internalHost.substr(0,2)==='s-';}},{key:"isDemoHost",value:function isDemoHost(){return this.domain==='firebaseio-demo.com';}},{key:"isCustomHost",value:function isCustomHost(){return this.domain!=='firebaseio.com'&&this.domain!=='firebaseio-demo.com';}},{key:"updateHost",value:function updateHost(newHost){if(newHost!==this.internalHost){this.internalHost=newHost;if(this.isCacheableHost()){PersistentStorage.set('host:'+this.host,this.internalHost);}}}/**
     * Returns the websocket URL for this repo
     * @param {string} type of connection
     * @param {Object} params list
     * @return {string} The URL for this repo
     */},{key:"connectionURL",value:function connectionURL(type,params){(0,_util.assert)(typeof type==='string','typeof type must == string');(0,_util.assert)(_typeof(params)==='object','typeof params must == object');var connURL;if(type===WEBSOCKET){connURL=(this.secure?'wss://':'ws://')+this.internalHost+'/.ws?';}else if(type===LONG_POLLING){connURL=(this.secure?'https://':'http://')+this.internalHost+'/.lp?';}else{throw new Error('Unknown connection type: '+type);}if(this.needsQueryParam()){params['ns']=this.namespace;}var pairs=[];each(params,function(key,value){pairs.push(key+'='+value);});return connURL+pairs.join('&');}/** @return {string} */},{key:"toString",value:function toString(){var str=this.toURLString();if(this.persistenceKey){str+='<'+this.persistenceKey+'>';}return str;}/** @return {string} */},{key:"toURLString",value:function toURLString(){return(this.secure?'https://':'http://')+this.host;}}]);return RepoInfo;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!string} pathString
 * @return {string}
 */function decodePath(pathString){var pathStringDecoded='';var pieces=pathString.split('/');for(var i=0;i<pieces.length;i++){if(pieces[i].length>0){var piece=pieces[i];try{piece=decodeURIComponent(piece.replace(/\+/g,' '));}catch(e){}pathStringDecoded+='/'+piece;}}return pathStringDecoded;}/**
 * @param {!string} queryString
 * @return {!{[key:string]:string}} key value hash
 */function decodeQuery(queryString){var results={};if(queryString.charAt(0)==='?'){queryString=queryString.substring(1);}var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=queryString.split('&')[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var segment=_step.value;if(segment.length===0){continue;}var kv=segment.split('=');if(kv.length===2){results[decodeURIComponent(kv[0])]=decodeURIComponent(kv[1]);}else{warn("Invalid query segment '".concat(segment,"' in query '").concat(queryString,"'"));}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator["return"]!=null){_iterator["return"]();}}finally{if(_didIteratorError){throw _iteratorError;}}}return results;}var parseRepoInfo=function parseRepoInfo(dataURL,nodeAdmin){var parsedUrl=parseDatabaseURL(dataURL),namespace=parsedUrl.namespace;if(parsedUrl.domain==='firebase.com'){fatal(parsedUrl.host+' is no longer supported. '+'Please use <YOUR FIREBASE>.firebaseio.com instead');}// Catch common error of uninitialized namespace value.
if((!namespace||namespace==='undefined')&&parsedUrl.domain!=='localhost'){fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');}if(!parsedUrl.secure){warnIfPageIsSecure();}var webSocketOnly=parsedUrl.scheme==='ws'||parsedUrl.scheme==='wss';return{repoInfo:new RepoInfo(parsedUrl.host,parsedUrl.secure,namespace,nodeAdmin,webSocketOnly,/*persistenceKey=*/'',/*includeNamespaceInQueryParams=*/namespace!==parsedUrl.subdomain),path:new Path(parsedUrl.pathString)};};/**
 *
 * @param {!string} dataURL
 * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}
 */var parseDatabaseURL=function parseDatabaseURL(dataURL){// Default to empty strings in the event of a malformed string.
var host='',domain='',subdomain='',pathString='',namespace='';// Always default to SSL, unless otherwise specified.
var secure=true,scheme='https',port=443;// Don't do any validation here. The caller is responsible for validating the result of parsing.
if(typeof dataURL==='string'){// Parse scheme.
var colonInd=dataURL.indexOf('//');if(colonInd>=0){scheme=dataURL.substring(0,colonInd-1);dataURL=dataURL.substring(colonInd+2);}// Parse host, path, and query string.
var slashInd=dataURL.indexOf('/');if(slashInd===-1){slashInd=dataURL.length;}var questionMarkInd=dataURL.indexOf('?');if(questionMarkInd===-1){questionMarkInd=dataURL.length;}host=dataURL.substring(0,Math.min(slashInd,questionMarkInd));if(slashInd<questionMarkInd){// For pathString, questionMarkInd will always come after slashInd
pathString=decodePath(dataURL.substring(slashInd,questionMarkInd));}var queryParams=decodeQuery(dataURL.substring(Math.min(dataURL.length,questionMarkInd)));// If we have a port, use scheme for determining if it's secure.
colonInd=host.indexOf(':');if(colonInd>=0){secure=scheme==='https'||scheme==='wss';port=parseInt(host.substring(colonInd+1),10);}else{colonInd=host.length;}var hostWithoutPort=host.slice(0,colonInd);if(hostWithoutPort.toLowerCase()==='localhost'){domain='localhost';}else if(hostWithoutPort.split('.').length<=2){domain=hostWithoutPort;}else{// Interpret the subdomain of a 3 or more component URL as the namespace name.
var dotInd=host.indexOf('.');subdomain=host.substring(0,dotInd).toLowerCase();domain=host.substring(dotInd+1);// Normalize namespaces to lowercase to share storage / connection.
namespace=subdomain;}// Always treat the value of the `ns` as the namespace name if it is present.
if('ns'in queryParams){namespace=queryParams['ns'];}}return{host:host,port:port,domain:domain,subdomain:subdomain,secure:secure,scheme:scheme,pathString:pathString,namespace:namespace};};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * True for invalid Firebase keys
 * @type {RegExp}
 * @private
 */var INVALID_KEY_REGEX_=/[\[\].#$\/\u0000-\u001F\u007F]/;/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 * @type {RegExp}
 * @private
 */var INVALID_PATH_REGEX_=/[\[\].#$\u0000-\u001F\u007F]/;/**
 * Maximum number of characters to allow in leaf value
 * @type {number}
 * @private
 */var MAX_LEAF_SIZE_=10*1024*1024;/**
 * @param {*} key
 * @return {boolean}
 */var isValidKey=function isValidKey(key){return typeof key==='string'&&key.length!==0&&!INVALID_KEY_REGEX_.test(key);};/**
 * @param {string} pathString
 * @return {boolean}
 */var isValidPathString=function isValidPathString(pathString){return typeof pathString==='string'&&pathString.length!==0&&!INVALID_PATH_REGEX_.test(pathString);};/**
 * @param {string} pathString
 * @return {boolean}
 */var isValidRootPathString=function isValidRootPathString(pathString){if(pathString){// Allow '/.info/' at the beginning.
pathString=pathString.replace(/^\/*\.info(\/|$)/,'/');}return isValidPathString(pathString);};/**
 * @param {*} priority
 * @return {boolean}
 */var isValidPriority=function isValidPriority(priority){return priority===null||typeof priority==='string'||typeof priority==='number'&&!isInvalidJSONNumber(priority)||priority&&_typeof(priority)==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any
(0,_util.contains)(priority,'.sv');};/**
 * Pre-validate a datum passed as an argument to Firebase function.
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */var validateFirebaseDataArg=function validateFirebaseDataArg(fnName,argumentNumber,data,path,optional){if(optional&&data===undefined){return;}validateFirebaseData((0,_util.errorPrefix)(fnName,argumentNumber,optional),data,path);};/**
 * Validate a data object client-side before sending to server.
 *
 * @param {string} errorPrefix
 * @param {*} data
 * @param {!Path|!ValidationPath} path_
 */var validateFirebaseData=function validateFirebaseData(errorPrefix,data,path_){var path=path_ instanceof Path?new ValidationPath(path_,errorPrefix):path_;if(data===undefined){throw new Error(errorPrefix+'contains undefined '+path.toErrorString());}if(typeof data==='function'){throw new Error(errorPrefix+'contains a function '+path.toErrorString()+' with contents = '+data.toString());}if(isInvalidJSONNumber(data)){throw new Error(errorPrefix+'contains '+data.toString()+' '+path.toErrorString());}// Check max leaf size, but try to avoid the utf8 conversion if we can.
if(typeof data==='string'&&data.length>MAX_LEAF_SIZE_/3&&(0,_util.stringLength)(data)>MAX_LEAF_SIZE_){throw new Error(errorPrefix+'contains a string greater than '+MAX_LEAF_SIZE_+' utf8 bytes '+path.toErrorString()+" ('"+data.substring(0,50)+"...')");}// TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
// to save extra walking of large objects.
if(data&&_typeof(data)==='object'){var hasDotValue=false;var hasActualChild=false;each(data,function(key,value){if(key==='.value'){hasDotValue=true;}else if(key!=='.priority'&&key!=='.sv'){hasActualChild=true;if(!isValidKey(key)){throw new Error(errorPrefix+' contains an invalid key ('+key+') '+path.toErrorString()+'.  Keys must be non-empty strings '+'and can\'t contain ".", "#", "$", "/", "[", or "]"');}}path.push(key);validateFirebaseData(errorPrefix,value,path);path.pop();});if(hasDotValue&&hasActualChild){throw new Error(errorPrefix+' contains ".value" child '+path.toErrorString()+' in addition to actual children.');}}};/**
 * Pre-validate paths passed in the firebase function.
 *
 * @param {string} errorPrefix
 * @param {Array<!Path>} mergePaths
 */var validateFirebaseMergePaths=function validateFirebaseMergePaths(errorPrefix,mergePaths){var i,curPath;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];var keys=curPath.slice();for(var j=0;j<keys.length;j++){if(keys[j]==='.priority'&&j===keys.length-1);else if(!isValidKey(keys[j])){throw new Error(errorPrefix+'contains an invalid key ('+keys[j]+') in path '+curPath.toString()+'. Keys must be non-empty strings '+'and can\'t contain ".", "#", "$", "/", "[", or "]"');}}}// Check that update keys are not descendants of each other.
// We rely on the property that sorting guarantees that ancestors come
// right before descendants.
mergePaths.sort(Path.comparePaths);var prevPath=null;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];if(prevPath!==null&&prevPath.contains(curPath)){throw new Error(errorPrefix+'contains a path '+prevPath.toString()+' that is ancestor of another path '+curPath.toString());}prevPath=curPath;}};/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */var validateFirebaseMergeDataArg=function validateFirebaseMergeDataArg(fnName,argumentNumber,data,path,optional){if(optional&&data===undefined){return;}var errorPrefix$1=(0,_util.errorPrefix)(fnName,argumentNumber,optional);if(!(data&&_typeof(data)==='object')||Array.isArray(data)){throw new Error(errorPrefix$1+' must be an object containing the children to replace.');}var mergePaths=[];each(data,function(key,value){var curPath=new Path(key);validateFirebaseData(errorPrefix$1,value,path.child(curPath));if(curPath.getBack()==='.priority'){if(!isValidPriority(value)){throw new Error(errorPrefix$1+"contains an invalid value for '"+curPath.toString()+"', which must be a valid "+'Firebase priority (a string, finite number, server value, or null).');}}mergePaths.push(curPath);});validateFirebaseMergePaths(errorPrefix$1,mergePaths);};var validatePriority=function validatePriority(fnName,argumentNumber,priority,optional){if(optional&&priority===undefined){return;}if(isInvalidJSONNumber(priority)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'is '+priority.toString()+', but must be a valid Firebase priority (a string, finite number, '+'server value, or null).');}// Special case to allow importing data with a .sv.
if(!isValidPriority(priority)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'must be a valid Firebase priority '+'(a string, finite number, server value, or null).');}};var validateEventType=function validateEventType(fnName,argumentNumber,eventType,optional){if(optional&&eventType===undefined){return;}switch(eventType){case'value':case'child_added':case'child_removed':case'child_changed':case'child_moved':break;default:throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'must be a valid event type = "value", "child_added", "child_removed", '+'"child_changed", or "child_moved".');}};var validateKey=function validateKey(fnName,argumentNumber,key,optional){if(optional&&key===undefined){return;}if(!isValidKey(key)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'was an invalid key = "'+key+'".  Firebase keys must be non-empty strings and '+'can\'t contain ".", "#", "$", "/", "[", or "]").');}};var validatePathString=function validatePathString(fnName,argumentNumber,pathString,optional){if(optional&&pathString===undefined){return;}if(!isValidPathString(pathString)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'was an invalid path = "'+pathString+'". Paths must be non-empty strings and '+'can\'t contain ".", "#", "$", "[", or "]"');}};var validateRootPathString=function validateRootPathString(fnName,argumentNumber,pathString,optional){if(pathString){// Allow '/.info/' at the beginning.
pathString=pathString.replace(/^\/*\.info(\/|$)/,'/');}validatePathString(fnName,argumentNumber,pathString,optional);};var validateWritablePath=function validateWritablePath(fnName,path){if(path.getFront()==='.info'){throw new Error(fnName+" failed = Can't modify data under /.info/");}};var validateUrl=function validateUrl(fnName,argumentNumber,parsedUrl){// TODO = Validate server better.
var pathString=parsedUrl.path.toString();if(!(typeof parsedUrl.repoInfo.host==='string')||parsedUrl.repoInfo.host.length===0||!isValidKey(parsedUrl.repoInfo.namespace)&&parsedUrl.repoInfo.host.split(':')[0]!=='localhost'||pathString.length!==0&&!isValidRootPathString(pathString)){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,false)+'must be a valid firebase URL and '+'the path can\'t contain ".", "#", "$", "[", or "]".');}};var validateBoolean=function validateBoolean(fnName,argumentNumber,bool,optional){if(optional&&bool===undefined){return;}if(typeof bool!=='boolean'){throw new Error((0,_util.errorPrefix)(fnName,argumentNumber,optional)+'must be a boolean.');}};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 */var OnDisconnect=/*#__PURE__*/function(){/**
     * @param {!Repo} repo_
     * @param {!Path} path_
     */function OnDisconnect(repo_,path_){_classCallCheck(this,OnDisconnect);this.repo_=repo_;this.path_=path_;}/**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */_createClass(OnDisconnect,[{key:"cancel",value:function cancel(onComplete){(0,_util.validateArgCount)('OnDisconnect.cancel',0,1,arguments.length);(0,_util.validateCallback)('OnDisconnect.cancel',1,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectCancel(this.path_,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */},{key:"remove",value:function remove(onComplete){(0,_util.validateArgCount)('OnDisconnect.remove',0,1,arguments.length);validateWritablePath('OnDisconnect.remove',this.path_);(0,_util.validateCallback)('OnDisconnect.remove',1,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectSet(this.path_,null,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {*} value
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */},{key:"set",value:function set(value,onComplete){(0,_util.validateArgCount)('OnDisconnect.set',1,2,arguments.length);validateWritablePath('OnDisconnect.set',this.path_);validateFirebaseDataArg('OnDisconnect.set',1,value,this.path_,false);(0,_util.validateCallback)('OnDisconnect.set',2,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectSet(this.path_,value,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {*} value
     * @param {number|string|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */},{key:"setWithPriority",value:function setWithPriority(value,priority,onComplete){(0,_util.validateArgCount)('OnDisconnect.setWithPriority',2,3,arguments.length);validateWritablePath('OnDisconnect.setWithPriority',this.path_);validateFirebaseDataArg('OnDisconnect.setWithPriority',1,value,this.path_,false);validatePriority('OnDisconnect.setWithPriority',2,priority,false);(0,_util.validateCallback)('OnDisconnect.setWithPriority',3,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectSetWithPriority(this.path_,value,priority,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */},{key:"update",value:function update(objectToMerge,onComplete){(0,_util.validateArgCount)('OnDisconnect.update',1,2,arguments.length);validateWritablePath('OnDisconnect.update',this.path_);if(Array.isArray(objectToMerge)){var newObjectToMerge={};for(var i=0;i<objectToMerge.length;++i){newObjectToMerge[''+i]=objectToMerge[i];}objectToMerge=newObjectToMerge;warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the '+'existing data, or an Object with integer keys if you really do want to only update some of the children.');}validateFirebaseMergeDataArg('OnDisconnect.update',1,objectToMerge,this.path_,false);(0,_util.validateCallback)('OnDisconnect.update',2,onComplete,true);var deferred=new _util.Deferred();this.repo_.onDisconnectUpdate(this.path_,objectToMerge,deferred.wrapCallback(onComplete));return deferred.promise;}}]);return OnDisconnect;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */exports.OnDisconnect=OnDisconnect;var TransactionResult=/*#__PURE__*/function(){/**
     * A type for the resolve value of Firebase.transaction.
     * @constructor
     * @dict
     * @param {boolean} committed
     * @param {DataSnapshot} snapshot
     */function TransactionResult(committed,snapshot){_classCallCheck(this,TransactionResult);this.committed=committed;this.snapshot=snapshot;}// Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
// for end-users
_createClass(TransactionResult,[{key:"toJSON",value:function toJSON(){(0,_util.validateArgCount)('TransactionResult.toJSON',0,1,arguments.length);return{committed:this.committed,snapshot:this.snapshot.toJSON()};}}]);return TransactionResult;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */var nextPushId=function(){// Modeled after base64 web-safe chars, but ordered by ASCII.
var PUSH_CHARS='-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';// Timestamp of last push, used to prevent local collisions if you push twice
// in one ms.
var lastPushTime=0;// We generate 72-bits of randomness which get turned into 12 characters and
// appended to the timestamp to prevent collisions with other clients. We
// store the last characters we generated because in the event of a collision,
// we'll use those same characters except "incremented" by one.
var lastRandChars=[];return function(now){var duplicateTime=now===lastPushTime;lastPushTime=now;var i;var timeStampChars=new Array(8);for(i=7;i>=0;i--){timeStampChars[i]=PUSH_CHARS.charAt(now%64);// NOTE: Can't use << here because javascript will convert to int and lose
// the upper bits.
now=Math.floor(now/64);}(0,_util.assert)(now===0,'Cannot push at time == 0');var id=timeStampChars.join('');if(!duplicateTime){for(i=0;i<12;i++){lastRandChars[i]=Math.floor(Math.random()*64);}}else{// If the timestamp hasn't changed since last push, use the same random
// number, except incremented by 1.
for(i=11;i>=0&&lastRandChars[i]===63;i--){lastRandChars[i]=0;}lastRandChars[i]++;}for(i=0;i<12;i++){id+=PUSH_CHARS.charAt(lastRandChars[i]);}(0,_util.assert)(id.length===20,'nextPushId: Length should be 20.');return id;};}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @param {!string} name
 * @param {!Node} node
 * @constructor
 * @struct
 */var NamedNode=/*#__PURE__*/function(){function NamedNode(name,node){_classCallCheck(this,NamedNode);this.name=name;this.node=node;}/**
     *
     * @param {!string} name
     * @param {!Node} node
     * @return {NamedNode}
     */_createClass(NamedNode,null,[{key:"Wrap",value:function Wrap(name,node){return new NamedNode(name,node);}}]);return NamedNode;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @constructor
 */var Index=/*#__PURE__*/function(){function Index(){_classCallCheck(this,Index);}_createClass(Index,[{key:"getCompare",/**
     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
     * this index
     */value:function getCompare(){return this.compare.bind(this);}/**
     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
     *
     * @param {!Node} oldNode
     * @param {!Node} newNode
     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
     */},{key:"indexedValueChanged",value:function indexedValueChanged(oldNode,newNode){var oldWrapped=new NamedNode(MIN_NAME,oldNode);var newWrapped=new NamedNode(MIN_NAME,newNode);return this.compare(oldWrapped,newWrapped)!==0;}/**
     * @return {!NamedNode} a node wrapper that will sort equal to or less than
     * any other node wrapper, using this index
     */},{key:"minPost",value:function minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;}}]);return Index;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __EMPTY_NODE;var KeyIndex=/*#__PURE__*/function(_Index){_inherits(KeyIndex,_Index);function KeyIndex(){_classCallCheck(this,KeyIndex);return _possibleConstructorReturn(this,_getPrototypeOf(KeyIndex).apply(this,arguments));}_createClass(KeyIndex,[{key:"compare",/**
     * @inheritDoc
     */value:function compare(a,b){return nameCompare(a.name,b.name);}/**
     * @inheritDoc
     */},{key:"isDefinedOn",value:function isDefinedOn(node){// We could probably return true here (since every node has a key), but it's never called
// so just leaving unimplemented for now.
throw(0,_util.assertionError)('KeyIndex.isDefinedOn not expected to be called.');}/**
     * @inheritDoc
     */},{key:"indexedValueChanged",value:function indexedValueChanged(oldNode,newNode){return false;// The key for a node never changes.
}/**
     * @inheritDoc
     */},{key:"minPost",value:function minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;}/**
     * @inheritDoc
     */},{key:"maxPost",value:function maxPost(){// TODO: This should really be created once and cached in a static property, but
// NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
return new NamedNode(MAX_NAME,__EMPTY_NODE);}/**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */},{key:"makePost",value:function makePost(indexValue,name){(0,_util.assert)(typeof indexValue==='string','KeyIndex indexValue must always be a string.');// We just use empty node, but it'll never be compared, since our comparator only looks at name.
return new NamedNode(indexValue,__EMPTY_NODE);}/**
     * @return {!string} String representation for inclusion in a query spec
     */},{key:"toString",value:function toString(){return'.key';}}],[{key:"__EMPTY_NODE",get:function get(){return __EMPTY_NODE;},set:function set(val){__EMPTY_NODE=val;}}]);return KeyIndex;}(Index);var KEY_INDEX=new KeyIndex();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var MAX_NODE;function setMaxNode(val){MAX_NODE=val;}/**
 * @param {(!string|!number)} priority
 * @return {!string}
 */var priorityHashText=function priorityHashText(priority){if(typeof priority==='number'){return'number:'+doubleToIEEE754String(priority);}else{return'string:'+priority;}};/**
 * Validates that a priority snapshot Node is valid.
 *
 * @param {!Node} priorityNode
 */var validatePriorityNode=function validatePriorityNode(priorityNode){if(priorityNode.isLeafNode()){var val=priorityNode.val();(0,_util.assert)(typeof val==='string'||typeof val==='number'||_typeof(val)==='object'&&(0,_util.contains)(val,'.sv'),'Priority must be a string or number.');}else{(0,_util.assert)(priorityNode===MAX_NODE||priorityNode.isEmpty(),'priority of unexpected type.');}// Don't call getPriority() on MAX_NODE to avoid hitting assertion.
(0,_util.assert)(priorityNode===MAX_NODE||priorityNode.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.");};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __childrenNodeConstructor;/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */var LeafNode=/*#__PURE__*/function(){/**
     * @implements {Node}
     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
     *                                         The object type is possible in the event of a deferred value
     * @param {!Node=} priorityNode_ The priority of this node.
     */function LeafNode(value_){var priorityNode_=arguments.length>1&&arguments[1]!==undefined?arguments[1]:LeafNode.__childrenNodeConstructor.EMPTY_NODE;_classCallCheck(this,LeafNode);this.value_=value_;this.priorityNode_=priorityNode_;this.lazyHash_=null;(0,_util.assert)(this.value_!==undefined&&this.value_!==null,"LeafNode shouldn't be created with null/undefined value.");validatePriorityNode(this.priorityNode_);}_createClass(LeafNode,[{key:"isLeafNode",/** @inheritDoc */value:function isLeafNode(){return true;}/** @inheritDoc */},{key:"getPriority",value:function getPriority(){return this.priorityNode_;}/** @inheritDoc */},{key:"updatePriority",value:function updatePriority(newPriorityNode){return new LeafNode(this.value_,newPriorityNode);}/** @inheritDoc */},{key:"getImmediateChild",value:function getImmediateChild(childName){// Hack to treat priority as a regular child
if(childName==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}}/** @inheritDoc */},{key:"getChild",value:function getChild(path){if(path.isEmpty()){return this;}else if(path.getFront()==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}}/**
     * @inheritDoc
     */},{key:"hasChild",value:function hasChild(){return false;}/** @inheritDoc */},{key:"getPredecessorChildName",value:function getPredecessorChildName(childName,childNode){return null;}/** @inheritDoc */},{key:"updateImmediateChild",value:function updateImmediateChild(childName,newChildNode){if(childName==='.priority'){return this.updatePriority(newChildNode);}else if(newChildNode.isEmpty()&&childName!=='.priority'){return this;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName,newChildNode).updatePriority(this.priorityNode_);}}/** @inheritDoc */},{key:"updateChild",value:function updateChild(path,newChildNode){var front=path.getFront();if(front===null){return newChildNode;}else if(newChildNode.isEmpty()&&front!=='.priority'){return this;}else{(0,_util.assert)(front!=='.priority'||path.getLength()===1,'.priority must be the last token in a path');return this.updateImmediateChild(front,LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(),newChildNode));}}/** @inheritDoc */},{key:"isEmpty",value:function isEmpty(){return false;}/** @inheritDoc */},{key:"numChildren",value:function numChildren(){return 0;}/** @inheritDoc */},{key:"forEachChild",value:function forEachChild(index,action){return false;}/**
     * @inheritDoc
     */},{key:"val",value:function val(exportFormat){if(exportFormat&&!this.getPriority().isEmpty()){return{'.value':this.getValue(),'.priority':this.getPriority().val()};}else{return this.getValue();}}/** @inheritDoc */},{key:"hash",value:function hash(){if(this.lazyHash_===null){var toHash='';if(!this.priorityNode_.isEmpty()){toHash+='priority:'+priorityHashText(this.priorityNode_.val())+':';}var type=_typeof(this.value_);toHash+=type+':';if(type==='number'){toHash+=doubleToIEEE754String(this.value_);}else{toHash+=this.value_;}this.lazyHash_=sha1(toHash);}return this.lazyHash_;}/**
     * Returns the value of the leaf node.
     * @return {Object|string|number|boolean} The value of the node.
     */},{key:"getValue",value:function getValue(){return this.value_;}/**
     * @inheritDoc
     */},{key:"compareTo",value:function compareTo(other){if(other===LeafNode.__childrenNodeConstructor.EMPTY_NODE){return 1;}else if(other instanceof LeafNode.__childrenNodeConstructor){return-1;}else{(0,_util.assert)(other.isLeafNode(),'Unknown node type');return this.compareToLeafNode_(other);}}/**
     * Comparison specifically for two leaf nodes
     * @param {!LeafNode} otherLeaf
     * @return {!number}
     * @private
     */},{key:"compareToLeafNode_",value:function compareToLeafNode_(otherLeaf){var otherLeafType=_typeof(otherLeaf.value_);var thisLeafType=_typeof(this.value_);var otherIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);var thisIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);(0,_util.assert)(otherIndex>=0,'Unknown leaf type: '+otherLeafType);(0,_util.assert)(thisIndex>=0,'Unknown leaf type: '+thisLeafType);if(otherIndex===thisIndex){// Same type, compare values
if(thisLeafType==='object'){// Deferred value nodes are all equal, but we should also never get to this point...
return 0;}else{// Note that this works because true > false, all others are number or string comparisons
if(this.value_<otherLeaf.value_){return-1;}else if(this.value_===otherLeaf.value_){return 0;}else{return 1;}}}else{return thisIndex-otherIndex;}}/**
     * @inheritDoc
     */},{key:"withIndex",value:function withIndex(){return this;}/**
     * @inheritDoc
     */},{key:"isIndexed",value:function isIndexed(){return true;}/**
     * @inheritDoc
     */},{key:"equals",value:function equals(other){/**
         * @inheritDoc
         */if(other===this){return true;}else if(other.isLeafNode()){var otherLeaf=other;return this.value_===otherLeaf.value_&&this.priorityNode_.equals(otherLeaf.priorityNode_);}else{return false;}}}],[{key:"__childrenNodeConstructor",set:function set(val){__childrenNodeConstructor=val;},get:function get(){return __childrenNodeConstructor;}}]);return LeafNode;}();/**
 * The sort order for comparing leaf nodes of different types. If two leaf nodes have
 * the same type, the comparison falls back to their value
 * @type {Array.<!string>}
 * @const
 */LeafNode.VALUE_TYPE_ORDER=['object','boolean','number','string'];/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var nodeFromJSON;var MAX_NODE$1;function setNodeFromJSON(val){nodeFromJSON=val;}function setMaxNode$1(val){MAX_NODE$1=val;}/**
 * @constructor
 * @extends {Index}
 * @private
 */var PriorityIndex=/*#__PURE__*/function(_Index2){_inherits(PriorityIndex,_Index2);function PriorityIndex(){_classCallCheck(this,PriorityIndex);return _possibleConstructorReturn(this,_getPrototypeOf(PriorityIndex).apply(this,arguments));}_createClass(PriorityIndex,[{key:"compare",/**
     * @inheritDoc
     */value:function compare(a,b){var aPriority=a.node.getPriority();var bPriority=b.node.getPriority();var indexCmp=aPriority.compareTo(bPriority);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}/**
     * @inheritDoc
     */},{key:"isDefinedOn",value:function isDefinedOn(node){return!node.getPriority().isEmpty();}/**
     * @inheritDoc
     */},{key:"indexedValueChanged",value:function indexedValueChanged(oldNode,newNode){return!oldNode.getPriority().equals(newNode.getPriority());}/**
     * @inheritDoc
     */},{key:"minPost",value:function minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;}/**
     * @inheritDoc
     */},{key:"maxPost",value:function maxPost(){return new NamedNode(MAX_NAME,new LeafNode('[PRIORITY-POST]',MAX_NODE$1));}/**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */},{key:"makePost",value:function makePost(indexValue,name){var priorityNode=nodeFromJSON(indexValue);return new NamedNode(name,new LeafNode('[PRIORITY-POST]',priorityNode));}/**
     * @return {!string} String representation for inclusion in a query spec
     */},{key:"toString",value:function toString(){return'.priority';}}]);return PriorityIndex;}(Index);var PRIORITY_INDEX=new PriorityIndex();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An iterator over an LLRBNode.
 */var SortedMapIterator=/*#__PURE__*/function(){/**
     * @template K, V, T
     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
     * @param {?K} startKey
     * @param {function(K, K): number} comparator
     * @param {boolean} isReverse_ Whether or not to iterate in reverse
     * @param {(function(K, V):T)=} resultGenerator_
     */function SortedMapIterator(node,startKey,comparator,isReverse_){var resultGenerator_=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;_classCallCheck(this,SortedMapIterator);this.isReverse_=isReverse_;this.resultGenerator_=resultGenerator_;/** @private
         * @type {Array.<!LLRBNode>}
         */this.nodeStack_=[];var cmp=1;while(!node.isEmpty()){node=node;cmp=startKey?comparator(node.key,startKey):1;// flip the comparison if we're going in reverse
if(isReverse_){cmp*=-1;}if(cmp<0){// This node is less than our start key. ignore it
if(this.isReverse_){node=node.left;}else{node=node.right;}}else if(cmp===0){// This node is exactly equal to our start key. Push it on the stack, but stop iterating;
this.nodeStack_.push(node);break;}else{// This node is greater than our start key, add it to the stack and move to the next one
this.nodeStack_.push(node);if(this.isReverse_){node=node.right;}else{node=node.left;}}}}_createClass(SortedMapIterator,[{key:"getNext",value:function getNext(){if(this.nodeStack_.length===0){return null;}var node=this.nodeStack_.pop();var result;if(this.resultGenerator_){result=this.resultGenerator_(node.key,node.value);}else{result={key:node.key,value:node.value};}if(this.isReverse_){node=node.left;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.right;}}else{node=node.right;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.left;}}return result;}},{key:"hasNext",value:function hasNext(){return this.nodeStack_.length>0;}},{key:"peek",value:function peek(){if(this.nodeStack_.length===0){return null;}var node=this.nodeStack_[this.nodeStack_.length-1];if(this.resultGenerator_){return this.resultGenerator_(node.key,node.value);}else{return{key:node.key,value:node.value};}}}]);return SortedMapIterator;}();/**
 * Represents a node in a Left-leaning Red-Black tree.
 */var LLRBNode=/*#__PURE__*/function(){/**
     * @template K, V
     * @param {!K} key Key associated with this node.
     * @param {!V} value Value associated with this node.
     * @param {?boolean} color Whether this node is red.
     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
     */function LLRBNode(key,value,color,left,right){_classCallCheck(this,LLRBNode);this.key=key;this.value=value;this.color=color!=null?color:LLRBNode.RED;this.left=left!=null?left:SortedMap.EMPTY_NODE;this.right=right!=null?right:SortedMap.EMPTY_NODE;}/**
     * Returns a copy of the current node, optionally replacing pieces of it.
     *
     * @param {?K} key New key for the node, or null.
     * @param {?V} value New value for the node, or null.
     * @param {?boolean} color New color for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
     * @return {!LLRBNode} The node copy.
     */_createClass(LLRBNode,[{key:"copy",value:function copy(key,value,color,left,right){return new LLRBNode(key!=null?key:this.key,value!=null?value:this.value,color!=null?color:this.color,left!=null?left:this.left,right!=null?right:this.right);}/**
     * @return {number} The total number of nodes in the tree.
     */},{key:"count",value:function count(){return this.left.count()+1+this.right.count();}/**
     * @return {boolean} True if the tree is empty.
     */},{key:"isEmpty",value:function isEmpty(){return false;}/**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     *   node.  If it returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */},{key:"inorderTraversal",value:function inorderTraversal(action){return this.left.inorderTraversal(action)||!!action(this.key,this.value)||this.right.inorderTraversal(action);}/**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!Object, !Object)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {*} True if traversal was aborted.
     */},{key:"reverseTraversal",value:function reverseTraversal(action){return this.right.reverseTraversal(action)||action(this.key,this.value)||this.left.reverseTraversal(action);}/**
     * @return {!Object} The minimum node in the tree.
     * @private
     */},{key:"min_",value:function min_(){if(this.left.isEmpty()){return this;}else{return this.left.min_();}}/**
     * @return {!K} The maximum key in the tree.
     */},{key:"minKey",value:function minKey(){return this.min_().key;}/**
     * @return {!K} The maximum key in the tree.
     */},{key:"maxKey",value:function maxKey(){if(this.right.isEmpty()){return this.key;}else{return this.right.maxKey();}}/**
     *
     * @param {!Object} key Key to insert.
     * @param {!Object} value Value to insert.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with the key/value added.
     */},{key:"insert",value:function insert(key,value,comparator){var n=this;var cmp=comparator(key,n.key);if(cmp<0){n=n.copy(null,null,null,n.left.insert(key,value,comparator),null);}else if(cmp===0){n=n.copy(null,value,null,null,null);}else{n=n.copy(null,null,null,null,n.right.insert(key,value,comparator));}return n.fixUp_();}/**
     * @private
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
     */},{key:"removeMin_",value:function removeMin_(){if(this.left.isEmpty()){return SortedMap.EMPTY_NODE;}var n=this;if(!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.removeMin_(),null);return n.fixUp_();}/**
     * @param {!Object} key The key of the item to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
     */},{key:"remove",value:function remove(key,comparator){var n,smallest;n=this;if(comparator(key,n.key)<0){if(!n.left.isEmpty()&&!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.remove(key,comparator),null);}else{if(n.left.isRed_()){n=n.rotateRight_();}if(!n.right.isEmpty()&&!n.right.isRed_()&&!n.right.left.isRed_()){n=n.moveRedRight_();}if(comparator(key,n.key)===0){if(n.right.isEmpty()){return SortedMap.EMPTY_NODE;}else{smallest=n.right.min_();n=n.copy(smallest.key,smallest.value,null,null,n.right.removeMin_());}}n=n.copy(null,null,null,null,n.right.remove(key,comparator));}return n.fixUp_();}/**
     * @private
     * @return {boolean} Whether this is a RED node.
     */},{key:"isRed_",value:function isRed_(){return this.color;}/**
     * @private
     * @return {!LLRBNode} New tree after performing any needed rotations.
     */},{key:"fixUp_",value:function fixUp_(){var n=this;if(n.right.isRed_()&&!n.left.isRed_()){n=n.rotateLeft_();}if(n.left.isRed_()&&n.left.left.isRed_()){n=n.rotateRight_();}if(n.left.isRed_()&&n.right.isRed_()){n=n.colorFlip_();}return n;}/**
     * @private
     * @return {!LLRBNode} New tree, after moveRedLeft.
     */},{key:"moveRedLeft_",value:function moveRedLeft_(){var n=this.colorFlip_();if(n.right.left.isRed_()){n=n.copy(null,null,null,null,n.right.rotateRight_());n=n.rotateLeft_();n=n.colorFlip_();}return n;}/**
     * @private
     * @return {!LLRBNode} New tree, after moveRedRight.
     */},{key:"moveRedRight_",value:function moveRedRight_(){var n=this.colorFlip_();if(n.left.left.isRed_()){n=n.rotateRight_();n=n.colorFlip_();}return n;}/**
     * @private
     * @return {!LLRBNode} New tree, after rotateLeft.
     */},{key:"rotateLeft_",value:function rotateLeft_(){var nl=this.copy(null,null,LLRBNode.RED,null,this.right.left);return this.right.copy(null,null,this.color,nl,null);}/**
     * @private
     * @return {!LLRBNode} New tree, after rotateRight.
     */},{key:"rotateRight_",value:function rotateRight_(){var nr=this.copy(null,null,LLRBNode.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,nr);}/**
     * @private
     * @return {!LLRBNode} New tree, after colorFlip.
     */},{key:"colorFlip_",value:function colorFlip_(){var left=this.left.copy(null,null,!this.left.color,null,null);var right=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,left,right);}/**
     * For testing.
     *
     * @private
     * @return {boolean} True if all is well.
     */},{key:"checkMaxDepth_",value:function checkMaxDepth_(){var blackDepth=this.check_();return Math.pow(2.0,blackDepth)<=this.count()+1;}/**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */},{key:"check_",value:function check_(){if(this.isRed_()&&this.left.isRed_()){throw new Error('Red node has red child('+this.key+','+this.value+')');}if(this.right.isRed_()){throw new Error('Right child of ('+this.key+','+this.value+') is red');}var blackDepth=this.left.check_();if(blackDepth!==this.right.check_()){throw new Error('Black depths differ');}else{return blackDepth+(this.isRed_()?0:1);}}}]);return LLRBNode;}();LLRBNode.RED=true;LLRBNode.BLACK=false;/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */var LLRBEmptyNode=/*#__PURE__*/function(){function LLRBEmptyNode(){_classCallCheck(this,LLRBEmptyNode);}_createClass(LLRBEmptyNode,[{key:"copy",/**
     * Returns a copy of the current node.
     *
     * @return {!LLRBEmptyNode} The node copy.
     */value:function copy(key,value,color,left,right){return this;}/**
     * Returns a copy of the tree, with the specified key/value added.
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with item added.
     */},{key:"insert",value:function insert(key,value,comparator){return new LLRBNode(key,value,null);}/**
     * Returns a copy of the tree, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBEmptyNode} New tree, with item removed.
     */},{key:"remove",value:function remove(key,comparator){return this;}/**
     * @return {number} The total number of nodes in the tree.
     */},{key:"count",value:function count(){return 0;}/**
     * @return {boolean} True if the tree is empty.
     */},{key:"isEmpty",value:function isEmpty(){return true;}/**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */},{key:"inorderTraversal",value:function inorderTraversal(action){return false;}/**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */},{key:"reverseTraversal",value:function reverseTraversal(action){return false;}/**
     * @return {null}
     */},{key:"minKey",value:function minKey(){return null;}/**
     * @return {null}
     */},{key:"maxKey",value:function maxKey(){return null;}/**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */},{key:"check_",value:function check_(){return 0;}/**
     * @private
     * @return {boolean} Whether this node is red.
     */},{key:"isRed_",value:function isRed_(){return false;}}]);return LLRBEmptyNode;}();/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */var SortedMap=/*#__PURE__*/function(){/**
     * @template K, V
     * @param {function(K, K):number} comparator_ Key comparator.
     * @param {LLRBNode=} root_ (Optional) Root node for the map.
     */function SortedMap(comparator_){var root_=arguments.length>1&&arguments[1]!==undefined?arguments[1]:SortedMap.EMPTY_NODE;_classCallCheck(this,SortedMap);this.comparator_=comparator_;this.root_=root_;}/**
     * Returns a copy of the map, with the specified key/value added or replaced.
     * (TODO: We should perhaps rename this method to 'put')
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @return {!SortedMap.<K, V>} New map, with item added.
     */_createClass(SortedMap,[{key:"insert",value:function insert(key,value){return new SortedMap(this.comparator_,this.root_.insert(key,value,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));}/**
     * Returns a copy of the map, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @return {!SortedMap.<K, V>} New map, with item removed.
     */},{key:"remove",value:function remove(key){return new SortedMap(this.comparator_,this.root_.remove(key,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));}/**
     * Returns the value of the node with the given key, or null.
     *
     * @param {!K} key The key to look up.
     * @return {?V} The value of the node with the given key, or null if the
     * key doesn't exist.
     */},{key:"get",value:function get(key){var cmp;var node=this.root_;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){return node.value;}else if(cmp<0){node=node.left;}else if(cmp>0){node=node.right;}}return null;}/**
     * Returns the key of the item *before* the specified key, or null if key is the first item.
     * @param {K} key The key to find the predecessor of
     * @return {?K} The predecessor key.
     */},{key:"getPredecessorKey",value:function getPredecessorKey(key){var cmp,node=this.root_,rightParent=null;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){if(!node.left.isEmpty()){node=node.left;while(!node.right.isEmpty()){node=node.right;}return node.key;}else if(rightParent){return rightParent.key;}else{return null;// first item.
}}else if(cmp<0){node=node.left;}else if(cmp>0){rightParent=node;node=node.right;}}throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');}/**
     * @return {boolean} True if the map is empty.
     */},{key:"isEmpty",value:function isEmpty(){return this.root_.isEmpty();}/**
     * @return {number} The total number of nodes in the map.
     */},{key:"count",value:function count(){return this.root_.count();}/**
     * @return {?K} The minimum key in the map.
     */},{key:"minKey",value:function minKey(){return this.root_.minKey();}/**
     * @return {?K} The maximum key in the map.
     */},{key:"maxKey",value:function maxKey(){return this.root_.maxKey();}/**
     * Traverses the map in key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!K, !V):*} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */},{key:"inorderTraversal",value:function inorderTraversal(action){return this.root_.inorderTraversal(action);}/**
     * Traverses the map in reverse key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!Object, !Object)} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} True if the traversal was aborted.
     */},{key:"reverseTraversal",value:function reverseTraversal(action){return this.root_.reverseTraversal(action);}/**
     * Returns an iterator over the SortedMap.
     * @template T
     * @param {(function(K, V):T)=} resultGenerator
     * @return {SortedMapIterator.<K, V, T>} The iterator.
     */},{key:"getIterator",value:function getIterator(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,false,resultGenerator);}},{key:"getIteratorFrom",value:function getIteratorFrom(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,false,resultGenerator);}},{key:"getReverseIteratorFrom",value:function getReverseIteratorFrom(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,true,resultGenerator);}},{key:"getReverseIterator",value:function getReverseIterator(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,true,resultGenerator);}}]);return SortedMap;}();/**
 * Always use the same empty node, to reduce memory.
 * @const
 */SortedMap.EMPTY_NODE=new LLRBEmptyNode();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var LOG_2=Math.log(2);/**
 * @constructor
 */var Base12Num=/*#__PURE__*/function(){/**
     * @param {number} length
     */function Base12Num(length){_classCallCheck(this,Base12Num);var logBase2=function logBase2(num){return(// eslint-disable-next-line @typescript-eslint/no-explicit-any
parseInt(Math.log(num)/LOG_2,10));};var bitMask=function bitMask(bits){return parseInt(Array(bits+1).join('1'),2);};this.count=logBase2(length+1);this.current_=this.count-1;var mask=bitMask(this.count);this.bits_=length+1&mask;}/**
     * @return {boolean}
     */_createClass(Base12Num,[{key:"nextBitIsOne",value:function nextBitIsOne(){//noinspection JSBitwiseOperatorUsage
var result=!(this.bits_&0x1<<this.current_);this.current_--;return result;}}]);return Base12Num;}();/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @template K, V
 * @param {Array.<!NamedNode>} childList Unsorted list of children
 * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
 * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
 *                                                        type is not NamedNode
 * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
 * @return {SortedMap.<K, V>}
 */var buildChildSet=function buildChildSet(childList,cmp,keyFn,mapSortFn){childList.sort(cmp);var buildBalancedTree=function buildBalancedTree(low,high){var length=high-low;var namedNode;var key;if(length===0){return null;}else if(length===1){namedNode=childList[low];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,null,null);}else{// eslint-disable-next-line @typescript-eslint/no-explicit-any
var middle=parseInt(length/2,10)+low;var left=buildBalancedTree(low,middle);var right=buildBalancedTree(middle+1,high);namedNode=childList[middle];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,left,right);}};var buildFrom12Array=function buildFrom12Array(base12){var node=null;var root=null;var index=childList.length;var buildPennant=function buildPennant(chunkSize,color){var low=index-chunkSize;var high=index;index-=chunkSize;var childTree=buildBalancedTree(low+1,high);var namedNode=childList[low];var key=keyFn?keyFn(namedNode):namedNode;attachPennant(new LLRBNode(key,namedNode.node,color,null,childTree));};var attachPennant=function attachPennant(pennant){if(node){node.left=pennant;node=pennant;}else{root=pennant;node=pennant;}};for(var i=0;i<base12.count;++i){var isOne=base12.nextBitIsOne();// The number of nodes taken in each slice is 2^(arr.length - (i + 1))
var chunkSize=Math.pow(2,base12.count-(i+1));if(isOne){buildPennant(chunkSize,LLRBNode.BLACK);}else{// current == 2
buildPennant(chunkSize,LLRBNode.BLACK);buildPennant(chunkSize,LLRBNode.RED);}}return root;};var base12=new Base12Num(childList.length);var root=buildFrom12Array(base12);// eslint-disable-next-line @typescript-eslint/no-explicit-any
return new SortedMap(mapSortFn||cmp,root);};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var _defaultIndexMap;var fallbackObject={};var IndexMap=/*#__PURE__*/function(){function IndexMap(indexes_,indexSet_){_classCallCheck(this,IndexMap);this.indexes_=indexes_;this.indexSet_=indexSet_;}/**
     * The default IndexMap for nodes without a priority
     */_createClass(IndexMap,[{key:"get",value:function get(indexKey){var sortedMap=(0,_util.safeGet)(this.indexes_,indexKey);if(!sortedMap){throw new Error('No index defined for '+indexKey);}if(sortedMap instanceof SortedMap){return sortedMap;}else{// The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
// regular child map
return null;}}},{key:"hasIndex",value:function hasIndex(indexDefinition){return(0,_util.contains)(this.indexSet_,indexDefinition.toString());}},{key:"addIndex",value:function addIndex(indexDefinition,existingChildren){(0,_util.assert)(indexDefinition!==KEY_INDEX,"KeyIndex always exists and isn't meant to be added to the IndexMap.");var childList=[];var sawIndexedValue=false;var iter=existingChildren.getIterator(NamedNode.Wrap);var next=iter.getNext();while(next){sawIndexedValue=sawIndexedValue||indexDefinition.isDefinedOn(next.node);childList.push(next);next=iter.getNext();}var newIndex;if(sawIndexedValue){newIndex=buildChildSet(childList,indexDefinition.getCompare());}else{newIndex=fallbackObject;}var indexName=indexDefinition.toString();var newIndexSet=Object.assign({},this.indexSet_);newIndexSet[indexName]=indexDefinition;var newIndexes=Object.assign({},this.indexes_);newIndexes[indexName]=newIndex;return new IndexMap(newIndexes,newIndexSet);}/**
     * Ensure that this node is properly tracked in any indexes that we're maintaining
     */},{key:"addToIndexes",value:function addToIndexes(namedNode,existingChildren){var _this=this;var newIndexes=(0,_util.map)(this.indexes_,function(indexedChildren,indexName){var index=(0,_util.safeGet)(_this.indexSet_,indexName);(0,_util.assert)(index,'Missing index implementation for '+indexName);if(indexedChildren===fallbackObject){// Check to see if we need to index everything
if(index.isDefinedOn(namedNode.node)){// We need to build this index
var childList=[];var iter=existingChildren.getIterator(NamedNode.Wrap);var next=iter.getNext();while(next){if(next.name!==namedNode.name){childList.push(next);}next=iter.getNext();}childList.push(namedNode);return buildChildSet(childList,index.getCompare());}else{// No change, this remains a fallback
return fallbackObject;}}else{var existingSnap=existingChildren.get(namedNode.name);var newChildren=indexedChildren;if(existingSnap){newChildren=newChildren.remove(new NamedNode(namedNode.name,existingSnap));}return newChildren.insert(namedNode,namedNode.node);}});return new IndexMap(newIndexes,this.indexSet_);}/**
     * Create a new IndexMap instance with the given value removed
     */},{key:"removeFromIndexes",value:function removeFromIndexes(namedNode,existingChildren){var newIndexes=(0,_util.map)(this.indexes_,function(indexedChildren){if(indexedChildren===fallbackObject){// This is the fallback. Just return it, nothing to do in this case
return indexedChildren;}else{var existingSnap=existingChildren.get(namedNode.name);if(existingSnap){return indexedChildren.remove(new NamedNode(namedNode.name,existingSnap));}else{// No record of this child
return indexedChildren;}}});return new IndexMap(newIndexes,this.indexSet_);}}],[{key:"Default",get:function get(){(0,_util.assert)(fallbackObject&&PRIORITY_INDEX,'ChildrenNode.ts has not been loaded');_defaultIndexMap=_defaultIndexMap||new IndexMap({'.priority':fallbackObject},{'.priority':PRIORITY_INDEX});return _defaultIndexMap;}}]);return IndexMap;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function NAME_ONLY_COMPARATOR(left,right){return nameCompare(left.name,right.name);}function NAME_COMPARATOR(left,right){return nameCompare(left,right);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO: For memory savings, don't store priorityNode_ if it's empty.
var EMPTY_NODE;/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 *
 * @constructor
 * @implements {Node}
 */var ChildrenNode=/*#__PURE__*/function(){/**
     *
     * @param {!SortedMap.<string, !Node>} children_ List of children
     * of this node..
     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
     * @param {!IndexMap} indexMap_
     */function ChildrenNode(children_,priorityNode_,indexMap_){_classCallCheck(this,ChildrenNode);this.children_=children_;this.priorityNode_=priorityNode_;this.indexMap_=indexMap_;this.lazyHash_=null;/**
         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
         * class instead of an empty ChildrenNode.
         */if(this.priorityNode_){validatePriorityNode(this.priorityNode_);}if(this.children_.isEmpty()){(0,_util.assert)(!this.priorityNode_||this.priorityNode_.isEmpty(),'An empty node cannot have a priority');}}_createClass(ChildrenNode,[{key:"isLeafNode",/** @inheritDoc */value:function isLeafNode(){return false;}/** @inheritDoc */},{key:"getPriority",value:function getPriority(){return this.priorityNode_||EMPTY_NODE;}/** @inheritDoc */},{key:"updatePriority",value:function updatePriority(newPriorityNode){if(this.children_.isEmpty()){// Don't allow priorities on empty nodes
return this;}else{return new ChildrenNode(this.children_,newPriorityNode,this.indexMap_);}}/** @inheritDoc */},{key:"getImmediateChild",value:function getImmediateChild(childName){// Hack to treat priority as a regular child
if(childName==='.priority'){return this.getPriority();}else{var child=this.children_.get(childName);return child===null?EMPTY_NODE:child;}}/** @inheritDoc */},{key:"getChild",value:function getChild(path){var front=path.getFront();if(front===null){return this;}return this.getImmediateChild(front).getChild(path.popFront());}/** @inheritDoc */},{key:"hasChild",value:function hasChild(childName){return this.children_.get(childName)!==null;}/** @inheritDoc */},{key:"updateImmediateChild",value:function updateImmediateChild(childName,newChildNode){(0,_util.assert)(newChildNode,'We should always be passing snapshot nodes');if(childName==='.priority'){return this.updatePriority(newChildNode);}else{var namedNode=new NamedNode(childName,newChildNode);var newChildren,newIndexMap;if(newChildNode.isEmpty()){newChildren=this.children_.remove(childName);newIndexMap=this.indexMap_.removeFromIndexes(namedNode,this.children_);}else{newChildren=this.children_.insert(childName,newChildNode);newIndexMap=this.indexMap_.addToIndexes(namedNode,this.children_);}var newPriority=newChildren.isEmpty()?EMPTY_NODE:this.priorityNode_;return new ChildrenNode(newChildren,newPriority,newIndexMap);}}/** @inheritDoc */},{key:"updateChild",value:function updateChild(path,newChildNode){var front=path.getFront();if(front===null){return newChildNode;}else{(0,_util.assert)(path.getFront()!=='.priority'||path.getLength()===1,'.priority must be the last token in a path');var newImmediateChild=this.getImmediateChild(front).updateChild(path.popFront(),newChildNode);return this.updateImmediateChild(front,newImmediateChild);}}/** @inheritDoc */},{key:"isEmpty",value:function isEmpty(){return this.children_.isEmpty();}/** @inheritDoc */},{key:"numChildren",value:function numChildren(){return this.children_.count();}/** @inheritDoc */},{key:"val",value:function val(exportFormat){if(this.isEmpty()){return null;}var obj={};var numKeys=0,maxKey=0,allIntegerKeys=true;this.forEachChild(PRIORITY_INDEX,function(key,childNode){obj[key]=childNode.val(exportFormat);numKeys++;if(allIntegerKeys&&ChildrenNode.INTEGER_REGEXP_.test(key)){maxKey=Math.max(maxKey,Number(key));}else{allIntegerKeys=false;}});if(!exportFormat&&allIntegerKeys&&maxKey<2*numKeys){// convert to array.
var array=[];// eslint-disable-next-line guard-for-in
for(var key in obj){array[key]=obj[key];}return array;}else{if(exportFormat&&!this.getPriority().isEmpty()){obj['.priority']=this.getPriority().val();}return obj;}}/** @inheritDoc */},{key:"hash",value:function hash(){if(this.lazyHash_===null){var toHash='';if(!this.getPriority().isEmpty()){toHash+='priority:'+priorityHashText(this.getPriority().val())+':';}this.forEachChild(PRIORITY_INDEX,function(key,childNode){var childHash=childNode.hash();if(childHash!==''){toHash+=':'+key+':'+childHash;}});this.lazyHash_=toHash===''?'':sha1(toHash);}return this.lazyHash_;}/** @inheritDoc */},{key:"getPredecessorChildName",value:function getPredecessorChildName(childName,childNode,index){var idx=this.resolveIndex_(index);if(idx){var predecessor=idx.getPredecessorKey(new NamedNode(childName,childNode));return predecessor?predecessor.name:null;}else{return this.children_.getPredecessorKey(childName);}}/**
     * @param {!Index} indexDefinition
     * @return {?string}
     */},{key:"getFirstChildName",value:function getFirstChildName(indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){var minKey=idx.minKey();return minKey&&minKey.name;}else{return this.children_.minKey();}}/**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */},{key:"getFirstChild",value:function getFirstChild(indexDefinition){var minKey=this.getFirstChildName(indexDefinition);if(minKey){return new NamedNode(minKey,this.children_.get(minKey));}else{return null;}}/**
     * Given an index, return the key name of the largest value we have, according to that index
     * @param {!Index} indexDefinition
     * @return {?string}
     */},{key:"getLastChildName",value:function getLastChildName(indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){var maxKey=idx.maxKey();return maxKey&&maxKey.name;}else{return this.children_.maxKey();}}/**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */},{key:"getLastChild",value:function getLastChild(indexDefinition){var maxKey=this.getLastChildName(indexDefinition);if(maxKey){return new NamedNode(maxKey,this.children_.get(maxKey));}else{return null;}}/**
     * @inheritDoc
     */},{key:"forEachChild",value:function forEachChild(index,action){var idx=this.resolveIndex_(index);if(idx){return idx.inorderTraversal(function(wrappedNode){return action(wrappedNode.name,wrappedNode.node);});}else{return this.children_.inorderTraversal(action);}}/**
     * @param {!Index} indexDefinition
     * @return {SortedMapIterator}
     */},{key:"getIterator",value:function getIterator(indexDefinition){return this.getIteratorFrom(indexDefinition.minPost(),indexDefinition);}/**
     *
     * @param {!NamedNode} startPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */},{key:"getIteratorFrom",value:function getIteratorFrom(startPost,indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getIteratorFrom(startPost,function(key){return key;});}else{var iterator=this.children_.getIteratorFrom(startPost.name,NamedNode.Wrap);var next=iterator.peek();while(next!=null&&indexDefinition.compare(next,startPost)<0){iterator.getNext();next=iterator.peek();}return iterator;}}/**
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */},{key:"getReverseIterator",value:function getReverseIterator(indexDefinition){return this.getReverseIteratorFrom(indexDefinition.maxPost(),indexDefinition);}/**
     * @param {!NamedNode} endPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */},{key:"getReverseIteratorFrom",value:function getReverseIteratorFrom(endPost,indexDefinition){var idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getReverseIteratorFrom(endPost,function(key){return key;});}else{var iterator=this.children_.getReverseIteratorFrom(endPost.name,NamedNode.Wrap);var next=iterator.peek();while(next!=null&&indexDefinition.compare(next,endPost)>0){iterator.getNext();next=iterator.peek();}return iterator;}}/**
     * @inheritDoc
     */},{key:"compareTo",value:function compareTo(other){if(this.isEmpty()){if(other.isEmpty()){return 0;}else{return-1;}}else if(other.isLeafNode()||other.isEmpty()){return 1;}else if(other===MAX_NODE$2){return-1;}else{// Must be another node with children.
return 0;}}/**
     * @inheritDoc
     */},{key:"withIndex",value:function withIndex(indexDefinition){if(indexDefinition===KEY_INDEX||this.indexMap_.hasIndex(indexDefinition)){return this;}else{var newIndexMap=this.indexMap_.addIndex(indexDefinition,this.children_);return new ChildrenNode(this.children_,this.priorityNode_,newIndexMap);}}/**
     * @inheritDoc
     */},{key:"isIndexed",value:function isIndexed(index){return index===KEY_INDEX||this.indexMap_.hasIndex(index);}/**
     * @inheritDoc
     */},{key:"equals",value:function equals(other){if(other===this){return true;}else if(other.isLeafNode()){return false;}else{var otherChildrenNode=other;if(!this.getPriority().equals(otherChildrenNode.getPriority())){return false;}else if(this.children_.count()===otherChildrenNode.children_.count()){var thisIter=this.getIterator(PRIORITY_INDEX);var otherIter=otherChildrenNode.getIterator(PRIORITY_INDEX);var thisCurrent=thisIter.getNext();var otherCurrent=otherIter.getNext();while(thisCurrent&&otherCurrent){if(thisCurrent.name!==otherCurrent.name||!thisCurrent.node.equals(otherCurrent.node)){return false;}thisCurrent=thisIter.getNext();otherCurrent=otherIter.getNext();}return thisCurrent===null&&otherCurrent===null;}else{return false;}}}/**
     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
     * instead.
     *
     * @private
     * @param {!Index} indexDefinition
     * @return {?SortedMap.<NamedNode, Node>}
     */},{key:"resolveIndex_",value:function resolveIndex_(indexDefinition){if(indexDefinition===KEY_INDEX){return null;}else{return this.indexMap_.get(indexDefinition.toString());}}}],[{key:"EMPTY_NODE",get:function get(){return EMPTY_NODE||(EMPTY_NODE=new ChildrenNode(new SortedMap(NAME_COMPARATOR),null,IndexMap.Default));}}]);return ChildrenNode;}();/**
 * @private
 * @type {RegExp}
 */ChildrenNode.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/;/**
 * @constructor
 * @extends {ChildrenNode}
 * @private
 */var MaxNode=/*#__PURE__*/function(_ChildrenNode){_inherits(MaxNode,_ChildrenNode);function MaxNode(){_classCallCheck(this,MaxNode);return _possibleConstructorReturn(this,_getPrototypeOf(MaxNode).call(this,new SortedMap(NAME_COMPARATOR),ChildrenNode.EMPTY_NODE,IndexMap.Default));}_createClass(MaxNode,[{key:"compareTo",value:function compareTo(other){if(other===this){return 0;}else{return 1;}}},{key:"equals",value:function equals(other){// Not that we every compare it, but MAX_NODE is only ever equal to itself
return other===this;}},{key:"getPriority",value:function getPriority(){return this;}},{key:"getImmediateChild",value:function getImmediateChild(childName){return ChildrenNode.EMPTY_NODE;}},{key:"isEmpty",value:function isEmpty(){return false;}}]);return MaxNode;}(ChildrenNode);/**
 * Marker that will sort higher than any other snapshot.
 * @type {!MAX_NODE}
 * @const
 */var MAX_NODE$2=new MaxNode();Object.defineProperties(NamedNode,{MIN:{value:new NamedNode(MIN_NAME,ChildrenNode.EMPTY_NODE)},MAX:{value:new NamedNode(MAX_NAME,MAX_NODE$2)}});/**
 * Reference Extensions
 */KeyIndex.__EMPTY_NODE=ChildrenNode.EMPTY_NODE;LeafNode.__childrenNodeConstructor=ChildrenNode;setMaxNode(MAX_NODE$2);setMaxNode$1(MAX_NODE$2);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var USE_HINZE=true;/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param {*} json JSON to create a node for.
 * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 * @return {!Node}
 */function nodeFromJSON$1(json){var priority=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(json===null){return ChildrenNode.EMPTY_NODE;}if(_typeof(json)==='object'&&'.priority'in json){priority=json['.priority'];}(0,_util.assert)(priority===null||typeof priority==='string'||typeof priority==='number'||_typeof(priority)==='object'&&'.sv'in priority,'Invalid priority type found: '+_typeof(priority));if(_typeof(json)==='object'&&'.value'in json&&json['.value']!==null){json=json['.value'];}// Valid leaf nodes include non-objects or server-value wrapper objects
if(_typeof(json)!=='object'||'.sv'in json){var jsonLeaf=json;return new LeafNode(jsonLeaf,nodeFromJSON$1(priority));}if(!(json instanceof Array)&&USE_HINZE){var children=[];var childrenHavePriority=false;var hinzeJsonObj=json;each(hinzeJsonObj,function(key,child){if(key.substring(0,1)!=='.'){// Ignore metadata nodes
var childNode=nodeFromJSON$1(child);if(!childNode.isEmpty()){childrenHavePriority=childrenHavePriority||!childNode.getPriority().isEmpty();children.push(new NamedNode(key,childNode));}}});if(children.length===0){return ChildrenNode.EMPTY_NODE;}var childSet=buildChildSet(children,NAME_ONLY_COMPARATOR,function(namedNode){return namedNode.name;},NAME_COMPARATOR);if(childrenHavePriority){var sortedChildSet=buildChildSet(children,PRIORITY_INDEX.getCompare());return new ChildrenNode(childSet,nodeFromJSON$1(priority),new IndexMap({'.priority':sortedChildSet},{'.priority':PRIORITY_INDEX}));}else{return new ChildrenNode(childSet,nodeFromJSON$1(priority),IndexMap.Default);}}else{var node=ChildrenNode.EMPTY_NODE;each(json,function(key,childData){if((0,_util.contains)(json,key)){if(key.substring(0,1)!=='.'){// ignore metadata nodes.
var childNode=nodeFromJSON$1(childData);if(childNode.isLeafNode()||!childNode.isEmpty()){node=node.updateImmediateChild(key,childNode);}}}});return node.updatePriority(nodeFromJSON$1(priority));}}setNodeFromJSON(nodeFromJSON$1);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 * @extends {Index}
 * @private
 */var ValueIndex=/*#__PURE__*/function(_Index3){_inherits(ValueIndex,_Index3);function ValueIndex(){_classCallCheck(this,ValueIndex);return _possibleConstructorReturn(this,_getPrototypeOf(ValueIndex).apply(this,arguments));}_createClass(ValueIndex,[{key:"compare",/**
     * @inheritDoc
     */value:function compare(a,b){var indexCmp=a.node.compareTo(b.node);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}/**
     * @inheritDoc
     */},{key:"isDefinedOn",value:function isDefinedOn(node){return true;}/**
     * @inheritDoc
     */},{key:"indexedValueChanged",value:function indexedValueChanged(oldNode,newNode){return!oldNode.equals(newNode);}/**
     * @inheritDoc
     */},{key:"minPost",value:function minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MIN;}/**
     * @inheritDoc
     */},{key:"maxPost",value:function maxPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
return NamedNode.MAX;}/**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */},{key:"makePost",value:function makePost(indexValue,name){var valueNode=nodeFromJSON$1(indexValue);return new NamedNode(name,valueNode);}/**
     * @return {!string} String representation for inclusion in a query spec
     */},{key:"toString",value:function toString(){return'.value';}}]);return ValueIndex;}(Index);var VALUE_INDEX=new ValueIndex();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!Path} indexPath
 * @constructor
 * @extends {Index}
 */var PathIndex=/*#__PURE__*/function(_Index4){_inherits(PathIndex,_Index4);function PathIndex(indexPath_){var _this2;_classCallCheck(this,PathIndex);_this2=_possibleConstructorReturn(this,_getPrototypeOf(PathIndex).call(this));_this2.indexPath_=indexPath_;(0,_util.assert)(!indexPath_.isEmpty()&&indexPath_.getFront()!=='.priority',"Can't create PathIndex with empty path or .priority key");return _this2;}/**
     * @param {!Node} snap
     * @return {!Node}
     * @protected
     */_createClass(PathIndex,[{key:"extractChild",value:function extractChild(snap){return snap.getChild(this.indexPath_);}/**
     * @inheritDoc
     */},{key:"isDefinedOn",value:function isDefinedOn(node){return!node.getChild(this.indexPath_).isEmpty();}/**
     * @inheritDoc
     */},{key:"compare",value:function compare(a,b){var aChild=this.extractChild(a.node);var bChild=this.extractChild(b.node);var indexCmp=aChild.compareTo(bChild);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}/**
     * @inheritDoc
     */},{key:"makePost",value:function makePost(indexValue,name){var valueNode=nodeFromJSON$1(indexValue);var node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,valueNode);return new NamedNode(name,node);}/**
     * @inheritDoc
     */},{key:"maxPost",value:function maxPost(){var node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,MAX_NODE$2);return new NamedNode(MAX_NAME,node);}/**
     * @inheritDoc
     */},{key:"toString",value:function toString(){return this.indexPath_.slice().join('/');}}]);return PathIndex;}(Index);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
 * surfaces the public methods (val, forEach, etc.) we want to expose.
 */var DataSnapshot=/*#__PURE__*/function(){/**
     * @param {!Node} node_ A SnapshotNode to wrap.
     * @param {!Reference} ref_ The ref of the location this snapshot came from.
     * @param {!Index} index_ The iteration order for this snapshot
     */function DataSnapshot(node_,ref_,index_){_classCallCheck(this,DataSnapshot);this.node_=node_;this.ref_=ref_;this.index_=index_;}/**
     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
     * empty.
     *
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */_createClass(DataSnapshot,[{key:"val",value:function val(){(0,_util.validateArgCount)('DataSnapshot.val',0,0,arguments.length);return this.node_.val();}/**
     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
     * the entire node contents.
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */},{key:"exportVal",value:function exportVal(){(0,_util.validateArgCount)('DataSnapshot.exportVal',0,0,arguments.length);return this.node_.val(true);}// Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
// for end-users
},{key:"toJSON",value:function toJSON(){// Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
(0,_util.validateArgCount)('DataSnapshot.toJSON',0,1,arguments.length);return this.exportVal();}/**
     * Returns whether the snapshot contains a non-null value.
     *
     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
     */},{key:"exists",value:function exists(){(0,_util.validateArgCount)('DataSnapshot.exists',0,0,arguments.length);return!this.node_.isEmpty();}/**
     * Returns a DataSnapshot of the specified child node's contents.
     *
     * @param {!string} childPathString Path to a child.
     * @return {!DataSnapshot} DataSnapshot for child node.
     */},{key:"child",value:function child(childPathString){(0,_util.validateArgCount)('DataSnapshot.child',0,1,arguments.length);// Ensure the childPath is a string (can be a number)
childPathString=String(childPathString);validatePathString('DataSnapshot.child',1,childPathString,false);var childPath=new Path(childPathString);var childRef=this.ref_.child(childPath);return new DataSnapshot(this.node_.getChild(childPath),childRef,PRIORITY_INDEX);}/**
     * Returns whether the snapshot contains a child at the specified path.
     *
     * @param {!string} childPathString Path to a child.
     * @return {boolean} Whether the child exists.
     */},{key:"hasChild",value:function hasChild(childPathString){(0,_util.validateArgCount)('DataSnapshot.hasChild',1,1,arguments.length);validatePathString('DataSnapshot.hasChild',1,childPathString,false);var childPath=new Path(childPathString);return!this.node_.getChild(childPath).isEmpty();}/**
     * Returns the priority of the object, or null if no priority was set.
     *
     * @return {string|number|null} The priority.
     */},{key:"getPriority",value:function getPriority(){(0,_util.validateArgCount)('DataSnapshot.getPriority',0,0,arguments.length);// typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
return this.node_.getPriority().val();}/**
     * Iterates through child nodes and calls the specified action for each one.
     *
     * @param {function(!DataSnapshot)} action Callback function to be called
     * for each child.
     * @return {boolean} True if forEach was canceled by action returning true for
     * one of the child nodes.
     */},{key:"forEach",value:function forEach(action){var _this3=this;(0,_util.validateArgCount)('DataSnapshot.forEach',1,1,arguments.length);(0,_util.validateCallback)('DataSnapshot.forEach',1,action,false);if(this.node_.isLeafNode()){return false;}var childrenNode=this.node_;// Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
return!!childrenNode.forEachChild(this.index_,function(key,node){return action(new DataSnapshot(node,_this3.ref_.child(key),PRIORITY_INDEX));});}/**
     * Returns whether this DataSnapshot has children.
     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
     */},{key:"hasChildren",value:function hasChildren(){(0,_util.validateArgCount)('DataSnapshot.hasChildren',0,0,arguments.length);if(this.node_.isLeafNode()){return false;}else{return!this.node_.isEmpty();}}},{key:"numChildren",/**
     * Returns the number of children for this DataSnapshot.
     * @return {number} The number of children that this DataSnapshot contains.
     */value:function numChildren(){(0,_util.validateArgCount)('DataSnapshot.numChildren',0,0,arguments.length);return this.node_.numChildren();}/**
     * @return {Reference} The Firebase reference for the location this snapshot's data came from.
     */},{key:"getRef",value:function getRef(){(0,_util.validateArgCount)('DataSnapshot.ref',0,0,arguments.length);return this.ref_;}},{key:"key",get:function get(){return this.ref_.getKey();}},{key:"ref",get:function get(){return this.getRef();}}]);return DataSnapshot;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encapsulates the data needed to raise an event
 * @implements {Event}
 */exports.DataSnapshot=DataSnapshot;var DataEvent=/*#__PURE__*/function(){/**
     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
     * @param {!DataSnapshot} snapshot The data backing the event
     * @param {?string=} prevName Optional, the name of the previous child for child_* events.
     */function DataEvent(eventType,eventRegistration,snapshot,prevName){_classCallCheck(this,DataEvent);this.eventType=eventType;this.eventRegistration=eventRegistration;this.snapshot=snapshot;this.prevName=prevName;}/**
     * @inheritDoc
     */_createClass(DataEvent,[{key:"getPath",value:function getPath(){var ref=this.snapshot.getRef();if(this.eventType==='value'){return ref.path;}else{return ref.getParent().path;}}/**
     * @inheritDoc
     */},{key:"getEventType",value:function getEventType(){return this.eventType;}/**
     * @inheritDoc
     */},{key:"getEventRunner",value:function getEventRunner(){return this.eventRegistration.getEventRunner(this);}/**
     * @inheritDoc
     */},{key:"toString",value:function toString(){return this.getPath().toString()+':'+this.eventType+':'+(0,_util.stringify)(this.snapshot.exportVal());}}]);return DataEvent;}();var CancelEvent=/*#__PURE__*/function(){/**
     * @param {EventRegistration} eventRegistration
     * @param {Error} error
     * @param {!Path} path
     */function CancelEvent(eventRegistration,error,path){_classCallCheck(this,CancelEvent);this.eventRegistration=eventRegistration;this.error=error;this.path=path;}/**
     * @inheritDoc
     */_createClass(CancelEvent,[{key:"getPath",value:function getPath(){return this.path;}/**
     * @inheritDoc
     */},{key:"getEventType",value:function getEventType(){return'cancel';}/**
     * @inheritDoc
     */},{key:"getEventRunner",value:function getEventRunner(){return this.eventRegistration.getEventRunner(this);}/**
     * @inheritDoc
     */},{key:"toString",value:function toString(){return this.path.toString()+':cancel';}}]);return CancelEvent;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents registration for 'value' events.
 */var ValueEventRegistration=/*#__PURE__*/function(){/**
     * @param {?function(!DataSnapshot)} callback_
     * @param {?function(Error)} cancelCallback_
     * @param {?Object} context_
     */function ValueEventRegistration(callback_,cancelCallback_,context_){_classCallCheck(this,ValueEventRegistration);this.callback_=callback_;this.cancelCallback_=cancelCallback_;this.context_=context_;}/**
     * @inheritDoc
     */_createClass(ValueEventRegistration,[{key:"respondsTo",value:function respondsTo(eventType){return eventType==='value';}/**
     * @inheritDoc
     */},{key:"createEvent",value:function createEvent(change,query){var index=query.getQueryParams().getIndex();return new DataEvent('value',this,new DataSnapshot(change.snapshotNode,query.getRef(),index));}/**
     * @inheritDoc
     */},{key:"getEventRunner",value:function getEventRunner(eventData){var ctx=this.context_;if(eventData.getEventType()==='cancel'){(0,_util.assert)(this.cancelCallback_,'Raising a cancel event on a listener with no cancel callback');var cancelCB=this.cancelCallback_;return function(){// We know that error exists, we checked above that this is a cancel event
cancelCB.call(ctx,eventData.error);};}else{var cb=this.callback_;return function(){cb.call(ctx,eventData.snapshot);};}}/**
     * @inheritDoc
     */},{key:"createCancelEvent",value:function createCancelEvent(error,path){if(this.cancelCallback_){return new CancelEvent(this,error,path);}else{return null;}}/**
     * @inheritDoc
     */},{key:"matches",value:function matches(other){if(!(other instanceof ValueEventRegistration)){return false;}else if(!other.callback_||!this.callback_){// If no callback specified, we consider it to match any callback.
return true;}else{return other.callback_===this.callback_&&other.context_===this.context_;}}/**
     * @inheritDoc
     */},{key:"hasAnyCallback",value:function hasAnyCallback(){return this.callback_!==null;}}]);return ValueEventRegistration;}();/**
 * Represents the registration of 1 or more child_xxx events.
 *
 * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
 * register a group of callbacks together in the future.
 *
 * @constructor
 * @implements {EventRegistration}
 */var ChildEventRegistration=/*#__PURE__*/function(){/**
     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
     * @param {?function(Error)} cancelCallback_
     * @param {Object=} context_
     */function ChildEventRegistration(callbacks_,cancelCallback_,context_){_classCallCheck(this,ChildEventRegistration);this.callbacks_=callbacks_;this.cancelCallback_=cancelCallback_;this.context_=context_;}/**
     * @inheritDoc
     */_createClass(ChildEventRegistration,[{key:"respondsTo",value:function respondsTo(eventType){var eventToCheck=eventType==='children_added'?'child_added':eventType;eventToCheck=eventToCheck==='children_removed'?'child_removed':eventToCheck;return(0,_util.contains)(this.callbacks_,eventToCheck);}/**
     * @inheritDoc
     */},{key:"createCancelEvent",value:function createCancelEvent(error,path){if(this.cancelCallback_){return new CancelEvent(this,error,path);}else{return null;}}/**
     * @inheritDoc
     */},{key:"createEvent",value:function createEvent(change,query){(0,_util.assert)(change.childName!=null,'Child events should have a childName.');var ref=query.getRef().child(/** @type {!string} */change.childName);var index=query.getQueryParams().getIndex();return new DataEvent(change.type,this,new DataSnapshot(change.snapshotNode,ref,index),change.prevName);}/**
     * @inheritDoc
     */},{key:"getEventRunner",value:function getEventRunner(eventData){var ctx=this.context_;if(eventData.getEventType()==='cancel'){(0,_util.assert)(this.cancelCallback_,'Raising a cancel event on a listener with no cancel callback');var cancelCB=this.cancelCallback_;return function(){// We know that error exists, we checked above that this is a cancel event
cancelCB.call(ctx,eventData.error);};}else{var cb=this.callbacks_[eventData.eventType];return function(){cb.call(ctx,eventData.snapshot,eventData.prevName);};}}/**
     * @inheritDoc
     */},{key:"matches",value:function matches(other){var _this4=this;if(other instanceof ChildEventRegistration){if(!this.callbacks_||!other.callbacks_){return true;}else if(this.context_===other.context_){var otherKeys=Object.keys(other.callbacks_);var thisKeys=Object.keys(this.callbacks_);var otherCount=otherKeys.length;var thisCount=thisKeys.length;if(otherCount===thisCount){// If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
// If event types don't match, not a match
// If count is not 1, exact match across all
if(otherCount===1){var otherKey=otherKeys[0];var thisKey=thisKeys[0];return thisKey===otherKey&&(!other.callbacks_[otherKey]||!this.callbacks_[thisKey]||other.callbacks_[otherKey]===this.callbacks_[thisKey]);}else{// Exact match on each key.
return thisKeys.every(function(eventType){return other.callbacks_[eventType]===_this4.callbacks_[eventType];});}}}}return false;}/**
     * @inheritDoc
     */},{key:"hasAnyCallback",value:function hasAnyCallback(){return this.callbacks_!==null;}}]);return ChildEventRegistration;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __referenceConstructor;/**
 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
 *
 * Since every Firebase reference is a query, Firebase inherits from this object.
 */var Query=/*#__PURE__*/function(){function Query(repo,path,queryParams_,orderByCalled_){_classCallCheck(this,Query);this.repo=repo;this.path=path;this.queryParams_=queryParams_;this.orderByCalled_=orderByCalled_;}_createClass(Query,[{key:"validateNoPreviousOrderByCall_",/**
     * Validates that no other order by call has been made
     * @param {!string} fnName
     * @private
     */value:function validateNoPreviousOrderByCall_(fnName){if(this.orderByCalled_===true){throw new Error(fnName+": You can't combine multiple orderBy calls.");}}/**
     * @return {!QueryParams}
     */},{key:"getQueryParams",value:function getQueryParams(){return this.queryParams_;}/**
     * @return {!Reference}
     */},{key:"getRef",value:function getRef(){(0,_util.validateArgCount)('Query.ref',0,0,arguments.length);// This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
// However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
// method gets called.
return new Query.__referenceConstructor(this.repo,this.path);}/**
     * @param {!string} eventType
     * @param {!function(DataSnapshot, string=)} callback
     * @param {(function(Error)|Object)=} cancelCallbackOrContext
     * @param {Object=} context
     * @return {!function(DataSnapshot, string=)}
     */},{key:"on",value:function on(eventType,callback,cancelCallbackOrContext,context){(0,_util.validateArgCount)('Query.on',2,4,arguments.length);validateEventType('Query.on',1,eventType,false);(0,_util.validateCallback)('Query.on',2,callback,false);var ret=Query.getCancelAndContextArgs_('Query.on',cancelCallbackOrContext,context);if(eventType==='value'){this.onValueEvent(callback,ret.cancel,ret.context);}else{var callbacks={};callbacks[eventType]=callback;this.onChildEvent(callbacks,ret.cancel,ret.context);}return callback;}/**
     * @param {!function(!DataSnapshot)} callback
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */},{key:"onValueEvent",value:function onValueEvent(callback,cancelCallback,context){var container=new ValueEventRegistration(callback,cancelCallback||null,context||null);this.repo.addEventCallbackForQuery(this,container);}/**
     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */},{key:"onChildEvent",value:function onChildEvent(callbacks,cancelCallback,context){var container=new ChildEventRegistration(callbacks,cancelCallback,context);this.repo.addEventCallbackForQuery(this,container);}/**
     * @param {string=} eventType
     * @param {(function(!DataSnapshot, ?string=))=} callback
     * @param {Object=} context
     */},{key:"off",value:function off(eventType,callback,context){(0,_util.validateArgCount)('Query.off',0,3,arguments.length);validateEventType('Query.off',1,eventType,true);(0,_util.validateCallback)('Query.off',2,callback,true);(0,_util.validateContextObject)('Query.off',3,context,true);var container=null;var callbacks=null;if(eventType==='value'){var valueCallback=callback||null;container=new ValueEventRegistration(valueCallback,null,context||null);}else if(eventType){if(callback){callbacks={};callbacks[eventType]=callback;}container=new ChildEventRegistration(callbacks,null,context||null);}this.repo.removeEventCallbackForQuery(this,container);}/**
     * Attaches a listener, waits for the first event, and then removes the listener
     * @param {!string} eventType
     * @param {!function(!DataSnapshot, string=)} userCallback
     * @param failureCallbackOrContext
     * @param context
     * @return {!firebase.Promise}
     */},{key:"once",value:function once(eventType,userCallback,failureCallbackOrContext,context){var _this5=this;(0,_util.validateArgCount)('Query.once',1,4,arguments.length);validateEventType('Query.once',1,eventType,false);(0,_util.validateCallback)('Query.once',2,userCallback,true);var ret=Query.getCancelAndContextArgs_('Query.once',failureCallbackOrContext,context);// TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
// TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
// because the API currently expects callbacks will be called synchronously if the data is cached, but this is
// against the Promise specification.
var firstCall=true;var deferred=new _util.Deferred();// A dummy error handler in case a user wasn't expecting promises
deferred.promise["catch"](function(){});var onceCallback=function onceCallback(snapshot){// NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
// triggers multiple events (e.g. child_added or child_changed).
if(firstCall){firstCall=false;_this5.off(eventType,onceCallback);if(userCallback){userCallback.bind(ret.context)(snapshot);}deferred.resolve(snapshot);}};this.on(eventType,onceCallback,/*cancel=*/function(err){_this5.off(eventType,onceCallback);if(ret.cancel){ret.cancel.bind(ret.context)(err);}deferred.reject(err);});return deferred.promise;}/**
     * Set a limit and anchor it to the start of the window.
     * @param {!number} limit
     * @return {!Query}
     */},{key:"limitToFirst",value:function limitToFirst(limit){(0,_util.validateArgCount)('Query.limitToFirst',1,1,arguments.length);if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('Query.limitToFirst: First argument must be a positive integer.');}if(this.queryParams_.hasLimit()){throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, '+'limitToFirst, or limitToLast).');}return new Query(this.repo,this.path,this.queryParams_.limitToFirst(limit),this.orderByCalled_);}/**
     * Set a limit and anchor it to the end of the window.
     * @param {!number} limit
     * @return {!Query}
     */},{key:"limitToLast",value:function limitToLast(limit){(0,_util.validateArgCount)('Query.limitToLast',1,1,arguments.length);if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('Query.limitToLast: First argument must be a positive integer.');}if(this.queryParams_.hasLimit()){throw new Error('Query.limitToLast: Limit was already set (by another call to limit, '+'limitToFirst, or limitToLast).');}return new Query(this.repo,this.path,this.queryParams_.limitToLast(limit),this.orderByCalled_);}/**
     * Given a child path, return a new query ordered by the specified grandchild path.
     * @param {!string} path
     * @return {!Query}
     */},{key:"orderByChild",value:function orderByChild(path){(0,_util.validateArgCount)('Query.orderByChild',1,1,arguments.length);if(path==='$key'){throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');}else if(path==='$priority'){throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');}else if(path==='$value'){throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');}validatePathString('Query.orderByChild',1,path,false);this.validateNoPreviousOrderByCall_('Query.orderByChild');var parsedPath=new Path(path);if(parsedPath.isEmpty()){throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');}var index=new PathIndex(parsedPath);var newParams=this.queryParams_.orderBy(index);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);}/**
     * Return a new query ordered by the KeyIndex
     * @return {!Query}
     */},{key:"orderByKey",value:function orderByKey(){(0,_util.validateArgCount)('Query.orderByKey',0,0,arguments.length);this.validateNoPreviousOrderByCall_('Query.orderByKey');var newParams=this.queryParams_.orderBy(KEY_INDEX);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);}/**
     * Return a new query ordered by the PriorityIndex
     * @return {!Query}
     */},{key:"orderByPriority",value:function orderByPriority(){(0,_util.validateArgCount)('Query.orderByPriority',0,0,arguments.length);this.validateNoPreviousOrderByCall_('Query.orderByPriority');var newParams=this.queryParams_.orderBy(PRIORITY_INDEX);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);}/**
     * Return a new query ordered by the ValueIndex
     * @return {!Query}
     */},{key:"orderByValue",value:function orderByValue(){(0,_util.validateArgCount)('Query.orderByValue',0,0,arguments.length);this.validateNoPreviousOrderByCall_('Query.orderByValue');var newParams=this.queryParams_.orderBy(VALUE_INDEX);Query.validateQueryEndpoints_(newParams);return new Query(this.repo,this.path,newParams,/*orderByCalled=*/true);}/**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */},{key:"startAt",value:function startAt(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var name=arguments.length>1?arguments[1]:undefined;(0,_util.validateArgCount)('Query.startAt',0,2,arguments.length);validateFirebaseDataArg('Query.startAt',1,value,this.path,true);validateKey('Query.startAt',2,name,true);var newParams=this.queryParams_.startAt(value,name);Query.validateLimit_(newParams);Query.validateQueryEndpoints_(newParams);if(this.queryParams_.hasStart()){throw new Error('Query.startAt: Starting point was already set (by another call to startAt '+'or equalTo).');}// Calling with no params tells us to start at the beginning.
if(value===undefined){value=null;name=null;}return new Query(this.repo,this.path,newParams,this.orderByCalled_);}/**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */},{key:"endAt",value:function endAt(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var name=arguments.length>1?arguments[1]:undefined;(0,_util.validateArgCount)('Query.endAt',0,2,arguments.length);validateFirebaseDataArg('Query.endAt',1,value,this.path,true);validateKey('Query.endAt',2,name,true);var newParams=this.queryParams_.endAt(value,name);Query.validateLimit_(newParams);Query.validateQueryEndpoints_(newParams);if(this.queryParams_.hasEnd()){throw new Error('Query.endAt: Ending point was already set (by another call to endAt or '+'equalTo).');}return new Query(this.repo,this.path,newParams,this.orderByCalled_);}/**
     * Load the selection of children with exactly the specified value, and, optionally,
     * the specified name.
     * @param {number|string|boolean|null} value
     * @param {string=} name
     * @return {!Query}
     */},{key:"equalTo",value:function equalTo(value,name){(0,_util.validateArgCount)('Query.equalTo',1,2,arguments.length);validateFirebaseDataArg('Query.equalTo',1,value,this.path,false);validateKey('Query.equalTo',2,name,true);if(this.queryParams_.hasStart()){throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or '+'equalTo).');}if(this.queryParams_.hasEnd()){throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or '+'equalTo).');}return this.startAt(value,name).endAt(value,name);}/**
     * @return {!string} URL for this location.
     */},{key:"toString",value:function toString(){(0,_util.validateArgCount)('Query.toString',0,0,arguments.length);return this.repo.toString()+this.path.toUrlEncodedString();}// Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
// for end-users.
},{key:"toJSON",value:function toJSON(){// An optional spacer argument is unnecessary for a string.
(0,_util.validateArgCount)('Query.toJSON',0,1,arguments.length);return this.toString();}/**
     * An object representation of the query parameters used by this Query.
     * @return {!Object}
     */},{key:"queryObject",value:function queryObject(){return this.queryParams_.getQueryObject();}/**
     * @return {!string}
     */},{key:"queryIdentifier",value:function queryIdentifier(){var obj=this.queryObject();var id=ObjectToUniqueKey(obj);return id==='{}'?'default':id;}/**
     * Return true if this query and the provided query are equivalent; otherwise, return false.
     * @param {Query} other
     * @return {boolean}
     */},{key:"isEqual",value:function isEqual(other){(0,_util.validateArgCount)('Query.isEqual',1,1,arguments.length);if(!(other instanceof Query)){var _error='Query.isEqual failed: First argument must be an instance of firebase.database.Query.';throw new Error(_error);}var sameRepo=this.repo===other.repo;var samePath=this.path.equals(other.path);var sameQueryIdentifier=this.queryIdentifier()===other.queryIdentifier();return sameRepo&&samePath&&sameQueryIdentifier;}/**
     * Helper used by .on and .once to extract the context and or cancel arguments.
     * @param {!string} fnName The function name (on or once)
     * @param {(function(Error)|Object)=} cancelOrContext
     * @param {Object=} context
     * @return {{cancel: ?function(Error), context: ?Object}}
     * @private
     */},{key:"ref",get:function get(){return this.getRef();}}],[{key:"validateQueryEndpoints_",/**
     * Validates start/end values for queries.
     * @param {!QueryParams} params
     * @private
     */value:function validateQueryEndpoints_(params){var startNode=null;var endNode=null;if(params.hasStart()){startNode=params.getIndexStartValue();}if(params.hasEnd()){endNode=params.getIndexEndValue();}if(params.getIndex()===KEY_INDEX){var tooManyArgsError='Query: When ordering by key, you may only pass one argument to '+'startAt(), endAt(), or equalTo().';var wrongArgTypeError='Query: When ordering by key, the argument passed to startAt(), endAt(),'+'or equalTo() must be a string.';if(params.hasStart()){var startName=params.getIndexStartName();if(startName!==MIN_NAME){throw new Error(tooManyArgsError);}else if(typeof startNode!=='string'){throw new Error(wrongArgTypeError);}}if(params.hasEnd()){var endName=params.getIndexEndName();if(endName!==MAX_NAME){throw new Error(tooManyArgsError);}else if(typeof endNode!=='string'){throw new Error(wrongArgTypeError);}}}else if(params.getIndex()===PRIORITY_INDEX){if(startNode!=null&&!isValidPriority(startNode)||endNode!=null&&!isValidPriority(endNode)){throw new Error('Query: When ordering by priority, the first argument passed to startAt(), '+'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');}}else{(0,_util.assert)(params.getIndex()instanceof PathIndex||params.getIndex()===VALUE_INDEX,'unknown index type.');if(startNode!=null&&_typeof(startNode)==='object'||endNode!=null&&_typeof(endNode)==='object'){throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be '+'an object.');}}}/**
     * Validates that limit* has been called with the correct combination of parameters
     * @param {!QueryParams} params
     * @private
     */},{key:"validateLimit_",value:function validateLimit_(params){if(params.hasStart()&&params.hasEnd()&&params.hasLimit()&&!params.hasAnchoredLimit()){throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");}}},{key:"getCancelAndContextArgs_",value:function getCancelAndContextArgs_(fnName,cancelOrContext,context){var ret={cancel:null,context:null};if(cancelOrContext&&context){ret.cancel=cancelOrContext;(0,_util.validateCallback)(fnName,3,ret.cancel,true);ret.context=context;(0,_util.validateContextObject)(fnName,4,ret.context,true);}else if(cancelOrContext){// we have either a cancel callback or a context.
if(_typeof(cancelOrContext)==='object'&&cancelOrContext!==null){// it's a context!
ret.context=cancelOrContext;}else if(typeof cancelOrContext==='function'){ret.cancel=cancelOrContext;}else{throw new Error((0,_util.errorPrefix)(fnName,3,true)+' must either be a cancel callback or a context object.');}}return ret;}},{key:"__referenceConstructor",set:function set(val){__referenceConstructor=val;},get:function get(){(0,_util.assert)(__referenceConstructor,'Reference.ts has not been loaded');return __referenceConstructor;}}]);return Query;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */exports.Query=Query;var ExistingValueProvider=/*#__PURE__*/function(){function ExistingValueProvider(node_){_classCallCheck(this,ExistingValueProvider);this.node_=node_;}_createClass(ExistingValueProvider,[{key:"getImmediateChild",value:function getImmediateChild(childName){var child=this.node_.getImmediateChild(childName);return new ExistingValueProvider(child);}},{key:"node",value:function node(){return this.node_;}}]);return ExistingValueProvider;}();var DeferredValueProvider=/*#__PURE__*/function(){function DeferredValueProvider(syncTree,path){_classCallCheck(this,DeferredValueProvider);this.syncTree_=syncTree;this.path_=path;}_createClass(DeferredValueProvider,[{key:"getImmediateChild",value:function getImmediateChild(childName){var childPath=this.path_.child(childName);return new DeferredValueProvider(this.syncTree_,childPath);}},{key:"node",value:function node(){return this.syncTree_.calcCompleteEventCache(this.path_);}}]);return DeferredValueProvider;}();/**
 * Generate placeholders for deferred values.
 * @param {?Object} values
 * @return {!Object}
 */var generateWithValues=function generateWithValues(values){values=values||{};values['timestamp']=values['timestamp']||new Date().getTime();return values;};/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 * @param {(Object|string|number|boolean)} value
 * @param {!Object} serverValues
 * @return {!(string|number|boolean)}
 */var resolveDeferredLeafValue=function resolveDeferredLeafValue(value,existingVal,serverValues){if(!value||_typeof(value)!=='object'){return value;}(0,_util.assert)('.sv'in value,'Unexpected leaf node or priority contents');if(typeof value['.sv']==='string'){return resolveScalarDeferredValue(value['.sv'],existingVal,serverValues);}else if(_typeof(value['.sv'])==='object'){return resolveComplexDeferredValue(value['.sv'],existingVal);}else{(0,_util.assert)(false,'Unexpected server value: '+JSON.stringify(value,null,2));}};var resolveScalarDeferredValue=function resolveScalarDeferredValue(op,existing,serverValues){switch(op){case'timestamp':return serverValues['timestamp'];default:(0,_util.assert)(false,'Unexpected server value: '+op);}};var resolveComplexDeferredValue=function resolveComplexDeferredValue(op,existing,unused){if(!op.hasOwnProperty('increment')){(0,_util.assert)(false,'Unexpected server value: '+JSON.stringify(op,null,2));}var delta=op['increment'];if(typeof delta!=='number'){(0,_util.assert)(false,'Unexpected increment value: '+delta);}var existingNode=existing.node();(0,_util.assert)(existingNode!==null&&typeof existingNode!=='undefined','Expected ChildrenNode.EMPTY_NODE for nulls');// Incrementing a non-number sets the value to the incremented amount
if(!existingNode.isLeafNode()){return delta;}var leaf=existingNode;var existingVal=leaf.getValue();if(typeof existingVal!=='number'){return delta;}// No need to do over/underflow arithmetic here because JS only handles floats under the covers
return existingVal+delta;};/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param {!Path} path path to which write is relative
 * @param {!Node} node new data written at path
 * @param {!SyncTree} syncTree current data
 * @param {!Object} serverValues
 * @return {!SparseSnapshotTree}
 */var resolveDeferredValueTree=function resolveDeferredValueTree(path,node,syncTree,serverValues){return resolveDeferredValue(node,new DeferredValueProvider(syncTree,path),serverValues);};/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 * @param {!Node} node
 * @param {!Object} serverValues
 * @return {!Node}
 */var resolveDeferredValueSnapshot=function resolveDeferredValueSnapshot(node,existing,serverValues){return resolveDeferredValue(node,new ExistingValueProvider(existing),serverValues);};function resolveDeferredValue(node,existingVal,serverValues){var rawPri=node.getPriority().val();var priority=resolveDeferredLeafValue(rawPri,existingVal.getImmediateChild('.priority'),serverValues);var newNode;if(node.isLeafNode()){var leafNode=node;var value=resolveDeferredLeafValue(leafNode.getValue(),existingVal,serverValues);if(value!==leafNode.getValue()||priority!==leafNode.getPriority().val()){return new LeafNode(value,nodeFromJSON$1(priority));}else{return node;}}else{var childrenNode=node;newNode=childrenNode;if(priority!==childrenNode.getPriority().val()){newNode=newNode.updatePriority(new LeafNode(priority));}childrenNode.forEachChild(PRIORITY_INDEX,function(childName,childNode){var newChildNode=resolveDeferredValue(childNode,existingVal.getImmediateChild(childName),serverValues);if(newChildNode!==childNode){newNode=newNode.updateImmediateChild(childName,newChildNode);}});return newNode;}}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper class to store a sparse set of snapshots.
 */var SparseSnapshotTree=/*#__PURE__*/function(){function SparseSnapshotTree(){_classCallCheck(this,SparseSnapshotTree);this.value=null;this.children=new Map();}/**
     * Gets the node stored at the given path if one exists.
     *
     * @param path Path to look up snapshot for.
     * @return The retrieved node, or null.
     */_createClass(SparseSnapshotTree,[{key:"find",value:function find(path){if(this.value!=null){return this.value.getChild(path);}else if(!path.isEmpty()&&this.children.size>0){var childKey=path.getFront();path=path.popFront();if(this.children.has(childKey)){var childTree=this.children.get(childKey);return childTree.find(path);}else{return null;}}else{return null;}}/**
     * Stores the given node at the specified path. If there is already a node
     * at a shallower path, it merges the new data into that snapshot node.
     *
     * @param path Path to look up snapshot for.
     * @param data The new data, or null.
     */},{key:"remember",value:function remember(path,data){if(path.isEmpty()){this.value=data;this.children.clear();}else if(this.value!==null){this.value=this.value.updateChild(path,data);}else{var childKey=path.getFront();if(!this.children.has(childKey)){this.children.set(childKey,new SparseSnapshotTree());}var child=this.children.get(childKey);path=path.popFront();child.remember(path,data);}}/**
     * Purge the data at path from the cache.
     *
     * @param path Path to look up snapshot for.
     * @return True if this node should now be removed.
     */},{key:"forget",value:function forget(path){if(path.isEmpty()){this.value=null;this.children.clear();return true;}else{if(this.value!==null){if(this.value.isLeafNode()){// We're trying to forget a node that doesn't exist
return false;}else{var value=this.value;this.value=null;var self=this;value.forEachChild(PRIORITY_INDEX,function(key,tree){self.remember(new Path(key),tree);});return this.forget(path);}}else if(this.children.size>0){var childKey=path.getFront();path=path.popFront();if(this.children.has(childKey)){var safeToRemove=this.children.get(childKey).forget(path);if(safeToRemove){this.children["delete"](childKey);}}return this.children.size===0;}else{return true;}}}/**
     * Recursively iterates through all of the stored tree and calls the
     * callback on each one.
     *
     * @param prefixPath Path to look up node for.
     * @param func The function to invoke for each tree.
     */},{key:"forEachTree",value:function forEachTree(prefixPath,func){if(this.value!==null){func(prefixPath,this.value);}else{this.forEachChild(function(key,tree){var path=new Path(prefixPath.toString()+'/'+key);tree.forEachTree(path,func);});}}/**
     * Iterates through each immediate child and triggers the callback.
     *
     * @param func The function to invoke for each child.
     */},{key:"forEachChild",value:function forEachChild(func){this.children.forEach(function(tree,key){func(key,tree);});}}]);return SparseSnapshotTree;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @enum
 */var OperationType;(function(OperationType){OperationType[OperationType["OVERWRITE"]=0]="OVERWRITE";OperationType[OperationType["MERGE"]=1]="MERGE";OperationType[OperationType["ACK_USER_WRITE"]=2]="ACK_USER_WRITE";OperationType[OperationType["LISTEN_COMPLETE"]=3]="LISTEN_COMPLETE";})(OperationType||(OperationType={}));/**
 * @param {boolean} fromUser
 * @param {boolean} fromServer
 * @param {?string} queryId
 * @param {boolean} tagged
 * @constructor
 */var OperationSource=function OperationSource(fromUser,fromServer,queryId,tagged){_classCallCheck(this,OperationSource);this.fromUser=fromUser;this.fromServer=fromServer;this.queryId=queryId;this.tagged=tagged;(0,_util.assert)(!tagged||fromServer,'Tagged queries must be from server.');};/**
 * @const
 * @type {!OperationSource}
 */OperationSource.User=new OperationSource(/*fromUser=*/true,false,null,/*tagged=*/false);/**
 * @const
 * @type {!OperationSource}
 */OperationSource.Server=new OperationSource(false,/*fromServer=*/true,null,/*tagged=*/false);/**
 * @param {string} queryId
 * @return {!OperationSource}
 */OperationSource.forServerTaggedQuery=function(queryId){return new OperationSource(false,/*fromServer=*/true,queryId,/*tagged=*/true);};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var AckUserWrite=/*#__PURE__*/function(){/**
     *
     * @param {!Path} path
     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
     * @param {!boolean} revert
     */function AckUserWrite(/** @inheritDoc */path,/** @inheritDoc */affectedTree,/** @inheritDoc */revert){_classCallCheck(this,AckUserWrite);this.path=path;this.affectedTree=affectedTree;this.revert=revert;/** @inheritDoc */this.type=OperationType.ACK_USER_WRITE;/** @inheritDoc */this.source=OperationSource.User;}/**
     * @inheritDoc
     */_createClass(AckUserWrite,[{key:"operationForChild",value:function operationForChild(childName){if(!this.path.isEmpty()){(0,_util.assert)(this.path.getFront()===childName,'operationForChild called for unrelated child.');return new AckUserWrite(this.path.popFront(),this.affectedTree,this.revert);}else if(this.affectedTree.value!=null){(0,_util.assert)(this.affectedTree.children.isEmpty(),'affectedTree should not have overlapping affected paths.');// All child locations are affected as well; just return same operation.
return this;}else{var childTree=this.affectedTree.subtree(new Path(childName));return new AckUserWrite(Path.Empty,childTree,this.revert);}}}]);return AckUserWrite;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var emptyChildrenSingleton;/**
 * Singleton empty children collection.
 *
 * @const
 * @type {!SortedMap.<string, !ImmutableTree.<?>>}
 */var EmptyChildren=function EmptyChildren(){if(!emptyChildrenSingleton){emptyChildrenSingleton=new SortedMap(stringCompare);}return emptyChildrenSingleton;};/**
 * A tree with immutable elements.
 */var ImmutableTree=/*#__PURE__*/function(){/**
     * @template T
     * @param {?T} value
     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
     */function ImmutableTree(value){var children=arguments.length>1&&arguments[1]!==undefined?arguments[1]:EmptyChildren();_classCallCheck(this,ImmutableTree);this.value=value;this.children=children;}/**
     * @template T
     * @param {!Object.<string, !T>} obj
     * @return {!ImmutableTree.<!T>}
     */_createClass(ImmutableTree,[{key:"isEmpty",/**
     * True if the value is empty and there are no children
     * @return {boolean}
     */value:function isEmpty(){return this.value===null&&this.children.isEmpty();}/**
     * Given a path and predicate, return the first node and the path to that node
     * where the predicate returns true.
     *
     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
     * on the way back out, it may be better to pass down a pathSoFar obj.
     *
     * @param {!Path} relativePath The remainder of the path
     * @param {function(T):boolean} predicate The predicate to satisfy to return a
     *   node
     * @return {?{path:!Path, value:!T}}
     */},{key:"findRootMostMatchingPathAndValue",value:function findRootMostMatchingPathAndValue(relativePath,predicate){if(this.value!=null&&predicate(this.value)){return{path:Path.Empty,value:this.value};}else{if(relativePath.isEmpty()){return null;}else{var front=relativePath.getFront();var child=this.children.get(front);if(child!==null){var childExistingPathAndValue=child.findRootMostMatchingPathAndValue(relativePath.popFront(),predicate);if(childExistingPathAndValue!=null){var fullPath=new Path(front).child(childExistingPathAndValue.path);return{path:fullPath,value:childExistingPathAndValue.value};}else{return null;}}else{return null;}}}}/**
     * Find, if it exists, the shortest subpath of the given path that points a defined
     * value in the tree
     * @param {!Path} relativePath
     * @return {?{path: !Path, value: !T}}
     */},{key:"findRootMostValueAndPath",value:function findRootMostValueAndPath(relativePath){return this.findRootMostMatchingPathAndValue(relativePath,function(){return true;});}/**
     * @param {!Path} relativePath
     * @return {!ImmutableTree.<T>} The subtree at the given path
     */},{key:"subtree",value:function subtree(relativePath){if(relativePath.isEmpty()){return this;}else{var front=relativePath.getFront();var childTree=this.children.get(front);if(childTree!==null){return childTree.subtree(relativePath.popFront());}else{return ImmutableTree.Empty;}}}/**
     * Sets a value at the specified path.
     *
     * @param {!Path} relativePath Path to set value at.
     * @param {?T} toSet Value to set.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */},{key:"set",value:function set(relativePath,toSet){if(relativePath.isEmpty()){return new ImmutableTree(toSet,this.children);}else{var front=relativePath.getFront();var child=this.children.get(front)||ImmutableTree.Empty;var newChild=child.set(relativePath.popFront(),toSet);var newChildren=this.children.insert(front,newChild);return new ImmutableTree(this.value,newChildren);}}/**
     * Removes the value at the specified path.
     *
     * @param {!Path} relativePath Path to value to remove.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */},{key:"remove",value:function remove(relativePath){if(relativePath.isEmpty()){if(this.children.isEmpty()){return ImmutableTree.Empty;}else{return new ImmutableTree(null,this.children);}}else{var front=relativePath.getFront();var child=this.children.get(front);if(child){var newChild=child.remove(relativePath.popFront());var newChildren;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}if(this.value===null&&newChildren.isEmpty()){return ImmutableTree.Empty;}else{return new ImmutableTree(this.value,newChildren);}}else{return this;}}}/**
     * Gets a value from the tree.
     *
     * @param {!Path} relativePath Path to get value for.
     * @return {?T} Value at path, or null.
     */},{key:"get",value:function get(relativePath){if(relativePath.isEmpty()){return this.value;}else{var front=relativePath.getFront();var child=this.children.get(front);if(child){return child.get(relativePath.popFront());}else{return null;}}}/**
     * Replace the subtree at the specified path with the given new tree.
     *
     * @param {!Path} relativePath Path to replace subtree for.
     * @param {!ImmutableTree} newTree New tree.
     * @return {!ImmutableTree} Resulting tree.
     */},{key:"setTree",value:function setTree(relativePath,newTree){if(relativePath.isEmpty()){return newTree;}else{var front=relativePath.getFront();var child=this.children.get(front)||ImmutableTree.Empty;var newChild=child.setTree(relativePath.popFront(),newTree);var newChildren;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}return new ImmutableTree(this.value,newChildren);}}/**
     * Performs a depth first fold on this tree. Transforms a tree into a single
     * value, given a function that operates on the path to a node, an optional
     * current value, and a map of child names to folded subtrees
     * @template V
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     */},{key:"fold",value:function fold(fn){return this.fold_(Path.Empty,fn);}/**
     * Recursive helper for public-facing fold() method
     * @template V
     * @param {!Path} pathSoFar
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     * @private
     */},{key:"fold_",value:function fold_(pathSoFar,fn){var accum={};this.children.inorderTraversal(function(childKey,childTree){accum[childKey]=childTree.fold_(pathSoFar.child(childKey),fn);});return fn(pathSoFar,this.value,accum);}/**
     * Find the first matching value on the given path. Return the result of applying f to it.
     * @template V
     * @param {!Path} path
     * @param {!function(!Path, !T):?V} f
     * @return {?V}
     */},{key:"findOnPath",value:function findOnPath(path,f){return this.findOnPath_(path,Path.Empty,f);}},{key:"findOnPath_",value:function findOnPath_(pathToFollow,pathSoFar,f){var result=this.value?f(pathSoFar,this.value):false;if(result){return result;}else{if(pathToFollow.isEmpty()){return null;}else{var front=pathToFollow.getFront();var nextChild=this.children.get(front);if(nextChild){return nextChild.findOnPath_(pathToFollow.popFront(),pathSoFar.child(front),f);}else{return null;}}}}/**
     *
     * @param {!Path} path
     * @param {!function(!Path, !T)} f
     * @returns {!ImmutableTree.<T>}
     */},{key:"foreachOnPath",value:function foreachOnPath(path,f){return this.foreachOnPath_(path,Path.Empty,f);}},{key:"foreachOnPath_",value:function foreachOnPath_(pathToFollow,currentRelativePath,f){if(pathToFollow.isEmpty()){return this;}else{if(this.value){f(currentRelativePath,this.value);}var front=pathToFollow.getFront();var nextChild=this.children.get(front);if(nextChild){return nextChild.foreachOnPath_(pathToFollow.popFront(),currentRelativePath.child(front),f);}else{return ImmutableTree.Empty;}}}/**
     * Calls the given function for each node in the tree that has a value.
     *
     * @param {function(!Path, !T)} f A function to be called with
     *   the path from the root of the tree to a node, and the value at that node.
     *   Called in depth-first order.
     */},{key:"foreach",value:function foreach(f){this.foreach_(Path.Empty,f);}},{key:"foreach_",value:function foreach_(currentRelativePath,f){this.children.inorderTraversal(function(childName,childTree){childTree.foreach_(currentRelativePath.child(childName),f);});if(this.value){f(currentRelativePath,this.value);}}/**
     *
     * @param {function(string, !T)} f
     */},{key:"foreachChild",value:function foreachChild(f){this.children.inorderTraversal(function(childName,childTree){if(childTree.value){f(childName,childTree.value);}});}}],[{key:"fromObject",value:function fromObject(obj){var tree=ImmutableTree.Empty;each(obj,function(childPath,childSnap){tree=tree.set(new Path(childPath),childSnap);});return tree;}}]);return ImmutableTree;}();// eslint-disable-next-line @typescript-eslint/no-explicit-any
ImmutableTree.Empty=new ImmutableTree(null);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @constructor
 * @implements {Operation}
 */var ListenComplete=/*#__PURE__*/function(){function ListenComplete(source,path){_classCallCheck(this,ListenComplete);this.source=source;this.path=path;/** @inheritDoc */this.type=OperationType.LISTEN_COMPLETE;}_createClass(ListenComplete,[{key:"operationForChild",value:function operationForChild(childName){if(this.path.isEmpty()){return new ListenComplete(this.source,Path.Empty);}else{return new ListenComplete(this.source,this.path.popFront());}}}]);return ListenComplete;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!Node} snap
 * @constructor
 * @implements {Operation}
 */var Overwrite=/*#__PURE__*/function(){function Overwrite(source,path,snap){_classCallCheck(this,Overwrite);this.source=source;this.path=path;this.snap=snap;/** @inheritDoc */this.type=OperationType.OVERWRITE;}_createClass(Overwrite,[{key:"operationForChild",value:function operationForChild(childName){if(this.path.isEmpty()){return new Overwrite(this.source,Path.Empty,this.snap.getImmediateChild(childName));}else{return new Overwrite(this.source,this.path.popFront(),this.snap);}}}]);return Overwrite;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!ImmutableTree.<!Node>} children
 * @constructor
 * @implements {Operation}
 */var Merge=/*#__PURE__*/function(){function Merge(/** @inheritDoc */source,/** @inheritDoc */path,/** @inheritDoc */children){_classCallCheck(this,Merge);this.source=source;this.path=path;this.children=children;/** @inheritDoc */this.type=OperationType.MERGE;}/**
     * @inheritDoc
     */_createClass(Merge,[{key:"operationForChild",value:function operationForChild(childName){if(this.path.isEmpty()){var childTree=this.children.subtree(new Path(childName));if(childTree.isEmpty()){// This child is unaffected
return null;}else if(childTree.value){// We have a snapshot for the child in question.  This becomes an overwrite of the child.
return new Overwrite(this.source,Path.Empty,childTree.value);}else{// This is a merge at a deeper level
return new Merge(this.source,Path.Empty,childTree);}}else{(0,_util.assert)(this.path.getFront()===childName,"Can't get a merge for a child not on the path of the operation");return new Merge(this.source,this.path.popFront(),this.children);}}/**
     * @inheritDoc
     */},{key:"toString",value:function toString(){return'Operation('+this.path+': '+this.source.toString()+' merge: '+this.children.toString()+')';}}]);return Merge;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */var CacheNode=/*#__PURE__*/function(){/**
     * @param {!Node} node_
     * @param {boolean} fullyInitialized_
     * @param {boolean} filtered_
     */function CacheNode(node_,fullyInitialized_,filtered_){_classCallCheck(this,CacheNode);this.node_=node_;this.fullyInitialized_=fullyInitialized_;this.filtered_=filtered_;}/**
     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
     * @return {boolean}
     */_createClass(CacheNode,[{key:"isFullyInitialized",value:function isFullyInitialized(){return this.fullyInitialized_;}/**
     * Returns whether this node is potentially missing children due to a filter applied to the node
     * @return {boolean}
     */},{key:"isFiltered",value:function isFiltered(){return this.filtered_;}/**
     * @param {!Path} path
     * @return {boolean}
     */},{key:"isCompleteForPath",value:function isCompleteForPath(path){if(path.isEmpty()){return this.isFullyInitialized()&&!this.filtered_;}var childKey=path.getFront();return this.isCompleteForChild(childKey);}/**
     * @param {!string} key
     * @return {boolean}
     */},{key:"isCompleteForChild",value:function isCompleteForChild(key){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(key);}/**
     * @return {!Node}
     */},{key:"getNode",value:function getNode(){return this.node_;}}]);return CacheNode;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Stores the data we have cached for a view.
 *
 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
 *
 * @constructor
 */var ViewCache=/*#__PURE__*/function(){/**
     *
     * @param {!CacheNode} eventCache_
     * @param {!CacheNode} serverCache_
     */function ViewCache(eventCache_,serverCache_){_classCallCheck(this,ViewCache);this.eventCache_=eventCache_;this.serverCache_=serverCache_;}/**
     * @param {!Node} eventSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */_createClass(ViewCache,[{key:"updateEventSnap",value:function updateEventSnap(eventSnap,complete,filtered){return new ViewCache(new CacheNode(eventSnap,complete,filtered),this.serverCache_);}/**
     * @param {!Node} serverSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */},{key:"updateServerSnap",value:function updateServerSnap(serverSnap,complete,filtered){return new ViewCache(this.eventCache_,new CacheNode(serverSnap,complete,filtered));}/**
     * @return {!CacheNode}
     */},{key:"getEventCache",value:function getEventCache(){return this.eventCache_;}/**
     * @return {?Node}
     */},{key:"getCompleteEventSnap",value:function getCompleteEventSnap(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null;}/**
     * @return {!CacheNode}
     */},{key:"getServerCache",value:function getServerCache(){return this.serverCache_;}/**
     * @return {?Node}
     */},{key:"getCompleteServerSnap",value:function getCompleteServerSnap(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null;}}]);return ViewCache;}();/**
 * @const
 * @type {ViewCache}
 */ViewCache.Empty=new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,/*fullyInitialized=*/false,/*filtered=*/false),new CacheNode(ChildrenNode.EMPTY_NODE,/*fullyInitialized=*/false,/*filtered=*/false));/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 * @struct
 * @param {!string} type The event type
 * @param {!Node} snapshotNode The data
 * @param {string=} childName The name for this child, if it's a child event
 * @param {Node=} oldSnap Used for intermediate processing of child changed events
 * @param {string=} prevName The name for the previous child, if applicable
 */var Change=/*#__PURE__*/function(){function Change(type,snapshotNode,childName,oldSnap,prevName){_classCallCheck(this,Change);this.type=type;this.snapshotNode=snapshotNode;this.childName=childName;this.oldSnap=oldSnap;this.prevName=prevName;}/**
     * @param {!Node} snapshot
     * @return {!Change}
     */_createClass(Change,null,[{key:"valueChange",value:function valueChange(snapshot){return new Change(Change.VALUE,snapshot);}/**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */},{key:"childAddedChange",value:function childAddedChange(childKey,snapshot){return new Change(Change.CHILD_ADDED,snapshot,childKey);}/**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */},{key:"childRemovedChange",value:function childRemovedChange(childKey,snapshot){return new Change(Change.CHILD_REMOVED,snapshot,childKey);}/**
     * @param {string} childKey
     * @param {!Node} newSnapshot
     * @param {!Node} oldSnapshot
     * @return {!Change}
     */},{key:"childChangedChange",value:function childChangedChange(childKey,newSnapshot,oldSnapshot){return new Change(Change.CHILD_CHANGED,newSnapshot,childKey,oldSnapshot);}/**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */},{key:"childMovedChange",value:function childMovedChange(childKey,snapshot){return new Change(Change.CHILD_MOVED,snapshot,childKey);}}]);return Change;}();//event types
/** Event type for a child added */Change.CHILD_ADDED='child_added';/** Event type for a child removed */Change.CHILD_REMOVED='child_removed';/** Event type for a child changed */Change.CHILD_CHANGED='child_changed';/** Event type for a child moved */Change.CHILD_MOVED='child_moved';/** Event type for a value change */Change.VALUE='value';/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 *
 * @constructor
 * @implements {NodeFilter}
 * @param {!Index} index
 */var IndexedFilter=/*#__PURE__*/function(){function IndexedFilter(index_){_classCallCheck(this,IndexedFilter);this.index_=index_;}_createClass(IndexedFilter,[{key:"updateChild",value:function updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){(0,_util.assert)(snap.isIndexed(this.index_),'A node must be indexed if only a child is updated');var oldChild=snap.getImmediateChild(key);// Check if anything actually changed.
if(oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))){// There's an edge case where a child can enter or leave the view because affectedPath was set to null.
// In this case, affectedPath will appear null in both the old and new snapshots.  So we need
// to avoid treating these cases as "nothing changed."
if(oldChild.isEmpty()===newChild.isEmpty()){// Nothing changed.
// This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
//assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
return snap;}}if(optChangeAccumulator!=null){if(newChild.isEmpty()){if(snap.hasChild(key)){optChangeAccumulator.trackChildChange(Change.childRemovedChange(key,oldChild));}else{(0,_util.assert)(snap.isLeafNode(),'A child remove without an old child only makes sense on a leaf node');}}else if(oldChild.isEmpty()){optChangeAccumulator.trackChildChange(Change.childAddedChange(key,newChild));}else{optChangeAccumulator.trackChildChange(Change.childChangedChange(key,newChild,oldChild));}}if(snap.isLeafNode()&&newChild.isEmpty()){return snap;}else{// Make sure the node is indexed
return snap.updateImmediateChild(key,newChild).withIndex(this.index_);}}/**
     * @inheritDoc
     */},{key:"updateFullNode",value:function updateFullNode(oldSnap,newSnap,optChangeAccumulator){if(optChangeAccumulator!=null){if(!oldSnap.isLeafNode()){oldSnap.forEachChild(PRIORITY_INDEX,function(key,childNode){if(!newSnap.hasChild(key)){optChangeAccumulator.trackChildChange(Change.childRemovedChange(key,childNode));}});}if(!newSnap.isLeafNode()){newSnap.forEachChild(PRIORITY_INDEX,function(key,childNode){if(oldSnap.hasChild(key)){var oldChild=oldSnap.getImmediateChild(key);if(!oldChild.equals(childNode)){optChangeAccumulator.trackChildChange(Change.childChangedChange(key,childNode,oldChild));}}else{optChangeAccumulator.trackChildChange(Change.childAddedChange(key,childNode));}});}}return newSnap.withIndex(this.index_);}/**
     * @inheritDoc
     */},{key:"updatePriority",value:function updatePriority(oldSnap,newPriority){if(oldSnap.isEmpty()){return ChildrenNode.EMPTY_NODE;}else{return oldSnap.updatePriority(newPriority);}}/**
     * @inheritDoc
     */},{key:"filtersNodes",value:function filtersNodes(){return false;}/**
     * @inheritDoc
     */},{key:"getIndexedFilter",value:function getIndexedFilter(){return this;}/**
     * @inheritDoc
     */},{key:"getIndex",value:function getIndex(){return this.index_;}}]);return IndexedFilter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ChildChangeAccumulator=/*#__PURE__*/function(){function ChildChangeAccumulator(){_classCallCheck(this,ChildChangeAccumulator);this.changeMap=new Map();}_createClass(ChildChangeAccumulator,[{key:"trackChildChange",value:function trackChildChange(change){var type=change.type;var childKey=change.childName;(0,_util.assert)(type===Change.CHILD_ADDED||type===Change.CHILD_CHANGED||type===Change.CHILD_REMOVED,'Only child changes supported for tracking');(0,_util.assert)(childKey!=='.priority','Only non-priority child changes can be tracked.');var oldChange=this.changeMap.get(childKey);if(oldChange){var oldType=oldChange.type;if(type===Change.CHILD_ADDED&&oldType===Change.CHILD_REMOVED){this.changeMap.set(childKey,Change.childChangedChange(childKey,change.snapshotNode,oldChange.snapshotNode));}else if(type===Change.CHILD_REMOVED&&oldType===Change.CHILD_ADDED){this.changeMap["delete"](childKey);}else if(type===Change.CHILD_REMOVED&&oldType===Change.CHILD_CHANGED){this.changeMap.set(childKey,Change.childRemovedChange(childKey,oldChange.oldSnap));}else if(type===Change.CHILD_CHANGED&&oldType===Change.CHILD_ADDED){this.changeMap.set(childKey,Change.childAddedChange(childKey,change.snapshotNode));}else if(type===Change.CHILD_CHANGED&&oldType===Change.CHILD_CHANGED){this.changeMap.set(childKey,Change.childChangedChange(childKey,change.snapshotNode,oldChange.oldSnap));}else{throw(0,_util.assertionError)('Illegal combination of changes: '+change+' occurred after '+oldChange);}}else{this.changeMap.set(childKey,change);}}},{key:"getChanges",value:function getChanges(){return Array.from(this.changeMap.values());}}]);return ChildChangeAccumulator;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of CompleteChildSource that never returns any additional children
 *
 * @private
 * @constructor
 * @implements CompleteChildSource
 */ // eslint-disable-next-line @typescript-eslint/naming-convention
var NoCompleteChildSource_=/*#__PURE__*/function(){function NoCompleteChildSource_(){_classCallCheck(this,NoCompleteChildSource_);}_createClass(NoCompleteChildSource_,[{key:"getCompleteChild",/**
     * @inheritDoc
     */value:function getCompleteChild(childKey){return null;}/**
     * @inheritDoc
     */},{key:"getChildAfterChild",value:function getChildAfterChild(index,child,reverse){return null;}}]);return NoCompleteChildSource_;}();/**
 * Singleton instance.
 * @const
 * @type {!CompleteChildSource}
 */var NO_COMPLETE_CHILD_SOURCE=new NoCompleteChildSource_();/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 *
 *
 * @implements CompleteChildSource
 */var WriteTreeCompleteChildSource=/*#__PURE__*/function(){/**
     * @param {!WriteTreeRef} writes_
     * @param {!ViewCache} viewCache_
     * @param {?Node} optCompleteServerCache_
     */function WriteTreeCompleteChildSource(writes_,viewCache_){var optCompleteServerCache_=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;_classCallCheck(this,WriteTreeCompleteChildSource);this.writes_=writes_;this.viewCache_=viewCache_;this.optCompleteServerCache_=optCompleteServerCache_;}/**
     * @inheritDoc
     */_createClass(WriteTreeCompleteChildSource,[{key:"getCompleteChild",value:function getCompleteChild(childKey){var node=this.viewCache_.getEventCache();if(node.isCompleteForChild(childKey)){return node.getNode().getImmediateChild(childKey);}else{var serverNode=this.optCompleteServerCache_!=null?new CacheNode(this.optCompleteServerCache_,true,false):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(childKey,serverNode);}}/**
     * @inheritDoc
     */},{key:"getChildAfterChild",value:function getChildAfterChild(index,child,reverse){var completeServerData=this.optCompleteServerCache_!=null?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap();var nodes=this.writes_.calcIndexedSlice(completeServerData,child,1,reverse,index);if(nodes.length===0){return null;}else{return nodes[0];}}}]);return WriteTreeCompleteChildSource;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @constructor
 * @struct
 */var ProcessorResult=/**
     * @param {!ViewCache} viewCache
     * @param {!Array.<!Change>} changes
     */function ProcessorResult(viewCache,changes){_classCallCheck(this,ProcessorResult);this.viewCache=viewCache;this.changes=changes;};/**
 * @constructor
 */var ViewProcessor=/*#__PURE__*/function(){/**
     * @param {!NodeFilter} filter_
     */function ViewProcessor(filter_){_classCallCheck(this,ViewProcessor);this.filter_=filter_;}/**
     * @param {!ViewCache} viewCache
     */_createClass(ViewProcessor,[{key:"assertIndexed",value:function assertIndexed(viewCache){(0,_util.assert)(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),'Event snap not indexed');(0,_util.assert)(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),'Server snap not indexed');}/**
     * @param {!ViewCache} oldViewCache
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @return {!ProcessorResult}
     */},{key:"applyOperation",value:function applyOperation(oldViewCache,operation,writesCache,completeCache){var accumulator=new ChildChangeAccumulator();var newViewCache,filterServerNode;if(operation.type===OperationType.OVERWRITE){var overwrite=operation;if(overwrite.source.fromUser){newViewCache=this.applyUserOverwrite_(oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,accumulator);}else{(0,_util.assert)(overwrite.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered  and the
// update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
// again
filterServerNode=overwrite.source.tagged||oldViewCache.getServerCache().isFiltered()&&!overwrite.path.isEmpty();newViewCache=this.applyServerOverwrite_(oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.MERGE){var merge=operation;if(merge.source.fromUser){newViewCache=this.applyUserMerge_(oldViewCache,merge.path,merge.children,writesCache,completeCache,accumulator);}else{(0,_util.assert)(merge.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered
filterServerNode=merge.source.tagged||oldViewCache.getServerCache().isFiltered();newViewCache=this.applyServerMerge_(oldViewCache,merge.path,merge.children,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.ACK_USER_WRITE){var ackUserWrite=operation;if(!ackUserWrite.revert){newViewCache=this.ackUserWrite_(oldViewCache,ackUserWrite.path,ackUserWrite.affectedTree,writesCache,completeCache,accumulator);}else{newViewCache=this.revertUserWrite_(oldViewCache,ackUserWrite.path,writesCache,completeCache,accumulator);}}else if(operation.type===OperationType.LISTEN_COMPLETE){newViewCache=this.listenComplete_(oldViewCache,operation.path,writesCache,accumulator);}else{throw(0,_util.assertionError)('Unknown operation type: '+operation.type);}var changes=accumulator.getChanges();ViewProcessor.maybeAddValueEvent_(oldViewCache,newViewCache,changes);return new ProcessorResult(newViewCache,changes);}/**
     * @param {!ViewCache} oldViewCache
     * @param {!ViewCache} newViewCache
     * @param {!Array.<!Change>} accumulator
     * @private
     */},{key:"generateEventCacheAfterServerEvent_",/**
     * @param {!ViewCache} viewCache
     * @param {!Path} changePath
     * @param {!WriteTreeRef} writesCache
     * @param {!CompleteChildSource} source
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */value:function generateEventCacheAfterServerEvent_(viewCache,changePath,writesCache,source,accumulator){var oldEventSnap=viewCache.getEventCache();if(writesCache.shadowingWrite(changePath)!=null){// we have a shadowing write, ignore changes
return viewCache;}else{var newEventCache,serverNode;if(changePath.isEmpty()){// TODO: figure out how this plays with "sliding ack windows"
(0,_util.assert)(viewCache.getServerCache().isFullyInitialized(),'If change path is empty, we must have complete server data');if(viewCache.getServerCache().isFiltered()){// We need to special case this, because we need to only apply writes to complete children, or
// we might end up raising events for incomplete children. If the server data is filtered deep
// writes cannot be guaranteed to be complete
var serverCache=viewCache.getCompleteServerSnap();var completeChildren=serverCache instanceof ChildrenNode?serverCache:ChildrenNode.EMPTY_NODE;var completeEventChildren=writesCache.calcCompleteEventChildren(completeChildren);newEventCache=this.filter_.updateFullNode(viewCache.getEventCache().getNode(),completeEventChildren,accumulator);}else{var completeNode=writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());newEventCache=this.filter_.updateFullNode(viewCache.getEventCache().getNode(),completeNode,accumulator);}}else{var childKey=changePath.getFront();if(childKey==='.priority'){(0,_util.assert)(changePath.getLength()===1,"Can't have a priority with additional path components");var oldEventNode=oldEventSnap.getNode();serverNode=viewCache.getServerCache().getNode();// we might have overwrites for this priority
var updatedPriority=writesCache.calcEventCacheAfterServerOverwrite(changePath,oldEventNode,serverNode);if(updatedPriority!=null){newEventCache=this.filter_.updatePriority(oldEventNode,updatedPriority);}else{// priority didn't change, keep old node
newEventCache=oldEventSnap.getNode();}}else{var childChangePath=changePath.popFront();// update child
var newEventChild;if(oldEventSnap.isCompleteForChild(childKey)){serverNode=viewCache.getServerCache().getNode();var eventChildUpdate=writesCache.calcEventCacheAfterServerOverwrite(changePath,oldEventSnap.getNode(),serverNode);if(eventChildUpdate!=null){newEventChild=oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath,eventChildUpdate);}else{// Nothing changed, just keep the old child
newEventChild=oldEventSnap.getNode().getImmediateChild(childKey);}}else{newEventChild=writesCache.calcCompleteChild(childKey,viewCache.getServerCache());}if(newEventChild!=null){newEventCache=this.filter_.updateChild(oldEventSnap.getNode(),childKey,newEventChild,childChangePath,source,accumulator);}else{// no complete child available or no change
newEventCache=oldEventSnap.getNode();}}}return viewCache.updateEventSnap(newEventCache,oldEventSnap.isFullyInitialized()||changePath.isEmpty(),this.filter_.filtersNodes());}}/**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */},{key:"applyServerOverwrite_",value:function applyServerOverwrite_(oldViewCache,changePath,changedSnap,writesCache,completeCache,filterServerNode,accumulator){var oldServerSnap=oldViewCache.getServerCache();var newServerCache;var serverFilter=filterServerNode?this.filter_:this.filter_.getIndexedFilter();if(changePath.isEmpty()){newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),changedSnap,null);}else if(serverFilter.filtersNodes()&&!oldServerSnap.isFiltered()){// we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
var newServerNode=oldServerSnap.getNode().updateChild(changePath,changedSnap);newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),newServerNode,null);}else{var childKey=changePath.getFront();if(!oldServerSnap.isCompleteForPath(changePath)&&changePath.getLength()>1){// We don't update incomplete nodes with updates intended for other listeners
return oldViewCache;}var childChangePath=changePath.popFront();var childNode=oldServerSnap.getNode().getImmediateChild(childKey);var newChildNode=childNode.updateChild(childChangePath,changedSnap);if(childKey==='.priority'){newServerCache=serverFilter.updatePriority(oldServerSnap.getNode(),newChildNode);}else{newServerCache=serverFilter.updateChild(oldServerSnap.getNode(),childKey,newChildNode,childChangePath,NO_COMPLETE_CHILD_SOURCE,null);}}var newViewCache=oldViewCache.updateServerSnap(newServerCache,oldServerSnap.isFullyInitialized()||changePath.isEmpty(),serverFilter.filtersNodes());var source=new WriteTreeCompleteChildSource(writesCache,newViewCache,completeCache);return this.generateEventCacheAfterServerEvent_(newViewCache,changePath,writesCache,source,accumulator);}/**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */},{key:"applyUserOverwrite_",value:function applyUserOverwrite_(oldViewCache,changePath,changedSnap,writesCache,completeCache,accumulator){var oldEventSnap=oldViewCache.getEventCache();var newViewCache,newEventCache;var source=new WriteTreeCompleteChildSource(writesCache,oldViewCache,completeCache);if(changePath.isEmpty()){newEventCache=this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(),changedSnap,accumulator);newViewCache=oldViewCache.updateEventSnap(newEventCache,true,this.filter_.filtersNodes());}else{var childKey=changePath.getFront();if(childKey==='.priority'){newEventCache=this.filter_.updatePriority(oldViewCache.getEventCache().getNode(),changedSnap);newViewCache=oldViewCache.updateEventSnap(newEventCache,oldEventSnap.isFullyInitialized(),oldEventSnap.isFiltered());}else{var childChangePath=changePath.popFront();var oldChild=oldEventSnap.getNode().getImmediateChild(childKey);var newChild;if(childChangePath.isEmpty()){// Child overwrite, we can replace the child
newChild=changedSnap;}else{var childNode=source.getCompleteChild(childKey);if(childNode!=null){if(childChangePath.getBack()==='.priority'&&childNode.getChild(childChangePath.parent()).isEmpty()){// This is a priority update on an empty node. If this node exists on the server, the
// server will send down the priority in the update, so ignore for now
newChild=childNode;}else{newChild=childNode.updateChild(childChangePath,changedSnap);}}else{// There is no complete child node available
newChild=ChildrenNode.EMPTY_NODE;}}if(!oldChild.equals(newChild)){var newEventSnap=this.filter_.updateChild(oldEventSnap.getNode(),childKey,newChild,childChangePath,source,accumulator);newViewCache=oldViewCache.updateEventSnap(newEventSnap,oldEventSnap.isFullyInitialized(),this.filter_.filtersNodes());}else{newViewCache=oldViewCache;}}}return newViewCache;}/**
     * @param {!ViewCache} viewCache
     * @param {string} childKey
     * @return {boolean}
     * @private
     */},{key:"applyUserMerge_",/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */value:function applyUserMerge_(viewCache,path,changedChildren,writesCache,serverCache,accumulator){var _this6=this;// HACK: In the case of a limit query, there may be some changes that bump things out of the
// window leaving room for new items.  It's important we process these changes first, so we
// iterate the changes twice, first processing any that affect items currently in view.
// TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
// and event snap.  I'm not sure if this will result in edge cases when a child is in one but
// not the other.
var curViewCache=viewCache;changedChildren.foreach(function(relativePath,childNode){var writePath=path.child(relativePath);if(ViewProcessor.cacheHasChild_(viewCache,writePath.getFront())){curViewCache=_this6.applyUserOverwrite_(curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});changedChildren.foreach(function(relativePath,childNode){var writePath=path.child(relativePath);if(!ViewProcessor.cacheHasChild_(viewCache,writePath.getFront())){curViewCache=_this6.applyUserOverwrite_(curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});return curViewCache;}/**
     * @param {!Node} node
     * @param {ImmutableTree.<!Node>} merge
     * @return {!Node}
     * @private
     */},{key:"applyMerge_",value:function applyMerge_(node,merge){merge.foreach(function(relativePath,childNode){node=node.updateChild(relativePath,childNode);});return node;}/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */},{key:"applyServerMerge_",value:function applyServerMerge_(viewCache,path,changedChildren,writesCache,serverCache,filterServerNode,accumulator){var _this7=this;// If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
// wait for the complete data update coming soon.
if(viewCache.getServerCache().getNode().isEmpty()&&!viewCache.getServerCache().isFullyInitialized()){return viewCache;}// HACK: In the case of a limit query, there may be some changes that bump things out of the
// window leaving room for new items.  It's important we process these changes first, so we
// iterate the changes twice, first processing any that affect items currently in view.
// TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
// and event snap.  I'm not sure if this will result in edge cases when a child is in one but
// not the other.
var curViewCache=viewCache;var viewMergeTree;if(path.isEmpty()){viewMergeTree=changedChildren;}else{viewMergeTree=ImmutableTree.Empty.setTree(path,changedChildren);}var serverNode=viewCache.getServerCache().getNode();viewMergeTree.children.inorderTraversal(function(childKey,childTree){if(serverNode.hasChild(childKey)){var serverChild=viewCache.getServerCache().getNode().getImmediateChild(childKey);var newChild=_this7.applyMerge_(serverChild,childTree);curViewCache=_this7.applyServerOverwrite_(curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});viewMergeTree.children.inorderTraversal(function(childKey,childMergeTree){var isUnknownDeepMerge=!viewCache.getServerCache().isCompleteForChild(childKey)&&childMergeTree.value==null;if(!serverNode.hasChild(childKey)&&!isUnknownDeepMerge){var serverChild=viewCache.getServerCache().getNode().getImmediateChild(childKey);var newChild=_this7.applyMerge_(serverChild,childMergeTree);curViewCache=_this7.applyServerOverwrite_(curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});return curViewCache;}/**
     * @param {!ViewCache} viewCache
     * @param {!Path} ackPath
     * @param {!ImmutableTree<!boolean>} affectedTree
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */},{key:"ackUserWrite_",value:function ackUserWrite_(viewCache,ackPath,affectedTree,writesCache,completeCache,accumulator){if(writesCache.shadowingWrite(ackPath)!=null){return viewCache;}// Only filter server node if it is currently filtered
var filterServerNode=viewCache.getServerCache().isFiltered();// Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
// now that it won't be shadowed.
var serverCache=viewCache.getServerCache();if(affectedTree.value!=null){// This is an overwrite.
if(ackPath.isEmpty()&&serverCache.isFullyInitialized()||serverCache.isCompleteForPath(ackPath)){return this.applyServerOverwrite_(viewCache,ackPath,serverCache.getNode().getChild(ackPath),writesCache,completeCache,filterServerNode,accumulator);}else if(ackPath.isEmpty()){// This is a goofy edge case where we are acking data at this location but don't have full data.  We
// should just re-apply whatever we have in our cache as a merge.
var changedChildren=ImmutableTree.Empty;serverCache.getNode().forEachChild(KEY_INDEX,function(name,node){changedChildren=changedChildren.set(new Path(name),node);});return this.applyServerMerge_(viewCache,ackPath,changedChildren,writesCache,completeCache,filterServerNode,accumulator);}else{return viewCache;}}else{// This is a merge.
var _changedChildren=ImmutableTree.Empty;affectedTree.foreach(function(mergePath,value){var serverCachePath=ackPath.child(mergePath);if(serverCache.isCompleteForPath(serverCachePath)){_changedChildren=_changedChildren.set(mergePath,serverCache.getNode().getChild(serverCachePath));}});return this.applyServerMerge_(viewCache,ackPath,_changedChildren,writesCache,completeCache,filterServerNode,accumulator);}}/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */},{key:"listenComplete_",value:function listenComplete_(viewCache,path,writesCache,accumulator){var oldServerNode=viewCache.getServerCache();var newViewCache=viewCache.updateServerSnap(oldServerNode.getNode(),oldServerNode.isFullyInitialized()||path.isEmpty(),oldServerNode.isFiltered());return this.generateEventCacheAfterServerEvent_(newViewCache,path,writesCache,NO_COMPLETE_CHILD_SOURCE,accumulator);}/**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */},{key:"revertUserWrite_",value:function revertUserWrite_(viewCache,path,writesCache,completeServerCache,accumulator){var complete;if(writesCache.shadowingWrite(path)!=null){return viewCache;}else{var source=new WriteTreeCompleteChildSource(writesCache,viewCache,completeServerCache);var oldEventCache=viewCache.getEventCache().getNode();var newEventCache;if(path.isEmpty()||path.getFront()==='.priority'){var newNode;if(viewCache.getServerCache().isFullyInitialized()){newNode=writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());}else{var serverChildren=viewCache.getServerCache().getNode();(0,_util.assert)(serverChildren instanceof ChildrenNode,'serverChildren would be complete if leaf node');newNode=writesCache.calcCompleteEventChildren(serverChildren);}newNode=newNode;newEventCache=this.filter_.updateFullNode(oldEventCache,newNode,accumulator);}else{var childKey=path.getFront();var newChild=writesCache.calcCompleteChild(childKey,viewCache.getServerCache());if(newChild==null&&viewCache.getServerCache().isCompleteForChild(childKey)){newChild=oldEventCache.getImmediateChild(childKey);}if(newChild!=null){newEventCache=this.filter_.updateChild(oldEventCache,childKey,newChild,path.popFront(),source,accumulator);}else if(viewCache.getEventCache().getNode().hasChild(childKey)){// No complete child available, delete the existing one, if any
newEventCache=this.filter_.updateChild(oldEventCache,childKey,ChildrenNode.EMPTY_NODE,path.popFront(),source,accumulator);}else{newEventCache=oldEventCache;}if(newEventCache.isEmpty()&&viewCache.getServerCache().isFullyInitialized()){// We might have reverted all child writes. Maybe the old event was a leaf node
complete=writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());if(complete.isLeafNode()){newEventCache=this.filter_.updateFullNode(newEventCache,complete,accumulator);}}}complete=viewCache.getServerCache().isFullyInitialized()||writesCache.shadowingWrite(Path.Empty)!=null;return viewCache.updateEventSnap(newEventCache,complete,this.filter_.filtersNodes());}}}],[{key:"maybeAddValueEvent_",value:function maybeAddValueEvent_(oldViewCache,newViewCache,accumulator){var eventSnap=newViewCache.getEventCache();if(eventSnap.isFullyInitialized()){var isLeafOrEmpty=eventSnap.getNode().isLeafNode()||eventSnap.getNode().isEmpty();var oldCompleteSnap=oldViewCache.getCompleteEventSnap();if(accumulator.length>0||!oldViewCache.getEventCache().isFullyInitialized()||isLeafOrEmpty&&!eventSnap.getNode().equals(/** @type {!Node} */oldCompleteSnap)||!eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())){accumulator.push(Change.valueChange(/** @type {!Node} */newViewCache.getCompleteEventSnap()));}}}},{key:"cacheHasChild_",value:function cacheHasChild_(viewCache,childKey){return viewCache.getEventCache().isCompleteForChild(childKey);}}]);return ViewProcessor;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 * @constructor
 */var EventGenerator=/*#__PURE__*/function(){/**
     *
     * @param {!Query} query_
     */function EventGenerator(query_){_classCallCheck(this,EventGenerator);this.query_=query_;/**
         * @private
         * @type {!Index}
         */this.index_=this.query_.getQueryParams().getIndex();}/**
     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
     *
     * Notes:
     *  - child_moved events will be synthesized at this time for any child_changed events that affect
     *    our index.
     *  - prevName will be calculated based on the index ordering.
     *
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {!Array.<!EventRegistration>} eventRegistrations
     * @return {!Array.<!Event>}
     */_createClass(EventGenerator,[{key:"generateEventsForChanges",value:function generateEventsForChanges(changes,eventCache,eventRegistrations){var _this8=this;var events=[];var moves=[];changes.forEach(function(change){if(change.type===Change.CHILD_CHANGED&&_this8.index_.indexedValueChanged(change.oldSnap,change.snapshotNode)){moves.push(Change.childMovedChange(change.childName,change.snapshotNode));}});this.generateEventsForType_(events,Change.CHILD_REMOVED,changes,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.CHILD_ADDED,changes,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.CHILD_MOVED,moves,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.CHILD_CHANGED,changes,eventRegistrations,eventCache);this.generateEventsForType_(events,Change.VALUE,changes,eventRegistrations,eventCache);return events;}/**
     * Given changes of a single change type, generate the corresponding events.
     *
     * @param {!Array.<!Event>} events
     * @param {!string} eventType
     * @param {!Array.<!Change>} changes
     * @param {!Array.<!EventRegistration>} registrations
     * @param {!Node} eventCache
     * @private
     */},{key:"generateEventsForType_",value:function generateEventsForType_(events,eventType,changes,registrations,eventCache){var _this9=this;var filteredChanges=changes.filter(function(change){return change.type===eventType;});filteredChanges.sort(this.compareChanges_.bind(this));filteredChanges.forEach(function(change){var materializedChange=_this9.materializeSingleChange_(change,eventCache);registrations.forEach(function(registration){if(registration.respondsTo(change.type)){events.push(registration.createEvent(materializedChange,_this9.query_));}});});}/**
     * @param {!Change} change
     * @param {!Node} eventCache
     * @return {!Change}
     * @private
     */},{key:"materializeSingleChange_",value:function materializeSingleChange_(change,eventCache){if(change.type==='value'||change.type==='child_removed'){return change;}else{change.prevName=eventCache.getPredecessorChildName(/** @type {!string} */change.childName,change.snapshotNode,this.index_);return change;}}/**
     * @param {!Change} a
     * @param {!Change} b
     * @return {number}
     * @private
     */},{key:"compareChanges_",value:function compareChanges_(a,b){if(a.childName==null||b.childName==null){throw(0,_util.assertionError)('Should only compare child_ events.');}var aWrapped=new NamedNode(a.childName,a.snapshotNode);var bWrapped=new NamedNode(b.childName,b.snapshotNode);return this.index_.compare(aWrapped,bWrapped);}}]);return EventGenerator;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 * @constructor
 */var View=/*#__PURE__*/function(){/**
     *
     * @param {!Query} query_
     * @param {!ViewCache} initialViewCache
     */function View(query_,initialViewCache){_classCallCheck(this,View);this.query_=query_;this.eventRegistrations_=[];var params=this.query_.getQueryParams();var indexFilter=new IndexedFilter(params.getIndex());var filter=params.getNodeFilter();/**
         * @type {ViewProcessor}
         * @private
         */this.processor_=new ViewProcessor(filter);var initialServerCache=initialViewCache.getServerCache();var initialEventCache=initialViewCache.getEventCache();// Don't filter server node with other filter than index, wait for tagged listen
var serverSnap=indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE,initialServerCache.getNode(),null);var eventSnap=filter.updateFullNode(ChildrenNode.EMPTY_NODE,initialEventCache.getNode(),null);var newServerCache=new CacheNode(serverSnap,initialServerCache.isFullyInitialized(),indexFilter.filtersNodes());var newEventCache=new CacheNode(eventSnap,initialEventCache.isFullyInitialized(),filter.filtersNodes());/**
         * @type {!ViewCache}
         * @private
         */this.viewCache_=new ViewCache(newEventCache,newServerCache);/**
         * @type {!EventGenerator}
         * @private
         */this.eventGenerator_=new EventGenerator(this.query_);}/**
     * @return {!Query}
     */_createClass(View,[{key:"getQuery",value:function getQuery(){return this.query_;}/**
     * @return {?Node}
     */},{key:"getServerCache",value:function getServerCache(){return this.viewCache_.getServerCache().getNode();}/**
     * @param {!Path} path
     * @return {?Node}
     */},{key:"getCompleteServerCache",value:function getCompleteServerCache(path){var cache=this.viewCache_.getCompleteServerSnap();if(cache){// If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
// we need to see if it contains the child we're interested in.
if(this.query_.getQueryParams().loadsAllData()||!path.isEmpty()&&!cache.getImmediateChild(path.getFront()).isEmpty()){return cache.getChild(path);}}return null;}/**
     * @return {boolean}
     */},{key:"isEmpty",value:function isEmpty(){return this.eventRegistrations_.length===0;}/**
     * @param {!EventRegistration} eventRegistration
     */},{key:"addEventRegistration",value:function addEventRegistration(eventRegistration){this.eventRegistrations_.push(eventRegistration);}/**
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
     */},{key:"removeEventRegistration",value:function removeEventRegistration(eventRegistration,cancelError){var cancelEvents=[];if(cancelError){(0,_util.assert)(eventRegistration==null,'A cancel should cancel all event registrations.');var path=this.query_.path;this.eventRegistrations_.forEach(function(registration){cancelError/** @type {!Error} */=cancelError;var maybeEvent=registration.createCancelEvent(cancelError,path);if(maybeEvent){cancelEvents.push(maybeEvent);}});}if(eventRegistration){var remaining=[];for(var i=0;i<this.eventRegistrations_.length;++i){var existing=this.eventRegistrations_[i];if(!existing.matches(eventRegistration)){remaining.push(existing);}else if(eventRegistration.hasAnyCallback()){// We're removing just this one
remaining=remaining.concat(this.eventRegistrations_.slice(i+1));break;}}this.eventRegistrations_=remaining;}else{this.eventRegistrations_=[];}return cancelEvents;}/**
     * Applies the given Operation, updates our cache, and returns the appropriate events.
     *
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @return {!Array.<!Event>}
     */},{key:"applyOperation",value:function applyOperation(operation,writesCache,completeServerCache){if(operation.type===OperationType.MERGE&&operation.source.queryId!==null){(0,_util.assert)(this.viewCache_.getCompleteServerSnap(),'We should always have a full cache before handling merges');(0,_util.assert)(this.viewCache_.getCompleteEventSnap(),'Missing event cache, even though we have a server cache');}var oldViewCache=this.viewCache_;var result=this.processor_.applyOperation(oldViewCache,operation,writesCache,completeServerCache);this.processor_.assertIndexed(result.viewCache);(0,_util.assert)(result.viewCache.getServerCache().isFullyInitialized()||!oldViewCache.getServerCache().isFullyInitialized(),'Once a server snap is complete, it should never go back');this.viewCache_=result.viewCache;return this.generateEventsForChanges_(result.changes,result.viewCache.getEventCache().getNode(),null);}/**
     * @param {!EventRegistration} registration
     * @return {!Array.<!Event>}
     */},{key:"getInitialEvents",value:function getInitialEvents(registration){var eventSnap=this.viewCache_.getEventCache();var initialChanges=[];if(!eventSnap.getNode().isLeafNode()){var eventNode=eventSnap.getNode();eventNode.forEachChild(PRIORITY_INDEX,function(key,childNode){initialChanges.push(Change.childAddedChange(key,childNode));});}if(eventSnap.isFullyInitialized()){initialChanges.push(Change.valueChange(eventSnap.getNode()));}return this.generateEventsForChanges_(initialChanges,eventSnap.getNode(),registration);}/**
     * @private
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {EventRegistration=} eventRegistration
     * @return {!Array.<!Event>}
     */},{key:"generateEventsForChanges_",value:function generateEventsForChanges_(changes,eventCache,eventRegistration){var registrations=eventRegistration?[eventRegistration]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(changes,eventCache,registrations);}}]);return View;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var __referenceConstructor$1;/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */var SyncPoint=/*#__PURE__*/function(){function SyncPoint(){_classCallCheck(this,SyncPoint);/**
         * The Views being tracked at this location in the tree, stored as a map where the key is a
         * queryId and the value is the View for that query.
         *
         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
         */this.views=new Map();}_createClass(SyncPoint,[{key:"isEmpty",value:function isEmpty(){return this.views.size===0;}},{key:"applyOperation",value:function applyOperation(operation,writesCache,optCompleteServerCache){var queryId=operation.source.queryId;if(queryId!==null){var view=this.views.get(queryId);(0,_util.assert)(view!=null,'SyncTree gave us an op for an invalid query.');return view.applyOperation(operation,writesCache,optCompleteServerCache);}else{var events=[];var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=this.views.values()[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _view=_step2.value;events=events.concat(_view.applyOperation(operation,writesCache,optCompleteServerCache));}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2["return"]!=null){_iterator2["return"]();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}return events;}}/**
     * Add an event callback for the specified query.
     *
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache Complete server cache, if we have it.
     * @param {boolean} serverCacheComplete
     * @return {!Array.<!Event>} Events to raise.
     */},{key:"addEventRegistration",value:function addEventRegistration(query,eventRegistration,writesCache,serverCache,serverCacheComplete){var queryId=query.queryIdentifier();var view=this.views.get(queryId);if(!view){// TODO: make writesCache take flag for complete server node
var eventCache=writesCache.calcCompleteEventCache(serverCacheComplete?serverCache:null);var eventCacheComplete=false;if(eventCache){eventCacheComplete=true;}else if(serverCache instanceof ChildrenNode){eventCache=writesCache.calcCompleteEventChildren(serverCache);eventCacheComplete=false;}else{eventCache=ChildrenNode.EMPTY_NODE;eventCacheComplete=false;}var viewCache=new ViewCache(new CacheNode(/** @type {!Node} */eventCache,eventCacheComplete,false),new CacheNode(/** @type {!Node} */serverCache,serverCacheComplete,false));view=new View(query,viewCache);this.views.set(queryId,view);}// This is guaranteed to exist now, we just created anything that was missing
view.addEventRegistration(eventRegistration);return view.getInitialEvents(eventRegistration);}/**
     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
     *
     * If query is the default query, we'll check all views for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
     *
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
     */},{key:"removeEventRegistration",value:function removeEventRegistration(query,eventRegistration,cancelError){var queryId=query.queryIdentifier();var removed=[];var cancelEvents=[];var hadCompleteView=this.hasCompleteView();if(queryId==='default'){// When you do ref.off(...), we search all views for the registration to remove.
var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=this.views.entries()[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var _step3$value=_slicedToArray(_step3.value,2),viewQueryId=_step3$value[0],view=_step3$value[1];cancelEvents=cancelEvents.concat(view.removeEventRegistration(eventRegistration,cancelError));if(view.isEmpty()){this.views["delete"](viewQueryId);// We'll deal with complete views later.
if(!view.getQuery().getQueryParams().loadsAllData()){removed.push(view.getQuery());}}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3["return"]!=null){_iterator3["return"]();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}}else{// remove the callback from the specific view.
var _view2=this.views.get(queryId);if(_view2){cancelEvents=cancelEvents.concat(_view2.removeEventRegistration(eventRegistration,cancelError));if(_view2.isEmpty()){this.views["delete"](queryId);// We'll deal with complete views later.
if(!_view2.getQuery().getQueryParams().loadsAllData()){removed.push(_view2.getQuery());}}}}if(hadCompleteView&&!this.hasCompleteView()){// We removed our last complete view.
removed.push(new SyncPoint.__referenceConstructor(query.repo,query.path));}return{removed:removed,events:cancelEvents};}},{key:"getQueryViews",value:function getQueryViews(){var result=[];var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=this.views.values()[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var view=_step4.value;if(!view.getQuery().getQueryParams().loadsAllData()){result.push(view);}}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4["return"]!=null){_iterator4["return"]();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}return result;}/**
     * @param path The path to the desired complete snapshot
     * @return A complete cache, if it exists
     */},{key:"getCompleteServerCache",value:function getCompleteServerCache(path){var serverCache=null;var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=this.views.values()[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var view=_step5.value;serverCache=serverCache||view.getCompleteServerCache(path);}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5["return"]!=null){_iterator5["return"]();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}return serverCache;}},{key:"viewForQuery",value:function viewForQuery(query){var params=query.getQueryParams();if(params.loadsAllData()){return this.getCompleteView();}else{var queryId=query.queryIdentifier();return this.views.get(queryId);}}},{key:"viewExistsForQuery",value:function viewExistsForQuery(query){return this.viewForQuery(query)!=null;}},{key:"hasCompleteView",value:function hasCompleteView(){return this.getCompleteView()!=null;}},{key:"getCompleteView",value:function getCompleteView(){var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=this.views.values()[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var view=_step6.value;if(view.getQuery().getQueryParams().loadsAllData()){return view;}}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6["return"]!=null){_iterator6["return"]();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}return null;}}],[{key:"__referenceConstructor",set:function set(val){(0,_util.assert)(!__referenceConstructor$1,'__referenceConstructor has already been defined');__referenceConstructor$1=val;},get:function get(){(0,_util.assert)(__referenceConstructor$1,'Reference.ts has not been loaded');return __referenceConstructor$1;}}]);return SyncPoint;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 */var CompoundWrite=/*#__PURE__*/function(){function CompoundWrite(writeTree_){_classCallCheck(this,CompoundWrite);this.writeTree_=writeTree_;}_createClass(CompoundWrite,[{key:"addWrite",value:function addWrite(path,node){if(path.isEmpty()){return new CompoundWrite(new ImmutableTree(node));}else{var rootmost=this.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){var rootMostPath=rootmost.path;var value=rootmost.value;var relativePath=Path.relativePath(rootMostPath,path);value=value.updateChild(relativePath,node);return new CompoundWrite(this.writeTree_.set(rootMostPath,value));}else{var subtree=new ImmutableTree(node);var newWriteTree=this.writeTree_.setTree(path,subtree);return new CompoundWrite(newWriteTree);}}}},{key:"addWrites",value:function addWrites(path,updates){var newWrite=this;each(updates,function(childKey,node){newWrite=newWrite.addWrite(path.child(childKey),node);});return newWrite;}/**
     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
     * location, which must be removed by calling this method with that path.
     *
     * @param path The path at which a write and all deeper writes should be removed
     * @return {!CompoundWrite} The new CompoundWrite with the removed path
     */},{key:"removeWrite",value:function removeWrite(path){if(path.isEmpty()){return CompoundWrite.Empty;}else{var newWriteTree=this.writeTree_.setTree(path,ImmutableTree.Empty);return new CompoundWrite(newWriteTree);}}/**
     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
     * considered "complete".
     *
     * @param path The path to check for
     * @return Whether there is a complete write at that path
     */},{key:"hasCompleteWrite",value:function hasCompleteWrite(path){return this.getCompleteNode(path)!=null;}/**
     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
     * writes from deeper paths, but will return child nodes from a more shallow path.
     *
     * @param path The path to get a complete write
     * @return The node if complete at that path, or null otherwise.
     */},{key:"getCompleteNode",value:function getCompleteNode(path){var rootmost=this.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path,path));}else{return null;}}/**
     * Returns all children that are guaranteed to be a complete overwrite.
     *
     * @return A list of all complete children.
     */},{key:"getCompleteChildren",value:function getCompleteChildren(){var children=[];var node=this.writeTree_.value;if(node!=null){// If it's a leaf node, it has no children; so nothing to do.
if(!node.isLeafNode()){node.forEachChild(PRIORITY_INDEX,function(childName,childNode){children.push(new NamedNode(childName,childNode));});}}else{this.writeTree_.children.inorderTraversal(function(childName,childTree){if(childTree.value!=null){children.push(new NamedNode(childName,childTree.value));}});}return children;}},{key:"childCompoundWrite",value:function childCompoundWrite(path){if(path.isEmpty()){return this;}else{var shadowingNode=this.getCompleteNode(path);if(shadowingNode!=null){return new CompoundWrite(new ImmutableTree(shadowingNode));}else{return new CompoundWrite(this.writeTree_.subtree(path));}}}/**
     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
     * @return Whether this CompoundWrite is empty
     */},{key:"isEmpty",value:function isEmpty(){return this.writeTree_.isEmpty();}/**
     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
     * node
     * @param node The node to apply this CompoundWrite to
     * @return The node with all writes applied
     */},{key:"apply",value:function apply(node){return applySubtreeWrite(Path.Empty,this.writeTree_,node);}}]);return CompoundWrite;}();CompoundWrite.Empty=new CompoundWrite(new ImmutableTree(null));function applySubtreeWrite(relativePath,writeTree,node){if(writeTree.value!=null){// Since there a write is always a leaf, we're done here
return node.updateChild(relativePath,writeTree.value);}else{var priorityWrite=null;writeTree.children.inorderTraversal(function(childKey,childTree){if(childKey==='.priority'){// Apply priorities at the end so we don't update priorities for either empty nodes or forget
// to apply priorities to empty nodes that are later filled
(0,_util.assert)(childTree.value!==null,'Priority writes must always be leaf nodes');priorityWrite=childTree.value;}else{node=applySubtreeWrite(relativePath.child(childKey),childTree,node);}});// If there was a priority write, we only apply it if the node is not empty
if(!node.getChild(relativePath).isEmpty()&&priorityWrite!==null){node=node.updateChild(relativePath.child('.priority'),priorityWrite);}return node;}}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
 * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
 * and addMerge(), and removed with removeWrite().
 *
 * @constructor
 */var WriteTree=/*#__PURE__*/function(){function WriteTree(){_classCallCheck(this,WriteTree);/**
         * A tree tracking the result of applying all visible writes.  This does not include transactions with
         * applyLocally=false or writes that are completely shadowed by other writes.
         *
         * @type {!CompoundWrite}
         * @private
         */this.visibleWrites_=CompoundWrite.Empty;/**
         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
         * used by transactions).
         *
         * @type {!Array.<!WriteRecord>}
         * @private
         */this.allWrites_=[];this.lastWriteId_=-1;}/**
     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
     *
     * @param {!Path} path
     * @return {!WriteTreeRef}
     */_createClass(WriteTree,[{key:"childWrites",value:function childWrites(path){return new WriteTreeRef(path,this);}/**
     * Record a new overwrite from user code.
     *
     * @param {!Path} path
     * @param {!Node} snap
     * @param {!number} writeId
     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
     */},{key:"addOverwrite",value:function addOverwrite(path,snap,writeId,visible){(0,_util.assert)(writeId>this.lastWriteId_,'Stacking an older write on top of newer ones');if(visible===undefined){visible=true;}this.allWrites_.push({path:path,snap:snap,writeId:writeId,visible:visible});if(visible){this.visibleWrites_=this.visibleWrites_.addWrite(path,snap);}this.lastWriteId_=writeId;}/**
     * Record a new merge from user code.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} writeId
     */},{key:"addMerge",value:function addMerge(path,changedChildren,writeId){(0,_util.assert)(writeId>this.lastWriteId_,'Stacking an older merge on top of newer ones');this.allWrites_.push({path:path,children:changedChildren,writeId:writeId,visible:true});this.visibleWrites_=this.visibleWrites_.addWrites(path,changedChildren);this.lastWriteId_=writeId;}/**
     * @param {!number} writeId
     * @return {?WriteRecord}
     */},{key:"getWrite",value:function getWrite(writeId){for(var i=0;i<this.allWrites_.length;i++){var record=this.allWrites_[i];if(record.writeId===writeId){return record;}}return null;}/**
     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
     *
     * @param {!number} writeId
     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
     * events as a result).
     */},{key:"removeWrite",value:function removeWrite(writeId){var _this10=this;// Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
// out of order.
//const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
//assert(validClear, "Either we don't have this write, or it's the first one in the queue");
var idx=this.allWrites_.findIndex(function(s){return s.writeId===writeId;});(0,_util.assert)(idx>=0,'removeWrite called with nonexistent writeId.');var writeToRemove=this.allWrites_[idx];this.allWrites_.splice(idx,1);var removedWriteWasVisible=writeToRemove.visible;var removedWriteOverlapsWithOtherWrites=false;var i=this.allWrites_.length-1;while(removedWriteWasVisible&&i>=0){var currentWrite=this.allWrites_[i];if(currentWrite.visible){if(i>=idx&&this.recordContainsPath_(currentWrite,writeToRemove.path)){// The removed write was completely shadowed by a subsequent write.
removedWriteWasVisible=false;}else if(writeToRemove.path.contains(currentWrite.path)){// Either we're covering some writes or they're covering part of us (depending on which came first).
removedWriteOverlapsWithOtherWrites=true;}}i--;}if(!removedWriteWasVisible){return false;}else if(removedWriteOverlapsWithOtherWrites){// There's some shadowing going on. Just rebuild the visible writes from scratch.
this.resetTree_();return true;}else{// There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
if(writeToRemove.snap){this.visibleWrites_=this.visibleWrites_.removeWrite(writeToRemove.path);}else{var children=writeToRemove.children;each(children,function(childName){_this10.visibleWrites_=_this10.visibleWrites_.removeWrite(writeToRemove.path.child(childName));});}return true;}}/**
     * Return a complete snapshot for the given path if there's visible write data at that path, else null.
     * No server data is considered.
     *
     * @param {!Path} path
     * @return {?Node}
     */},{key:"getCompleteWriteData",value:function getCompleteWriteData(path){return this.visibleWrites_.getCompleteNode(path);}/**
     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
     * writes), attempt to calculate a complete snapshot for the given path
     *
     * @param {!Path} treePath
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */},{key:"calcCompleteEventCache",value:function calcCompleteEventCache(treePath,completeServerCache,writeIdsToExclude,includeHiddenWrites){if(!writeIdsToExclude&&!includeHiddenWrites){var shadowingNode=this.visibleWrites_.getCompleteNode(treePath);if(shadowingNode!=null){return shadowingNode;}else{var subMerge=this.visibleWrites_.childCompoundWrite(treePath);if(subMerge.isEmpty()){return completeServerCache;}else if(completeServerCache==null&&!subMerge.hasCompleteWrite(Path.Empty)){// We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
return null;}else{var layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return subMerge.apply(layeredCache);}}}else{var merge=this.visibleWrites_.childCompoundWrite(treePath);if(!includeHiddenWrites&&merge.isEmpty()){return completeServerCache;}else{// If the server cache is null, and we don't have a complete cache, we need to return null
if(!includeHiddenWrites&&completeServerCache==null&&!merge.hasCompleteWrite(Path.Empty)){return null;}else{var filter=function filter(write){return(write.visible||includeHiddenWrites)&&(!writeIdsToExclude||!~writeIdsToExclude.indexOf(write.writeId))&&(write.path.contains(treePath)||treePath.contains(write.path));};var mergeAtPath=WriteTree.layerTree_(this.allWrites_,filter,treePath);var _layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return mergeAtPath.apply(_layeredCache);}}}}/**
     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
     * Used when creating new views, to pre-fill their complete event children snapshot.
     *
     * @param {!Path} treePath
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */},{key:"calcCompleteEventChildren",value:function calcCompleteEventChildren(treePath,completeServerChildren){var completeChildren=ChildrenNode.EMPTY_NODE;var topLevelSet=this.visibleWrites_.getCompleteNode(treePath);if(topLevelSet){if(!topLevelSet.isLeafNode()){// we're shadowing everything. Return the children.
topLevelSet.forEachChild(PRIORITY_INDEX,function(childName,childSnap){completeChildren=completeChildren.updateImmediateChild(childName,childSnap);});}return completeChildren;}else if(completeServerChildren){// Layer any children we have on top of this
// We know we don't have a top-level set, so just enumerate existing children
var merge=this.visibleWrites_.childCompoundWrite(treePath);completeServerChildren.forEachChild(PRIORITY_INDEX,function(childName,childNode){var node=merge.childCompoundWrite(new Path(childName)).apply(childNode);completeChildren=completeChildren.updateImmediateChild(childName,node);});// Add any complete children we have from the set
merge.getCompleteChildren().forEach(function(namedNode){completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}else{// We don't have anything to layer on top of. Layer on any children we have
// Note that we can return an empty snap if we have a defined delete
var _merge=this.visibleWrites_.childCompoundWrite(treePath);_merge.getCompleteChildren().forEach(function(namedNode){completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}}/**
     * Given that the underlying server data has updated, determine what, if anything, needs to be
     * applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events
     *
     * Either existingEventSnap or existingServerSnap must exist
     *
     * @param {!Path} treePath
     * @param {!Path} childPath
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */},{key:"calcEventCacheAfterServerOverwrite",value:function calcEventCacheAfterServerOverwrite(treePath,childPath,existingEventSnap,existingServerSnap){(0,_util.assert)(existingEventSnap||existingServerSnap,'Either existingEventSnap or existingServerSnap must exist');var path=treePath.child(childPath);if(this.visibleWrites_.hasCompleteWrite(path)){// At this point we can probably guarantee that we're in case 2, meaning no events
// May need to check visibility while doing the findRootMostValueAndPath call
return null;}else{// No complete shadowing. We're either partially shadowing or not shadowing at all.
var childMerge=this.visibleWrites_.childCompoundWrite(path);if(childMerge.isEmpty()){// We're not shadowing at all. Case 1
return existingServerSnap.getChild(childPath);}else{// This could be more efficient if the serverNode + updates doesn't change the eventSnap
// However this is tricky to find out, since user updates don't necessary change the server
// snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
// adds nodes, but doesn't change any existing writes. It is therefore not enough to
// only check if the updates change the serverNode.
// Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
return childMerge.apply(existingServerSnap.getChild(childPath));}}}/**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!Path} treePath
     * @param {!string} childKey
     * @param {!CacheNode} existingServerSnap
     * @return {?Node}
     */},{key:"calcCompleteChild",value:function calcCompleteChild(treePath,childKey,existingServerSnap){var path=treePath.child(childKey);var shadowingNode=this.visibleWrites_.getCompleteNode(path);if(shadowingNode!=null){return shadowingNode;}else{if(existingServerSnap.isCompleteForChild(childKey)){var childMerge=this.visibleWrites_.childCompoundWrite(path);return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));}else{return null;}}}/**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     */},{key:"shadowingWrite",value:function shadowingWrite(path){return this.visibleWrites_.getCompleteNode(path);}/**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window.
     */},{key:"calcIndexedSlice",value:function calcIndexedSlice(treePath,completeServerData,startPost,count,reverse,index){var toIterate;var merge=this.visibleWrites_.childCompoundWrite(treePath);var shadowingNode=merge.getCompleteNode(Path.Empty);if(shadowingNode!=null){toIterate=shadowingNode;}else if(completeServerData!=null){toIterate=merge.apply(completeServerData);}else{// no children to iterate on
return[];}toIterate=toIterate.withIndex(index);if(!toIterate.isEmpty()&&!toIterate.isLeafNode()){var nodes=[];var _cmp=index.getCompare();var iter=reverse?toIterate.getReverseIteratorFrom(startPost,index):toIterate.getIteratorFrom(startPost,index);var next=iter.getNext();while(next&&nodes.length<count){if(_cmp(next,startPost)!==0){nodes.push(next);}next=iter.getNext();}return nodes;}else{return[];}}},{key:"recordContainsPath_",value:function recordContainsPath_(writeRecord,path){if(writeRecord.snap){return writeRecord.path.contains(path);}else{for(var childName in writeRecord.children){if(writeRecord.children.hasOwnProperty(childName)&&writeRecord.path.child(childName).contains(path)){return true;}}return false;}}/**
     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
     */},{key:"resetTree_",value:function resetTree_(){this.visibleWrites_=WriteTree.layerTree_(this.allWrites_,WriteTree.DefaultFilter_,Path.Empty);if(this.allWrites_.length>0){this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId;}else{this.lastWriteId_=-1;}}/**
     * The default filter used when constructing the tree. Keep everything that's visible.
     */}],[{key:"DefaultFilter_",value:function DefaultFilter_(write){return write.visible;}/**
     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
     * event data at that path.
     */},{key:"layerTree_",value:function layerTree_(writes,filter,treeRoot){var compoundWrite=CompoundWrite.Empty;for(var i=0;i<writes.length;++i){var write=writes[i];// Theory, a later set will either:
// a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
// b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
if(filter(write)){var writePath=write.path;var relativePath=void 0;if(write.snap){if(treeRoot.contains(writePath)){relativePath=Path.relativePath(treeRoot,writePath);compoundWrite=compoundWrite.addWrite(relativePath,write.snap);}else if(writePath.contains(treeRoot)){relativePath=Path.relativePath(writePath,treeRoot);compoundWrite=compoundWrite.addWrite(Path.Empty,write.snap.getChild(relativePath));}else;}else if(write.children){if(treeRoot.contains(writePath)){relativePath=Path.relativePath(treeRoot,writePath);compoundWrite=compoundWrite.addWrites(relativePath,write.children);}else if(writePath.contains(treeRoot)){relativePath=Path.relativePath(writePath,treeRoot);if(relativePath.isEmpty()){compoundWrite=compoundWrite.addWrites(Path.Empty,write.children);}else{var child=(0,_util.safeGet)(write.children,relativePath.getFront());if(child){// There exists a child in this node that matches the root path
var deepNode=child.getChild(relativePath.popFront());compoundWrite=compoundWrite.addWrite(Path.Empty,deepNode);}}}else;}else{throw(0,_util.assertionError)('WriteRecord should have .snap or .children');}}}return compoundWrite;}}]);return WriteTree;}();/**
 * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
 * just proxy to the underlying WriteTree.
 *
 * @constructor
 */var WriteTreeRef=/*#__PURE__*/function(){/**
     * @param {!Path} path
     * @param {!WriteTree} writeTree
     */function WriteTreeRef(path,writeTree){_classCallCheck(this,WriteTreeRef);this.treePath_=path;this.writeTree_=writeTree;}/**
     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
     * can lead to a more expensive calculation.
     *
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */_createClass(WriteTreeRef,[{key:"calcCompleteEventCache",value:function calcCompleteEventCache(completeServerCache,writeIdsToExclude,includeHiddenWrites){return this.writeTree_.calcCompleteEventCache(this.treePath_,completeServerCache,writeIdsToExclude,includeHiddenWrites);}/**
     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
     * mix of the given server data and write data.
     *
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */},{key:"calcCompleteEventChildren",value:function calcCompleteEventChildren(completeServerChildren){return this.writeTree_.calcCompleteEventChildren(this.treePath_,completeServerChildren);}/**
     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
     * if anything, needs to be applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events should be raised
     *
     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
     *
     * @param {!Path} path
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */},{key:"calcEventCacheAfterServerOverwrite",value:function calcEventCacheAfterServerOverwrite(path,existingEventSnap,existingServerSnap){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,path,existingEventSnap,existingServerSnap);}/**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     *
     * @param {!Path} path
     * @return {?Node}
     */},{key:"shadowingWrite",value:function shadowingWrite(path){return this.writeTree_.shadowingWrite(this.treePath_.child(path));}/**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window
     *
     * @param {?Node} completeServerData
     * @param {!NamedNode} startPost
     * @param {!number} count
     * @param {boolean} reverse
     * @param {!Index} index
     * @return {!Array.<!NamedNode>}
     */},{key:"calcIndexedSlice",value:function calcIndexedSlice(completeServerData,startPost,count,reverse,index){return this.writeTree_.calcIndexedSlice(this.treePath_,completeServerData,startPost,count,reverse,index);}/**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!string} childKey
     * @param {!CacheNode} existingServerCache
     * @return {?Node}
     */},{key:"calcCompleteChild",value:function calcCompleteChild(childKey,existingServerCache){return this.writeTree_.calcCompleteChild(this.treePath_,childKey,existingServerCache);}/**
     * Return a WriteTreeRef for a child.
     *
     * @param {string} childName
     * @return {!WriteTreeRef}
     */},{key:"child",value:function child(childName){return new WriteTreeRef(this.treePath_.child(childName),this.writeTree_);}}]);return WriteTreeRef;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 * @constructor
 */var SyncTree=/*#__PURE__*/function(){/**
     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
     *   to server data.
     */function SyncTree(listenProvider_){_classCallCheck(this,SyncTree);this.listenProvider_=listenProvider_;/**
         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
         */this.syncPointTree_=ImmutableTree.Empty;/**
         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
         */this.pendingWriteTree_=new WriteTree();this.tagToQueryMap=new Map();this.queryToTagMap=new Map();}/**
     * Apply the data changes for a user-generated set() or transaction() call.
     *
     * @return Events to raise.
     */_createClass(SyncTree,[{key:"applyUserOverwrite",value:function applyUserOverwrite(path,newData,writeId,visible){// Record pending write.
this.pendingWriteTree_.addOverwrite(path,newData,writeId,visible);if(!visible){return[];}else{return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User,path,newData));}}/**
     * Apply the data from a user-generated update() call
     *
     * @return Events to raise.
     */},{key:"applyUserMerge",value:function applyUserMerge(path,changedChildren,writeId){// Record pending merge.
this.pendingWriteTree_.addMerge(path,changedChildren,writeId);var changeTree=ImmutableTree.fromObject(changedChildren);return this.applyOperationToSyncPoints_(new Merge(OperationSource.User,path,changeTree));}/**
     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
     *
     * @param revert True if the given write failed and needs to be reverted
     * @return Events to raise.
     */},{key:"ackUserWrite",value:function ackUserWrite(writeId){var revert=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var write=this.pendingWriteTree_.getWrite(writeId);var needToReevaluate=this.pendingWriteTree_.removeWrite(writeId);if(!needToReevaluate){return[];}else{var affectedTree=ImmutableTree.Empty;if(write.snap!=null){// overwrite
affectedTree=affectedTree.set(Path.Empty,true);}else{each(write.children,function(pathString,node){affectedTree=affectedTree.set(new Path(pathString),node);});}return this.applyOperationToSyncPoints_(new AckUserWrite(write.path,affectedTree,revert));}}/**
     * Apply new server data for the specified path..
     *
     * @return Events to raise.
     */},{key:"applyServerOverwrite",value:function applyServerOverwrite(path,newData){return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server,path,newData));}/**
     * Apply new server data to be merged in at the specified path.
     *
     * @return Events to raise.
     */},{key:"applyServerMerge",value:function applyServerMerge(path,changedChildren){var changeTree=ImmutableTree.fromObject(changedChildren);return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server,path,changeTree));}/**
     * Apply a listen complete for a query
     *
     * @return Events to raise.
     */},{key:"applyListenComplete",value:function applyListenComplete(path){return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server,path));}/**
     * Apply new server data for the specified tagged query.
     *
     * @return Events to raise.
     */},{key:"applyTaggedQueryOverwrite",value:function applyTaggedQueryOverwrite(path,snap,tag){var queryKey=this.queryKeyForTag_(tag);if(queryKey!=null){var r=SyncTree.parseQueryKey_(queryKey);var queryPath=r.path,queryId=r.queryId;var relativePath=Path.relativePath(queryPath,path);var op=new Overwrite(OperationSource.forServerTaggedQuery(queryId),relativePath,snap);return this.applyTaggedOperation_(queryPath,op);}else{// Query must have been removed already
return[];}}/**
     * Apply server data to be merged in for the specified tagged query.
     *
     * @return Events to raise.
     */},{key:"applyTaggedQueryMerge",value:function applyTaggedQueryMerge(path,changedChildren,tag){var queryKey=this.queryKeyForTag_(tag);if(queryKey){var r=SyncTree.parseQueryKey_(queryKey);var queryPath=r.path,queryId=r.queryId;var relativePath=Path.relativePath(queryPath,path);var changeTree=ImmutableTree.fromObject(changedChildren);var op=new Merge(OperationSource.forServerTaggedQuery(queryId),relativePath,changeTree);return this.applyTaggedOperation_(queryPath,op);}else{// We've already removed the query. No big deal, ignore the update
return[];}}/**
     * Apply a listen complete for a tagged query
     *
     * @return Events to raise.
     */},{key:"applyTaggedListenComplete",value:function applyTaggedListenComplete(path,tag){var queryKey=this.queryKeyForTag_(tag);if(queryKey){var r=SyncTree.parseQueryKey_(queryKey);var queryPath=r.path,queryId=r.queryId;var relativePath=Path.relativePath(queryPath,path);var op=new ListenComplete(OperationSource.forServerTaggedQuery(queryId),relativePath);return this.applyTaggedOperation_(queryPath,op);}else{// We've already removed the query. No big deal, ignore the update
return[];}}/**
     * Add an event callback for the specified query.
     *
     * @return Events to raise.
     */},{key:"addEventRegistration",value:function addEventRegistration(query,eventRegistration){var path=query.path;var serverCache=null;var foundAncestorDefaultView=false;// Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
// Consider optimizing this once there's a better understanding of what actual behavior will be.
this.syncPointTree_.foreachOnPath(path,function(pathToSyncPoint,sp){var relativePath=Path.relativePath(pathToSyncPoint,path);serverCache=serverCache||sp.getCompleteServerCache(relativePath);foundAncestorDefaultView=foundAncestorDefaultView||sp.hasCompleteView();});var syncPoint=this.syncPointTree_.get(path);if(!syncPoint){syncPoint=new SyncPoint();this.syncPointTree_=this.syncPointTree_.set(path,syncPoint);}else{foundAncestorDefaultView=foundAncestorDefaultView||syncPoint.hasCompleteView();serverCache=serverCache||syncPoint.getCompleteServerCache(Path.Empty);}var serverCacheComplete;if(serverCache!=null){serverCacheComplete=true;}else{serverCacheComplete=false;serverCache=ChildrenNode.EMPTY_NODE;var subtree=this.syncPointTree_.subtree(path);subtree.foreachChild(function(childName,childSyncPoint){var completeCache=childSyncPoint.getCompleteServerCache(Path.Empty);if(completeCache){serverCache=serverCache.updateImmediateChild(childName,completeCache);}});}var viewAlreadyExists=syncPoint.viewExistsForQuery(query);if(!viewAlreadyExists&&!query.getQueryParams().loadsAllData()){// We need to track a tag for this query
var queryKey=SyncTree.makeQueryKey_(query);(0,_util.assert)(!this.queryToTagMap.has(queryKey),'View does not exist, but we have a tag');var tag=SyncTree.getNextQueryTag_();this.queryToTagMap.set(queryKey,tag);this.tagToQueryMap.set(tag,queryKey);}var writesCache=this.pendingWriteTree_.childWrites(path);var events=syncPoint.addEventRegistration(query,eventRegistration,writesCache,serverCache,serverCacheComplete);if(!viewAlreadyExists&&!foundAncestorDefaultView){var view/** @type !View */=syncPoint.viewForQuery(query);events=events.concat(this.setupListener_(query,view));}return events;}/**
     * Remove event callback(s).
     *
     * If query is the default query, we'll check all queries for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
     *
     * @param eventRegistration If null, all callbacks are removed.
     * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return Cancel events, if cancelError was provided.
     */},{key:"removeEventRegistration",value:function removeEventRegistration(query,eventRegistration,cancelError){var _this11=this;// Find the syncPoint first. Then deal with whether or not it has matching listeners
var path=query.path;var maybeSyncPoint=this.syncPointTree_.get(path);var cancelEvents=[];// A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
// other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
// not loadsAllData().
if(maybeSyncPoint&&(query.queryIdentifier()==='default'||maybeSyncPoint.viewExistsForQuery(query))){/**
             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
             */var removedAndEvents=maybeSyncPoint.removeEventRegistration(query,eventRegistration,cancelError);if(maybeSyncPoint.isEmpty()){this.syncPointTree_=this.syncPointTree_.remove(path);}var removed=removedAndEvents.removed;cancelEvents=removedAndEvents.events;// We may have just removed one of many listeners and can short-circuit this whole process
// We may also not have removed a default listener, in which case all of the descendant listeners should already be
// properly set up.
//
// Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
// queryId === 'default'
var removingDefault=-1!==removed.findIndex(function(query){return query.getQueryParams().loadsAllData();});var covered=this.syncPointTree_.findOnPath(path,function(relativePath,parentSyncPoint){return parentSyncPoint.hasCompleteView();});if(removingDefault&&!covered){var subtree=this.syncPointTree_.subtree(path);// There are potentially child listeners. Determine what if any listens we need to send before executing the
// removal
if(!subtree.isEmpty()){// We need to fold over our subtree and collect the listeners to send
var newViews=this.collectDistinctViewsForSubTree_(subtree);// Ok, we've collected all the listens we need. Set them up.
for(var i=0;i<newViews.length;++i){var view=newViews[i],newQuery=view.getQuery();var listener=this.createListenerForView_(view);this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery),this.tagForQuery_(newQuery),listener.hashFn,listener.onComplete);}}}// If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
// The above block has us covered in terms of making sure we're set up on listens lower in the tree.
// Also, note that if we have a cancelError, it's already been removed at the provider level.
if(!covered&&removed.length>0&&!cancelError){// If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
// default. Otherwise, we need to iterate through and cancel each individual query
if(removingDefault){// We don't tag default listeners
var defaultTag=null;this.listenProvider_.stopListening(SyncTree.queryForListening_(query),defaultTag);}else{removed.forEach(function(queryToRemove){var tagToRemove=_this11.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));_this11.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove),tagToRemove);});}}// Now, clear all of the tags we're tracking for the removed listens
this.removeTags_(removed);}return cancelEvents;}/**
     * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
     * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
     * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
     *     <incremented total> as the write is applied locally and then acknowledged at the server.
     *
     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
     *
     * @param path The path to the data we want
     * @param writeIdsToExclude A specific set to be excluded
     */},{key:"calcCompleteEventCache",value:function calcCompleteEventCache(path,writeIdsToExclude){var includeHiddenSets=true;var writeTree=this.pendingWriteTree_;var serverCache=this.syncPointTree_.findOnPath(path,function(pathSoFar,syncPoint){var relativePath=Path.relativePath(pathSoFar,path);var serverCache=syncPoint.getCompleteServerCache(relativePath);if(serverCache){return serverCache;}});return writeTree.calcCompleteEventCache(path,serverCache,writeIdsToExclude,includeHiddenSets);}/**
     * This collapses multiple unfiltered views into a single view, since we only need a single
     * listener for them.
     */},{key:"collectDistinctViewsForSubTree_",value:function collectDistinctViewsForSubTree_(subtree){return subtree.fold(function(relativePath,maybeChildSyncPoint,childMap){if(maybeChildSyncPoint&&maybeChildSyncPoint.hasCompleteView()){var completeView=maybeChildSyncPoint.getCompleteView();return[completeView];}else{// No complete view here, flatten any deeper listens into an array
var views=[];if(maybeChildSyncPoint){views=maybeChildSyncPoint.getQueryViews();}each(childMap,function(_key,childViews){views=views.concat(childViews);});return views;}});}},{key:"removeTags_",value:function removeTags_(queries){for(var j=0;j<queries.length;++j){var removedQuery=queries[j];if(!removedQuery.getQueryParams().loadsAllData()){// We should have a tag for this
var removedQueryKey=SyncTree.makeQueryKey_(removedQuery);var removedQueryTag=this.queryToTagMap.get(removedQueryKey);this.queryToTagMap["delete"](removedQueryKey);this.tagToQueryMap["delete"](removedQueryTag);}}}/**
     * Normalizes a query to a query we send the server for listening
     *
     * @return The normalized query
     */},{key:"setupListener_",/**
     * For a given new listen, manage the de-duplication of outstanding subscriptions.
     *
     * @return This method can return events to support synchronous data sources
     */value:function setupListener_(query,view){var path=query.path;var tag=this.tagForQuery_(query);var listener=this.createListenerForView_(view);var events=this.listenProvider_.startListening(SyncTree.queryForListening_(query),tag,listener.hashFn,listener.onComplete);var subtree=this.syncPointTree_.subtree(path);// The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
// may need to shadow other listens as well.
if(tag){(0,_util.assert)(!subtree.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");}else{// Shadow everything at or below this location, this is a default listener.
var queriesToStop=subtree.fold(function(relativePath,maybeChildSyncPoint,childMap){if(!relativePath.isEmpty()&&maybeChildSyncPoint&&maybeChildSyncPoint.hasCompleteView()){return[maybeChildSyncPoint.getCompleteView().getQuery()];}else{// No default listener here, flatten any deeper queries into an array
var queries=[];if(maybeChildSyncPoint){queries=queries.concat(maybeChildSyncPoint.getQueryViews().map(function(view){return view.getQuery();}));}each(childMap,function(_key,childQueries){queries=queries.concat(childQueries);});return queries;}});for(var i=0;i<queriesToStop.length;++i){var queryToStop=queriesToStop[i];this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop),this.tagForQuery_(queryToStop));}}return events;}},{key:"createListenerForView_",value:function createListenerForView_(view){var _this12=this;var query=view.getQuery();var tag=this.tagForQuery_(query);return{hashFn:function hashFn(){var cache=view.getServerCache()||ChildrenNode.EMPTY_NODE;return cache.hash();},onComplete:function onComplete(status){if(status==='ok'){if(tag){return _this12.applyTaggedListenComplete(query.path,tag);}else{return _this12.applyListenComplete(query.path);}}else{// If a listen failed, kill all of the listeners here, not just the one that triggered the error.
// Note that this may need to be scoped to just this listener if we change permissions on filtered children
var _error2=errorForServerCode(status,query);return _this12.removeEventRegistration(query,/*eventRegistration*/null,_error2);}}};}/**
     * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
     */},{key:"queryKeyForTag_",/**
     * Return the query associated with the given tag, if we have one
     */value:function queryKeyForTag_(tag){return this.tagToQueryMap.get(tag);}/**
     * Return the tag associated with the given query.
     */},{key:"tagForQuery_",value:function tagForQuery_(query){var queryKey=SyncTree.makeQueryKey_(query);return this.queryToTagMap.get(queryKey);}/**
     * Static accessor for query tags.
     */},{key:"applyTaggedOperation_",/**
     * A helper method to apply tagged operations
     */value:function applyTaggedOperation_(queryPath,operation){var syncPoint=this.syncPointTree_.get(queryPath);(0,_util.assert)(syncPoint,"Missing sync point for query tag that we're tracking");var writesCache=this.pendingWriteTree_.childWrites(queryPath);return syncPoint.applyOperation(operation,writesCache,/*serverCache=*/null);}/**
     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
     *
     * NOTES:
     * - Descendant SyncPoints will be visited first (since we raise events depth-first).
     *
     * - We call applyOperation() on each SyncPoint passing three things:
     *   1. A version of the Operation that has been made relative to the SyncPoint location.
     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
     *   3. A snapshot Node with cached server data, if we have it.
     *
     * - We concatenate all of the events returned by each SyncPoint and return the result.
     */},{key:"applyOperationToSyncPoints_",value:function applyOperationToSyncPoints_(operation){return this.applyOperationHelper_(operation,this.syncPointTree_,/*serverCache=*/null,this.pendingWriteTree_.childWrites(Path.Empty));}/**
     * Recursive helper for applyOperationToSyncPoints_
     */},{key:"applyOperationHelper_",value:function applyOperationHelper_(operation,syncPointTree,serverCache,writesCache){if(operation.path.isEmpty()){return this.applyOperationDescendantsHelper_(operation,syncPointTree,serverCache,writesCache);}else{var syncPoint=syncPointTree.get(Path.Empty);// If we don't have cached server data, see if we can get it from this SyncPoint.
if(serverCache==null&&syncPoint!=null){serverCache=syncPoint.getCompleteServerCache(Path.Empty);}var events=[];var childName=operation.path.getFront();var childOperation=operation.operationForChild(childName);var childTree=syncPointTree.children.get(childName);if(childTree&&childOperation){var childServerCache=serverCache?serverCache.getImmediateChild(childName):null;var childWritesCache=writesCache.child(childName);events=events.concat(this.applyOperationHelper_(childOperation,childTree,childServerCache,childWritesCache));}if(syncPoint){events=events.concat(syncPoint.applyOperation(operation,writesCache,serverCache));}return events;}}/**
     * Recursive helper for applyOperationToSyncPoints_
     */},{key:"applyOperationDescendantsHelper_",value:function applyOperationDescendantsHelper_(operation,syncPointTree,serverCache,writesCache){var _this13=this;var syncPoint=syncPointTree.get(Path.Empty);// If we don't have cached server data, see if we can get it from this SyncPoint.
if(serverCache==null&&syncPoint!=null){serverCache=syncPoint.getCompleteServerCache(Path.Empty);}var events=[];syncPointTree.children.inorderTraversal(function(childName,childTree){var childServerCache=serverCache?serverCache.getImmediateChild(childName):null;var childWritesCache=writesCache.child(childName);var childOperation=operation.operationForChild(childName);if(childOperation){events=events.concat(_this13.applyOperationDescendantsHelper_(childOperation,childTree,childServerCache,childWritesCache));}});if(syncPoint){events=events.concat(syncPoint.applyOperation(operation,writesCache,serverCache));}return events;}}],[{key:"queryForListening_",value:function queryForListening_(query){if(query.getQueryParams().loadsAllData()&&!query.getQueryParams().isDefault()){// We treat queries that load all data as default queries
// Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
// from Query
return query.getRef();}else{return query;}}},{key:"makeQueryKey_",value:function makeQueryKey_(query){return query.path.toString()+'$'+query.queryIdentifier();}/**
     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
     */},{key:"parseQueryKey_",value:function parseQueryKey_(queryKey){var splitIndex=queryKey.indexOf('$');(0,_util.assert)(splitIndex!==-1&&splitIndex<queryKey.length-1,'Bad queryKey.');return{queryId:queryKey.substr(splitIndex+1),path:new Path(queryKey.substr(0,splitIndex))};}},{key:"getNextQueryTag_",value:function getNextQueryTag_(){return SyncTree.nextQueryTag_++;}}]);return SyncTree;}();/**
 * Static tracker for next query tag.
 */SyncTree.nextQueryTag_=1;/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 *
 * @constructor
 */var SnapshotHolder=/*#__PURE__*/function(){function SnapshotHolder(){_classCallCheck(this,SnapshotHolder);this.rootNode_=ChildrenNode.EMPTY_NODE;}_createClass(SnapshotHolder,[{key:"getNode",value:function getNode(path){return this.rootNode_.getChild(path);}},{key:"updateSnapshot",value:function updateSnapshot(path,newSnapshotNode){this.rootNode_=this.rootNode_.updateChild(path,newSnapshotNode);}}]);return SnapshotHolder;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Tracks a collection of stats.
 *
 * @constructor
 */var StatsCollection=/*#__PURE__*/function(){function StatsCollection(){_classCallCheck(this,StatsCollection);this.counters_={};}_createClass(StatsCollection,[{key:"incrementCounter",value:function incrementCounter(name){var amount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(!(0,_util.contains)(this.counters_,name)){this.counters_[name]=0;}this.counters_[name]+=amount;}},{key:"get",value:function get(){return(0,_util.deepCopy)(this.counters_);}}]);return StatsCollection;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var StatsManager=/*#__PURE__*/function(){function StatsManager(){_classCallCheck(this,StatsManager);}_createClass(StatsManager,null,[{key:"getCollection",value:function getCollection(repoInfo){var hashString=repoInfo.toString();if(!this.collections_[hashString]){this.collections_[hashString]=new StatsCollection();}return this.collections_[hashString];}},{key:"getOrCreateReporter",value:function getOrCreateReporter(repoInfo,creatorFunction){var hashString=repoInfo.toString();if(!this.reporters_[hashString]){this.reporters_[hashString]=creatorFunction();}return this.reporters_[hashString];}}]);return StatsManager;}();StatsManager.collections_={};StatsManager.reporters_={};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ The collection to "listen" to.
 * @constructor
 */var StatsListener=/*#__PURE__*/function(){function StatsListener(collection_){_classCallCheck(this,StatsListener);this.collection_=collection_;this.last_=null;}_createClass(StatsListener,[{key:"get",value:function get(){var newStats=this.collection_.get();var delta=Object.assign({},newStats);if(this.last_){each(this.last_,function(stat,value){delta[stat]=delta[stat]-value;});}this.last_=newStats;return delta;}}]);return StatsListener;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.
var FIRST_STATS_MIN_TIME=10*1000;var FIRST_STATS_MAX_TIME=30*1000;// We'll continue to report stats on average every 5 minutes.
var REPORT_STATS_INTERVAL=5*60*1000;/**
 * @constructor
 */var StatsReporter=/*#__PURE__*/function(){/**
     * @param collection
     * @param server_
     */function StatsReporter(collection,server_){_classCallCheck(this,StatsReporter);this.server_=server_;this.statsToReport_={};this.statsListener_=new StatsListener(collection);var timeout=FIRST_STATS_MIN_TIME+(FIRST_STATS_MAX_TIME-FIRST_STATS_MIN_TIME)*Math.random();setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(timeout));}_createClass(StatsReporter,[{key:"includeStat",value:function includeStat(stat){this.statsToReport_[stat]=true;}},{key:"reportStats_",value:function reportStats_(){var _this14=this;var stats=this.statsListener_.get();var reportedStats={};var haveStatsToReport=false;each(stats,function(stat,value){if(value>0&&(0,_util.contains)(_this14.statsToReport_,stat)){reportedStats[stat]=value;haveStatsToReport=true;}});if(haveStatsToReport){this.server_.reportStats(reportedStats);}// queue our next run.
setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(Math.random()*2*REPORT_STATS_INTERVAL));}}]);return StatsReporter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 * @constructor
 */var EventQueue=/*#__PURE__*/function(){function EventQueue(){_classCallCheck(this,EventQueue);/**
         * @private
         * @type {!Array.<EventList>}
         */this.eventLists_=[];/**
         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
         * @private
         * @type {!number}
         */this.recursionDepth_=0;}/**
     * @param {!Array.<Event>} eventDataList The new events to queue.
     */_createClass(EventQueue,[{key:"queueEvents",value:function queueEvents(eventDataList){// We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
var currList=null;for(var i=0;i<eventDataList.length;i++){var eventData=eventDataList[i];var eventPath=eventData.getPath();if(currList!==null&&!eventPath.equals(currList.getPath())){this.eventLists_.push(currList);currList=null;}if(currList===null){currList=new EventList(eventPath);}currList.add(eventData);}if(currList){this.eventLists_.push(currList);}}/**
     * Queues the specified events and synchronously raises all events (including previously queued ones)
     * for the specified path.
     *
     * It is assumed that the new events are all for the specified path.
     *
     * @param {!Path} path The path to raise events for.
     * @param {!Array.<Event>} eventDataList The new events to raise.
     */},{key:"raiseEventsAtPath",value:function raiseEventsAtPath(path,eventDataList){this.queueEvents(eventDataList);this.raiseQueuedEventsMatchingPredicate_(function(eventPath){return eventPath.equals(path);});}/**
     * Queues the specified events and synchronously raises all events (including previously queued ones) for
     * locations related to the specified change path (i.e. all ancestors and descendants).
     *
     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
     *
     * @param {!Path} changedPath The path to raise events for.
     * @param {!Array.<!Event>} eventDataList The events to raise
     */},{key:"raiseEventsForChangedPath",value:function raiseEventsForChangedPath(changedPath,eventDataList){this.queueEvents(eventDataList);this.raiseQueuedEventsMatchingPredicate_(function(eventPath){return eventPath.contains(changedPath)||changedPath.contains(eventPath);});}/**
     * @param {!function(!Path):boolean} predicate
     * @private
     */},{key:"raiseQueuedEventsMatchingPredicate_",value:function raiseQueuedEventsMatchingPredicate_(predicate){this.recursionDepth_++;var sentAll=true;for(var i=0;i<this.eventLists_.length;i++){var eventList=this.eventLists_[i];if(eventList){var eventPath=eventList.getPath();if(predicate(eventPath)){this.eventLists_[i].raise();this.eventLists_[i]=null;}else{sentAll=false;}}}if(sentAll){this.eventLists_=[];}this.recursionDepth_--;}}]);return EventQueue;}();/**
 * @param {!Path} path
 * @constructor
 */var EventList=/*#__PURE__*/function(){function EventList(path_){_classCallCheck(this,EventList);this.path_=path_;/**
         * @type {!Array.<Event>}
         * @private
         */this.events_=[];}/**
     * @param {!Event} eventData
     */_createClass(EventList,[{key:"add",value:function add(eventData){this.events_.push(eventData);}/**
     * Iterates through the list and raises each event
     */},{key:"raise",value:function raise(){for(var i=0;i<this.events_.length;i++){var eventData=this.events_[i];if(eventData!==null){this.events_[i]=null;var eventFn=eventData.getEventRunner();if(logger){log('event: '+eventData.toString());}exceptionGuard(eventFn);}}}/**
     * @return {!Path}
     */},{key:"getPath",value:function getPath(){return this.path_;}}]);return EventList;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */var EventEmitter=/*#__PURE__*/function(){/**
     * @param {!Array.<string>} allowedEvents_
     */function EventEmitter(allowedEvents_){_classCallCheck(this,EventEmitter);this.allowedEvents_=allowedEvents_;this.listeners_={};(0,_util.assert)(Array.isArray(allowedEvents_)&&allowedEvents_.length>0,'Requires a non-empty array');}/**
     * To be called by derived classes to trigger events.
     * @param {!string} eventType
     * @param {...*} varArgs
     */_createClass(EventEmitter,[{key:"trigger",value:function trigger(eventType){if(Array.isArray(this.listeners_[eventType])){// Clone the list, since callbacks could add/remove listeners.
var listeners=_toConsumableArray(this.listeners_[eventType]);for(var _len3=arguments.length,varArgs=new Array(_len3>1?_len3-1:0),_key4=1;_key4<_len3;_key4++){varArgs[_key4-1]=arguments[_key4];}for(var i=0;i<listeners.length;i++){listeners[i].callback.apply(listeners[i].context,varArgs);}}}},{key:"on",value:function on(eventType,callback,context){this.validateEventType_(eventType);this.listeners_[eventType]=this.listeners_[eventType]||[];this.listeners_[eventType].push({callback:callback,context:context});var eventData=this.getInitialEvent(eventType);if(eventData){callback.apply(context,eventData);}}},{key:"off",value:function off(eventType,callback,context){this.validateEventType_(eventType);var listeners=this.listeners_[eventType]||[];for(var i=0;i<listeners.length;i++){if(listeners[i].callback===callback&&(!context||context===listeners[i].context)){listeners.splice(i,1);return;}}}},{key:"validateEventType_",value:function validateEventType_(eventType){(0,_util.assert)(this.allowedEvents_.find(function(et){return et===eventType;}),'Unknown event: '+eventType);}}]);return EventEmitter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @extends {EventEmitter}
 */var VisibilityMonitor=/*#__PURE__*/function(_EventEmitter){_inherits(VisibilityMonitor,_EventEmitter);function VisibilityMonitor(){var _this15;_classCallCheck(this,VisibilityMonitor);_this15=_possibleConstructorReturn(this,_getPrototypeOf(VisibilityMonitor).call(this,['visible']));var hidden;var visibilityChange;if(typeof document!=='undefined'&&typeof document.addEventListener!=='undefined'){if(typeof document['hidden']!=='undefined'){// Opera 12.10 and Firefox 18 and later support
visibilityChange='visibilitychange';hidden='hidden';}else if(typeof document['mozHidden']!=='undefined'){visibilityChange='mozvisibilitychange';hidden='mozHidden';}else if(typeof document['msHidden']!=='undefined'){visibilityChange='msvisibilitychange';hidden='msHidden';}else if(typeof document['webkitHidden']!=='undefined'){visibilityChange='webkitvisibilitychange';hidden='webkitHidden';}}// Initially, we always assume we are visible. This ensures that in browsers
// without page visibility support or in cases where we are never visible
// (e.g. chrome extension), we act as if we are visible, i.e. don't delay
// reconnects
_this15.visible_=true;if(visibilityChange){document.addEventListener(visibilityChange,function(){var visible=!document[hidden];if(visible!==_this15.visible_){_this15.visible_=visible;_this15.trigger('visible',visible);}},false);}return _this15;}_createClass(VisibilityMonitor,[{key:"getInitialEvent",/**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */value:function getInitialEvent(eventType){(0,_util.assert)(eventType==='visible','Unknown event type: '+eventType);return[this.visible_];}}],[{key:"getInstance",value:function getInstance(){return new VisibilityMonitor();}}]);return VisibilityMonitor;}(EventEmitter);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 *
 * @extends {EventEmitter}
 */var OnlineMonitor=/*#__PURE__*/function(_EventEmitter2){_inherits(OnlineMonitor,_EventEmitter2);function OnlineMonitor(){var _this16;_classCallCheck(this,OnlineMonitor);_this16=_possibleConstructorReturn(this,_getPrototypeOf(OnlineMonitor).call(this,['online']));_this16.online_=true;// We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
// https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
// It would seem that the 'online' event does not always fire consistently. So we disable it
// for Cordova.
if(typeof window!=='undefined'&&typeof window.addEventListener!=='undefined'&&!(0,_util.isMobileCordova)()){window.addEventListener('online',function(){if(!_this16.online_){_this16.online_=true;_this16.trigger('online',true);}},false);window.addEventListener('offline',function(){if(_this16.online_){_this16.online_=false;_this16.trigger('online',false);}},false);}return _this16;}_createClass(OnlineMonitor,[{key:"getInitialEvent",/**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */value:function getInitialEvent(eventType){(0,_util.assert)(eventType==='online','Unknown event type: '+eventType);return[this.online_];}/**
     * @return {boolean}
     */},{key:"currentlyOnline",value:function currentlyOnline(){return this.online_;}}],[{key:"getInstance",value:function getInstance(){return new OnlineMonitor();}}]);return OnlineMonitor;}(EventEmitter);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 * @constructor
 */var PacketReceiver=/*#__PURE__*/function(){/**
     * @param onMessage_
     */function PacketReceiver(onMessage_){_classCallCheck(this,PacketReceiver);this.onMessage_=onMessage_;this.pendingResponses=[];this.currentResponseNum=0;this.closeAfterResponse=-1;this.onClose=null;}_createClass(PacketReceiver,[{key:"closeAfter",value:function closeAfter(responseNum,callback){this.closeAfterResponse=responseNum;this.onClose=callback;if(this.closeAfterResponse<this.currentResponseNum){this.onClose();this.onClose=null;}}/**
     * Each message from the server comes with a response number, and an array of data. The responseNumber
     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
     * browsers will respond in the same order as the requests we sent
     * @param {number} requestNum
     * @param {Array} data
     */},{key:"handleResponse",value:function handleResponse(requestNum,data){var _this17=this;this.pendingResponses[requestNum]=data;var _loop=function _loop(){var toProcess=_this17.pendingResponses[_this17.currentResponseNum];delete _this17.pendingResponses[_this17.currentResponseNum];var _loop2=function _loop2(i){if(toProcess[i]){exceptionGuard(function(){_this17.onMessage_(toProcess[i]);});}};for(var i=0;i<toProcess.length;++i){_loop2(i);}if(_this17.currentResponseNum===_this17.closeAfterResponse){if(_this17.onClose){_this17.onClose();_this17.onClose=null;}return"break";}_this17.currentResponseNum++;};while(this.pendingResponses[this.currentResponseNum]){var _ret=_loop();if(_ret==="break")break;}}}]);return PacketReceiver;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // URL query parameters associated with longpolling
var FIREBASE_LONGPOLL_START_PARAM='start';var FIREBASE_LONGPOLL_CLOSE_COMMAND='close';var FIREBASE_LONGPOLL_COMMAND_CB_NAME='pLPCommand';var FIREBASE_LONGPOLL_DATA_CB_NAME='pRTLPCB';var FIREBASE_LONGPOLL_ID_PARAM='id';var FIREBASE_LONGPOLL_PW_PARAM='pw';var FIREBASE_LONGPOLL_SERIAL_PARAM='ser';var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM='cb';var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM='seg';var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET='ts';var FIREBASE_LONGPOLL_DATA_PARAM='d';var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM='dframe';//Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.
var MAX_URL_DATA_SIZE=1870;var SEG_HEADER_SIZE=30;//ie: &seg=8299234&ts=982389123&d=
var MAX_PAYLOAD_SIZE=MAX_URL_DATA_SIZE-SEG_HEADER_SIZE;/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 * @const
 * @type {number}
 */var KEEPALIVE_REQUEST_INTERVAL=25000;/**
 * How long to wait before aborting a long-polling connection attempt.
 * @const
 * @type {number}
 */var LP_CONNECT_TIMEOUT=30000;/**
 * This class manages a single long-polling connection.
 *
 * @constructor
 * @implements {Transport}
 */var BrowserPollConnection=/*#__PURE__*/function(){/**
     * @param connId An identifier for this connection, used for logging
     * @param repoInfo The info for the endpoint to send data to.
     * @param applicationId The Firebase App ID for this project.
     * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing
     *                                         transport session
     * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a
     *                                     connection previously
     */function BrowserPollConnection(connId,repoInfo,applicationId,transportSessionId,lastSessionId){_classCallCheck(this,BrowserPollConnection);this.connId=connId;this.repoInfo=repoInfo;this.applicationId=applicationId;this.transportSessionId=transportSessionId;this.lastSessionId=lastSessionId;this.bytesSent=0;this.bytesReceived=0;this.everConnected_=false;this.log_=logWrapper(connId);this.stats_=StatsManager.getCollection(repoInfo);this.urlFn=function(params){return repoInfo.connectionURL(LONG_POLLING,params);};}/**
     *
     * @param {function(Object)} onMessage Callback when messages arrive
     * @param {function()} onDisconnect Callback with connection lost.
     */_createClass(BrowserPollConnection,[{key:"open",value:function open(onMessage,onDisconnect){var _this18=this;this.curSegmentNum=0;this.onDisconnect_=onDisconnect;this.myPacketOrderer=new PacketReceiver(onMessage);this.isClosed_=false;this.connectTimeoutTimer_=setTimeout(function(){_this18.log_('Timed out trying to connect.');// Make sure we clear the host cache
_this18.onClosed_();_this18.connectTimeoutTimer_=null;// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(LP_CONNECT_TIMEOUT));// Ensure we delay the creation of the iframe until the DOM is loaded.
executeWhenDOMReady(function(){if(_this18.isClosed_){return;}//Set up a callback that gets triggered once a connection is set up.
_this18.scriptTagHolder=new FirebaseIFrameScriptHolder(function(){for(var _len4=arguments.length,args=new Array(_len4),_key5=0;_key5<_len4;_key5++){args[_key5]=arguments[_key5];}var command=args[0],arg1=args[1],arg2=args[2],arg3=args[3],arg4=args[4];_this18.incrementIncomingBytes_(args);if(!_this18.scriptTagHolder){return;// we closed the connection.
}if(_this18.connectTimeoutTimer_){clearTimeout(_this18.connectTimeoutTimer_);_this18.connectTimeoutTimer_=null;}_this18.everConnected_=true;if(command===FIREBASE_LONGPOLL_START_PARAM){_this18.id=arg1;_this18.password=arg2;}else if(command===FIREBASE_LONGPOLL_CLOSE_COMMAND){// Don't clear the host cache. We got a response from the server, so we know it's reachable
if(arg1){// We aren't expecting any more data (other than what the server's already in the process of sending us
// through our already open polls), so don't send any more.
_this18.scriptTagHolder.sendNewPolls=false;// arg1 in this case is the last response number sent by the server. We should try to receive
// all of the responses up to this one before closing
_this18.myPacketOrderer.closeAfter(arg1,function(){_this18.onClosed_();});}else{_this18.onClosed_();}}else{throw new Error('Unrecognized command received: '+command);}},function(){for(var _len5=arguments.length,args=new Array(_len5),_key6=0;_key6<_len5;_key6++){args[_key6]=arguments[_key6];}var pN=args[0],data=args[1];_this18.incrementIncomingBytes_(args);_this18.myPacketOrderer.handleResponse(pN,data);},function(){_this18.onClosed_();},_this18.urlFn);//Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
//from cache.
var urlParams={};urlParams[FIREBASE_LONGPOLL_START_PARAM]='t';urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=Math.floor(Math.random()*100000000);if(_this18.scriptTagHolder.uniqueCallbackIdentifier){urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM]=_this18.scriptTagHolder.uniqueCallbackIdentifier;}urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(_this18.transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=_this18.transportSessionId;}if(_this18.lastSessionId){urlParams[LAST_SESSION_PARAM]=_this18.lastSessionId;}if(_this18.applicationId){urlParams[APPLICATION_ID_PARAM]=_this18.applicationId;}if(typeof location!=='undefined'&&location.href&&location.href.indexOf(FORGE_DOMAIN)!==-1){urlParams[REFERER_PARAM]=FORGE_REF;}var connectURL=_this18.urlFn(urlParams);_this18.log_('Connecting via long-poll to '+connectURL);_this18.scriptTagHolder.addTag(connectURL,function(){/* do nothing */});});}/**
     * Call this when a handshake has completed successfully and we want to consider the connection established
     */},{key:"start",value:function start(){this.scriptTagHolder.startLongPoll(this.id,this.password);this.addDisconnectPingFrame(this.id,this.password);}/**
     * Forces long polling to be considered as a potential transport
     */},{key:"markConnectionHealthy",/**
     * No-op for polling
     */value:function markConnectionHealthy(){}/**
     * Stops polling and cleans up the iframe
     * @private
     */},{key:"shutdown_",value:function shutdown_(){this.isClosed_=true;if(this.scriptTagHolder){this.scriptTagHolder.close();this.scriptTagHolder=null;}//remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
if(this.myDisconnFrame){document.body.removeChild(this.myDisconnFrame);this.myDisconnFrame=null;}if(this.connectTimeoutTimer_){clearTimeout(this.connectTimeoutTimer_);this.connectTimeoutTimer_=null;}}/**
     * Triggered when this transport is closed
     * @private
     */},{key:"onClosed_",value:function onClosed_(){if(!this.isClosed_){this.log_('Longpoll is closing itself');this.shutdown_();if(this.onDisconnect_){this.onDisconnect_(this.everConnected_);this.onDisconnect_=null;}}}/**
     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
     * that we've left.
     */},{key:"close",value:function close(){if(!this.isClosed_){this.log_('Longpoll is being closed.');this.shutdown_();}}/**
     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
     * broken into chunks (since URLs have a small maximum length).
     * @param {!Object} data The JSON data to transmit.
     */},{key:"send",value:function send(data){var dataStr=(0,_util.stringify)(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//first, lets get the base64-encoded data
var base64data=(0,_util.base64Encode)(dataStr);//We can only fit a certain amount in each URL, so we need to split this request
//up into multiple pieces if it doesn't fit in one request.
var dataSegs=splitStringBySize(base64data,MAX_PAYLOAD_SIZE);//Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
//of segments so that we can reassemble the packet on the server.
for(var i=0;i<dataSegs.length;i++){this.scriptTagHolder.enqueueSegment(this.curSegmentNum,dataSegs.length,dataSegs[i]);this.curSegmentNum++;}}/**
     * This is how we notify the server that we're leaving.
     * We aren't able to send requests with DHTML on a window close event, but we can
     * trigger XHR requests in some browsers (everything but Opera basically).
     * @param {!string} id
     * @param {!string} pw
     */},{key:"addDisconnectPingFrame",value:function addDisconnectPingFrame(id,pw){if((0,_util.isNodeSdk)()){return;}this.myDisconnFrame=document.createElement('iframe');var urlParams={};urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM]='t';urlParams[FIREBASE_LONGPOLL_ID_PARAM]=id;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=pw;this.myDisconnFrame.src=this.urlFn(urlParams);this.myDisconnFrame.style.display='none';document.body.appendChild(this.myDisconnFrame);}/**
     * Used to track the bytes received by this client
     * @param {*} args
     * @private
     */},{key:"incrementIncomingBytes_",value:function incrementIncomingBytes_(args){// TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
var bytesReceived=(0,_util.stringify)(args).length;this.bytesReceived+=bytesReceived;this.stats_.incrementCounter('bytes_received',bytesReceived);}}],[{key:"forceAllow",value:function forceAllow(){BrowserPollConnection.forceAllow_=true;}/**
     * Forces longpolling to not be considered as a potential transport
     */},{key:"forceDisallow",value:function forceDisallow(){BrowserPollConnection.forceDisallow_=true;}// Static method, use string literal so it can be accessed in a generic way
},{key:"isAvailable",value:function isAvailable(){if((0,_util.isNodeSdk)()){return false;}else if(BrowserPollConnection.forceAllow_){return true;}else{// NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
// the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
return!BrowserPollConnection.forceDisallow_&&typeof document!=='undefined'&&document.createElement!=null&&!isChromeExtensionContentScript()&&!isWindowsStoreApp();}}}]);return BrowserPollConnection;}();/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 * @constructor
 *********************************************************************************************/var FirebaseIFrameScriptHolder=/*#__PURE__*/function(){/**
     * @param commandCB - The callback to be called when control commands are recevied from the server.
     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
     * @param onDisconnect - The callback to be triggered when this tag holder is closed
     * @param urlFn - A function that provides the URL of the endpoint to send data to.
     */function FirebaseIFrameScriptHolder(commandCB,onMessageCB,onDisconnect,urlFn){_classCallCheck(this,FirebaseIFrameScriptHolder);this.onDisconnect=onDisconnect;this.urlFn=urlFn;//We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
//problems in some browsers.
this.outstandingRequests=new Set();//A queue of the pending segments waiting for transmission to the server.
this.pendingSegs=[];//A serial number. We use this for two things:
// 1) A way to ensure the browser doesn't cache responses to polls
// 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
//    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
//    JSONP code in the order it was added to the iframe.
this.currentSerial=Math.floor(Math.random()*100000000);// This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
// incoming data from the server that we're waiting for).
this.sendNewPolls=true;if(!(0,_util.isNodeSdk)()){//Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
//iframes where we put the long-polling script tags. We have two callbacks:
//   1) Command Callback - Triggered for control issues, like starting a connection.
//   2) Message Callback - Triggered when new data arrives.
this.uniqueCallbackIdentifier=LUIDGenerator();window[FIREBASE_LONGPOLL_COMMAND_CB_NAME+this.uniqueCallbackIdentifier]=commandCB;window[FIREBASE_LONGPOLL_DATA_CB_NAME+this.uniqueCallbackIdentifier]=onMessageCB;//Create an iframe for us to add script tags to.
this.myIFrame=FirebaseIFrameScriptHolder.createIFrame_();// Set the iframe's contents.
var script='';// if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
// for ie9, but ie8 needs to do it again in the document itself.
if(this.myIFrame.src&&this.myIFrame.src.substr(0,'javascript:'.length)==='javascript:'){var currentDomain=document.domain;script='<script>document.domain="'+currentDomain+'";</script>';}var iframeContents='<html><body>'+script+'</body></html>';try{this.myIFrame.doc.open();this.myIFrame.doc.write(iframeContents);this.myIFrame.doc.close();}catch(e){log('frame writing exception');if(e.stack){log(e.stack);}log(e);}}else{this.commandCB=commandCB;this.onMessageCB=onMessageCB;}}/**
     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
     * actually use.
     * @private
     * @return {Element}
     */_createClass(FirebaseIFrameScriptHolder,[{key:"close",/**
     * Cancel all outstanding queries and remove the frame.
     */value:function close(){var _this19=this;//Mark this iframe as dead, so no new requests are sent.
this.alive=false;if(this.myIFrame){//We have to actually remove all of the html inside this iframe before removing it from the
//window, or IE will continue loading and executing the script tags we've already added, which
//can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
this.myIFrame.doc.body.innerHTML='';setTimeout(function(){if(_this19.myIFrame!==null){document.body.removeChild(_this19.myIFrame);_this19.myIFrame=null;}},Math.floor(0));}// Protect from being called recursively.
var onDisconnect=this.onDisconnect;if(onDisconnect){this.onDisconnect=null;onDisconnect();}}/**
     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
     * @param {!string} id - The ID of this connection
     * @param {!string} pw - The password for this connection
     */},{key:"startLongPoll",value:function startLongPoll(id,pw){this.myID=id;this.myPW=pw;this.alive=true;//send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
while(this.newRequest_()){}}/**
     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
     * too many outstanding requests and we are still alive.
     *
     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
     * needed.
     */},{key:"newRequest_",value:function newRequest_(){// We keep one outstanding request open all the time to receive data, but if we need to send data
// (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
// close the old request.
if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){//construct our url
this.currentSerial++;var urlParams={};urlParams[FIREBASE_LONGPOLL_ID_PARAM]=this.myID;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=this.myPW;urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=this.currentSerial;var theURL=this.urlFn(urlParams);//Now add as much data as we can.
var curDataString='';var i=0;while(this.pendingSegs.length>0){//first, lets see if the next segment will fit.
var nextSeg=this.pendingSegs[0];if(nextSeg.d.length+SEG_HEADER_SIZE+curDataString.length<=MAX_URL_DATA_SIZE){//great, the segment will fit. Lets append it.
var theSeg=this.pendingSegs.shift();curDataString=curDataString+'&'+FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM+i+'='+theSeg.seg+'&'+FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET+i+'='+theSeg.ts+'&'+FIREBASE_LONGPOLL_DATA_PARAM+i+'='+theSeg.d;i++;}else{break;}}theURL=theURL+curDataString;this.addLongPollTag_(theURL,this.currentSerial);return true;}else{return false;}}/**
     * Queue a packet for transmission to the server.
     * @param segnum - A sequential id for this packet segment used for reassembly
     * @param totalsegs - The total number of segments in this packet
     * @param data - The data for this segment.
     */},{key:"enqueueSegment",value:function enqueueSegment(segnum,totalsegs,data){//add this to the queue of segments to send.
this.pendingSegs.push({seg:segnum,ts:totalsegs,d:data});//send the data immediately if there isn't already data being transmitted, unless
//startLongPoll hasn't been called yet.
if(this.alive){this.newRequest_();}}/**
     * Add a script tag for a regular long-poll request.
     * @param {!string} url - The URL of the script tag.
     * @param {!number} serial - The serial number of the request.
     * @private
     */},{key:"addLongPollTag_",value:function addLongPollTag_(url,serial){var _this20=this;//remember that we sent this request.
this.outstandingRequests.add(serial);var doNewRequest=function doNewRequest(){_this20.outstandingRequests["delete"](serial);_this20.newRequest_();};// If this request doesn't return on its own accord (by the server sending us some data), we'll
// create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
var keepaliveTimeout=setTimeout(doNewRequest,Math.floor(KEEPALIVE_REQUEST_INTERVAL));var readyStateCB=function readyStateCB(){// Request completed.  Cancel the keepalive.
clearTimeout(keepaliveTimeout);// Trigger a new request so we can continue receiving data.
doNewRequest();};this.addTag(url,readyStateCB);}/**
     * Add an arbitrary script tag to the iframe.
     * @param {!string} url - The URL for the script tag source.
     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
     */},{key:"addTag",value:function addTag(url,loadCB){var _this21=this;if((0,_util.isNodeSdk)()){// eslint-disable-next-line @typescript-eslint/no-explicit-any
this.doNodeLongPoll(url,loadCB);}else{setTimeout(function(){try{// if we're already closed, don't add this poll
if(!_this21.sendNewPolls){return;}var newScript=_this21.myIFrame.doc.createElement('script');newScript.type='text/javascript';newScript.async=true;newScript.src=url;// eslint-disable-next-line @typescript-eslint/no-explicit-any
newScript.onload=newScript.onreadystatechange=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any
var rstate=newScript.readyState;if(!rstate||rstate==='loaded'||rstate==='complete'){// eslint-disable-next-line @typescript-eslint/no-explicit-any
newScript.onload=newScript.onreadystatechange=null;if(newScript.parentNode){newScript.parentNode.removeChild(newScript);}loadCB();}};newScript.onerror=function(){log('Long-poll script failed to load: '+url);_this21.sendNewPolls=false;_this21.close();};_this21.myIFrame.doc.body.appendChild(newScript);}catch(e){// TODO: we should make this error visible somehow
}},Math.floor(1));}}}],[{key:"createIFrame_",value:function createIFrame_(){var iframe=document.createElement('iframe');iframe.style.display='none';// This is necessary in order to initialize the document inside the iframe
if(document.body){document.body.appendChild(iframe);try{// If document.domain has been modified in IE, this will throw an error, and we need to set the
// domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
// Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
var a=iframe.contentWindow.document;if(!a){// Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
log('No IE domain setting required');}}catch(e){var domain=document.domain;iframe.src="javascript:void((function(){document.open();document.domain='"+domain+"';document.close();})())";}}else{// LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
// never gets hit.
throw'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';}// Get the document of the iframe in a browser-specific way.
if(iframe.contentDocument){iframe.doc=iframe.contentDocument;// Firefox, Opera, Safari
}else if(iframe.contentWindow){iframe.doc=iframe.contentWindow.document;// Internet Explorer
// eslint-disable-next-line @typescript-eslint/no-explicit-any
}else if(iframe.document){// eslint-disable-next-line @typescript-eslint/no-explicit-any
iframe.doc=iframe.document;//others?
}return iframe;}}]);return FirebaseIFrameScriptHolder;}();/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The semver (www.semver.org) version of the SDK. */var SDK_VERSION='';// SDK_VERSION should be set before any database instance is created
function setSDKVersion(version){SDK_VERSION=version;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var WEBSOCKET_MAX_FRAME_SIZE=16384;var WEBSOCKET_KEEPALIVE_INTERVAL=45000;var WebSocketImpl=null;if(typeof MozWebSocket!=='undefined'){WebSocketImpl=MozWebSocket;}else if(typeof WebSocket!=='undefined'){WebSocketImpl=WebSocket;}/**
 * Create a new websocket connection with the given callbacks.
 * @constructor
 * @implements {Transport}
 */var WebSocketConnection=/*#__PURE__*/function(){/**
     * @param connId identifier for this transport
     * @param repoInfo The info for the websocket endpoint.
     * @param applicationId The Firebase App ID for this project.
     * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param lastSessionId Optional lastSessionId if there was a previous connection
     */function WebSocketConnection(connId,repoInfo,applicationId,transportSessionId,lastSessionId){_classCallCheck(this,WebSocketConnection);this.connId=connId;this.applicationId=applicationId;this.keepaliveTimer=null;this.frames=null;this.totalFrames=0;this.bytesSent=0;this.bytesReceived=0;this.log_=logWrapper(this.connId);this.stats_=StatsManager.getCollection(repoInfo);this.connURL=WebSocketConnection.connectionURL_(repoInfo,transportSessionId,lastSessionId);this.nodeAdmin=repoInfo.nodeAdmin;}/**
     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
     * @return {string} connection url
     * @private
     */_createClass(WebSocketConnection,[{key:"open",/**
     *
     * @param onMessage Callback when messages arrive
     * @param onDisconnect Callback with connection lost.
     */value:function open(onMessage,onDisconnect){var _this22=this;this.onDisconnect=onDisconnect;this.onMessage=onMessage;this.log_('Websocket connecting to '+this.connURL);this.everConnected_=false;// Assume failure until proven otherwise.
PersistentStorage.set('previous_websocket_failure',true);try{if((0,_util.isNodeSdk)()){var device=this.nodeAdmin?'AdminNode':'Node';// UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
var options={headers:{'User-Agent':"Firebase/".concat(PROTOCOL_VERSION,"/").concat(SDK_VERSION,"/").concat(process.platform,"/").concat(device),'X-Firebase-GMPID':this.applicationId||''}};// Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
var env=process['env'];var proxy=this.connURL.indexOf('wss://')===0?env['HTTPS_PROXY']||env['https_proxy']:env['HTTP_PROXY']||env['http_proxy'];if(proxy){options['proxy']={origin:proxy};}this.mySock=new WebSocketImpl(this.connURL,[],options);}else{var _options={headers:{'X-Firebase-GMPID':this.applicationId||''}};this.mySock=new WebSocketImpl(this.connURL,[],_options);}}catch(e){this.log_('Error instantiating WebSocket.');var _error3=e.message||e.data;if(_error3){this.log_(_error3);}this.onClosed_();return;}this.mySock.onopen=function(){_this22.log_('Websocket connected.');_this22.everConnected_=true;};this.mySock.onclose=function(){_this22.log_('Websocket connection was disconnected.');_this22.mySock=null;_this22.onClosed_();};this.mySock.onmessage=function(m){_this22.handleIncomingFrame(m);};this.mySock.onerror=function(e){_this22.log_('WebSocket error.  Closing connection.');// eslint-disable-next-line @typescript-eslint/no-explicit-any
var error=e.message||e.data;if(error){_this22.log_(error);}_this22.onClosed_();};}/**
     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
     */},{key:"start",value:function start(){}},{key:"markConnectionHealthy",value:function markConnectionHealthy(){PersistentStorage.remove('previous_websocket_failure');}},{key:"appendFrame_",value:function appendFrame_(data){this.frames.push(data);if(this.frames.length===this.totalFrames){var fullMess=this.frames.join('');this.frames=null;var jsonMess=(0,_util.jsonEval)(fullMess);//handle the message
this.onMessage(jsonMess);}}/**
     * @param {number} frameCount The number of frames we are expecting from the server
     * @private
     */},{key:"handleNewFrameCount_",value:function handleNewFrameCount_(frameCount){this.totalFrames=frameCount;this.frames=[];}/**
     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
     * @param {!String} data
     * @return {?String} Any remaining data to be process, or null if there is none
     * @private
     */},{key:"extractFrameCount_",value:function extractFrameCount_(data){(0,_util.assert)(this.frames===null,'We already have a frame buffer');// TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
// currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
if(data.length<=6){var frameCount=Number(data);if(!isNaN(frameCount)){this.handleNewFrameCount_(frameCount);return null;}}this.handleNewFrameCount_(1);return data;}/**
     * Process a websocket frame that has arrived from the server.
     * @param mess The frame data
     */},{key:"handleIncomingFrame",value:function handleIncomingFrame(mess){if(this.mySock===null){return;// Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
}var data=mess['data'];this.bytesReceived+=data.length;this.stats_.incrementCounter('bytes_received',data.length);this.resetKeepAlive();if(this.frames!==null){// we're buffering
this.appendFrame_(data);}else{// try to parse out a frame count, otherwise, assume 1 and process it
var remainingData=this.extractFrameCount_(data);if(remainingData!==null){this.appendFrame_(remainingData);}}}/**
     * Send a message to the server
     * @param {Object} data The JSON object to transmit
     */},{key:"send",value:function send(data){this.resetKeepAlive();var dataStr=(0,_util.stringify)(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//We can only fit a certain amount in each websocket frame, so we need to split this request
//up into multiple pieces if it doesn't fit in one request.
var dataSegs=splitStringBySize(dataStr,WEBSOCKET_MAX_FRAME_SIZE);//Send the length header
if(dataSegs.length>1){this.sendString_(String(dataSegs.length));}//Send the actual data in segments.
for(var i=0;i<dataSegs.length;i++){this.sendString_(dataSegs[i]);}}},{key:"shutdown_",value:function shutdown_(){this.isClosed_=true;if(this.keepaliveTimer){clearInterval(this.keepaliveTimer);this.keepaliveTimer=null;}if(this.mySock){this.mySock.close();this.mySock=null;}}},{key:"onClosed_",value:function onClosed_(){if(!this.isClosed_){this.log_('WebSocket is closing itself');this.shutdown_();// since this is an internal close, trigger the close listener
if(this.onDisconnect){this.onDisconnect(this.everConnected_);this.onDisconnect=null;}}}/**
     * External-facing close handler.
     * Close the websocket and kill the connection.
     */},{key:"close",value:function close(){if(!this.isClosed_){this.log_('WebSocket is being closed');this.shutdown_();}}/**
     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
     * the last activity.
     */},{key:"resetKeepAlive",value:function resetKeepAlive(){var _this23=this;clearInterval(this.keepaliveTimer);this.keepaliveTimer=setInterval(function(){//If there has been no websocket activity for a while, send a no-op
if(_this23.mySock){_this23.sendString_('0');}_this23.resetKeepAlive();// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));}/**
     * Send a string over the websocket.
     *
     * @param {string} str String to send.
     * @private
     */},{key:"sendString_",value:function sendString_(str){// Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
// calls for some unknown reason.  We treat these as an error and disconnect.
// See https://app.asana.com/0/58926111402292/68021340250410
try{this.mySock.send(str);}catch(e){this.log_('Exception thrown from WebSocket.send():',e.message||e.data,'Closing connection.');setTimeout(this.onClosed_.bind(this),0);}}}],[{key:"connectionURL_",value:function connectionURL_(repoInfo,transportSessionId,lastSessionId){var urlParams={};urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(!(0,_util.isNodeSdk)()&&typeof location!=='undefined'&&location.href&&location.href.indexOf(FORGE_DOMAIN)!==-1){urlParams[REFERER_PARAM]=FORGE_REF;}if(transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=transportSessionId;}if(lastSessionId){urlParams[LAST_SESSION_PARAM]=lastSessionId;}return repoInfo.connectionURL(WEBSOCKET,urlParams);}},{key:"forceDisallow",value:function forceDisallow(){WebSocketConnection.forceDisallow_=true;}},{key:"isAvailable",value:function isAvailable(){var isOldAndroid=false;if(typeof navigator!=='undefined'&&navigator.userAgent){var oldAndroidRegex=/Android ([0-9]{0,}\.[0-9]{0,})/;var oldAndroidMatch=navigator.userAgent.match(oldAndroidRegex);if(oldAndroidMatch&&oldAndroidMatch.length>1){if(parseFloat(oldAndroidMatch[1])<4.4){isOldAndroid=true;}}}return!isOldAndroid&&WebSocketImpl!==null&&!WebSocketConnection.forceDisallow_;}/**
     * Returns true if we previously failed to connect with this transport.
     * @return {boolean}
     */},{key:"previouslyFailed",value:function previouslyFailed(){// If our persistent storage is actually only in-memory storage,
// we default to assuming that it previously failed to be safe.
return PersistentStorage.isInMemoryStorage||PersistentStorage.get('previous_websocket_failure')===true;}}]);return WebSocketConnection;}();/**
 * Number of response before we consider the connection "healthy."
 * @type {number}
 */WebSocketConnection.responsesRequiredToBeHealthy=2;/**
 * Time to wait for the connection te become healthy before giving up.
 * @type {number}
 */WebSocketConnection.healthyTimeout=30000;/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 * @constructor
 */var TransportManager=/*#__PURE__*/function(){/**
     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
     */function TransportManager(repoInfo){_classCallCheck(this,TransportManager);this.initTransports_(repoInfo);}/**
     * @const
     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
     */_createClass(TransportManager,[{key:"initTransports_",/**
     * @param {!RepoInfo} repoInfo
     * @private
     */value:function initTransports_(repoInfo){var isWebSocketsAvailable=WebSocketConnection&&WebSocketConnection['isAvailable']();var isSkipPollConnection=isWebSocketsAvailable&&!WebSocketConnection.previouslyFailed();if(repoInfo.webSocketOnly){if(!isWebSocketsAvailable){warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");}isSkipPollConnection=true;}if(isSkipPollConnection){this.transports_=[WebSocketConnection];}else{var transports=this.transports_=[];var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=TransportManager.ALL_TRANSPORTS[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var transport=_step7.value;if(transport&&transport['isAvailable']()){transports.push(transport);}}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7["return"]!=null){_iterator7["return"]();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}}}/**
     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
     * initial transport to use
     */},{key:"initialTransport",value:function initialTransport(){if(this.transports_.length>0){return this.transports_[0];}else{throw new Error('No transports available');}}/**
     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
     * transport, or null
     */},{key:"upgradeTransport",value:function upgradeTransport(){if(this.transports_.length>1){return this.transports_[1];}else{return null;}}}],[{key:"ALL_TRANSPORTS",get:function get(){return[BrowserPollConnection,WebSocketConnection];}}]);return TransportManager;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Abort upgrade attempt if it takes longer than 60s.
var UPGRADE_TIMEOUT=60000;// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
var DELAY_BEFORE_SENDING_EXTRA_REQUESTS=5000;// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.
var BYTES_SENT_HEALTHY_OVERRIDE=10*1024;var BYTES_RECEIVED_HEALTHY_OVERRIDE=100*1024;var MESSAGE_TYPE='t';var MESSAGE_DATA='d';var CONTROL_SHUTDOWN='s';var CONTROL_RESET='r';var CONTROL_ERROR='e';var CONTROL_PONG='o';var SWITCH_ACK='a';var END_TRANSMISSION='n';var PING='p';var SERVER_HELLO='h';/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 *
 * @constructor
 */var Connection=/*#__PURE__*/function(){/**
     * @param id - an id for this connection
     * @param repoInfo_ - the info for the endpoint to connect to
     * @param applicationId_ - the Firebase App ID for this project
     * @param onMessage_ - the callback to be triggered when a server-push message arrives
     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
     * @param onDisconnect_ - the callback to be triggered when a connection was lost
     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
     */function Connection(id,repoInfo_,applicationId_,onMessage_,onReady_,onDisconnect_,onKill_,lastSessionId){_classCallCheck(this,Connection);this.id=id;this.repoInfo_=repoInfo_;this.applicationId_=applicationId_;this.onMessage_=onMessage_;this.onReady_=onReady_;this.onDisconnect_=onDisconnect_;this.onKill_=onKill_;this.lastSessionId=lastSessionId;this.connectionCount=0;this.pendingDataMessages=[];this.state_=0/* CONNECTING */;this.log_=logWrapper('c:'+this.id+':');this.transportManager_=new TransportManager(repoInfo_);this.log_('Connection created');this.start_();}/**
     * Starts a connection attempt
     * @private
     */_createClass(Connection,[{key:"start_",value:function start_(){var _this24=this;var conn=this.transportManager_.initialTransport();this.conn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,undefined,this.lastSessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we
// can consider the transport healthy.
this.primaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;var onMessageReceived=this.connReceiver_(this.conn_);var onConnectionLost=this.disconnReceiver_(this.conn_);this.tx_=this.conn_;this.rx_=this.conn_;this.secondaryConn_=null;this.isHealthy_=false;/*
         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
         * still have the context of your originating frame.
         */setTimeout(function(){// this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
_this24.conn_&&_this24.conn_.open(onMessageReceived,onConnectionLost);},Math.floor(0));var healthyTimeoutMS=conn['healthyTimeout']||0;if(healthyTimeoutMS>0){this.healthyTimeout_=setTimeoutNonBlocking(function(){_this24.healthyTimeout_=null;if(!_this24.isHealthy_){if(_this24.conn_&&_this24.conn_.bytesReceived>BYTES_RECEIVED_HEALTHY_OVERRIDE){_this24.log_('Connection exceeded healthy timeout but has received '+_this24.conn_.bytesReceived+' bytes.  Marking connection healthy.');_this24.isHealthy_=true;_this24.conn_.markConnectionHealthy();}else if(_this24.conn_&&_this24.conn_.bytesSent>BYTES_SENT_HEALTHY_OVERRIDE){_this24.log_('Connection exceeded healthy timeout but has sent '+_this24.conn_.bytesSent+' bytes.  Leaving connection alive.');// NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
// the server.
}else{_this24.log_('Closing unhealthy connection after timeout.');_this24.close();}}// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(healthyTimeoutMS));}}/**
     * @return {!string}
     * @private
     */},{key:"nextTransportId_",value:function nextTransportId_(){return'c:'+this.id+':'+this.connectionCount++;}},{key:"disconnReceiver_",value:function disconnReceiver_(conn){var _this25=this;return function(everConnected){if(conn===_this25.conn_){_this25.onConnectionLost_(everConnected);}else if(conn===_this25.secondaryConn_){_this25.log_('Secondary connection lost.');_this25.onSecondaryConnectionLost_();}else{_this25.log_('closing an old connection');}};}},{key:"connReceiver_",value:function connReceiver_(conn){var _this26=this;return function(message){if(_this26.state_!==2/* DISCONNECTED */){if(conn===_this26.rx_){_this26.onPrimaryMessageReceived_(message);}else if(conn===_this26.secondaryConn_){_this26.onSecondaryMessageReceived_(message);}else{_this26.log_('message on old connection');}}};}/**
     *
     * @param {Object} dataMsg An arbitrary data message to be sent to the server
     */},{key:"sendRequest",value:function sendRequest(dataMsg){// wrap in a data message envelope and send it on
var msg={t:'d',d:dataMsg};this.sendData_(msg);}},{key:"tryCleanupConnection",value:function tryCleanupConnection(){if(this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_){this.log_('cleaning up and promoting a connection: '+this.secondaryConn_.connId);this.conn_=this.secondaryConn_;this.secondaryConn_=null;// the server will shutdown the old connection
}}},{key:"onSecondaryControl_",value:function onSecondaryControl_(controlData){if(MESSAGE_TYPE in controlData){var cmd=controlData[MESSAGE_TYPE];if(cmd===SWITCH_ACK){this.upgradeIfSecondaryHealthy_();}else if(cmd===CONTROL_RESET){// Most likely the session wasn't valid. Abandon the switch attempt
this.log_('Got a reset on secondary, closing it');this.secondaryConn_.close();// If we were already using this connection for something, than we need to fully close
if(this.tx_===this.secondaryConn_||this.rx_===this.secondaryConn_){this.close();}}else if(cmd===CONTROL_PONG){this.log_('got pong on secondary.');this.secondaryResponsesRequired_--;this.upgradeIfSecondaryHealthy_();}}}},{key:"onSecondaryMessageReceived_",value:function onSecondaryMessageReceived_(parsedData){var layer=requireKey('t',parsedData);var data=requireKey('d',parsedData);if(layer==='c'){this.onSecondaryControl_(data);}else if(layer==='d'){// got a data message, but we're still second connection. Need to buffer it up
this.pendingDataMessages.push(data);}else{throw new Error('Unknown protocol layer: '+layer);}}},{key:"upgradeIfSecondaryHealthy_",value:function upgradeIfSecondaryHealthy_(){if(this.secondaryResponsesRequired_<=0){this.log_('Secondary connection is healthy.');this.isHealthy_=true;this.secondaryConn_.markConnectionHealthy();this.proceedWithUpgrade_();}else{// Send a ping to make sure the connection is healthy.
this.log_('sending ping on secondary.');this.secondaryConn_.send({t:'c',d:{t:PING,d:{}}});}}},{key:"proceedWithUpgrade_",value:function proceedWithUpgrade_(){// tell this connection to consider itself open
this.secondaryConn_.start();// send ack
this.log_('sending client ack on secondary');this.secondaryConn_.send({t:'c',d:{t:SWITCH_ACK,d:{}}});// send end packet on primary transport, switch to sending on this one
// can receive on this one, buffer responses until end received on primary transport
this.log_('Ending transmission on primary');this.conn_.send({t:'c',d:{t:END_TRANSMISSION,d:{}}});this.tx_=this.secondaryConn_;this.tryCleanupConnection();}},{key:"onPrimaryMessageReceived_",value:function onPrimaryMessageReceived_(parsedData){// Must refer to parsedData properties in quotes, so closure doesn't touch them.
var layer=requireKey('t',parsedData);var data=requireKey('d',parsedData);if(layer==='c'){this.onControl_(data);}else if(layer==='d'){this.onDataMessage_(data);}}},{key:"onDataMessage_",value:function onDataMessage_(message){this.onPrimaryResponse_();// We don't do anything with data messages, just kick them up a level
this.onMessage_(message);}},{key:"onPrimaryResponse_",value:function onPrimaryResponse_(){if(!this.isHealthy_){this.primaryResponsesRequired_--;if(this.primaryResponsesRequired_<=0){this.log_('Primary connection is healthy.');this.isHealthy_=true;this.conn_.markConnectionHealthy();}}}},{key:"onControl_",value:function onControl_(controlData){var cmd=requireKey(MESSAGE_TYPE,controlData);if(MESSAGE_DATA in controlData){var payload=controlData[MESSAGE_DATA];if(cmd===SERVER_HELLO){this.onHandshake_(payload);}else if(cmd===END_TRANSMISSION){this.log_('recvd end transmission on primary');this.rx_=this.secondaryConn_;for(var i=0;i<this.pendingDataMessages.length;++i){this.onDataMessage_(this.pendingDataMessages[i]);}this.pendingDataMessages=[];this.tryCleanupConnection();}else if(cmd===CONTROL_SHUTDOWN){// This was previously the 'onKill' callback passed to the lower-level connection
// payload in this case is the reason for the shutdown. Generally a human-readable error
this.onConnectionShutdown_(payload);}else if(cmd===CONTROL_RESET){// payload in this case is the host we should contact
this.onReset_(payload);}else if(cmd===CONTROL_ERROR){error('Server Error: '+payload);}else if(cmd===CONTROL_PONG){this.log_('got pong on primary.');this.onPrimaryResponse_();this.sendPingOnPrimaryIfNecessary_();}else{error('Unknown control packet command: '+cmd);}}}/**
     *
     * @param {Object} handshake The handshake data returned from the server
     * @private
     */},{key:"onHandshake_",value:function onHandshake_(handshake){var timestamp=handshake.ts;var version=handshake.v;var host=handshake.h;this.sessionId=handshake.s;this.repoInfo_.updateHost(host);// if we've already closed the connection, then don't bother trying to progress further
if(this.state_===0/* CONNECTING */){this.conn_.start();this.onConnectionEstablished_(this.conn_,timestamp);if(PROTOCOL_VERSION!==version){warn('Protocol version mismatch detected');}// TODO: do we want to upgrade? when? maybe a delay?
this.tryStartUpgrade_();}}},{key:"tryStartUpgrade_",value:function tryStartUpgrade_(){var conn=this.transportManager_.upgradeTransport();if(conn){this.startUpgrade_(conn);}}},{key:"startUpgrade_",value:function startUpgrade_(conn){var _this27=this;this.secondaryConn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.sessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we
// can consider the transport healthy.
this.secondaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;var onMessage=this.connReceiver_(this.secondaryConn_);var onDisconnect=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(onMessage,onDisconnect);// If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
setTimeoutNonBlocking(function(){if(_this27.secondaryConn_){_this27.log_('Timed out trying to upgrade.');_this27.secondaryConn_.close();}},Math.floor(UPGRADE_TIMEOUT));}},{key:"onReset_",value:function onReset_(host){this.log_('Reset packet received.  New host: '+host);this.repoInfo_.updateHost(host);// TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
// We don't currently support resets after the connection has already been established
if(this.state_===1/* CONNECTED */){this.close();}else{// Close whatever connections we have open and start again.
this.closeConnections_();this.start_();}}},{key:"onConnectionEstablished_",value:function onConnectionEstablished_(conn,timestamp){var _this28=this;this.log_('Realtime connection established.');this.conn_=conn;this.state_=1/* CONNECTED */;if(this.onReady_){this.onReady_(timestamp,this.sessionId);this.onReady_=null;}// If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
// send some pings.
if(this.primaryResponsesRequired_===0){this.log_('Primary connection is healthy.');this.isHealthy_=true;}else{setTimeoutNonBlocking(function(){_this28.sendPingOnPrimaryIfNecessary_();},Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));}}},{key:"sendPingOnPrimaryIfNecessary_",value:function sendPingOnPrimaryIfNecessary_(){// If the connection isn't considered healthy yet, we'll send a noop ping packet request.
if(!this.isHealthy_&&this.state_===1/* CONNECTED */){this.log_('sending ping on primary.');this.sendData_({t:'c',d:{t:PING,d:{}}});}}},{key:"onSecondaryConnectionLost_",value:function onSecondaryConnectionLost_(){var conn=this.secondaryConn_;this.secondaryConn_=null;if(this.tx_===conn||this.rx_===conn){// we are relying on this connection already in some capacity. Therefore, a failure is real
this.close();}}/**
     *
     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
     * we should flush the host cache
     * @private
     */},{key:"onConnectionLost_",value:function onConnectionLost_(everConnected){this.conn_=null;// NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
// called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
if(!everConnected&&this.state_===0/* CONNECTING */){this.log_('Realtime connection failed.');// Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
if(this.repoInfo_.isCacheableHost()){PersistentStorage.remove('host:'+this.repoInfo_.host);// reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
this.repoInfo_.internalHost=this.repoInfo_.host;}}else if(this.state_===1/* CONNECTED */){this.log_('Realtime connection lost.');}this.close();}/**
     *
     * @param {string} reason
     * @private
     */},{key:"onConnectionShutdown_",value:function onConnectionShutdown_(reason){this.log_('Connection shutdown command received. Shutting down...');if(this.onKill_){this.onKill_(reason);this.onKill_=null;}// We intentionally don't want to fire onDisconnect (kill is a different case),
// so clear the callback.
this.onDisconnect_=null;this.close();}},{key:"sendData_",value:function sendData_(data){if(this.state_!==1/* CONNECTED */){throw'Connection is not connected';}else{this.tx_.send(data);}}/**
     * Cleans up this connection, calling the appropriate callbacks
     */},{key:"close",value:function close(){if(this.state_!==2/* DISCONNECTED */){this.log_('Closing realtime connection.');this.state_=2/* DISCONNECTED */;this.closeConnections_();if(this.onDisconnect_){this.onDisconnect_();this.onDisconnect_=null;}}}/**
     *
     * @private
     */},{key:"closeConnections_",value:function closeConnections_(){this.log_('Shutting down all connections');if(this.conn_){this.conn_.close();this.conn_=null;}if(this.secondaryConn_){this.secondaryConn_.close();this.secondaryConn_=null;}if(this.healthyTimeout_){clearTimeout(this.healthyTimeout_);this.healthyTimeout_=null;}}}]);return Connection;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */var ServerActions=/*#__PURE__*/function(){function ServerActions(){_classCallCheck(this,ServerActions);}_createClass(ServerActions,[{key:"put",/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     * @param {string=} hash
     */value:function put(pathString,data,onComplete,hash){}/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, ?string)} onComplete
     * @param {string=} hash
     */},{key:"merge",value:function merge(pathString,data,onComplete,hash){}/**
     * Refreshes the auth token for the current connection.
     * @param {string} token The authentication token
     */},{key:"refreshAuthToken",value:function refreshAuthToken(token){}/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */},{key:"onDisconnectPut",value:function onDisconnectPut(pathString,data,onComplete){}/**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */},{key:"onDisconnectMerge",value:function onDisconnectMerge(pathString,data,onComplete){}/**
     * @param {string} pathString
     * @param {function(string, string)=} onComplete
     */},{key:"onDisconnectCancel",value:function onDisconnectCancel(pathString,onComplete){}/**
     * @param {Object.<string, *>} stats
     */},{key:"reportStats",value:function reportStats(stats){}}]);return ServerActions;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var RECONNECT_MIN_DELAY=1000;var RECONNECT_MAX_DELAY_DEFAULT=60*5*1000;// 5 minutes in milliseconds (Case: 1858)
var RECONNECT_MAX_DELAY_FOR_ADMINS=30*1000;// 30 seconds for admin clients (likely to be a backend server)
var RECONNECT_DELAY_MULTIPLIER=1.3;var RECONNECT_DELAY_RESET_TIMEOUT=30000;// Reset delay back to MIN_DELAY after being connected for 30sec.
var SERVER_KILL_INTERRUPT_REASON='server_kill';// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
var INVALID_AUTH_TOKEN_THRESHOLD=3;/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */var PersistentConnection=/*#__PURE__*/function(_ServerActions){_inherits(PersistentConnection,_ServerActions);/**
     * @implements {ServerActions}
     * @param repoInfo_ Data about the namespace we are connecting to
     * @param applicationId_ The Firebase App ID for this project
     * @param onDataUpdate_ A callback for new data from the server
     */function PersistentConnection(repoInfo_,applicationId_,onDataUpdate_,onConnectStatus_,onServerInfoUpdate_,authTokenProvider_,authOverride_){var _this29;_classCallCheck(this,PersistentConnection);_this29=_possibleConstructorReturn(this,_getPrototypeOf(PersistentConnection).call(this));_this29.repoInfo_=repoInfo_;_this29.applicationId_=applicationId_;_this29.onDataUpdate_=onDataUpdate_;_this29.onConnectStatus_=onConnectStatus_;_this29.onServerInfoUpdate_=onServerInfoUpdate_;_this29.authTokenProvider_=authTokenProvider_;_this29.authOverride_=authOverride_;// Used for diagnostic logging.
_this29.id=PersistentConnection.nextPersistentConnectionId_++;_this29.log_=logWrapper('p:'+_this29.id+':');_this29.interruptReasons_={};/** Map<path, Map<queryId, ListenSpec>> */_this29.listens=new Map();_this29.outstandingPuts_=[];_this29.outstandingPutCount_=0;_this29.onDisconnectRequestQueue_=[];_this29.connected_=false;_this29.reconnectDelay_=RECONNECT_MIN_DELAY;_this29.maxReconnectDelay_=RECONNECT_MAX_DELAY_DEFAULT;_this29.securityDebugCallback_=null;_this29.lastSessionId=null;_this29.establishConnectionTimer_=null;_this29.visible_=false;// Before we get connected, we keep a queue of pending messages to send.
_this29.requestCBHash_={};_this29.requestNumber_=0;_this29.realtime_=null;_this29.authToken_=null;_this29.forceTokenRefresh_=false;_this29.invalidAuthTokenCount_=0;_this29.firstConnection_=true;_this29.lastConnectionAttemptTime_=null;_this29.lastConnectionEstablishedTime_=null;if(authOverride_&&!(0,_util.isNodeSdk)()){throw new Error('Auth override specified in options, but not supported on non Node.js platforms');}_this29.scheduleConnect_(0);VisibilityMonitor.getInstance().on('visible',_this29.onVisible_,_assertThisInitialized(_this29));if(repoInfo_.host.indexOf('fblocal')===-1){OnlineMonitor.getInstance().on('online',_this29.onOnline_,_assertThisInitialized(_this29));}return _this29;}_createClass(PersistentConnection,[{key:"sendRequest",value:function sendRequest(action,body,onResponse){var curReqNum=++this.requestNumber_;var msg={r:curReqNum,a:action,b:body};this.log_((0,_util.stringify)(msg));(0,_util.assert)(this.connected_,"sendRequest call when we're not connected not allowed.");this.realtime_.sendRequest(msg);if(onResponse){this.requestCBHash_[curReqNum]=onResponse;}}/**
     * @inheritDoc
     */},{key:"listen",value:function listen(query,currentHashFn,tag,onComplete){var queryId=query.queryIdentifier();var pathString=query.path.toString();this.log_('Listen called for '+pathString+' '+queryId);if(!this.listens.has(pathString)){this.listens.set(pathString,new Map());}(0,_util.assert)(query.getQueryParams().isDefault()||!query.getQueryParams().loadsAllData(),'listen() called for non-default but complete query');(0,_util.assert)(!this.listens.get(pathString).has(queryId),'listen() called twice for same path/queryId.');var listenSpec={onComplete:onComplete,hashFn:currentHashFn,query:query,tag:tag};this.listens.get(pathString).set(queryId,listenSpec);if(this.connected_){this.sendListen_(listenSpec);}}},{key:"sendListen_",value:function sendListen_(listenSpec){var _this30=this;var query=listenSpec.query;var pathString=query.path.toString();var queryId=query.queryIdentifier();this.log_('Listen on '+pathString+' for '+queryId);var req={/*path*/p:pathString};var action='q';// Only bother to send query if it's non-default.
if(listenSpec.tag){req['q']=query.queryObject();req['t']=listenSpec.tag;}req[/*hash*/'h']=listenSpec.hashFn();this.sendRequest(action,req,function(message){var payload=message[/*data*/'d'];var status=message[/*status*/'s'];// print warnings in any case...
PersistentConnection.warnOnListenWarnings_(payload,query);var currentListenSpec=_this30.listens.get(pathString)&&_this30.listens.get(pathString).get(queryId);// only trigger actions if the listen hasn't been removed and readded
if(currentListenSpec===listenSpec){_this30.log_('listen response',message);if(status!=='ok'){_this30.removeListen_(pathString,queryId);}if(listenSpec.onComplete){listenSpec.onComplete(status,payload);}}});}},{key:"refreshAuthToken",/**
     * @inheritDoc
     */value:function refreshAuthToken(token){this.authToken_=token;this.log_('Auth token refreshed');if(this.authToken_){this.tryAuth();}else{//If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
//the credential so we dont become authenticated next time we connect.
if(this.connected_){this.sendRequest('unauth',{},function(){});}}this.reduceReconnectDelayIfAdminCredential_(token);}},{key:"reduceReconnectDelayIfAdminCredential_",value:function reduceReconnectDelayIfAdminCredential_(credential){// NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
// Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
var isFirebaseSecret=credential&&credential.length===40;if(isFirebaseSecret||(0,_util.isAdmin)(credential)){this.log_('Admin auth credential detected.  Reducing max reconnect time.');this.maxReconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;}}/**
     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
     * a auth revoked (the connection is closed).
     */},{key:"tryAuth",value:function tryAuth(){var _this31=this;if(this.connected_&&this.authToken_){var token=this.authToken_;var authMethod=(0,_util.isValidFormat)(token)?'auth':'gauth';var requestData={cred:token};if(this.authOverride_===null){requestData['noauth']=true;}else if(_typeof(this.authOverride_)==='object'){requestData['authvar']=this.authOverride_;}this.sendRequest(authMethod,requestData,function(res){var status=res[/*status*/'s'];var data=res[/*data*/'d']||'error';if(_this31.authToken_===token){if(status==='ok'){_this31.invalidAuthTokenCount_=0;}else{// Triggers reconnect and force refresh for auth token
_this31.onAuthRevoked_(status,data);}}});}}/**
     * @inheritDoc
     */},{key:"unlisten",value:function unlisten(query,tag){var pathString=query.path.toString();var queryId=query.queryIdentifier();this.log_('Unlisten called for '+pathString+' '+queryId);(0,_util.assert)(query.getQueryParams().isDefault()||!query.getQueryParams().loadsAllData(),'unlisten() called for non-default but complete query');var listen=this.removeListen_(pathString,queryId);if(listen&&this.connected_){this.sendUnlisten_(pathString,queryId,query.queryObject(),tag);}}},{key:"sendUnlisten_",value:function sendUnlisten_(pathString,queryId,queryObj,tag){this.log_('Unlisten on '+pathString+' for '+queryId);var req={/*path*/p:pathString};var action='n';// Only bother sending queryId if it's non-default.
if(tag){req['q']=queryObj;req['t']=tag;}this.sendRequest(action,req);}/**
     * @inheritDoc
     */},{key:"onDisconnectPut",value:function onDisconnectPut(pathString,data,onComplete){if(this.connected_){this.sendOnDisconnect_('o',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString:pathString,action:'o',data:data,onComplete:onComplete});}}/**
     * @inheritDoc
     */},{key:"onDisconnectMerge",value:function onDisconnectMerge(pathString,data,onComplete){if(this.connected_){this.sendOnDisconnect_('om',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString:pathString,action:'om',data:data,onComplete:onComplete});}}/**
     * @inheritDoc
     */},{key:"onDisconnectCancel",value:function onDisconnectCancel(pathString,onComplete){if(this.connected_){this.sendOnDisconnect_('oc',pathString,null,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString:pathString,action:'oc',data:null,onComplete:onComplete});}}},{key:"sendOnDisconnect_",value:function sendOnDisconnect_(action,pathString,data,onComplete){var request={/*path*/p:pathString,/*data*/d:data};this.log_('onDisconnect '+action,request);this.sendRequest(action,request,function(response){if(onComplete){setTimeout(function(){onComplete(response[/*status*/'s'],response[/* data */'d']);},Math.floor(0));}});}/**
     * @inheritDoc
     */},{key:"put",value:function put(pathString,data,onComplete,hash){this.putInternal('p',pathString,data,onComplete,hash);}/**
     * @inheritDoc
     */},{key:"merge",value:function merge(pathString,data,onComplete,hash){this.putInternal('m',pathString,data,onComplete,hash);}},{key:"putInternal",value:function putInternal(action,pathString,data,onComplete,hash){var request={/*path*/p:pathString,/*data*/d:data};if(hash!==undefined){request[/*hash*/'h']=hash;}// TODO: Only keep track of the most recent put for a given path?
this.outstandingPuts_.push({action:action,request:request,onComplete:onComplete});this.outstandingPutCount_++;var index=this.outstandingPuts_.length-1;if(this.connected_){this.sendPut_(index);}else{this.log_('Buffering put: '+pathString);}}},{key:"sendPut_",value:function sendPut_(index){var _this32=this;var action=this.outstandingPuts_[index].action;var request=this.outstandingPuts_[index].request;var onComplete=this.outstandingPuts_[index].onComplete;this.outstandingPuts_[index].queued=this.connected_;this.sendRequest(action,request,function(message){_this32.log_(action+' response',message);delete _this32.outstandingPuts_[index];_this32.outstandingPutCount_--;// Clean up array occasionally.
if(_this32.outstandingPutCount_===0){_this32.outstandingPuts_=[];}if(onComplete){onComplete(message[/*status*/'s'],message[/* data */'d']);}});}/**
     * @inheritDoc
     */},{key:"reportStats",value:function reportStats(stats){var _this33=this;// If we're not connected, we just drop the stats.
if(this.connected_){var request={/*counters*/c:stats};this.log_('reportStats',request);this.sendRequest(/*stats*/'s',request,function(result){var status=result[/*status*/'s'];if(status!=='ok'){var errorReason=result[/* data */'d'];_this33.log_('reportStats','Error sending stats: '+errorReason);}});}}},{key:"onDataMessage_",value:function onDataMessage_(message){if('r'in message){// this is a response
this.log_('from server: '+(0,_util.stringify)(message));var reqNum=message['r'];var onResponse=this.requestCBHash_[reqNum];if(onResponse){delete this.requestCBHash_[reqNum];onResponse(message[/*body*/'b']);}}else if('error'in message){throw'A server-side error has occurred: '+message['error'];}else if('a'in message){// a and b are action and body, respectively
this.onDataPush_(message['a'],message['b']);}}},{key:"onDataPush_",value:function onDataPush_(action,body){this.log_('handleServerMessage',action,body);if(action==='d'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge*/false,body['t']);}else if(action==='m'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge=*/true,body['t']);}else if(action==='c'){this.onListenRevoked_(body[/*path*/'p'],body[/*query*/'q']);}else if(action==='ac'){this.onAuthRevoked_(body[/*status code*/'s'],body[/* explanation */'d']);}else if(action==='sd'){this.onSecurityDebugPacket_(body);}else{error('Unrecognized action received from server: '+(0,_util.stringify)(action)+'\nAre you using the latest client?');}}},{key:"onReady_",value:function onReady_(timestamp,sessionId){this.log_('connection ready');this.connected_=true;this.lastConnectionEstablishedTime_=new Date().getTime();this.handleTimestamp_(timestamp);this.lastSessionId=sessionId;if(this.firstConnection_){this.sendConnectStats_();}this.restoreState_();this.firstConnection_=false;this.onConnectStatus_(true);}},{key:"scheduleConnect_",value:function scheduleConnect_(timeout){var _this34=this;(0,_util.assert)(!this.realtime_,"Scheduling a connect when we're already connected/ing?");if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);}// NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
// Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
this.establishConnectionTimer_=setTimeout(function(){_this34.establishConnectionTimer_=null;_this34.establishConnection_();// eslint-disable-next-line @typescript-eslint/no-explicit-any
},Math.floor(timeout));}},{key:"onVisible_",value:function onVisible_(visible){// NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
if(visible&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_){this.log_('Window became visible.  Reducing delay.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}this.visible_=visible;}},{key:"onOnline_",value:function onOnline_(online){if(online){this.log_('Browser went online.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}else{this.log_('Browser went offline.  Killing connection.');if(this.realtime_){this.realtime_.close();}}}},{key:"onRealtimeDisconnect_",value:function onRealtimeDisconnect_(){this.log_('data client disconnected');this.connected_=false;this.realtime_=null;// Since we don't know if our sent transactions succeeded or not, we need to cancel them.
this.cancelSentTransactions_();// Clear out the pending requests.
this.requestCBHash_={};if(this.shouldReconnect_()){if(!this.visible_){this.log_("Window isn't visible.  Delaying reconnect.");this.reconnectDelay_=this.maxReconnectDelay_;this.lastConnectionAttemptTime_=new Date().getTime();}else if(this.lastConnectionEstablishedTime_){// If we've been connected long enough, reset reconnect delay to minimum.
var timeSinceLastConnectSucceeded=new Date().getTime()-this.lastConnectionEstablishedTime_;if(timeSinceLastConnectSucceeded>RECONNECT_DELAY_RESET_TIMEOUT){this.reconnectDelay_=RECONNECT_MIN_DELAY;}this.lastConnectionEstablishedTime_=null;}var timeSinceLastConnectAttempt=new Date().getTime()-this.lastConnectionAttemptTime_;var reconnectDelay=Math.max(0,this.reconnectDelay_-timeSinceLastConnectAttempt);reconnectDelay=Math.random()*reconnectDelay;this.log_('Trying to reconnect in '+reconnectDelay+'ms');this.scheduleConnect_(reconnectDelay);// Adjust reconnect delay for next time.
this.reconnectDelay_=Math.min(this.maxReconnectDelay_,this.reconnectDelay_*RECONNECT_DELAY_MULTIPLIER);}this.onConnectStatus_(false);}},{key:"establishConnection_",value:function establishConnection_(){var _this35=this;if(this.shouldReconnect_()){this.log_('Making a connection attempt');this.lastConnectionAttemptTime_=new Date().getTime();this.lastConnectionEstablishedTime_=null;var onDataMessage=this.onDataMessage_.bind(this);var onReady=this.onReady_.bind(this);var onDisconnect=this.onRealtimeDisconnect_.bind(this);var connId=this.id+':'+PersistentConnection.nextConnectionId_++;var self=this;var lastSessionId=this.lastSessionId;var canceled=false;var connection=null;var closeFn=function closeFn(){if(connection){connection.close();}else{canceled=true;onDisconnect();}};var sendRequestFn=function sendRequestFn(msg){(0,_util.assert)(connection,"sendRequest call when we're not connected not allowed.");connection.sendRequest(msg);};this.realtime_={close:closeFn,sendRequest:sendRequestFn};var forceRefresh=this.forceTokenRefresh_;this.forceTokenRefresh_=false;// First fetch auth token, and establish connection after fetching the token was successful
this.authTokenProvider_.getToken(forceRefresh).then(function(result){if(!canceled){log('getToken() completed. Creating connection.');self.authToken_=result&&result.accessToken;connection=new Connection(connId,self.repoInfo_,self.applicationId_,onDataMessage,onReady,onDisconnect,/* onKill= */function(reason){warn(reason+' ('+self.repoInfo_.toString()+')');self.interrupt(SERVER_KILL_INTERRUPT_REASON);},lastSessionId);}else{log('getToken() completed but was canceled');}}).then(null,function(error){self.log_('Failed to get token: '+error);if(!canceled){if(_this35.repoInfo_.nodeAdmin){// This may be a critical error for the Admin Node.js SDK, so log a warning.
// But getToken() may also just have temporarily failed, so we still want to
// continue retrying.
warn(error);}closeFn();}});}}},{key:"interrupt",value:function interrupt(reason){log('Interrupting connection for reason: '+reason);this.interruptReasons_[reason]=true;if(this.realtime_){this.realtime_.close();}else{if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);this.establishConnectionTimer_=null;}if(this.connected_){this.onRealtimeDisconnect_();}}}},{key:"resume",value:function resume(reason){log('Resuming connection for reason: '+reason);delete this.interruptReasons_[reason];if((0,_util.isEmpty)(this.interruptReasons_)){this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}}},{key:"handleTimestamp_",value:function handleTimestamp_(timestamp){var delta=timestamp-new Date().getTime();this.onServerInfoUpdate_({serverTimeOffset:delta});}},{key:"cancelSentTransactions_",value:function cancelSentTransactions_(){for(var i=0;i<this.outstandingPuts_.length;i++){var put=this.outstandingPuts_[i];if(put&&/*hash*/'h'in put.request&&put.queued){if(put.onComplete){put.onComplete('disconnect');}delete this.outstandingPuts_[i];this.outstandingPutCount_--;}}// Clean up array occasionally.
if(this.outstandingPutCount_===0){this.outstandingPuts_=[];}}},{key:"onListenRevoked_",value:function onListenRevoked_(pathString,query){// Remove the listen and manufacture a "permission_denied" error for the failed listen.
var queryId;if(!query){queryId='default';}else{queryId=query.map(function(q){return ObjectToUniqueKey(q);}).join('$');}var listen=this.removeListen_(pathString,queryId);if(listen&&listen.onComplete){listen.onComplete('permission_denied');}}},{key:"removeListen_",value:function removeListen_(pathString,queryId){var normalizedPathString=new Path(pathString).toString();// normalize path.
var listen;if(this.listens.has(normalizedPathString)){var _map=this.listens.get(normalizedPathString);listen=_map.get(queryId);_map["delete"](queryId);if(_map.size===0){this.listens["delete"](normalizedPathString);}}else{// all listens for this path has already been removed
listen=undefined;}return listen;}},{key:"onAuthRevoked_",value:function onAuthRevoked_(statusCode,explanation){log('Auth token revoked: '+statusCode+'/'+explanation);this.authToken_=null;this.forceTokenRefresh_=true;this.realtime_.close();if(statusCode==='invalid_token'||statusCode==='permission_denied'){// We'll wait a couple times before logging the warning / increasing the
// retry period since oauth tokens will report as "invalid" if they're
// just expired. Plus there may be transient issues that resolve themselves.
this.invalidAuthTokenCount_++;if(this.invalidAuthTokenCount_>=INVALID_AUTH_TOKEN_THRESHOLD){// Set a long reconnect delay because recovery is unlikely
this.reconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;// Notify the auth token provider that the token is invalid, which will log
// a warning
this.authTokenProvider_.notifyForInvalidToken();}}}},{key:"onSecurityDebugPacket_",value:function onSecurityDebugPacket_(body){if(this.securityDebugCallback_){this.securityDebugCallback_(body);}else{if('msg'in body){console.log('FIREBASE: '+body['msg'].replace('\n','\nFIREBASE: '));}}}},{key:"restoreState_",value:function restoreState_(){//Re-authenticate ourselves if we have a credential stored.
this.tryAuth();// Puts depend on having received the corresponding data update from the server before they complete, so we must
// make sure to send listens before puts.
var _iteratorNormalCompletion8=true;var _didIteratorError8=false;var _iteratorError8=undefined;try{for(var _iterator8=this.listens.values()[Symbol.iterator](),_step8;!(_iteratorNormalCompletion8=(_step8=_iterator8.next()).done);_iteratorNormalCompletion8=true){var queries=_step8.value;var _iteratorNormalCompletion9=true;var _didIteratorError9=false;var _iteratorError9=undefined;try{for(var _iterator9=queries.values()[Symbol.iterator](),_step9;!(_iteratorNormalCompletion9=(_step9=_iterator9.next()).done);_iteratorNormalCompletion9=true){var listenSpec=_step9.value;this.sendListen_(listenSpec);}}catch(err){_didIteratorError9=true;_iteratorError9=err;}finally{try{if(!_iteratorNormalCompletion9&&_iterator9["return"]!=null){_iterator9["return"]();}}finally{if(_didIteratorError9){throw _iteratorError9;}}}}}catch(err){_didIteratorError8=true;_iteratorError8=err;}finally{try{if(!_iteratorNormalCompletion8&&_iterator8["return"]!=null){_iterator8["return"]();}}finally{if(_didIteratorError8){throw _iteratorError8;}}}for(var i=0;i<this.outstandingPuts_.length;i++){if(this.outstandingPuts_[i]){this.sendPut_(i);}}while(this.onDisconnectRequestQueue_.length){var request=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(request.action,request.pathString,request.data,request.onComplete);}}/**
     * Sends client stats for first connection
     */},{key:"sendConnectStats_",value:function sendConnectStats_(){var stats={};var clientName='js';if((0,_util.isNodeSdk)()){if(this.repoInfo_.nodeAdmin){clientName='admin_node';}else{clientName='node';}}stats['sdk.'+clientName+'.'+SDK_VERSION.replace(/\./g,'-')]=1;if((0,_util.isMobileCordova)()){stats['framework.cordova']=1;}else if((0,_util.isReactNative)()){stats['framework.reactnative']=1;}this.reportStats(stats);}},{key:"shouldReconnect_",value:function shouldReconnect_(){var online=OnlineMonitor.getInstance().currentlyOnline();return(0,_util.isEmpty)(this.interruptReasons_)&&online;}}],[{key:"warnOnListenWarnings_",value:function warnOnListenWarnings_(payload,query){if(payload&&_typeof(payload)==='object'&&(0,_util.contains)(payload,'w')){// eslint-disable-next-line @typescript-eslint/no-explicit-any
var warnings=(0,_util.safeGet)(payload,'w');if(Array.isArray(warnings)&&~warnings.indexOf('no_index')){var indexSpec='".indexOn": "'+query.getQueryParams().getIndex().toString()+'"';var indexPath=query.path.toString();warn("Using an unspecified index. Your data will be downloaded and "+"filtered on the client. Consider adding ".concat(indexSpec," at ")+"".concat(indexPath," to your security rules for better performance."));}}}}]);return PersistentConnection;}(ServerActions);PersistentConnection.nextPersistentConnectionId_=0;/**
 * Counter for number of connections created. Mainly used for tagging in the logs
 */PersistentConnection.nextConnectionId_=0;/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */var ReadonlyRestClient=/*#__PURE__*/function(_ServerActions2){_inherits(ReadonlyRestClient,_ServerActions2);/**
     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
     * @param {AuthTokenProvider} authTokenProvider_
     * @implements {ServerActions}
     */function ReadonlyRestClient(repoInfo_,onDataUpdate_,authTokenProvider_){var _this36;_classCallCheck(this,ReadonlyRestClient);_this36=_possibleConstructorReturn(this,_getPrototypeOf(ReadonlyRestClient).call(this));_this36.repoInfo_=repoInfo_;_this36.onDataUpdate_=onDataUpdate_;_this36.authTokenProvider_=authTokenProvider_;/** @private {function(...[*])} */_this36.log_=logWrapper('p:rest:');/**
         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
         * that's been removed. :-/
         *
         * @private {!Object.<string, !Object>}
         */_this36.listens_={};return _this36;}_createClass(ReadonlyRestClient,[{key:"reportStats",value:function reportStats(stats){throw new Error('Method not implemented.');}/**
     * @param {!Query} query
     * @param {?number=} tag
     * @return {string}
     * @private
     */},{key:"listen",/** @inheritDoc */value:function listen(query,currentHashFn,tag,onComplete){var _this37=this;var pathString=query.path.toString();this.log_('Listen called for '+pathString+' '+query.queryIdentifier());// Mark this listener so we can tell if it's removed.
var listenId=ReadonlyRestClient.getListenId_(query,tag);var thisListen={};this.listens_[listenId]=thisListen;var queryStringParameters=query.getQueryParams().toRestQueryStringParameters();this.restRequest_(pathString+'.json',queryStringParameters,function(error,result){var data=result;if(error===404){data=null;error=null;}if(error===null){_this37.onDataUpdate_(pathString,data,/*isMerge=*/false,tag);}if((0,_util.safeGet)(_this37.listens_,listenId)===thisListen){var status;if(!error){status='ok';}else if(error===401){status='permission_denied';}else{status='rest_error:'+error;}onComplete(status,null);}});}/** @inheritDoc */},{key:"unlisten",value:function unlisten(query,tag){var listenId=ReadonlyRestClient.getListenId_(query,tag);delete this.listens_[listenId];}/** @inheritDoc */},{key:"refreshAuthToken",value:function refreshAuthToken(token){}// no-op since we just always call getToken.
/**
     * Performs a REST request to the given path, with the provided query string parameters,
     * and any auth credentials we have.
     *
     * @param {!string} pathString
     * @param {!Object.<string, *>} queryStringParameters
     * @param {?function(?number, *=)} callback
     * @private
     */},{key:"restRequest_",value:function restRequest_(pathString){var _this38=this;var queryStringParameters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var callback=arguments.length>2?arguments[2]:undefined;queryStringParameters['format']='export';this.authTokenProvider_.getToken(/*forceRefresh=*/false).then(function(authTokenData){var authToken=authTokenData&&authTokenData.accessToken;if(authToken){queryStringParameters['auth']=authToken;}var url=(_this38.repoInfo_.secure?'https://':'http://')+_this38.repoInfo_.host+pathString+'?'+'ns='+_this38.repoInfo_.namespace+(0,_util.querystring)(queryStringParameters);_this38.log_('Sending REST request for '+url);var xhr=new XMLHttpRequest();xhr.onreadystatechange=function(){if(callback&&xhr.readyState===4){_this38.log_('REST Response for '+url+' received. status:',xhr.status,'response:',xhr.responseText);var res=null;if(xhr.status>=200&&xhr.status<300){try{res=(0,_util.jsonEval)(xhr.responseText);}catch(e){warn('Failed to parse JSON response for '+url+': '+xhr.responseText);}callback(null,res);}else{// 401 and 404 are expected.
if(xhr.status!==401&&xhr.status!==404){warn('Got unsuccessful REST response for '+url+' Status: '+xhr.status);}callback(xhr.status);}callback=null;}};xhr.open('GET',url,/*asynchronous=*/true);xhr.send();});}}],[{key:"getListenId_",value:function getListenId_(query,tag){if(tag!==undefined){return'tag$'+tag;}else{(0,_util.assert)(query.getQueryParams().isDefault(),"should have a tag if it's not a default query.");return query.path.toString();}}}]);return ReadonlyRestClient;}(ServerActions);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var INTERRUPT_REASON='repo_interrupt';/**
 * A connection to a single data repository.
 */var Repo=/*#__PURE__*/function(){function Repo(repoInfo_,forceRestClient,app,authTokenProvider){var _this39=this;_classCallCheck(this,Repo);this.repoInfo_=repoInfo_;this.app=app;this.dataUpdateCount=0;this.statsListener_=null;this.eventQueue_=new EventQueue();this.nextWriteId_=1;this.interceptServerDataCallback_=null;/** A list of data pieces and paths to be set when this client disconnects. */this.onDisconnect_=new SparseSnapshotTree();// TODO: This should be @private but it's used by test_access.js and internal.js
this.persistentConnection_=null;this.stats_=StatsManager.getCollection(repoInfo_);if(forceRestClient||beingCrawled()){this.server_=new ReadonlyRestClient(this.repoInfo_,this.onDataUpdate_.bind(this),authTokenProvider);// Minor hack: Fire onConnect immediately, since there's no actual connection.
setTimeout(this.onConnectStatus_.bind(this,true),0);}else{var authOverride=app.options['databaseAuthVariableOverride'];// Validate authOverride
if(typeof authOverride!=='undefined'&&authOverride!==null){if(_typeof(authOverride)!=='object'){throw new Error('Only objects are supported for option databaseAuthVariableOverride');}try{(0,_util.stringify)(authOverride);}catch(e){throw new Error('Invalid authOverride provided: '+e);}}this.persistentConnection_=new PersistentConnection(this.repoInfo_,app.options.appId,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),authTokenProvider,authOverride);this.server_=this.persistentConnection_;}authTokenProvider.addTokenChangeListener(function(token){_this39.server_.refreshAuthToken(token);});// In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
// we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
this.statsReporter_=StatsManager.getOrCreateReporter(repoInfo_,function(){return new StatsReporter(_this39.stats_,_this39.server_);});this.transactionsInit_();// Used for .info.
this.infoData_=new SnapshotHolder();this.infoSyncTree_=new SyncTree({startListening:function startListening(query,tag,currentHashFn,onComplete){var infoEvents=[];var node=_this39.infoData_.getNode(query.path);// This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
// on initial data...
if(!node.isEmpty()){infoEvents=_this39.infoSyncTree_.applyServerOverwrite(query.path,node);setTimeout(function(){onComplete('ok');},0);}return infoEvents;},stopListening:function stopListening(){}});this.updateInfo_('connected',false);this.serverSyncTree_=new SyncTree({startListening:function startListening(query,tag,currentHashFn,onComplete){_this39.server_.listen(query,currentHashFn,tag,function(status,data){var events=onComplete(status,data);_this39.eventQueue_.raiseEventsForChangedPath(query.path,events);});// No synchronous events for network-backed sync trees
return[];},stopListening:function stopListening(query,tag){_this39.server_.unlisten(query,tag);}});}/**
     * @return The URL corresponding to the root of this Firebase.
     */_createClass(Repo,[{key:"toString",value:function toString(){return(this.repoInfo_.secure?'https://':'http://')+this.repoInfo_.host;}/**
     * @return The namespace represented by the repo.
     */},{key:"name",value:function name(){return this.repoInfo_.namespace;}/**
     * @return The time in milliseconds, taking the server offset into account if we have one.
     */},{key:"serverTime",value:function serverTime(){var offsetNode=this.infoData_.getNode(new Path('.info/serverTimeOffset'));var offset=offsetNode.val()||0;return new Date().getTime()+offset;}/**
     * Generate ServerValues using some variables from the repo object.
     */},{key:"generateServerValues",value:function generateServerValues(){return generateWithValues({timestamp:this.serverTime()});}/**
     * Called by realtime when we get new messages from the server.
     */},{key:"onDataUpdate_",value:function onDataUpdate_(pathString,data,isMerge,tag){// For testing.
this.dataUpdateCount++;var path=new Path(pathString);data=this.interceptServerDataCallback_?this.interceptServerDataCallback_(pathString,data):data;var events=[];if(tag){if(isMerge){var taggedChildren=(0,_util.map)(data,function(raw){return nodeFromJSON$1(raw);});events=this.serverSyncTree_.applyTaggedQueryMerge(path,taggedChildren,tag);}else{var taggedSnap=nodeFromJSON$1(data);events=this.serverSyncTree_.applyTaggedQueryOverwrite(path,taggedSnap,tag);}}else if(isMerge){var changedChildren=(0,_util.map)(data,function(raw){return nodeFromJSON$1(raw);});events=this.serverSyncTree_.applyServerMerge(path,changedChildren);}else{var snap=nodeFromJSON$1(data);events=this.serverSyncTree_.applyServerOverwrite(path,snap);}var affectedPath=path;if(events.length>0){// Since we have a listener outstanding for each transaction, receiving any events
// is a proxy for some change having occurred.
affectedPath=this.rerunTransactions_(path);}this.eventQueue_.raiseEventsForChangedPath(affectedPath,events);}// TODO: This should be @private but it's used by test_access.js and internal.js
},{key:"interceptServerData_",value:function interceptServerData_(callback){this.interceptServerDataCallback_=callback;}},{key:"onConnectStatus_",value:function onConnectStatus_(connectStatus){this.updateInfo_('connected',connectStatus);if(connectStatus===false){this.runOnDisconnectEvents_();}}},{key:"onServerInfoUpdate_",value:function onServerInfoUpdate_(updates){var _this40=this;each(updates,function(key,value){_this40.updateInfo_(key,value);});}},{key:"updateInfo_",value:function updateInfo_(pathString,value){var path=new Path('/.info/'+pathString);var newNode=nodeFromJSON$1(value);this.infoData_.updateSnapshot(path,newNode);var events=this.infoSyncTree_.applyServerOverwrite(path,newNode);this.eventQueue_.raiseEventsForChangedPath(path,events);}},{key:"getNextWriteId_",value:function getNextWriteId_(){return this.nextWriteId_++;}},{key:"setWithPriority",value:function setWithPriority(path,newVal,newPriority,onComplete){var _this41=this;this.log_('set',{path:path.toString(),value:newVal,priority:newPriority});// TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
// (b) store unresolved paths on JSON parse
var serverValues=this.generateServerValues();var newNodeUnresolved=nodeFromJSON$1(newVal,newPriority);var existing=this.serverSyncTree_.calcCompleteEventCache(path);var newNode=resolveDeferredValueSnapshot(newNodeUnresolved,existing,serverValues);var writeId=this.getNextWriteId_();var events=this.serverSyncTree_.applyUserOverwrite(path,newNode,writeId,true);this.eventQueue_.queueEvents(events);this.server_.put(path.toString(),newNodeUnresolved.val(/*export=*/true),function(status,errorReason){var success=status==='ok';if(!success){warn('set at '+path+' failed: '+status);}var clearEvents=_this41.serverSyncTree_.ackUserWrite(writeId,!success);_this41.eventQueue_.raiseEventsForChangedPath(path,clearEvents);_this41.callOnCompleteCallback(onComplete,status,errorReason);});var affectedPath=this.abortTransactions_(path);this.rerunTransactions_(affectedPath);// We queued the events above, so just flush the queue here
this.eventQueue_.raiseEventsForChangedPath(affectedPath,[]);}},{key:"update",value:function update(path,childrenToMerge,onComplete){var _this42=this;this.log_('update',{path:path.toString(),value:childrenToMerge});// Start with our existing data and merge each child into it.
var empty=true;var serverValues=this.generateServerValues();var changedChildren={};each(childrenToMerge,function(changedKey,changedValue){empty=false;changedChildren[changedKey]=resolveDeferredValueTree(path.child(changedKey),nodeFromJSON$1(changedValue),_this42.serverSyncTree_,serverValues);});if(!empty){var writeId=this.getNextWriteId_();var events=this.serverSyncTree_.applyUserMerge(path,changedChildren,writeId);this.eventQueue_.queueEvents(events);this.server_.merge(path.toString(),childrenToMerge,function(status,errorReason){var success=status==='ok';if(!success){warn('update at '+path+' failed: '+status);}var clearEvents=_this42.serverSyncTree_.ackUserWrite(writeId,!success);var affectedPath=clearEvents.length>0?_this42.rerunTransactions_(path):path;_this42.eventQueue_.raiseEventsForChangedPath(affectedPath,clearEvents);_this42.callOnCompleteCallback(onComplete,status,errorReason);});each(childrenToMerge,function(changedPath){var affectedPath=_this42.abortTransactions_(path.child(changedPath));_this42.rerunTransactions_(affectedPath);});// We queued the events above, so just flush the queue here
this.eventQueue_.raiseEventsForChangedPath(path,[]);}else{log("update() called with empty data.  Don't do anything.");this.callOnCompleteCallback(onComplete,'ok');}}/**
     * Applies all of the changes stored up in the onDisconnect_ tree.
     */},{key:"runOnDisconnectEvents_",value:function runOnDisconnectEvents_(){var _this43=this;this.log_('onDisconnectEvents');var serverValues=this.generateServerValues();var resolvedOnDisconnectTree=new SparseSnapshotTree();this.onDisconnect_.forEachTree(Path.Empty,function(path,node){var resolved=resolveDeferredValueTree(path,node,_this43.serverSyncTree_,serverValues);resolvedOnDisconnectTree.remember(path,resolved);});var events=[];resolvedOnDisconnectTree.forEachTree(Path.Empty,function(path,snap){events=events.concat(_this43.serverSyncTree_.applyServerOverwrite(path,snap));var affectedPath=_this43.abortTransactions_(path);_this43.rerunTransactions_(affectedPath);});this.onDisconnect_=new SparseSnapshotTree();this.eventQueue_.raiseEventsForChangedPath(Path.Empty,events);}},{key:"onDisconnectCancel",value:function onDisconnectCancel(path,onComplete){var _this44=this;this.server_.onDisconnectCancel(path.toString(),function(status,errorReason){if(status==='ok'){_this44.onDisconnect_.forget(path);}_this44.callOnCompleteCallback(onComplete,status,errorReason);});}},{key:"onDisconnectSet",value:function onDisconnectSet(path,value,onComplete){var _this45=this;var newNode=nodeFromJSON$1(value);this.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),function(status,errorReason){if(status==='ok'){_this45.onDisconnect_.remember(path,newNode);}_this45.callOnCompleteCallback(onComplete,status,errorReason);});}},{key:"onDisconnectSetWithPriority",value:function onDisconnectSetWithPriority(path,value,priority,onComplete){var _this46=this;var newNode=nodeFromJSON$1(value,priority);this.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),function(status,errorReason){if(status==='ok'){_this46.onDisconnect_.remember(path,newNode);}_this46.callOnCompleteCallback(onComplete,status,errorReason);});}},{key:"onDisconnectUpdate",value:function onDisconnectUpdate(path,childrenToMerge,onComplete){var _this47=this;if((0,_util.isEmpty)(childrenToMerge)){log("onDisconnect().update() called with empty data.  Don't do anything.");this.callOnCompleteCallback(onComplete,'ok');return;}this.server_.onDisconnectMerge(path.toString(),childrenToMerge,function(status,errorReason){if(status==='ok'){each(childrenToMerge,function(childName,childNode){var newChildNode=nodeFromJSON$1(childNode);_this47.onDisconnect_.remember(path.child(childName),newChildNode);});}_this47.callOnCompleteCallback(onComplete,status,errorReason);});}},{key:"addEventCallbackForQuery",value:function addEventCallbackForQuery(query,eventRegistration){var events;if(query.path.getFront()==='.info'){events=this.infoSyncTree_.addEventRegistration(query,eventRegistration);}else{events=this.serverSyncTree_.addEventRegistration(query,eventRegistration);}this.eventQueue_.raiseEventsAtPath(query.path,events);}},{key:"removeEventCallbackForQuery",value:function removeEventCallbackForQuery(query,eventRegistration){// These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
// a little bit by handling the return values anyways.
var events;if(query.path.getFront()==='.info'){events=this.infoSyncTree_.removeEventRegistration(query,eventRegistration);}else{events=this.serverSyncTree_.removeEventRegistration(query,eventRegistration);}this.eventQueue_.raiseEventsAtPath(query.path,events);}},{key:"interrupt",value:function interrupt(){if(this.persistentConnection_){this.persistentConnection_.interrupt(INTERRUPT_REASON);}}},{key:"resume",value:function resume(){if(this.persistentConnection_){this.persistentConnection_.resume(INTERRUPT_REASON);}}},{key:"stats",value:function stats(){var showDelta=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(typeof console==='undefined'){return;}var stats;if(showDelta){if(!this.statsListener_){this.statsListener_=new StatsListener(this.stats_);}stats=this.statsListener_.get();}else{stats=this.stats_.get();}var longestName=Object.keys(stats).reduce(function(previousValue,currentValue){return Math.max(currentValue.length,previousValue);},0);each(stats,function(stat,value){var paddedStat=stat;// pad stat names to be the same length (plus 2 extra spaces).
for(var i=stat.length;i<longestName+2;i++){paddedStat+=' ';}console.log(paddedStat+value);});}},{key:"statsIncrementCounter",value:function statsIncrementCounter(metric){this.stats_.incrementCounter(metric);this.statsReporter_.includeStat(metric);}},{key:"log_",value:function log_(){var prefix='';if(this.persistentConnection_){prefix=this.persistentConnection_.id+':';}for(var _len6=arguments.length,varArgs=new Array(_len6),_key7=0;_key7<_len6;_key7++){varArgs[_key7]=arguments[_key7];}log.apply(void 0,[prefix].concat(varArgs));}},{key:"callOnCompleteCallback",value:function callOnCompleteCallback(callback,status,errorReason){if(callback){exceptionGuard(function(){if(status==='ok'){callback(null);}else{var code=(status||'error').toUpperCase();var message=code;if(errorReason){message+=': '+errorReason;}var _error4=new Error(message);// eslint-disable-next-line @typescript-eslint/no-explicit-any
_error4.code=code;callback(_error4);}});}}},{key:"database",get:function get(){return this.__database||(this.__database=new Database(this));}}]);return Repo;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 *
 * @constructor
 * @implements {NodeFilter}
 */var RangedFilter=/*#__PURE__*/function(){/**
     * @param {!QueryParams} params
     */function RangedFilter(params){_classCallCheck(this,RangedFilter);this.indexedFilter_=new IndexedFilter(params.getIndex());this.index_=params.getIndex();this.startPost_=RangedFilter.getStartPost_(params);this.endPost_=RangedFilter.getEndPost_(params);}/**
     * @return {!NamedNode}
     */_createClass(RangedFilter,[{key:"getStartPost",value:function getStartPost(){return this.startPost_;}/**
     * @return {!NamedNode}
     */},{key:"getEndPost",value:function getEndPost(){return this.endPost_;}/**
     * @param {!NamedNode} node
     * @return {boolean}
     */},{key:"matches",value:function matches(node){return this.index_.compare(this.getStartPost(),node)<=0&&this.index_.compare(node,this.getEndPost())<=0;}/**
     * @inheritDoc
     */},{key:"updateChild",value:function updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}return this.indexedFilter_.updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);}/**
     * @inheritDoc
     */},{key:"updateFullNode",value:function updateFullNode(oldSnap,newSnap,optChangeAccumulator){if(newSnap.isLeafNode()){// Make sure we have a children node with the correct index, not a leaf node;
newSnap=ChildrenNode.EMPTY_NODE;}var filtered=newSnap.withIndex(this.index_);// Don't support priorities on queries
filtered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);var self=this;newSnap.forEachChild(PRIORITY_INDEX,function(key,childNode){if(!self.matches(new NamedNode(key,childNode))){filtered=filtered.updateImmediateChild(key,ChildrenNode.EMPTY_NODE);}});return this.indexedFilter_.updateFullNode(oldSnap,filtered,optChangeAccumulator);}/**
     * @inheritDoc
     */},{key:"updatePriority",value:function updatePriority(oldSnap,newPriority){// Don't support priorities on queries
return oldSnap;}/**
     * @inheritDoc
     */},{key:"filtersNodes",value:function filtersNodes(){return true;}/**
     * @inheritDoc
     */},{key:"getIndexedFilter",value:function getIndexedFilter(){return this.indexedFilter_;}/**
     * @inheritDoc
     */},{key:"getIndex",value:function getIndex(){return this.index_;}/**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */}],[{key:"getStartPost_",value:function getStartPost_(params){if(params.hasStart()){var startName=params.getIndexStartName();return params.getIndex().makePost(params.getIndexStartValue(),startName);}else{return params.getIndex().minPost();}}/**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */},{key:"getEndPost_",value:function getEndPost_(params){if(params.hasEnd()){var endName=params.getIndexEndName();return params.getIndex().makePost(params.getIndexEndValue(),endName);}else{return params.getIndex().maxPost();}}}]);return RangedFilter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 *
 * @constructor
 * @implements {NodeFilter}
 */var LimitedFilter=/*#__PURE__*/function(){/**
     * @param {!QueryParams} params
     */function LimitedFilter(params){_classCallCheck(this,LimitedFilter);this.rangedFilter_=new RangedFilter(params);this.index_=params.getIndex();this.limit_=params.getLimit();this.reverse_=!params.isViewFromLeft();}/**
     * @inheritDoc
     */_createClass(LimitedFilter,[{key:"updateChild",value:function updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.rangedFilter_.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}if(snap.getImmediateChild(key).equals(newChild)){// No change
return snap;}else if(snap.numChildren()<this.limit_){return this.rangedFilter_.getIndexedFilter().updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);}else{return this.fullLimitUpdateChild_(snap,key,newChild,source,optChangeAccumulator);}}/**
     * @inheritDoc
     */},{key:"updateFullNode",value:function updateFullNode(oldSnap,newSnap,optChangeAccumulator){var filtered;if(newSnap.isLeafNode()||newSnap.isEmpty()){// Make sure we have a children node with the correct index, not a leaf node;
filtered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);}else{if(this.limit_*2<newSnap.numChildren()&&newSnap.isIndexed(this.index_)){// Easier to build up a snapshot, since what we're given has more than twice the elements we want
filtered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);// anchor to the startPost, endPost, or last element as appropriate
var iterator;if(this.reverse_){iterator=newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_);}else{iterator=newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);}var count=0;while(iterator.hasNext()&&count<this.limit_){var next=iterator.getNext();var inRange=void 0;if(this.reverse_){inRange=this.index_.compare(this.rangedFilter_.getStartPost(),next)<=0;}else{inRange=this.index_.compare(next,this.rangedFilter_.getEndPost())<=0;}if(inRange){filtered=filtered.updateImmediateChild(next.name,next.node);count++;}else{// if we have reached the end post, we cannot keep adding elemments
break;}}}else{// The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
filtered=newSnap.withIndex(this.index_);// Don't support priorities on queries
filtered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);var startPost;var endPost;var _cmp2;var _iterator10;if(this.reverse_){_iterator10=filtered.getReverseIterator(this.index_);startPost=this.rangedFilter_.getEndPost();endPost=this.rangedFilter_.getStartPost();var indexCompare=this.index_.getCompare();_cmp2=function _cmp2(a,b){return indexCompare(b,a);};}else{_iterator10=filtered.getIterator(this.index_);startPost=this.rangedFilter_.getStartPost();endPost=this.rangedFilter_.getEndPost();_cmp2=this.index_.getCompare();}var _count=0;var foundStartPost=false;while(_iterator10.hasNext()){var _next=_iterator10.getNext();if(!foundStartPost&&_cmp2(startPost,_next)<=0){// start adding
foundStartPost=true;}var _inRange=foundStartPost&&_count<this.limit_&&_cmp2(_next,endPost)<=0;if(_inRange){_count++;}else{filtered=filtered.updateImmediateChild(_next.name,ChildrenNode.EMPTY_NODE);}}}}return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap,filtered,optChangeAccumulator);}/**
     * @inheritDoc
     */},{key:"updatePriority",value:function updatePriority(oldSnap,newPriority){// Don't support priorities on queries
return oldSnap;}/**
     * @inheritDoc
     */},{key:"filtersNodes",value:function filtersNodes(){return true;}/**
     * @inheritDoc
     */},{key:"getIndexedFilter",value:function getIndexedFilter(){return this.rangedFilter_.getIndexedFilter();}/**
     * @inheritDoc
     */},{key:"getIndex",value:function getIndex(){return this.index_;}/**
     * @param {!Node} snap
     * @param {string} childKey
     * @param {!Node} childSnap
     * @param {!CompleteChildSource} source
     * @param {?ChildChangeAccumulator} changeAccumulator
     * @return {!Node}
     * @private
     */},{key:"fullLimitUpdateChild_",value:function fullLimitUpdateChild_(snap,childKey,childSnap,source,changeAccumulator){// TODO: rename all cache stuff etc to general snap terminology
var cmp;if(this.reverse_){var indexCmp=this.index_.getCompare();cmp=function cmp(a,b){return indexCmp(b,a);};}else{cmp=this.index_.getCompare();}var oldEventCache=snap;(0,_util.assert)(oldEventCache.numChildren()===this.limit_,'');var newChildNamedNode=new NamedNode(childKey,childSnap);var windowBoundary=this.reverse_?oldEventCache.getFirstChild(this.index_):oldEventCache.getLastChild(this.index_);var inRange=this.rangedFilter_.matches(newChildNamedNode);if(oldEventCache.hasChild(childKey)){var oldChildSnap=oldEventCache.getImmediateChild(childKey);var nextChild=source.getChildAfterChild(this.index_,windowBoundary,this.reverse_);while(nextChild!=null&&(nextChild.name===childKey||oldEventCache.hasChild(nextChild.name))){// There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
// been applied to the limited filter yet. Ignore this next child which will be updated later in
// the limited filter...
nextChild=source.getChildAfterChild(this.index_,nextChild,this.reverse_);}var compareNext=nextChild==null?1:cmp(nextChild,newChildNamedNode);var remainsInWindow=inRange&&!childSnap.isEmpty()&&compareNext>=0;if(remainsInWindow){if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childChangedChange(childKey,childSnap,oldChildSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap);}else{if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childRemovedChange(childKey,oldChildSnap));}var newEventCache=oldEventCache.updateImmediateChild(childKey,ChildrenNode.EMPTY_NODE);var nextChildInRange=nextChild!=null&&this.rangedFilter_.matches(nextChild);if(nextChildInRange){if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name,nextChild.node));}return newEventCache.updateImmediateChild(nextChild.name,nextChild.node);}else{return newEventCache;}}}else if(childSnap.isEmpty()){// we're deleting a node, but it was not in the window, so ignore it
return snap;}else if(inRange){if(cmp(windowBoundary,newChildNamedNode)>=0){if(changeAccumulator!=null){changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name,windowBoundary.node));changeAccumulator.trackChildChange(Change.childAddedChange(childKey,childSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap).updateImmediateChild(windowBoundary.name,ChildrenNode.EMPTY_NODE);}else{return snap;}}else{return snap;}}}]);return LimitedFilter;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 * @constructor
 */var QueryParams=/*#__PURE__*/function(){function QueryParams(){_classCallCheck(this,QueryParams);this.limitSet_=false;this.startSet_=false;this.startNameSet_=false;this.endSet_=false;this.endNameSet_=false;this.limit_=0;this.viewFrom_='';this.indexStartValue_=null;this.indexStartName_='';this.indexEndValue_=null;this.indexEndName_='';this.index_=PRIORITY_INDEX;}/**
     * @return {boolean}
     */_createClass(QueryParams,[{key:"hasStart",value:function hasStart(){return this.startSet_;}/**
     * @return {boolean} True if it would return from left.
     */},{key:"isViewFromLeft",value:function isViewFromLeft(){if(this.viewFrom_===''){// limit(), rather than limitToFirst or limitToLast was called.
// This means that only one of startSet_ and endSet_ is true. Use them
// to calculate which side of the view to anchor to. If neither is set,
// anchor to the end.
return this.startSet_;}else{return this.viewFrom_===QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;}}/**
     * Only valid to call if hasStart() returns true
     * @return {*}
     */},{key:"getIndexStartValue",value:function getIndexStartValue(){(0,_util.assert)(this.startSet_,'Only valid if start has been set');return this.indexStartValue_;}/**
     * Only valid to call if hasStart() returns true.
     * Returns the starting key name for the range defined by these query parameters
     * @return {!string}
     */},{key:"getIndexStartName",value:function getIndexStartName(){(0,_util.assert)(this.startSet_,'Only valid if start has been set');if(this.startNameSet_){return this.indexStartName_;}else{return MIN_NAME;}}/**
     * @return {boolean}
     */},{key:"hasEnd",value:function hasEnd(){return this.endSet_;}/**
     * Only valid to call if hasEnd() returns true.
     * @return {*}
     */},{key:"getIndexEndValue",value:function getIndexEndValue(){(0,_util.assert)(this.endSet_,'Only valid if end has been set');return this.indexEndValue_;}/**
     * Only valid to call if hasEnd() returns true.
     * Returns the end key name for the range defined by these query parameters
     * @return {!string}
     */},{key:"getIndexEndName",value:function getIndexEndName(){(0,_util.assert)(this.endSet_,'Only valid if end has been set');if(this.endNameSet_){return this.indexEndName_;}else{return MAX_NAME;}}/**
     * @return {boolean}
     */},{key:"hasLimit",value:function hasLimit(){return this.limitSet_;}/**
     * @return {boolean} True if a limit has been set and it has been explicitly anchored
     */},{key:"hasAnchoredLimit",value:function hasAnchoredLimit(){return this.limitSet_&&this.viewFrom_!=='';}/**
     * Only valid to call if hasLimit() returns true
     * @return {!number}
     */},{key:"getLimit",value:function getLimit(){(0,_util.assert)(this.limitSet_,'Only valid if limit has been set');return this.limit_;}/**
     * @return {!Index}
     */},{key:"getIndex",value:function getIndex(){return this.index_;}/**
     * @return {!QueryParams}
     * @private
     */},{key:"copy_",value:function copy_(){var copy=new QueryParams();copy.limitSet_=this.limitSet_;copy.limit_=this.limit_;copy.startSet_=this.startSet_;copy.indexStartValue_=this.indexStartValue_;copy.startNameSet_=this.startNameSet_;copy.indexStartName_=this.indexStartName_;copy.endSet_=this.endSet_;copy.indexEndValue_=this.indexEndValue_;copy.endNameSet_=this.endNameSet_;copy.indexEndName_=this.indexEndName_;copy.index_=this.index_;copy.viewFrom_=this.viewFrom_;return copy;}/**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */},{key:"limit",value:function limit(newLimit){var newParams=this.copy_();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_='';return newParams;}/**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */},{key:"limitToFirst",value:function limitToFirst(newLimit){var newParams=this.copy_();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;return newParams;}/**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */},{key:"limitToLast",value:function limitToLast(newLimit){var newParams=this.copy_();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;return newParams;}/**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */},{key:"startAt",value:function startAt(indexValue,key){var newParams=this.copy_();newParams.startSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexStartValue_=indexValue;if(key!=null){newParams.startNameSet_=true;newParams.indexStartName_=key;}else{newParams.startNameSet_=false;newParams.indexStartName_='';}return newParams;}/**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */},{key:"endAt",value:function endAt(indexValue,key){var newParams=this.copy_();newParams.endSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexEndValue_=indexValue;if(key!==undefined){newParams.endNameSet_=true;newParams.indexEndName_=key;}else{newParams.endNameSet_=false;newParams.indexEndName_='';}return newParams;}/**
     * @param {!Index} index
     * @return {!QueryParams}
     */},{key:"orderBy",value:function orderBy(index){var newParams=this.copy_();newParams.index_=index;return newParams;}/**
     * @return {!Object}
     */},{key:"getQueryObject",value:function getQueryObject(){var WIRE_PROTOCOL_CONSTANTS=QueryParams.WIRE_PROTOCOL_CONSTANTS_;var obj={};if(this.startSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE]=this.indexStartValue_;if(this.startNameSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME]=this.indexStartName_;}}if(this.endSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE]=this.indexEndValue_;if(this.endNameSet_){obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME]=this.indexEndName_;}}if(this.limitSet_){obj[WIRE_PROTOCOL_CONSTANTS.LIMIT]=this.limit_;var viewFrom=this.viewFrom_;if(viewFrom===''){if(this.isViewFromLeft()){viewFrom=WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;}else{viewFrom=WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;}}obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM]=viewFrom;}// For now, priority index is the default, so we only specify if it's some other index
if(this.index_!==PRIORITY_INDEX){obj[WIRE_PROTOCOL_CONSTANTS.INDEX]=this.index_.toString();}return obj;}/**
     * @return {boolean}
     */},{key:"loadsAllData",value:function loadsAllData(){return!(this.startSet_||this.endSet_||this.limitSet_);}/**
     * @return {boolean}
     */},{key:"isDefault",value:function isDefault(){return this.loadsAllData()&&this.index_===PRIORITY_INDEX;}/**
     * @return {!NodeFilter}
     */},{key:"getNodeFilter",value:function getNodeFilter(){if(this.loadsAllData()){return new IndexedFilter(this.getIndex());}else if(this.hasLimit()){return new LimitedFilter(this);}else{return new RangedFilter(this);}}/**
     * Returns a set of REST query string parameters representing this query.
     *
     * @return {!Object.<string,*>} query string parameters
     */},{key:"toRestQueryStringParameters",value:function toRestQueryStringParameters(){var REST_CONSTANTS=QueryParams.REST_QUERY_CONSTANTS_;var qs={};if(this.isDefault()){return qs;}var orderBy;if(this.index_===PRIORITY_INDEX){orderBy=REST_CONSTANTS.PRIORITY_INDEX;}else if(this.index_===VALUE_INDEX){orderBy=REST_CONSTANTS.VALUE_INDEX;}else if(this.index_===KEY_INDEX){orderBy=REST_CONSTANTS.KEY_INDEX;}else{(0,_util.assert)(this.index_ instanceof PathIndex,'Unrecognized index type!');orderBy=this.index_.toString();}qs[REST_CONSTANTS.ORDER_BY]=(0,_util.stringify)(orderBy);if(this.startSet_){qs[REST_CONSTANTS.START_AT]=(0,_util.stringify)(this.indexStartValue_);if(this.startNameSet_){qs[REST_CONSTANTS.START_AT]+=','+(0,_util.stringify)(this.indexStartName_);}}if(this.endSet_){qs[REST_CONSTANTS.END_AT]=(0,_util.stringify)(this.indexEndValue_);if(this.endNameSet_){qs[REST_CONSTANTS.END_AT]+=','+(0,_util.stringify)(this.indexEndName_);}}if(this.limitSet_){if(this.isViewFromLeft()){qs[REST_CONSTANTS.LIMIT_TO_FIRST]=this.limit_;}else{qs[REST_CONSTANTS.LIMIT_TO_LAST]=this.limit_;}}return qs;}}]);return QueryParams;}();/**
 * Wire Protocol Constants
 * @const
 * @enum {string}
 * @private
 */QueryParams.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:'sp',INDEX_START_NAME:'sn',INDEX_END_VALUE:'ep',INDEX_END_NAME:'en',LIMIT:'l',VIEW_FROM:'vf',VIEW_FROM_LEFT:'l',VIEW_FROM_RIGHT:'r',INDEX:'i'};/**
 * REST Query Constants
 * @const
 * @enum {string}
 * @private
 */QueryParams.REST_QUERY_CONSTANTS_={ORDER_BY:'orderBy',PRIORITY_INDEX:'$priority',VALUE_INDEX:'$value',KEY_INDEX:'$key',START_AT:'startAt',END_AT:'endAt',LIMIT_TO_FIRST:'limitToFirst',LIMIT_TO_LAST:'limitToLast'};/**
 * Default, empty query parameters
 * @type {!QueryParams}
 * @const
 */QueryParams.DEFAULT=new QueryParams();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Reference=/*#__PURE__*/function(_Query){_inherits(Reference,_Query);/**
     * Call options:
     *   new Reference(Repo, Path) or
     *   new Reference(url: string, string|RepoManager)
     *
     * Externally - this is the firebase.database.Reference type.
     *
     * @param {!Repo} repo
     * @param {(!Path)} path
     * @extends {Query}
     */function Reference(repo,path){_classCallCheck(this,Reference);if(!(repo instanceof Repo)){throw new Error('new Reference() no longer supported - use app.database().');}// call Query's constructor, passing in the repo and path.
return _possibleConstructorReturn(this,_getPrototypeOf(Reference).call(this,repo,path,QueryParams.DEFAULT,false));}/** @return {?string} */_createClass(Reference,[{key:"getKey",value:function getKey(){(0,_util.validateArgCount)('Reference.key',0,0,arguments.length);if(this.path.isEmpty()){return null;}else{return this.path.getBack();}}/**
     * @param {!(string|Path)} pathString
     * @return {!Reference}
     */},{key:"child",value:function child(pathString){(0,_util.validateArgCount)('Reference.child',1,1,arguments.length);if(typeof pathString==='number'){pathString=String(pathString);}else if(!(pathString instanceof Path)){if(this.path.getFront()===null){validateRootPathString('Reference.child',1,pathString,false);}else{validatePathString('Reference.child',1,pathString,false);}}return new Reference(this.repo,this.path.child(pathString));}/** @return {?Reference} */},{key:"getParent",value:function getParent(){(0,_util.validateArgCount)('Reference.parent',0,0,arguments.length);var parentPath=this.path.parent();return parentPath===null?null:new Reference(this.repo,parentPath);}/** @return {!Reference} */},{key:"getRoot",value:function getRoot(){(0,_util.validateArgCount)('Reference.root',0,0,arguments.length);var ref=this;while(ref.getParent()!==null){ref=ref.getParent();}return ref;}/** @return {!Database} */},{key:"databaseProp",value:function databaseProp(){return this.repo.database;}/**
     * @param {*} newVal
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */},{key:"set",value:function set(newVal,onComplete){(0,_util.validateArgCount)('Reference.set',1,2,arguments.length);validateWritablePath('Reference.set',this.path);validateFirebaseDataArg('Reference.set',1,newVal,this.path,false);(0,_util.validateCallback)('Reference.set',2,onComplete,true);var deferred=new _util.Deferred();this.repo.setWithPriority(this.path,newVal,/*priority=*/null,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */},{key:"update",value:function update(objectToMerge,onComplete){(0,_util.validateArgCount)('Reference.update',1,2,arguments.length);validateWritablePath('Reference.update',this.path);if(Array.isArray(objectToMerge)){var newObjectToMerge={};for(var i=0;i<objectToMerge.length;++i){newObjectToMerge[''+i]=objectToMerge[i];}objectToMerge=newObjectToMerge;warn('Passing an Array to Firebase.update() is deprecated. '+'Use set() if you want to overwrite the existing data, or '+'an Object with integer keys if you really do want to '+'only update some of the children.');}validateFirebaseMergeDataArg('Reference.update',1,objectToMerge,this.path,false);(0,_util.validateCallback)('Reference.update',2,onComplete,true);var deferred=new _util.Deferred();this.repo.update(this.path,objectToMerge,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {*} newVal
     * @param {string|number|null} newPriority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */},{key:"setWithPriority",value:function setWithPriority(newVal,newPriority,onComplete){(0,_util.validateArgCount)('Reference.setWithPriority',2,3,arguments.length);validateWritablePath('Reference.setWithPriority',this.path);validateFirebaseDataArg('Reference.setWithPriority',1,newVal,this.path,false);validatePriority('Reference.setWithPriority',2,newPriority,false);(0,_util.validateCallback)('Reference.setWithPriority',3,onComplete,true);if(this.getKey()==='.length'||this.getKey()==='.keys'){throw'Reference.setWithPriority failed: '+this.getKey()+' is a read-only object.';}var deferred=new _util.Deferred();this.repo.setWithPriority(this.path,newVal,newPriority,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */},{key:"remove",value:function remove(onComplete){(0,_util.validateArgCount)('Reference.remove',0,1,arguments.length);validateWritablePath('Reference.remove',this.path);(0,_util.validateCallback)('Reference.remove',1,onComplete,true);return this.set(null,onComplete);}/**
     * @param {function(*):*} transactionUpdate
     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
     * @param {boolean=} applyLocally
     * @return {!Promise}
     */},{key:"transaction",value:function transaction(transactionUpdate,onComplete,applyLocally){(0,_util.validateArgCount)('Reference.transaction',1,3,arguments.length);validateWritablePath('Reference.transaction',this.path);(0,_util.validateCallback)('Reference.transaction',1,transactionUpdate,false);(0,_util.validateCallback)('Reference.transaction',2,onComplete,true);// NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
// to expose it.
validateBoolean('Reference.transaction',3,applyLocally,true);if(this.getKey()==='.length'||this.getKey()==='.keys'){throw'Reference.transaction failed: '+this.getKey()+' is a read-only object.';}if(applyLocally===undefined){applyLocally=true;}var deferred=new _util.Deferred();if(typeof onComplete==='function'){deferred.promise["catch"](function(){});}var promiseComplete=function promiseComplete(error,committed,snapshot){if(error){deferred.reject(error);}else{deferred.resolve(new TransactionResult(committed,snapshot));}if(typeof onComplete==='function'){onComplete(error,committed,snapshot);}};this.repo.startTransaction(this.path,transactionUpdate,promiseComplete,applyLocally);return deferred.promise;}/**
     * @param {string|number|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */},{key:"setPriority",value:function setPriority(priority,onComplete){(0,_util.validateArgCount)('Reference.setPriority',1,2,arguments.length);validateWritablePath('Reference.setPriority',this.path);validatePriority('Reference.setPriority',1,priority,false);(0,_util.validateCallback)('Reference.setPriority',2,onComplete,true);var deferred=new _util.Deferred();this.repo.setWithPriority(this.path.child('.priority'),priority,null,deferred.wrapCallback(onComplete));return deferred.promise;}/**
     * @param {*=} value
     * @param {function(?Error)=} onComplete
     * @return {!Reference}
     */},{key:"push",value:function push(value,onComplete){(0,_util.validateArgCount)('Reference.push',0,2,arguments.length);validateWritablePath('Reference.push',this.path);validateFirebaseDataArg('Reference.push',1,value,this.path,true);(0,_util.validateCallback)('Reference.push',2,onComplete,true);var now=this.repo.serverTime();var name=nextPushId(now);// push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
// We use child() to create handles to two different references. The first is turned into a
// ThennableReference below by adding then() and catch() methods and is used as the
// return value of push(). The second remains a regular Reference and is used as the fulfilled
// value of the first ThennableReference.
var thennablePushRef=this.child(name);var pushRef=this.child(name);var promise;if(value!=null){promise=thennablePushRef.set(value,onComplete).then(function(){return pushRef;});}else{promise=Promise.resolve(pushRef);}thennablePushRef.then=promise.then.bind(promise);thennablePushRef["catch"]=promise.then.bind(promise,undefined);if(typeof onComplete==='function'){promise["catch"](function(){});}return thennablePushRef;}/**
     * @return {!OnDisconnect}
     */},{key:"onDisconnect",value:function onDisconnect(){validateWritablePath('Reference.onDisconnect',this.path);return new OnDisconnect(this.repo,this.path);}},{key:"database",get:function get(){return this.databaseProp();}},{key:"key",get:function get(){return this.getKey();}},{key:"parent",get:function get(){return this.getParent();}},{key:"root",get:function get(){return this.getRoot();}}]);return Reference;}(Query);/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */exports.Reference=Reference;Query.__referenceConstructor=Reference;SyncPoint.__referenceConstructor=Reference;/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Node in a Tree.
 */var TreeNode=function TreeNode(){_classCallCheck(this,TreeNode);// TODO: Consider making accessors that create children and value lazily or
// separate Internal / Leaf 'types'.
this.children={};this.childCount=0;this.value=null;};/**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */var Tree=/*#__PURE__*/function(){/**
     * @template T
     * @param {string=} name_ Optional name of the node.
     * @param {Tree=} parent_ Optional parent node.
     * @param {TreeNode=} node_ Optional node to wrap.
     */function Tree(){var name_=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var parent_=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var node_=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new TreeNode();_classCallCheck(this,Tree);this.name_=name_;this.parent_=parent_;this.node_=node_;}/**
     * Returns a sub-Tree for the given path.
     *
     * @param {!(string|Path)} pathObj Path to look up.
     * @return {!Tree.<T>} Tree for path.
     */_createClass(Tree,[{key:"subTree",value:function subTree(pathObj){// TODO: Require pathObj to be Path?
var path=pathObj instanceof Path?pathObj:new Path(pathObj);var child=this,next=path.getFront();while(next!==null){var childNode=(0,_util.safeGet)(child.node_.children,next)||new TreeNode();child=new Tree(next,child,childNode);path=path.popFront();next=path.getFront();}return child;}/**
     * Returns the data associated with this tree node.
     *
     * @return {?T} The data or null if no data exists.
     */},{key:"getValue",value:function getValue(){return this.node_.value;}/**
     * Sets data to this tree node.
     *
     * @param {!T} value Value to set.
     */},{key:"setValue",value:function setValue(value){(0,_util.assert)(typeof value!=='undefined','Cannot set value to undefined');this.node_.value=value;this.updateParents_();}/**
     * Clears the contents of the tree node (its value and all children).
     */},{key:"clear",value:function clear(){this.node_.value=null;this.node_.children={};this.node_.childCount=0;this.updateParents_();}/**
     * @return {boolean} Whether the tree has any children.
     */},{key:"hasChildren",value:function hasChildren(){return this.node_.childCount>0;}/**
     * @return {boolean} Whether the tree is empty (no value or children).
     */},{key:"isEmpty",value:function isEmpty(){return this.getValue()===null&&!this.hasChildren();}/**
     * Calls action for each child of this tree node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */},{key:"forEachChild",value:function forEachChild(action){var _this48=this;each(this.node_.children,function(child,childTree){action(new Tree(child,_this48,childTree));});}/**
     * Does a depth-first traversal of this node's descendants, calling action for each one.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
     *   false.
     * @param {boolean=} childrenFirst Whether to call action on children before calling it on
     *   parent.
     */},{key:"forEachDescendant",value:function forEachDescendant(action,includeSelf,childrenFirst){if(includeSelf&&!childrenFirst){action(this);}this.forEachChild(function(child){child.forEachDescendant(action,/*includeSelf=*/true,childrenFirst);});if(includeSelf&&childrenFirst){action(this);}}/**
     * Calls action on each ancestor node.
     *
     * @param {function(!Tree.<T>)} action Action to be called on each parent; return
     *   true to abort.
     * @param {boolean=} includeSelf Whether to call action on this node as well.
     * @return {boolean} true if the action callback returned true.
     */},{key:"forEachAncestor",value:function forEachAncestor(action,includeSelf){var node=includeSelf?this:this.parent();while(node!==null){if(action(node)){return true;}node=node.parent();}return false;}/**
     * Does a depth-first traversal of this node's descendants.  When a descendant with a value
     * is found, action is called on it and traversal does not continue inside the node.
     * Action is *not* called on this node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */},{key:"forEachImmediateDescendantWithValue",value:function forEachImmediateDescendantWithValue(action){this.forEachChild(function(child){if(child.getValue()!==null){action(child);}else{child.forEachImmediateDescendantWithValue(action);}});}/**
     * @return {!Path} The path of this tree node, as a Path.
     */},{key:"path",value:function path(){return new Path(this.parent_===null?this.name_:this.parent_.path()+'/'+this.name_);}/**
     * @return {string} The name of the tree node.
     */},{key:"name",value:function name(){return this.name_;}/**
     * @return {?Tree} The parent tree node, or null if this is the root of the tree.
     */},{key:"parent",value:function parent(){return this.parent_;}/**
     * Adds or removes this child from its parent based on whether it's empty or not.
     *
     * @private
     */},{key:"updateParents_",value:function updateParents_(){if(this.parent_!==null){this.parent_.updateChild_(this.name_,this);}}/**
     * Adds or removes the passed child to this tree node, depending on whether it's empty.
     *
     * @param {string} childName The name of the child to update.
     * @param {!Tree.<T>} child The child to update.
     * @private
     */},{key:"updateChild_",value:function updateChild_(childName,child){var childEmpty=child.isEmpty();var childExists=(0,_util.contains)(this.node_.children,childName);if(childEmpty&&childExists){delete this.node_.children[childName];this.node_.childCount--;this.updateParents_();}else if(!childEmpty&&!childExists){this.node_.children[childName]=child.node_;this.node_.childCount++;this.updateParents_();}}}]);return Tree;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
// For now it's part of Repo, but in its own file.
/**
 * @enum {number}
 */var TransactionStatus;(function(TransactionStatus){// We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
// server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
// mismatched hash.
TransactionStatus[TransactionStatus["RUN"]=0]="RUN";// We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
// or rejected yet).
TransactionStatus[TransactionStatus["SENT"]=1]="SENT";// Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
// removed when we get a chance to prune completed ones.
TransactionStatus[TransactionStatus["COMPLETED"]=2]="COMPLETED";// Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
// If it comes back as unsuccessful, we'll abort it.
TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"]=3]="SENT_NEEDS_ABORT";// Temporary state used to mark transactions that need to be aborted.
TransactionStatus[TransactionStatus["NEEDS_ABORT"]=4]="NEEDS_ABORT";})(TransactionStatus||(TransactionStatus={}));/**
 * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
 * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
 * @type {number}
 * @const
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.MAX_TRANSACTION_RETRIES_=25;/**
 * Setup the transaction data structures
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.transactionsInit_=function(){/**
     * Stores queues of outstanding transactions for Firebase locations.
     *
     * @type {!Tree.<Array.<!Transaction>>}
     * @private
     */this.transactionQueueTree_=new Tree();};/**
 * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
 *
 * @param {!Path} path Path at which to do transaction.
 * @param {function(*):*} transactionUpdate Update callback.
 * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
 * @param {boolean} applyLocally Whether or not to make intermediate results visible
 */Repo.prototype.startTransaction=function(path,transactionUpdate,onComplete,applyLocally){this.log_('transaction on '+path);// Add a watch to make sure we get server updates.
var valueCallback=function valueCallback(){};var watchRef=new Reference(this,path);watchRef.on('value',valueCallback);var unwatcher=function unwatcher(){watchRef.off('value',valueCallback);};// Initialize transaction.
var transaction={path:path,update:transactionUpdate,onComplete:onComplete,// One of TransactionStatus enums.
status:null,// Used when combining transactions at different locations to figure out which one goes first.
order:LUIDGenerator(),// Whether to raise local events for this transaction.
applyLocally:applyLocally,// Count of how many times we've retried the transaction.
retryCount:0,// Function to call to clean up our .on() listener.
unwatcher:unwatcher,// Stores why a transaction was aborted.
abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null};// Run transaction initially.
var currentState=this.getLatestState_(path);transaction.currentInputSnapshot=currentState;var newVal=transaction.update(currentState.val());if(newVal===undefined){// Abort transaction.
transaction.unwatcher();transaction.currentOutputSnapshotRaw=null;transaction.currentOutputSnapshotResolved=null;if(transaction.onComplete){// We just set the input snapshot, so this cast should be safe
var snapshot=new DataSnapshot(transaction.currentInputSnapshot,new Reference(this,transaction.path),PRIORITY_INDEX);transaction.onComplete(null,false,snapshot);}}else{validateFirebaseData('transaction failed: Data returned ',newVal,transaction.path);// Mark as run and add to our queue.
transaction.status=TransactionStatus.RUN;var queueNode=this.transactionQueueTree_.subTree(path);var nodeQueue=queueNode.getValue()||[];nodeQueue.push(transaction);queueNode.setValue(nodeQueue);// Update visibleData and raise events
// Note: We intentionally raise events after updating all of our transaction state, since the user could
// start new transactions from the event callbacks.
var priorityForNode;if(_typeof(newVal)==='object'&&newVal!==null&&(0,_util.contains)(newVal,'.priority')){// eslint-disable-next-line @typescript-eslint/no-explicit-any
priorityForNode=(0,_util.safeGet)(newVal,'.priority');(0,_util.assert)(isValidPriority(priorityForNode),'Invalid priority returned by transaction. '+'Priority must be a valid string, finite number, server value, or null.');}else{var currentNode=this.serverSyncTree_.calcCompleteEventCache(path)||ChildrenNode.EMPTY_NODE;priorityForNode=currentNode.getPriority().val();}priorityForNode/** @type {null|number|string} */=priorityForNode;var serverValues=this.generateServerValues();var newNodeUnresolved=nodeFromJSON$1(newVal,priorityForNode);var newNode=resolveDeferredValueSnapshot(newNodeUnresolved,currentState,serverValues);transaction.currentOutputSnapshotRaw=newNodeUnresolved;transaction.currentOutputSnapshotResolved=newNode;transaction.currentWriteId=this.getNextWriteId_();var events=this.serverSyncTree_.applyUserOverwrite(path,newNode,transaction.currentWriteId,transaction.applyLocally);this.eventQueue_.raiseEventsForChangedPath(path,events);this.sendReadyTransactions_();}};/**
 * @param {!Path} path
 * @param {Array.<number>=} excludeSets A specific set to exclude
 * @return {Node}
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.getLatestState_=function(path,excludeSets){return this.serverSyncTree_.calcCompleteEventCache(path,excludeSets)||ChildrenNode.EMPTY_NODE;};/**
 * Sends any already-run transactions that aren't waiting for outstanding transactions to
 * complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively with a particular
 * transactionQueueTree node to recurse through the tree.
 *
 * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.sendReadyTransactions_=function(){var _this49=this;var node=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.transactionQueueTree_;// Before recursing, make sure any completed transactions are removed.
if(!node){this.pruneCompletedTransactionsBelowNode_(node);}if(node.getValue()!==null){var queue=this.buildTransactionQueue_(node);(0,_util.assert)(queue.length>0,'Sending zero length transaction queue');var allRun=queue.every(function(transaction){return transaction.status===TransactionStatus.RUN;});// If they're all run (and not sent), we can send them.  Else, we must wait.
if(allRun){this.sendTransactionQueue_(node.path(),queue);}}else if(node.hasChildren()){node.forEachChild(function(childNode){_this49.sendReadyTransactions_(childNode);});}};/**
 * Given a list of run transactions, send them to the server and then handle the result (success or failure).
 *
 * @param {!Path} path The location of the queue.
 * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.sendTransactionQueue_=function(path,queue){var _this50=this;// Mark transactions as sent and increment retry count!
var setsToIgnore=queue.map(function(txn){return txn.currentWriteId;});var latestState=this.getLatestState_(path,setsToIgnore);var snapToSend=latestState;var latestHash=latestState.hash();for(var i=0;i<queue.length;i++){var txn=queue[i];(0,_util.assert)(txn.status===TransactionStatus.RUN,'tryToSendTransactionQueue_: items in queue should all be run.');txn.status=TransactionStatus.SENT;txn.retryCount++;var relativePath=Path.relativePath(path,txn.path);// If we've gotten to this point, the output snapshot must be defined.
snapToSend=snapToSend.updateChild(relativePath/** @type {!Node} */,txn.currentOutputSnapshotRaw);}var dataToSend=snapToSend.val(true);var pathToSend=path;// Send the put.
this.server_.put(pathToSend.toString(),dataToSend,function(status){_this50.log_('transaction put response',{path:pathToSend.toString(),status:status});var events=[];if(status==='ok'){// Queue up the callbacks and fire them after cleaning up all of our transaction state, since
// the callback could trigger more transactions or sets.
var callbacks=[];for(var _i3=0;_i3<queue.length;_i3++){queue[_i3].status=TransactionStatus.COMPLETED;events=events.concat(_this50.serverSyncTree_.ackUserWrite(queue[_i3].currentWriteId));if(queue[_i3].onComplete){// We never unset the output snapshot, and given that this transaction is complete, it should be set
var node=queue[_i3].currentOutputSnapshotResolved;var ref=new Reference(_this50,queue[_i3].path);var snapshot=new DataSnapshot(node,ref,PRIORITY_INDEX);callbacks.push(queue[_i3].onComplete.bind(null,null,true,snapshot));}queue[_i3].unwatcher();}// Now remove the completed transactions.
_this50.pruneCompletedTransactionsBelowNode_(_this50.transactionQueueTree_.subTree(path));// There may be pending transactions that we can now send.
_this50.sendReadyTransactions_();_this50.eventQueue_.raiseEventsForChangedPath(path,events);// Finally, trigger onComplete callbacks.
for(var _i4=0;_i4<callbacks.length;_i4++){exceptionGuard(callbacks[_i4]);}}else{// transactions are no longer sent.  Update their status appropriately.
if(status==='datastale'){for(var _i5=0;_i5<queue.length;_i5++){if(queue[_i5].status===TransactionStatus.SENT_NEEDS_ABORT){queue[_i5].status=TransactionStatus.NEEDS_ABORT;}else{queue[_i5].status=TransactionStatus.RUN;}}}else{warn('transaction at '+pathToSend.toString()+' failed: '+status);for(var _i6=0;_i6<queue.length;_i6++){queue[_i6].status=TransactionStatus.NEEDS_ABORT;queue[_i6].abortReason=status;}}_this50.rerunTransactions_(path);}},latestHash);};/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
 * be raised for.
 *
 * @param {!Path} changedPath The path in mergedData that changed.
 * @return {!Path} The rootmost path that was affected by rerunning transactions.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.rerunTransactions_=function(changedPath){var rootMostTransactionNode=this.getAncestorTransactionNode_(changedPath);var path=rootMostTransactionNode.path();var queue=this.buildTransactionQueue_(rootMostTransactionNode);this.rerunTransactionQueue_(queue,path);return path;};/**
 * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
 *
 * @param {Array.<Transaction>} queue The queue of transactions to run.
 * @param {!Path} path The path the queue is for.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.rerunTransactionQueue_=function(queue,path){if(queue.length===0){return;// Nothing to do!
}// Queue up the callbacks and fire them after cleaning up all of our transaction state, since
// the callback could trigger more transactions or sets.
var callbacks=[];var events=[];// Ignore all of the sets we're going to re-run.
var txnsToRerun=queue.filter(function(q){return q.status===TransactionStatus.RUN;});var setsToIgnore=txnsToRerun.map(function(q){return q.currentWriteId;});for(var i=0;i<queue.length;i++){var transaction=queue[i];var relativePath=Path.relativePath(path,transaction.path);var abortTransaction=false,abortReason=void 0;(0,_util.assert)(relativePath!==null,'rerunTransactionsUnderNode_: relativePath should not be null.');if(transaction.status===TransactionStatus.NEEDS_ABORT){abortTransaction=true;abortReason=transaction.abortReason;events=events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId,true));}else if(transaction.status===TransactionStatus.RUN){// eslint-disable-next-line @typescript-eslint/no-explicit-any
if(transaction.retryCount>=Repo.MAX_TRANSACTION_RETRIES_){abortTransaction=true;abortReason='maxretry';events=events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId,true));}else{// This code reruns a transaction
var currentNode=this.getLatestState_(transaction.path,setsToIgnore);transaction.currentInputSnapshot=currentNode;var newData=queue[i].update(currentNode.val());if(newData!==undefined){validateFirebaseData('transaction failed: Data returned ',newData,transaction.path);var newDataNode=nodeFromJSON$1(newData);var hasExplicitPriority=_typeof(newData)==='object'&&newData!=null&&(0,_util.contains)(newData,'.priority');if(!hasExplicitPriority){// Keep the old priority if there wasn't a priority explicitly specified.
newDataNode=newDataNode.updatePriority(currentNode.getPriority());}var oldWriteId=transaction.currentWriteId;var serverValues=this.generateServerValues();var newNodeResolved=resolveDeferredValueSnapshot(newDataNode,currentNode,serverValues);transaction.currentOutputSnapshotRaw=newDataNode;transaction.currentOutputSnapshotResolved=newNodeResolved;transaction.currentWriteId=this.getNextWriteId_();// Mutates setsToIgnore in place
setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId),1);events=events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path,newNodeResolved,transaction.currentWriteId,transaction.applyLocally));events=events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId,true));}else{abortTransaction=true;abortReason='nodata';events=events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId,true));}}}this.eventQueue_.raiseEventsForChangedPath(path,events);events=[];if(abortTransaction){// Abort.
queue[i].status=TransactionStatus.COMPLETED;// Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
// So defer the unwatcher until we're done.
(function(unwatcher){setTimeout(unwatcher,Math.floor(0));})(queue[i].unwatcher);if(queue[i].onComplete){if(abortReason==='nodata'){var ref=new Reference(this,queue[i].path);// We set this field immediately, so it's safe to cast to an actual snapshot
var lastInput/** @type {!Node} */=queue[i].currentInputSnapshot;var snapshot=new DataSnapshot(lastInput,ref,PRIORITY_INDEX);callbacks.push(queue[i].onComplete.bind(null,null,false,snapshot));}else{callbacks.push(queue[i].onComplete.bind(null,new Error(abortReason),false,null));}}}}// Clean up completed transactions.
this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);// Now fire callbacks, now that we're in a good, known state.
for(var _i7=0;_i7<callbacks.length;_i7++){exceptionGuard(callbacks[_i7]);}// Try to send the transaction result to the server.
this.sendReadyTransactions_();};/**
 * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
 * the node for the given path if there are no pending transactions on any ancestor.
 *
 * @param {!Path} path The location to start at.
 * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.getAncestorTransactionNode_=function(path){var front;// Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
var transactionNode=this.transactionQueueTree_;front=path.getFront();while(front!==null&&transactionNode.getValue()===null){transactionNode=transactionNode.subTree(front);path=path.popFront();front=path.getFront();}return transactionNode;};/**
 * Builds the queue of all transactions at or below the specified transactionNode.
 *
 * @param {!Tree.<Array.<Transaction>>} transactionNode
 * @return {Array.<Transaction>} The generated queue.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.buildTransactionQueue_=function(transactionNode){// Walk any child transaction queues and aggregate them into a single queue.
var transactionQueue=[];this.aggregateTransactionQueuesForNode_(transactionNode,transactionQueue);// Sort them by the order the transactions were created.
transactionQueue.sort(function(a,b){return a.order-b.order;});return transactionQueue;};/**
 * @param {!Tree.<Array.<Transaction>>} node
 * @param {Array.<Transaction>} queue
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.aggregateTransactionQueuesForNode_=function(node,queue){var _this51=this;var nodeQueue=node.getValue();if(nodeQueue!==null){for(var i=0;i<nodeQueue.length;i++){queue.push(nodeQueue[i]);}}node.forEachChild(function(child){_this51.aggregateTransactionQueuesForNode_(child,queue);});};/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 *
 * @param {!Tree.<Array.<!Transaction>>} node
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.pruneCompletedTransactionsBelowNode_=function(node){var _this52=this;var queue=node.getValue();if(queue){var to=0;for(var from=0;from<queue.length;from++){if(queue[from].status!==TransactionStatus.COMPLETED){queue[to]=queue[from];to++;}}queue.length=to;node.setValue(queue.length>0?queue:null);}node.forEachChild(function(childNode){_this52.pruneCompletedTransactionsBelowNode_(childNode);});};/**
 * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
 * since we consider them incompatible with transactions.
 *
 * @param {!Path} path Path for which we want to abort related transactions.
 * @return {!Path}
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.abortTransactions_=function(path){var _this53=this;var affectedPath=this.getAncestorTransactionNode_(path).path();var transactionNode=this.transactionQueueTree_.subTree(path);transactionNode.forEachAncestor(function(node){_this53.abortTransactionsOnNode_(node);});this.abortTransactionsOnNode_(transactionNode);transactionNode.forEachDescendant(function(node){_this53.abortTransactionsOnNode_(node);});return affectedPath;};/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
 * @private
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
Repo.prototype.abortTransactionsOnNode_=function(node){var queue=node.getValue();if(queue!==null){// Queue up the callbacks and fire them after cleaning up all of our transaction state, since
// the callback could trigger more transactions or sets.
var callbacks=[];// Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
// can be immediately aborted and removed.
var events=[];var lastSent=-1;for(var i=0;i<queue.length;i++){if(queue[i].status===TransactionStatus.SENT_NEEDS_ABORT);else if(queue[i].status===TransactionStatus.SENT){(0,_util.assert)(lastSent===i-1,'All SENT items should be at beginning of queue.');lastSent=i;// Mark transaction for abort when it comes back.
queue[i].status=TransactionStatus.SENT_NEEDS_ABORT;queue[i].abortReason='set';}else{(0,_util.assert)(queue[i].status===TransactionStatus.RUN,'Unexpected transaction status in abort');// We can abort it immediately.
queue[i].unwatcher();events=events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId,true));if(queue[i].onComplete){var snapshot=null;callbacks.push(queue[i].onComplete.bind(null,new Error('set'),false,snapshot));}}}if(lastSent===-1){// We're not waiting for any sent transactions.  We can clear the queue.
node.setValue(null);}else{// Remove the transactions we aborted.
queue.length=lastSent+1;}// Now fire the callbacks.
this.eventQueue_.raiseEventsForChangedPath(node.path(),events);for(var _i8=0;_i8<callbacks.length;_i8++){exceptionGuard(callbacks[_i8]);}}};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */var FirebaseAuthTokenProvider=/*#__PURE__*/function(){function FirebaseAuthTokenProvider(app_,authProvider_){var _this54=this;_classCallCheck(this,FirebaseAuthTokenProvider);this.app_=app_;this.authProvider_=authProvider_;this.auth_=null;this.auth_=authProvider_.getImmediate({optional:true});if(!this.auth_){authProvider_.get().then(function(auth){return _this54.auth_=auth;});}}/**
     * @param {boolean} forceRefresh
     * @return {!Promise<FirebaseAuthTokenData>}
     */_createClass(FirebaseAuthTokenProvider,[{key:"getToken",value:function getToken(forceRefresh){if(!this.auth_){return Promise.resolve(null);}return this.auth_.getToken(forceRefresh)["catch"](function(error){// TODO: Need to figure out all the cases this is raised and whether
// this makes sense.
if(error&&error.code==='auth/token-not-initialized'){log('Got auth/token-not-initialized error.  Treating as null token.');return null;}else{return Promise.reject(error);}});}},{key:"addTokenChangeListener",value:function addTokenChangeListener(listener){// TODO: We might want to wrap the listener and call it with no args to
// avoid a leaky abstraction, but that makes removing the listener harder.
if(this.auth_){this.auth_.addAuthTokenListener(listener);}else{setTimeout(function(){return listener(null);},0);this.authProvider_.get().then(function(auth){return auth.addAuthTokenListener(listener);});}}},{key:"removeTokenChangeListener",value:function removeTokenChangeListener(listener){this.authProvider_.get().then(function(auth){return auth.removeAuthTokenListener(listener);});}},{key:"notifyForInvalidToken",value:function notifyForInvalidToken(){var errorMessage='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not '+'initialized correctly. ';if('credential'in this.app_.options){errorMessage+='Make sure the "credential" property provided to initializeApp() '+'is authorized to access the specified "databaseURL" and is from the correct '+'project.';}else if('serviceAccount'in this.app_.options){errorMessage+='Make sure the "serviceAccount" property provided to initializeApp() '+'is authorized to access the specified "databaseURL" and is from the correct '+'project.';}else{errorMessage+='Make sure the "apiKey" and "databaseURL" properties provided to '+'initializeApp() match the values provided for your app at '+'https://console.firebase.google.com/.';}warn(errorMessage);}}]);return FirebaseAuthTokenProvider;}();/* Auth token provider that the Admin SDK uses to connect to the Emulator. */var EmulatorAdminTokenProvider=/*#__PURE__*/function(){function EmulatorAdminTokenProvider(){_classCallCheck(this,EmulatorAdminTokenProvider);}_createClass(EmulatorAdminTokenProvider,[{key:"getToken",value:function getToken(forceRefresh){return Promise.resolve({accessToken:EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN});}},{key:"addTokenChangeListener",value:function addTokenChangeListener(listener){// Invoke the listener immediately to match the behavior in Firebase Auth
// (see packages/auth/src/auth.js#L1807)
listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);}},{key:"removeTokenChangeListener",value:function removeTokenChangeListener(listener){}},{key:"notifyForInvalidToken",value:function notifyForInvalidToken(){}}]);return EmulatorAdminTokenProvider;}();EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN='owner';/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This variable is also defined in the firebase node.js admin SDK. Before
 * modifying this definition, consult the definition in:
 *
 * https://github.com/firebase/firebase-admin-node
 *
 * and make sure the two are consistent.
 */var FIREBASE_DATABASE_EMULATOR_HOST_VAR='FIREBASE_DATABASE_EMULATOR_HOST';var _staticInstance;/**
 * Creates and caches Repo instances.
 */var RepoManager=/*#__PURE__*/function(){function RepoManager(){_classCallCheck(this,RepoManager);/**
         * @private {!Object.<string, Object<string, !fb.core.Repo>>}
         */this.repos_={};/**
         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
         * @private {boolean}
         */this.useRestClient_=false;}_createClass(RepoManager,[{key:"interrupt",// TODO(koss): Remove these functions unless used in tests?
value:function interrupt(){for(var _i9=0,_Object$keys=Object.keys(this.repos_);_i9<_Object$keys.length;_i9++){var appName=_Object$keys[_i9];for(var _i10=0,_Object$keys2=Object.keys(this.repos_[appName]);_i10<_Object$keys2.length;_i10++){var dbUrl=_Object$keys2[_i10];this.repos_[appName][dbUrl].interrupt();}}}},{key:"resume",value:function resume(){for(var _i11=0,_Object$keys3=Object.keys(this.repos_);_i11<_Object$keys3.length;_i11++){var appName=_Object$keys3[_i11];for(var _i12=0,_Object$keys4=Object.keys(this.repos_[appName]);_i12<_Object$keys4.length;_i12++){var dbUrl=_Object$keys4[_i12];this.repos_[appName][dbUrl].resume();}}}/**
     * This function should only ever be called to CREATE a new database instance.
     *
     * @param {!FirebaseApp} app
     * @return {!Database}
     */},{key:"databaseFromApp",value:function databaseFromApp(app,authProvider,url,nodeAdmin){var dbUrl=url||app.options.databaseURL;if(dbUrl===undefined){if(!app.options.projectId){fatal("Can't determine Firebase Database URL. Be sure to include "+' a Project ID when calling firebase.initializeApp().');}log('Using default host for project ',app.options.projectId);dbUrl="".concat(app.options.projectId,"-default-rtdb.firebaseio.com");}var parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);var repoInfo=parsedUrl.repoInfo;var isEmulator;var dbEmulatorHost=undefined;if(typeof process!=='undefined'){dbEmulatorHost=process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];}if(dbEmulatorHost){isEmulator=true;dbUrl="http://".concat(dbEmulatorHost,"?ns=").concat(repoInfo.namespace);parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);repoInfo=parsedUrl.repoInfo;}else{isEmulator=!parsedUrl.repoInfo.secure;}var authTokenProvider=nodeAdmin&&isEmulator?new EmulatorAdminTokenProvider():new FirebaseAuthTokenProvider(app,authProvider);validateUrl('Invalid Firebase Database URL',1,parsedUrl);if(!parsedUrl.path.isEmpty()){fatal('Database URL must point to the root of a Firebase Database '+'(not including a child path).');}var repo=this.createRepo(repoInfo,app,authTokenProvider);return repo.database;}/**
     * Remove the repo and make sure it is disconnected.
     *
     * @param {!Repo} repo
     */},{key:"deleteRepo",value:function deleteRepo(repo){var appRepos=(0,_util.safeGet)(this.repos_,repo.app.name);// This should never happen...
if(!appRepos||(0,_util.safeGet)(appRepos,repo.repoInfo_.toURLString())!==repo){fatal("Database ".concat(repo.app.name,"(").concat(repo.repoInfo_,") has already been deleted."));}repo.interrupt();delete appRepos[repo.repoInfo_.toURLString()];}/**
     * Ensures a repo doesn't already exist and then creates one using the
     * provided app.
     *
     * @param {!RepoInfo} repoInfo The metadata about the Repo
     * @param {!FirebaseApp} app
     * @return {!Repo} The Repo object for the specified server / repoName.
     */},{key:"createRepo",value:function createRepo(repoInfo,app,authTokenProvider){var appRepos=(0,_util.safeGet)(this.repos_,app.name);if(!appRepos){appRepos={};this.repos_[app.name]=appRepos;}var repo=(0,_util.safeGet)(appRepos,repoInfo.toURLString());if(repo){fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');}repo=new Repo(repoInfo,this.useRestClient_,app,authTokenProvider);appRepos[repoInfo.toURLString()]=repo;return repo;}/**
     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
     * @param {boolean} forceRestClient
     */},{key:"forceRestClient",value:function forceRestClient(_forceRestClient){this.useRestClient_=_forceRestClient;}}],[{key:"getInstance",value:function getInstance(){if(!_staticInstance){_staticInstance=new RepoManager();}return _staticInstance;}}]);return RepoManager;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Class representing a firebase database.
 * @implements {FirebaseService}
 */var Database=/*#__PURE__*/function(){/**
     * The constructor should not be called by users of our public API.
     * @param {!Repo} repo_
     */function Database(repo_){_classCallCheck(this,Database);this.repo_=repo_;if(!(repo_ instanceof Repo)){fatal("Don't call new Database() directly - please use firebase.database().");}/** @type {Reference} */this.root_=new Reference(repo_,Path.Empty);this.INTERNAL=new DatabaseInternals(this);}_createClass(Database,[{key:"ref",value:function ref(path){this.checkDeleted_('ref');(0,_util.validateArgCount)('database.ref',0,1,arguments.length);if(path instanceof Reference){return this.refFromURL(path.toString());}return path!==undefined?this.root_.child(path):this.root_;}/**
     * Returns a reference to the root or the path specified in url.
     * We throw a exception if the url is not in the same domain as the
     * current repo.
     * @param {string} url
     * @return {!Reference} Firebase reference.
     */},{key:"refFromURL",value:function refFromURL(url){/** @const {string} */var apiName='database.refFromURL';this.checkDeleted_(apiName);(0,_util.validateArgCount)(apiName,1,1,arguments.length);var parsedURL=parseRepoInfo(url,this.repo_.repoInfo_.nodeAdmin);validateUrl(apiName,1,parsedURL);var repoInfo=parsedURL.repoInfo;if(repoInfo.host!==this.repo_.repoInfo_.host){fatal(apiName+': Host name does not match the current database: '+'(found '+repoInfo.host+' but expected '+this.repo_.repoInfo_.host+')');}return this.ref(parsedURL.path.toString());}/**
     * @param {string} apiName
     */},{key:"checkDeleted_",value:function checkDeleted_(apiName){if(this.repo_===null){fatal('Cannot call '+apiName+' on a deleted database.');}}// Make individual repo go offline.
},{key:"goOffline",value:function goOffline(){(0,_util.validateArgCount)('database.goOffline',0,0,arguments.length);this.checkDeleted_('goOffline');this.repo_.interrupt();}},{key:"goOnline",value:function goOnline(){(0,_util.validateArgCount)('database.goOnline',0,0,arguments.length);this.checkDeleted_('goOnline');this.repo_.resume();}},{key:"app",get:function get(){return this.repo_.app;}}]);return Database;}();exports.Database=Database;Database.ServerValue={TIMESTAMP:{'.sv':'timestamp'},increment:function increment(delta){return{'.sv':{'increment':delta}};}};var DatabaseInternals=/*#__PURE__*/function(){/** @param {!Database} database */function DatabaseInternals(database){_classCallCheck(this,DatabaseInternals);this.database=database;}/** @return {Promise<void>} */_createClass(DatabaseInternals,[{key:"delete",value:function _delete(){return regeneratorRuntime.async(function _delete$(_context){while(1){switch(_context.prev=_context.next){case 0:// eslint-disable-next-line @typescript-eslint/no-explicit-any
this.database.checkDeleted_('delete');// eslint-disable-next-line @typescript-eslint/no-explicit-any
RepoManager.getInstance().deleteRepo(this.database.repo_);// eslint-disable-next-line @typescript-eslint/no-explicit-any
this.database.repo_=null;// eslint-disable-next-line @typescript-eslint/no-explicit-any
this.database.root_=null;this.database.INTERNAL=null;this.database=null;case 6:case"end":return _context.stop();}}},null,this);}}]);return DatabaseInternals;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * INTERNAL methods for internal-use only (tests, etc.).
 *
 * Customers shouldn't use these or else should be aware that they could break at any time.
 *
 * @const
 */var forceLongPolling=function forceLongPolling(){WebSocketConnection.forceDisallow();BrowserPollConnection.forceAllow();};var forceWebSockets=function forceWebSockets(){BrowserPollConnection.forceDisallow();};/* Used by App Manager */var isWebSocketsAvailable=function isWebSocketsAvailable(){return WebSocketConnection['isAvailable']();};var setSecurityDebugCallback=function setSecurityDebugCallback(ref,callback){// eslint-disable-next-line @typescript-eslint/no-explicit-any
ref.repo.persistentConnection_.securityDebugCallback_=callback;};var stats=function stats(ref,showDelta){ref.repo.stats(showDelta);};var statsIncrementCounter=function statsIncrementCounter(ref,metric){ref.repo.statsIncrementCounter(metric);};var dataUpdateCount=function dataUpdateCount(ref){return ref.repo.dataUpdateCount;};var interceptServerData=function interceptServerData(ref,callback){return ref.repo.interceptServerData_(callback);};var INTERNAL=/*#__PURE__*/Object.freeze({__proto__:null,forceLongPolling:forceLongPolling,forceWebSockets:forceWebSockets,isWebSocketsAvailable:isWebSocketsAvailable,setSecurityDebugCallback:setSecurityDebugCallback,stats:stats,statsIncrementCounter:statsIncrementCounter,dataUpdateCount:dataUpdateCount,interceptServerData:interceptServerData});/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var DataConnection=PersistentConnection;/**
 * @param {!string} pathString
 * @param {function(*)} onComplete
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
PersistentConnection.prototype.simpleListen=function(pathString,onComplete){this.sendRequest('q',{p:pathString},onComplete);};/**
 * @param {*} data
 * @param {function(*)} onEcho
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
PersistentConnection.prototype.echo=function(data,onEcho){this.sendRequest('echo',{d:data},onEcho);};// RealTimeConnection properties that we use in tests.
var RealTimeConnection=Connection;/**
 * @param {function(): string} newHash
 * @return {function()}
 */var hijackHash=function hijackHash(newHash){var oldPut=PersistentConnection.prototype.put;PersistentConnection.prototype.put=function(pathString,data,onComplete,hash){if(hash!==undefined){hash=newHash();}oldPut.call(this,pathString,data,onComplete,hash);};return function(){PersistentConnection.prototype.put=oldPut;};};/**
 * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
 */var ConnectionTarget=RepoInfo;/**
 * @param {!Query} query
 * @return {!string}
 */var queryIdentifier=function queryIdentifier(query){return query.queryIdentifier();};/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 *
 * @param {boolean} forceRestClient
 */var forceRestClient=function forceRestClient(_forceRestClient2){RepoManager.getInstance().forceRestClient(_forceRestClient2);};var TEST_ACCESS=/*#__PURE__*/Object.freeze({__proto__:null,DataConnection:DataConnection,RealTimeConnection:RealTimeConnection,hijackHash:hijackHash,ConnectionTarget:ConnectionTarget,queryIdentifier:queryIdentifier,forceRestClient:forceRestClient});var name="@firebase/database";var version="0.6.13";/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ServerValue=Database.ServerValue;exports.ServerValue=ServerValue;function registerDatabase(instance){// set SDK_VERSION
setSDKVersion(instance.SDK_VERSION);// Register the Database Service with the 'firebase' namespace.
var namespace=instance.INTERNAL.registerComponent(new _component.Component('database',function(container,url){/* Dependencies */ // getImmediate for FirebaseApp will always succeed
var app=container.getProvider('app').getImmediate();var authProvider=container.getProvider('auth-internal');return RepoManager.getInstance().databaseFromApp(app,authProvider,url);},"PUBLIC"/* PUBLIC */).setServiceProps(// firebase.database namespace properties
{Reference:Reference,Query:Query,Database:Database,DataSnapshot:DataSnapshot,enableLogging:enableLogging,INTERNAL:INTERNAL,ServerValue:ServerValue,TEST_ACCESS:TEST_ACCESS}).setMultipleInstances(true));instance.registerVersion(name,version);if((0,_util.isNodeSdk)()){module.exports=namespace;}}registerDatabase(_app["default"]);