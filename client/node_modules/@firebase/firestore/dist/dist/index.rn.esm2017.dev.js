"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.__PRIVATE_registerFirestore=Mc;var _app=_interopRequireDefault(require("@firebase/app"));var _util=require("@firebase/util");var _logger=require("@firebase/logger");var _webchannelWrapper=require("@firebase/webchannel-wrapper");var _component=require("@firebase/component");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance");}function _iterableToArrayLimit(arr,i){if(!(Symbol.iterator in Object(arr)||Object.prototype.toString.call(arr)==="[object Arguments]")){return;}var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _get(target,property,receiver){if(typeof Reflect!=="undefined"&&Reflect.get){_get=Reflect.get;}else{_get=function _get(target,property,receiver){var base=_superPropBase(target,property);if(!base)return;var desc=Object.getOwnPropertyDescriptor(base,property);if(desc.get){return desc.get.call(receiver);}return desc.value;};}return _get(target,property,receiver||target);}function _superPropBase(object,property){while(!Object.prototype.hasOwnProperty.call(object,property)){object=_getPrototypeOf(object);if(object===null)break;}return object;}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}}function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _wrapNativeSuper(Class){var _cache=typeof Map==="function"?new Map():undefined;_wrapNativeSuper=function _wrapNativeSuper(Class){if(Class===null||!_isNativeFunction(Class))return Class;if(typeof Class!=="function"){throw new TypeError("Super expression must either be null or a function");}if(typeof _cache!=="undefined"){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper);}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor);}Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf(Wrapper,Class);};return _wrapNativeSuper(Class);}function isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _construct(Parent,args,Class){if(isNativeReflectConstruct()){_construct=Reflect.construct;}else{_construct=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf(instance,Class.prototype);return instance;};}return _construct.apply(null,arguments);}function _isNativeFunction(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1;}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}/** Converts a Base64 encoded string to a binary string. */function T(t){return String.fromCharCode.apply(null,// We use `decodeStringToByteArray()` instead of `decodeString()` since
// `decodeString()` returns Unicode strings, which doesn't match the values
// returned by `atob()`'s Latin1 representation.
_util.base64.decodeStringToByteArray(t,false));}/** Converts a binary string to a Base64 encoded string. */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var E={// Causes are copied from:
// https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
/** Not an error; returned on success. */OK:"ok",/** The operation was cancelled (typically by the caller). */CANCELLED:"cancelled",/** Unknown error or an error from a different error domain. */UNKNOWN:"unknown",/**
     * Client specified an invalid argument. Note that this differs from
     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
     * problematic regardless of the state of the system (e.g., a malformed file
     * name).
     */INVALID_ARGUMENT:"invalid-argument",/**
     * Deadline expired before operation could complete. For operations that
     * change the state of the system, this error may be returned even if the
     * operation has completed successfully. For example, a successful response
     * from a server could have been delayed long enough for the deadline to
     * expire.
     */DEADLINE_EXCEEDED:"deadline-exceeded",/** Some requested entity (e.g., file or directory) was not found. */NOT_FOUND:"not-found",/**
     * Some entity that we attempted to create (e.g., file or directory) already
     * exists.
     */ALREADY_EXISTS:"already-exists",/**
     * The caller does not have permission to execute the specified operation.
     * PERMISSION_DENIED must not be used for rejections caused by exhausting
     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
     * PERMISSION_DENIED must not be used if the caller can not be identified
     * (use UNAUTHENTICATED instead for those errors).
     */PERMISSION_DENIED:"permission-denied",/**
     * The request does not have valid authentication credentials for the
     * operation.
     */UNAUTHENTICATED:"unauthenticated",/**
     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
     * entire file system is out of space.
     */RESOURCE_EXHAUSTED:"resource-exhausted",/**
     * Operation was rejected because the system is not in a state required for
     * the operation's execution. For example, directory to be deleted may be
     * non-empty, an rmdir operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     */FAILED_PRECONDITION:"failed-precondition",/**
     * The operation was aborted, typically due to a concurrency issue like
     * sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */ABORTED:"aborted",/**
     * Operation was attempted past the valid range. E.g., seeking or reading
     * past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
     * if the system state changes. For example, a 32-bit file system will
     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
     * an offset past the current file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
     * when it applies so that callers who are iterating through a space can
     * easily look for an OUT_OF_RANGE error to detect when they are done.
     */OUT_OF_RANGE:"out-of-range",/** Operation is not implemented or not supported/enabled in this service. */UNIMPLEMENTED:"unimplemented",/**
     * Internal errors. Means some invariants expected by underlying System has
     * been broken. If you see one of these errors, Something is very broken.
     */INTERNAL:"internal",/**
     * The service is currently unavailable. This is a most likely a transient
     * condition and may be corrected by retrying with a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */UNAVAILABLE:"unavailable",/** Unrecoverable data loss or corruption. */DATA_LOSS:"data-loss"};/** An error returned by a Firestore operation. */var I=/*#__PURE__*/function(_Error){_inherits(I,_Error);function I(t,e){var _this;_classCallCheck(this,I);_this=_possibleConstructorReturn(this,_getPrototypeOf(I).call(this,e)),_this.code=t,_this.message=e,_this.name="FirebaseError",// HACK: We write a toString property directly because Error is not a real
// class and so inheritance does not work correctly. We could alternatively
// do the same "back-door inheritance" trick that FirebaseError does.
_this.toString=function(){return"".concat(_this.name,": [code=").concat(_this.code,"]: ").concat(_this.message);};return _this;}return I;}(_wrapNativeSuper(Error));/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var A=new _logger.Logger("@firebase/firestore");// Helper methods are needed because variables can't be exported as read/write
function R(){return A.logLevel;}/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel
 *   The verbosity you set for activity and error logging. Can be any of
 *   the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */function g(t){if(A.logLevel<=_logger.LogLevel.DEBUG){for(var _len=arguments.length,e=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){e[_key-1]=arguments[_key];}var _n2=e.map(V);A.debug.apply(A,["Firestore (7.22.0): "+t].concat(_toConsumableArray(_n2)));}}function P(t){if(A.logLevel<=_logger.LogLevel.ERROR){for(var _len2=arguments.length,e=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){e[_key2-1]=arguments[_key2];}var _n3=e.map(V);A.error.apply(A,["Firestore (7.22.0): "+t].concat(_toConsumableArray(_n3)));}}function y(t){if(A.logLevel<=_logger.LogLevel.WARN){for(var _len3=arguments.length,e=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){e[_key3-1]=arguments[_key3];}var _n4=e.map(V);A.warn.apply(A,["Firestore (7.22.0): "+t].concat(_toConsumableArray(_n4)));}}/**
 * Converts an additional log parameter to a string representation.
 */function V(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e);}catch(e){// Converting to JSON failed, just log the object directly
return t;}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Formats an object as a JSON string, suitable for logging. */var e;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */function p(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"Unexpected state";// Log the failure in addition to throw an exception, just in case the
// exception is swallowed.
var e="FIRESTORE (7.22.0) INTERNAL ASSERTION FAILED: "+t;// NOTE: We don't use FirestoreError here because these are internal failures
// that cannot be handled by the user. (Also it would create a circular
// dependency between the error and assert modules which doesn't work.)
throw P(e),new Error(e);}/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */function b(t,e){t||p();}/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */function v(t,// eslint-disable-next-line @typescript-eslint/no-explicit-any
e){return t;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function S(t){var e=0;for(var _n5 in t){Object.prototype.hasOwnProperty.call(t,_n5)&&e++;}return e;}function D(t,e){for(var _n6 in t){Object.prototype.hasOwnProperty.call(t,_n6)&&e(_n6,t[_n6]);}}function C(t){for(var _e2 in t){if(Object.prototype.hasOwnProperty.call(t,_e2))return!1;}return!0;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Path represents an ordered sequence of string segments.
 */var N=/*#__PURE__*/function(){function N(t,e,n){_classCallCheck(this,N);void 0===e?e=0:e>t.length&&p(),void 0===n?n=t.length-e:n>t.length-e&&p(),this.segments=t,this.offset=e,this.t=n;}_createClass(N,[{key:"isEqual",value:function isEqual(t){return 0===N.i(this,t);}},{key:"child",value:function child(t){var e=this.segments.slice(this.offset,this.limit());return t instanceof N?t.forEach(function(t){e.push(t);}):e.push(t),this.o(e);}/** The index of one past the last segment of the path. */},{key:"limit",value:function limit(){return this.offset+this.length;}},{key:"u",value:function u(t){return t=void 0===t?1:t,this.o(this.segments,this.offset+t,this.length-t);}},{key:"h",value:function h(){return this.o(this.segments,this.offset,this.length-1);}},{key:"l",value:function l(){return this.segments[this.offset];}},{key:"_",value:function _(){return this.get(this.length-1);}},{key:"get",value:function get(t){return this.segments[this.offset+t];}},{key:"m",value:function m(){return 0===this.length;}},{key:"T",value:function T(t){if(t.length<this.length)return!1;for(var _e3=0;_e3<this.length;_e3++){if(this.get(_e3)!==t.get(_e3))return!1;}return!0;}},{key:"I",value:function I(t){if(this.length+1!==t.length)return!1;for(var _e4=0;_e4<this.length;_e4++){if(this.get(_e4)!==t.get(_e4))return!1;}return!0;}},{key:"forEach",value:function forEach(t){for(var _e5=this.offset,_n7=this.limit();_e5<_n7;_e5++){t(this.segments[_e5]);}}},{key:"A",value:function A(){return this.segments.slice(this.offset,this.limit());}},{key:"length",get:function get(){return this.t;}}],[{key:"i",value:function i(t,e){var n=Math.min(t.length,e.length);for(var _s2=0;_s2<n;_s2++){var _n8=t.get(_s2),_i2=e.get(_s2);if(_n8<_i2)return-1;if(_n8>_i2)return 1;}return t.length<e.length?-1:t.length>e.length?1:0;}}]);return N;}();/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 */var F=/*#__PURE__*/function(_N){_inherits(F,_N);function F(){_classCallCheck(this,F);return _possibleConstructorReturn(this,_getPrototypeOf(F).apply(this,arguments));}_createClass(F,[{key:"o",value:function o(t,e,n){return new F(t,e,n);}},{key:"R",value:function R(){// NOTE: The client is ignorant of any path segments containing escape
// sequences (e.g. __id123__) and just passes them through raw (they exist
// for legacy reasons and should not be used frequently).
return this.A().join("/");}},{key:"toString",value:function toString(){return this.R();}/**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */}],[{key:"g",value:function g(){// NOTE: The client is ignorant of any path segments containing escape
// sequences (e.g. __id123__) and just passes them through raw (they exist
// for legacy reasons and should not be used frequently).
var e=[];for(var _len4=arguments.length,t=new Array(_len4),_key4=0;_key4<_len4;_key4++){t[_key4]=arguments[_key4];}for(var _i3=0,_t2=t;_i3<_t2.length;_i3++){var _n9=_t2[_i3];if(_n9.indexOf("//")>=0)throw new I(E.INVALID_ARGUMENT,"Invalid segment (".concat(_n9,"). Paths must not contain // in them."));// Strip leading and traling slashed.
e.push.apply(e,_toConsumableArray(_n9.split("/").filter(function(t){return t.length>0;})));}return new F(e);}},{key:"P",value:function P(){return new F([]);}}]);return F;}(N);var $=/^[_a-zA-Z][_a-zA-Z0-9]*$/;/** A dot-separated path for navigating sub-objects within a document. */var x=/*#__PURE__*/function(_N2){_inherits(x,_N2);function x(){_classCallCheck(this,x);return _possibleConstructorReturn(this,_getPrototypeOf(x).apply(this,arguments));}_createClass(x,[{key:"o",value:function o(t,e,n){return new x(t,e,n);}/**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */},{key:"R",value:function R(){return this.A().map(function(t){return t=t.replace("\\","\\\\").replace("`","\\`"),x.V(t)||(t="`"+t+"`"),t;}).join(".");}},{key:"toString",value:function toString(){return this.R();}/**
     * Returns true if this field references the key of a document.
     */},{key:"p",value:function p(){return 1===this.length&&"__name__"===this.get(0);}/**
     * The field designating the key of a document.
     */}],[{key:"V",value:function V(t){return $.test(t);}},{key:"v",value:function v(){return new x(["__name__"]);}/**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */},{key:"S",value:function S(t){var e=[];var n="",s=0;var i=function i(){if(0===n.length)throw new I(E.INVALID_ARGUMENT,"Invalid field path (".concat(t,"). Paths must not be empty, begin with '.', end with '.', or contain '..'"));e.push(n),n="";};var r=!1;for(;s<t.length;){var _e6=t[s];if("\\"===_e6){if(s+1===t.length)throw new I(E.INVALID_ARGUMENT,"Path has trailing escape character: "+t);var _e7=t[s+1];if("\\"!==_e7&&"."!==_e7&&"`"!==_e7)throw new I(E.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=_e7,s+=2;}else"`"===_e6?(r=!r,s++):"."!==_e6||r?(n+=_e6,s++):(i(),s++);}if(i(),r)throw new I(E.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new x(e);}},{key:"P",value:function P(){return new x([]);}}]);return x;}(N);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var k=/*#__PURE__*/function(){function k(t){_classCallCheck(this,k);this.path=t;}_createClass(k,[{key:"N",/** Returns true if the document is in the specified collectionId. */value:function N(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t;}},{key:"isEqual",value:function isEqual(t){return null!==t&&0===F.i(this.path,t.path);}},{key:"toString",value:function toString(){return this.path.toString();}}],[{key:"D",value:function D(t){return new k(F.g(t));}},{key:"C",value:function C(t){return new k(F.g(t).u(5));}},{key:"i",value:function i(t,e){return F.i(t.path,e.path);}},{key:"F",value:function F(t){return t.length%2==0;}/**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments The segments of the path to the document
     * @return A new instance of DocumentKey
     */},{key:"$",value:function $(t){return new k(new F(t.slice()));}}]);return k;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Validates that no arguments were passed in the invocation of functionName.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateNoArgs('myFunction', arguments);
 */function M(t,e){if(0!==e.length)throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() does not support arguments, but was called with ")+nt(e.length,"argument")+".");}/**
 * Validates the invocation of functionName has the exact number of arguments.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateExactNumberOfArgs('myFunction', arguments, 2);
 */function O(t,e,n){if(e.length!==n)throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires ")+nt(n,"argument")+", but was called with "+nt(e.length,"argument")+".");}/**
 * Validates the invocation of functionName has at least the provided number of
 * arguments (but can have many more).
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
 */function L(t,e,n){if(e.length<n)throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires at least ")+nt(n,"argument")+", but was called with "+nt(e.length,"argument")+".");}/**
 * Validates the invocation of functionName has number of arguments between
 * the values provided.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
 */function B(t,e,n,s){if(e.length<n||e.length>s)throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires between ").concat(n," and ")+s+" arguments, but was called with "+nt(e.length,"argument")+".");}/**
 * Validates the provided argument is an array and has as least the expected
 * number of elements.
 */ /**
 * Validates the provided positional argument has the native JavaScript type
 * using typeof checks.
 */function q(t,e,n,s){z(t,e,et(n)+" argument",s);}/**
 * Validates the provided argument has the native JavaScript type using
 * typeof checks or is undefined.
 */function U(t,e,n,s){void 0!==s&&q(t,e,n,s);}/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks.
 */function Q(t,e,n,s){z(t,e,n+" option",s);}/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks or is undefined.
 */function W(t,e,n,s){void 0!==s&&Q(t,e,n,s);}function j(t,e,n,s,i){void 0!==s&&function(t,e,n,s,i){if(!(s instanceof Array))throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires its ").concat(e," option to be an array, but it was: ")+Y(s));for(var _r2=0;_r2<s.length;++_r2){if(!i(s[_r2]))throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires all ").concat(e," elements to be ").concat(n,", but the value at index ").concat(_r2," was: ")+Y(s[_r2]));}}(t,e,n,s,i);}/**
 * Validates that the provided named option equals one of the expected values.
 */ /**
 * Validates that the provided named option equals one of the expected values or
 * is undefined.
 */function K(t,e,n,s,i){void 0!==s&&function(t,e,n,s,i){var r=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=i[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var _t3=_step.value;if(_t3===s)return;r.push(Y(_t3));}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator["return"]!=null){_iterator["return"]();}}finally{if(_didIteratorError){throw _iteratorError;}}}var o=Y(s);throw new I(E.INVALID_ARGUMENT,"Invalid value ".concat(o," provided to function ").concat(t,"() for option \"").concat(n,"\". Acceptable values: ").concat(r.join(", ")));}(t,0,n,s,i);}/**
 * Validates that the provided argument is a valid enum.
 *
 * @param functionName Function making the validation call.
 * @param enums Array containing all possible values for the enum.
 * @param position Position of the argument in `functionName`.
 * @param argument Argument to validate.
 * @return The value as T if the argument can be converted.
 */function G(t,e,n,s){if(!e.some(function(t){return t===s;}))throw new I(E.INVALID_ARGUMENT,"Invalid value ".concat(Y(s)," provided to function ").concat(t,"() for its ").concat(et(n)," argument. Acceptable values: ")+e.join(", "));return s;}/** Helper to validate the type of a provided input. */function z(t,e,n,s){var i=!1;if(i="object"===e?H(s):"non-empty string"===e?"string"==typeof s&&""!==s:_typeof(s)===e,!i){var _i4=Y(s);throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires its ").concat(n," to be of type ").concat(e,", but it was: ").concat(_i4));}}/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */function H(t){return"object"==_typeof(t)&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t));}/** Returns a string describing the type / value of the provided input. */function Y(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=t.substring(0,20)+"..."),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==_typeof(t)){if(t instanceof Array)return"an array";{var _e8=/** Hacky method to try to get the constructor name for an object. */function(t){if(t.constructor){var _e9=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(_e9&&_e9.length>1)return _e9[1];}return null;}/** Validates the provided argument is defined. */(t);return _e8?"a custom ".concat(_e8," object"):"an object";}}return"function"==typeof t?"a function":p();}function J(t,e,n){if(void 0===n)throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires a valid ").concat(et(e)," argument, but it was undefined."));}/**
 * Validates the provided positional argument is an object, and its keys and
 * values match the expected keys and types provided in optionTypes.
 */function X(t,e,n){D(e,function(e,s){if(n.indexOf(e)<0)throw new I(E.INVALID_ARGUMENT,"Unknown option '".concat(e,"' passed to function ").concat(t,"(). Available options: ")+n.join(", "));});}/**
 * Helper method to throw an error that the provided argument did not pass
 * an instanceof check.
 */function Z(t,e,n,s){var i=Y(s);return new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires its ").concat(et(n)," argument to be a ").concat(e,", but it was: ").concat(i));}function tt(t,e,n){if(n<=0)throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires its ").concat(et(e)," argument to be a positive number, but it was: ").concat(n,"."));}/** Converts a number to its english word representation */function et(t){switch(t){case 1:return"first";case 2:return"second";case 3:return"third";default:return t+"th";}}/**
 * Formats the given word as plural conditionally given the preceding number.
 */function nt(t,e){return"".concat(t," ").concat(e)+(1===t?"":"s");}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */function st(t){// Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
var e=// eslint-disable-next-line @typescript-eslint/no-explicit-any
"undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else// Falls back to Math.random
for(var _e10=0;_e10<t;_e10++){n[_e10]=Math.floor(256*Math.random());}return n;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var it=/*#__PURE__*/function(){function it(){_classCallCheck(this,it);}_createClass(it,null,[{key:"k",value:function k(){// Alphanumeric characters
var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length;// The largest byte value that is a multiple of `char.length`.
var n="";for(;n.length<20;){var _s3=st(40);for(var _i5=0;_i5<_s3.length;++_i5){// Only accept values that are [0, maxMultiple), this ensures they can
// be evenly mapped to indices of `chars` via a modulo operation.
n.length<20&&_s3[_i5]<e&&(n+=t.charAt(_s3[_i5]%t.length));}}return n;}}]);return it;}();function rt(t,e){return t<e?-1:t>e?1:0;}/** Helper to compare arrays using isEqual(). */function ot(t,e,n){return t.length===e.length&&t.every(function(t,s){return n(t,e[s]);});}/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */function at(t){// Return the input string, with an additional NUL byte appended.
return t+"\0";}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 */var ct=/*#__PURE__*/function(){function ct(t){_classCallCheck(this,ct);this.M=t;}_createClass(ct,[{key:"toBase64",value:function toBase64(){return function(t){var n=[];for(var _e11=0;_e11<t.length;_e11++){n[_e11]=t.charCodeAt(_e11);}return _util.base64.encodeByteArray(n,!1);}(this.M);}},{key:"toUint8Array",value:function toUint8Array(){return function(t){var e=new Uint8Array(t.length);for(var _n10=0;_n10<t.length;_n10++){e[_n10]=t.charCodeAt(_n10);}return e;}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing an array of bytes.
 */(this.M);}},{key:"O",value:function O(){return 2*this.M.length;}},{key:"L",value:function L(t){return rt(this.M,t.M);}},{key:"isEqual",value:function isEqual(t){return this.M===t.M;}}],[{key:"fromBase64String",value:function fromBase64String(t){var e=T(t);return new ct(e);}},{key:"fromUint8Array",value:function fromUint8Array(t){var e=/**
 * Helper function to convert an Uint8array to a binary string.
 */function(t){var e="";for(var _n11=0;_n11<t.length;++_n11){e+=String.fromCharCode(t[_n11]);}return e;}/**
 * Helper function to convert a binary string to an Uint8Array.
 */(t);return new ct(e);}}]);return ct;}();ct.B=new ct("");var ut=/*#__PURE__*/function(){function ut(t){_classCallCheck(this,ut);this.q=t;}/**
     * Creates a new `Bytes` object from the given Base64 string, converting it to
     * bytes.
     *
     * @param base64 The Base64 string used to create the `Bytes` object.
     */_createClass(ut,[{key:"toBase64",/**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @return The Base64-encoded string created from the `Bytes` object.
     */value:function toBase64(){return this.q.toBase64();}/**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @return The Uint8Array created from the `Bytes` object.
     */},{key:"toUint8Array",value:function toUint8Array(){return this.q.toUint8Array();}/**
     * Returns a string representation of the `Bytes` object.
     *
     * @return A string representation of the `Bytes` object.
     */},{key:"toString",value:function toString(){return"Bytes(base64: "+this.toBase64()+")";}/**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other The `Bytes` object to compare against.
     * @return true if this `Bytes` object is equal to the provided one.
     */},{key:"isEqual",value:function isEqual(t){return this.q.isEqual(t.q);}}],[{key:"fromBase64String",value:function fromBase64String(t){try{return new ut(ct.fromBase64String(t));}catch(t){throw new I(E.INVALID_ARGUMENT,"Failed to construct Bytes from Base64 string: "+t);}}/**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array The Uint8Array used to create the `Bytes` object.
     */},{key:"fromUint8Array",value:function fromUint8Array(t){return new ut(ct.fromUint8Array(t));}}]);return ut;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Helper function to assert Uint8Array is available at runtime. */function ht(){if("undefined"==typeof Uint8Array)throw new I(E.UNIMPLEMENTED,"Uint8Arrays are not available in this environment.");}/**
 * Immutable class holding a blob (binary data).
 *
 * This class is directly exposed in the public API. It extends the Bytes class
 * of the firestore-exp API to support `instanceof Bytes` checks during user
 * data conversion.
 *
 * Note that while you can't hide the constructor in JavaScript code, we are
 * using the hack above to make sure no-one outside this module can call it.
 */var lt=/*#__PURE__*/function(_ut){_inherits(lt,_ut);function lt(){_classCallCheck(this,lt);return _possibleConstructorReturn(this,_getPrototypeOf(lt).apply(this,arguments));}_createClass(lt,[{key:"toBase64",value:function toBase64(){return O("Blob.toBase64",arguments,0),_get(_getPrototypeOf(lt.prototype),"toBase64",this).call(this);}},{key:"toUint8Array",value:function toUint8Array(){return O("Blob.toUint8Array",arguments,0),ht(),_get(_getPrototypeOf(lt.prototype),"toUint8Array",this).call(this);}},{key:"toString",value:function toString(){return"Blob(base64: "+this.toBase64()+")";}}],[{key:"fromBase64String",value:function fromBase64String(t){O("Blob.fromBase64String",arguments,1),q("Blob.fromBase64String","string",1,t);try{return new lt(ct.fromBase64String(t));}catch(t){throw new I(E.INVALID_ARGUMENT,"Failed to construct Blob from Base64 string: "+t);}}},{key:"fromUint8Array",value:function fromUint8Array(t){if(O("Blob.fromUint8Array",arguments,1),ht(),!(t instanceof Uint8Array))throw Z("Blob.fromUint8Array","Uint8Array",1,t);return new lt(ct.fromUint8Array(t));}}]);return lt;}(ut);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var _t=/**
     * Constructs a DatabaseInfo using the provided host, databaseId and
     * persistenceKey.
     *
     * @param databaseId The database to use.
     * @param persistenceKey A unique identifier for this Firestore's local
     * storage (used in conjunction with the databaseId).
     * @param host The Firestore backend host to connect to.
     * @param ssl Whether to use SSL when connecting.
     * @param forceLongPolling Whether to use the forceLongPolling option
     * when using WebChannel as the network transport.
     */function _t(t,e,n,s,i){_classCallCheck(this,_t);this.U=t,this.persistenceKey=e,this.host=n,this.ssl=s,this.forceLongPolling=i;};/** The default database name for a project. */ /** Represents the database ID a Firestore client is associated with. */var ft=/*#__PURE__*/function(){function ft(t,e){_classCallCheck(this,ft);this.projectId=t,this.database=e||"(default)";}_createClass(ft,[{key:"isEqual",value:function isEqual(t){return t instanceof ft&&t.projectId===this.projectId&&t.database===this.database;}},{key:"L",value:function L(t){return rt(this.projectId,t.projectId)||rt(this.database,t.database);}},{key:"W",get:function get(){return"(default)"===this.database;}}]);return ft;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A map implementation that uses objects as keys. Objects must have an
 * associated equals function and must be immutable. Entries in the map are
 * stored together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */var dt=/*#__PURE__*/function(){function dt(t,e){_classCallCheck(this,dt);this.j=t,this.K=e,/**
         * The inner map for a key -> value pair. Due to the possibility of
         * collisions we keep a list of entries that we do a linear search through
         * to find an actual match. Note that collisions should be rare, so we still
         * expect near constant time lookups in practice.
         */this.G={};}/** Get a value for this key, or undefined if it does not exist. */_createClass(dt,[{key:"get",value:function get(t){var e=this.j(t),n=this.G[e];if(void 0!==n){var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=n[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _step2$value=_slicedToArray(_step2.value,2),_e12=_step2$value[0],_s4=_step2$value[1];if(this.K(_e12,t))return _s4;}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2["return"]!=null){_iterator2["return"]();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}}},{key:"has",value:function has(t){return void 0!==this.get(t);}/** Put this key and value in the map. */},{key:"set",value:function set(t,e){var n=this.j(t),s=this.G[n];if(void 0!==s){for(var _n12=0;_n12<s.length;_n12++){if(this.K(s[_n12][0],t))return void(s[_n12]=[t,e]);}s.push([t,e]);}else this.G[n]=[[t,e]];}/**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */},{key:"delete",value:function _delete(t){var e=this.j(t),n=this.G[e];if(void 0===n)return!1;for(var _s5=0;_s5<n.length;_s5++){if(this.K(n[_s5][0],t))return 1===n.length?delete this.G[e]:n.splice(_s5,1),!0;}return!1;}},{key:"forEach",value:function forEach(t){D(this.G,function(e,n){var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=n[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var _step3$value=_slicedToArray(_step3.value,2),_e13=_step3$value[0],_s6=_step3$value[1];t(_e13,_s6);}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3["return"]!=null){_iterator3["return"]();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}});}},{key:"m",value:function m(){return C(this.G);}}]);return dt;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).
/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
 */var wt=/*#__PURE__*/function(){/**
     * Creates a new timestamp.
     *
     * @param seconds The number of seconds of UTC time since Unix epoch
     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     *     9999-12-31T23:59:59Z inclusive.
     * @param nanoseconds The non-negative fractions of a second at nanosecond
     *     resolution. Negative second values with fractions must still have
     *     non-negative nanoseconds values that count forward in time. Must be
     *     from 0 to 999,999,999 inclusive.
     */function wt(t,e){_classCallCheck(this,wt);if(this.seconds=t,this.nanoseconds=e,e<0)throw new I(E.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new I(E.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new I(E.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);// This will break in the year 10,000.
if(t>=253402300800)throw new I(E.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);}/**
     * Creates a new timestamp with the current date, with millisecond precision.
     *
     * @return a new timestamp representing the current date.
     */_createClass(wt,[{key:"toDate",/**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
     * a loss of precision since `Date` objects only support millisecond precision.
     *
     * @return JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */value:function toDate(){return new Date(this.toMillis());}/**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @return The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */},{key:"toMillis",value:function toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6;}},{key:"H",value:function H(t){return this.seconds===t.seconds?rt(this.nanoseconds,t.nanoseconds):rt(this.seconds,t.seconds);}/**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other The `Timestamp` to compare against.
     * @return true if this `Timestamp` is equal to the provided one.
     */},{key:"isEqual",value:function isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds;}},{key:"toString",value:function toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")";}},{key:"toJSON",value:function toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds};}/**
     * Converts this object to a primitive string, which allows Timestamp objects to be compared
     * using the `>`, `<=`, `>=` and `>` operators.
     */},{key:"valueOf",value:function valueOf(){// This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
// translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
// with zeroes to be a consistent length. Strings with this format then have a lexiographical
// ordering that matches the expected ordering. The <seconds> translation is done to avoid
// having a leading negative sign (i.e. a leading '-' character) in its string representation,
// which would affect its lexiographical ordering.
var t=this.seconds- -62135596800;// Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0");}}],[{key:"now",value:function now(){return wt.fromMillis(Date.now());}/**
     * Creates a new timestamp from the given date.
     *
     * @param date The date to initialize the `Timestamp` from.
     * @return A new `Timestamp` representing the same point in time as the given
     *     date.
     */},{key:"fromDate",value:function fromDate(t){return wt.fromMillis(t.getTime());}/**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @return A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */},{key:"fromMillis",value:function fromMillis(t){var e=Math.floor(t/1e3);return new wt(e,1e6*(t-1e3*e));}}]);return wt;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */var mt=/*#__PURE__*/function(){function mt(t){_classCallCheck(this,mt);this.timestamp=t;}_createClass(mt,[{key:"L",value:function L(t){return this.timestamp.H(t.timestamp);}},{key:"isEqual",value:function isEqual(t){return this.timestamp.isEqual(t.timestamp);}/** Returns a number representation of the version for use in spec tests. */},{key:"J",value:function J(){// Convert to microseconds.
return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3;}},{key:"toString",value:function toString(){return"SnapshotVersion("+this.timestamp.toString()+")";}},{key:"X",value:function X(){return this.timestamp;}}],[{key:"Y",value:function Y(t){return new mt(t);}},{key:"min",value:function min(){return new mt(new wt(0,0));}}]);return mt;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns whether a variable is either undefined or null.
 */function Tt(t){return null==t;}/** Returns whether the value represents -0. */function Et(t){// Detect if the value is -0.0. Based on polyfill from
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
return 0===t&&1/t==-1/0;}/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value The value to test for being an integer and in the safe range
 */function It(t){return"number"==typeof t&&Number.isInteger(t)&&!Et(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER;}/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Visible for testing
var At=function At(t){var e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var i=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var r=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var o=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;_classCallCheck(this,At);this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=s,this.limit=i,this.startAt=r,this.endAt=o,this.Z=null;};/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */function Rt(t){var e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var i=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var r=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var o=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;return new At(t,e,n,s,i,r,o);}function gt(t){var e=v(t);if(null===e.Z){var _t4=e.path.R();null!==e.collectionGroup&&(_t4+="|cg:"+e.collectionGroup),_t4+="|f:",_t4+=e.filters.map(function(t){return fs(t);}).join(","),_t4+="|ob:",_t4+=e.orderBy.map(function(t){return(e=t).field.R()+e.dir;var e;}).join(","),Tt(e.limit)||(_t4+="|l:",_t4+=e.limit),e.startAt&&(_t4+="|lb:",_t4+=Ps(e.startAt)),e.endAt&&(_t4+="|ub:",_t4+=Ps(e.endAt)),e.Z=_t4;}return e.Z;}function Pt(t){var e=t.path.R();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=", filters: [".concat(t.filters.map(function(t){return"".concat((e=t).field.R()," ").concat(e.op," ").concat(fe(e.value));/** Returns a debug description for `filter`. */var e;/** Filter that matches on key fields (i.e. '__name__'). */}).join(", "),"]")),Tt(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=", orderBy: [".concat(t.orderBy.map(function(t){return"".concat((e=t).field.R()," (").concat(e.dir,")");var e;}).join(", "),"]")),t.startAt&&(e+=", startAt: "+Ps(t.startAt)),t.endAt&&(e+=", endAt: "+Ps(t.endAt)),"Target(".concat(e,")");}function yt(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(var _n13=0;_n13<t.orderBy.length;_n13++){if(!vs(t.orderBy[_n13],e.orderBy[_n13]))return!1;}if(t.filters.length!==e.filters.length)return!1;for(var _i6=0;_i6<t.filters.length;_i6++){if(n=t.filters[_i6],s=e.filters[_i6],n.op!==s.op||!n.field.isEqual(s.field)||!ue(n.value,s.value))return!1;}var n,s;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!Vs(t.startAt,e.startAt)&&Vs(t.endAt,e.endAt);}function Vt(t){return k.F(t.path)&&null===t.collectionGroup&&0===t.filters.length;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable set of metadata that the local store tracks for each target.
 */var pt=/*#__PURE__*/function(){function pt(/** The target being listened to. */t,/**
     * The target ID to which the target corresponds; Assigned by the
     * LocalStore for user listens and by the SyncEngine for limbo watches.
     */e,/** The purpose of the target. */n,/**
     * The sequence number of the last transaction during which this target data
     * was modified.
     */s){var i=arguments.length>4&&arguments[4]!==undefined?arguments[4]:mt.min();var r=arguments.length>5&&arguments[5]!==undefined?arguments[5]:mt.min();var o=arguments.length>6&&arguments[6]!==undefined?arguments[6]:ct.B;_classCallCheck(this,pt);this.target=t,this.targetId=e,this.tt=n,this.sequenceNumber=s,this.et=i,this.lastLimboFreeSnapshotVersion=r,this.resumeToken=o;}/** Creates a new target data instance with an updated sequence number. */_createClass(pt,[{key:"nt",value:function nt(t){return new pt(this.target,this.targetId,this.tt,t,this.et,this.lastLimboFreeSnapshotVersion,this.resumeToken);}/**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */},{key:"st",value:function st(t,e){return new pt(this.target,this.targetId,this.tt,this.sequenceNumber,e,this.lastLimboFreeSnapshotVersion,t);}/**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */},{key:"it",value:function it(t){return new pt(this.target,this.targetId,this.tt,this.sequenceNumber,this.et,t,this.resumeToken);}}]);return pt;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var bt=// TODO(b/33078163): just use simplest form of existence filter for now
function bt(t){_classCallCheck(this,bt);this.count=t;};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers or change this into a const enum.
 */var vt,St;/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */function Dt(t){switch(t){case E.OK:return p();case E.CANCELLED:case E.UNKNOWN:case E.DEADLINE_EXCEEDED:case E.RESOURCE_EXHAUSTED:case E.INTERNAL:case E.UNAVAILABLE:// Unauthenticated means something went wrong with our token and we need
// to retry with new credentials which will happen automatically.
case E.UNAUTHENTICATED:return!1;case E.INVALID_ARGUMENT:case E.NOT_FOUND:case E.ALREADY_EXISTS:case E.PERMISSION_DENIED:case E.FAILED_PRECONDITION:// Aborted might be retried in some scenarios, but that is dependant on
// the context and should handled individually by the calling code.
// See https://cloud.google.com/apis/design/errors.
case E.ABORTED:case E.OUT_OF_RANGE:case E.UNIMPLEMENTED:case E.DATA_LOSS:return!0;default:return p();}}/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */ /**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */function Ct(t){if(void 0===t)// This shouldn't normally happen, but in certain error cases (like trying
// to send invalid proto messages) we may get an error with no GRPC code.
return P("GRPC error has no .code"),E.UNKNOWN;switch(t){case vt.OK:return E.OK;case vt.CANCELLED:return E.CANCELLED;case vt.UNKNOWN:return E.UNKNOWN;case vt.DEADLINE_EXCEEDED:return E.DEADLINE_EXCEEDED;case vt.RESOURCE_EXHAUSTED:return E.RESOURCE_EXHAUSTED;case vt.INTERNAL:return E.INTERNAL;case vt.UNAVAILABLE:return E.UNAVAILABLE;case vt.UNAUTHENTICATED:return E.UNAUTHENTICATED;case vt.INVALID_ARGUMENT:return E.INVALID_ARGUMENT;case vt.NOT_FOUND:return E.NOT_FOUND;case vt.ALREADY_EXISTS:return E.ALREADY_EXISTS;case vt.PERMISSION_DENIED:return E.PERMISSION_DENIED;case vt.FAILED_PRECONDITION:return E.FAILED_PRECONDITION;case vt.ABORTED:return E.ABORTED;case vt.OUT_OF_RANGE:return E.OUT_OF_RANGE;case vt.UNIMPLEMENTED:return E.UNIMPLEMENTED;case vt.DATA_LOSS:return E.DATA_LOSS;default:return p();}}/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */(St=vt||(vt={}))[St.OK=0]="OK",St[St.CANCELLED=1]="CANCELLED",St[St.UNKNOWN=2]="UNKNOWN",St[St.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",St[St.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",St[St.NOT_FOUND=5]="NOT_FOUND",St[St.ALREADY_EXISTS=6]="ALREADY_EXISTS",St[St.PERMISSION_DENIED=7]="PERMISSION_DENIED",St[St.UNAUTHENTICATED=16]="UNAUTHENTICATED",St[St.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",St[St.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",St[St.ABORTED=10]="ABORTED",St[St.OUT_OF_RANGE=11]="OUT_OF_RANGE",St[St.UNIMPLEMENTED=12]="UNIMPLEMENTED",St[St.INTERNAL=13]="INTERNAL",St[St.UNAVAILABLE=14]="UNAVAILABLE",St[St.DATA_LOSS=15]="DATA_LOSS";/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.
var Nt=/*#__PURE__*/function(){function Nt(t,e){_classCallCheck(this,Nt);this.i=t,this.root=e||$t.EMPTY;}// Returns a copy of the map, with the specified key/value added or replaced.
_createClass(Nt,[{key:"rt",value:function rt(t,e){return new Nt(this.i,this.root.rt(t,e,this.i).copy(null,null,$t.ot,null,null));}// Returns a copy of the map, with the specified key removed.
},{key:"remove",value:function remove(t){return new Nt(this.i,this.root.remove(t,this.i).copy(null,null,$t.ot,null,null));}// Returns the value of the node with the given key, or null.
},{key:"get",value:function get(t){var e=this.root;for(;!e.m();){var _n14=this.i(t,e.key);if(0===_n14)return e.value;_n14<0?e=e.left:_n14>0&&(e=e.right);}return null;}// Returns the index of the element in this sorted map, or -1 if it doesn't
// exist.
},{key:"indexOf",value:function indexOf(t){// Number of nodes that were pruned when descending right
var e=0,n=this.root;for(;!n.m();){var _s7=this.i(t,n.key);if(0===_s7)return e+n.left.size;_s7<0?n=n.left:(// Count all nodes left of the node plus the node itself
e+=n.left.size+1,n=n.right);}// Node not found
return-1;}},{key:"m",value:function m(){return this.root.m();}// Returns the total number of nodes in the map.
},{key:"at",// Returns the minimum key in the map.
value:function at(){return this.root.at();}// Returns the maximum key in the map.
},{key:"ct",value:function ct(){return this.root.ct();}// Traverses the map in key order and calls the specified action function
// for each key/value pair. If action returns true, traversal is aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
},{key:"ut",value:function ut(t){return this.root.ut(t);}},{key:"forEach",value:function forEach(t){this.ut(function(e,n){return t(e,n),!1;});}},{key:"toString",value:function toString(){var t=[];return this.ut(function(e,n){return t.push("".concat(e,":").concat(n)),!1;}),"{".concat(t.join(", "),"}");}// Traverses the map in reverse key order and calls the specified action
// function for each key/value pair. If action returns true, traversal is
// aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
},{key:"ht",value:function ht(t){return this.root.ht(t);}// Returns an iterator over the SortedMap.
},{key:"lt",value:function lt(){return new Ft(this.root,null,this.i,!1);}},{key:"_t",value:function _t(t){return new Ft(this.root,t,this.i,!1);}},{key:"ft",value:function ft(){return new Ft(this.root,null,this.i,!0);}},{key:"dt",value:function dt(t){return new Ft(this.root,t,this.i,!0);}},{key:"size",get:function get(){return this.root.size;}}]);return Nt;}();// end SortedMap
// An iterator over an LLRBNode.
var Ft=/*#__PURE__*/function(){function Ft(t,e,n,s){_classCallCheck(this,Ft);this.wt=s,this.Tt=[];var i=1;for(;!t.m();){if(i=e?n(t.key,e):1,// flip the comparison if we're going in reverse
s&&(i*=-1),i<0)// This node is less than our start key. ignore it
t=this.wt?t.left:t.right;else{if(0===i){// This node is exactly equal to our start key. Push it on the stack,
// but stop iterating;
this.Tt.push(t);break;}// This node is greater than our start key, add it to the stack and move
// to the next one
this.Tt.push(t),t=this.wt?t.right:t.left;}}}_createClass(Ft,[{key:"Et",value:function Et(){var t=this.Tt.pop();var e={key:t.key,value:t.value};if(this.wt)for(t=t.left;!t.m();){this.Tt.push(t),t=t.right;}else for(t=t.right;!t.m();){this.Tt.push(t),t=t.left;}return e;}},{key:"It",value:function It(){return this.Tt.length>0;}},{key:"At",value:function At(){if(0===this.Tt.length)return null;var t=this.Tt[this.Tt.length-1];return{key:t.key,value:t.value};}}]);return Ft;}();// end SortedMapIterator
// Represents a node in a Left-leaning Red-Black tree.
var $t=/*#__PURE__*/function(){function $t(t,e,n,s,i){_classCallCheck(this,$t);this.key=t,this.value=e,this.color=null!=n?n:$t.RED,this.left=null!=s?s:$t.EMPTY,this.right=null!=i?i:$t.EMPTY,this.size=this.left.size+1+this.right.size;}// Returns a copy of the current node, optionally replacing pieces of it.
_createClass($t,[{key:"copy",value:function copy(t,e,n,s,i){return new $t(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=s?s:this.left,null!=i?i:this.right);}},{key:"m",value:function m(){return!1;}// Traverses the tree in key order and calls the specified action function
// for each node. If action returns true, traversal is aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
},{key:"ut",value:function ut(t){return this.left.ut(t)||t(this.key,this.value)||this.right.ut(t);}// Traverses the tree in reverse key order and calls the specified action
// function for each node. If action returns true, traversal is aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
},{key:"ht",value:function ht(t){return this.right.ht(t)||t(this.key,this.value)||this.left.ht(t);}// Returns the minimum node in the tree.
},{key:"min",value:function min(){return this.left.m()?this:this.left.min();}// Returns the maximum key in the tree.
},{key:"at",value:function at(){return this.min().key;}// Returns the maximum key in the tree.
},{key:"ct",value:function ct(){return this.right.m()?this.key:this.right.ct();}// Returns new tree, with the key/value added.
},{key:"rt",value:function rt(t,e,n){var s=this;var i=n(t,s.key);return s=i<0?s.copy(null,null,null,s.left.rt(t,e,n),null):0===i?s.copy(null,e,null,null,null):s.copy(null,null,null,null,s.right.rt(t,e,n)),s.Rt();}},{key:"gt",value:function gt(){if(this.left.m())return $t.EMPTY;var t=this;return t.left.Pt()||t.left.left.Pt()||(t=t.yt()),t=t.copy(null,null,null,t.left.gt(),null),t.Rt();}// Returns new tree, with the specified item removed.
},{key:"remove",value:function remove(t,e){var n,s=this;if(e(t,s.key)<0)s.left.m()||s.left.Pt()||s.left.left.Pt()||(s=s.yt()),s=s.copy(null,null,null,s.left.remove(t,e),null);else{if(s.left.Pt()&&(s=s.Vt()),s.right.m()||s.right.Pt()||s.right.left.Pt()||(s=s.bt()),0===e(t,s.key)){if(s.right.m())return $t.EMPTY;n=s.right.min(),s=s.copy(n.key,n.value,null,null,s.right.gt());}s=s.copy(null,null,null,null,s.right.remove(t,e));}return s.Rt();}},{key:"Pt",value:function Pt(){return this.color;}// Returns new tree after performing any needed rotations.
},{key:"Rt",value:function Rt(){var t=this;return t.right.Pt()&&!t.left.Pt()&&(t=t.vt()),t.left.Pt()&&t.left.left.Pt()&&(t=t.Vt()),t.left.Pt()&&t.right.Pt()&&(t=t.St()),t;}},{key:"yt",value:function yt(){var t=this.St();return t.right.left.Pt()&&(t=t.copy(null,null,null,null,t.right.Vt()),t=t.vt(),t=t.St()),t;}},{key:"bt",value:function bt(){var t=this.St();return t.left.left.Pt()&&(t=t.Vt(),t=t.St()),t;}},{key:"vt",value:function vt(){var t=this.copy(null,null,$t.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null);}},{key:"Vt",value:function Vt(){var t=this.copy(null,null,$t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t);}},{key:"St",value:function St(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e);}// For testing.
},{key:"Dt",value:function Dt(){var t=this.Ct();return Math.pow(2,t)<=this.size+1;}// In a balanced RB tree, the black-depth (number of black nodes) from root to
// leaves is equal on both sides.  This function verifies that or asserts.
},{key:"Ct",value:function Ct(){if(this.Pt()&&this.left.Pt())throw p();if(this.right.Pt())throw p();var t=this.left.Ct();if(t!==this.right.Ct())throw p();return t+(this.Pt()?0:1);}}]);return $t;}();// end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
$t.EMPTY=null,$t.RED=!0,$t.ot=!1;// end LLRBEmptyNode
$t.EMPTY=new(/*#__PURE__*/ // Represents an empty node (a leaf node in the Red-Black Tree).
function(){function _class(){_classCallCheck(this,_class);this.size=0;}_createClass(_class,[{key:"copy",// Returns a copy of the current node.
value:function copy(t,e,n,s,i){return this;}// Returns a copy of the tree, with the specified key/value added.
},{key:"rt",value:function rt(t,e,n){return new $t(t,e);}// Returns a copy of the tree, with the specified key removed.
},{key:"remove",value:function remove(t,e){return this;}},{key:"m",value:function m(){return!0;}},{key:"ut",value:function ut(t){return!1;}},{key:"ht",value:function ht(t){return!1;}},{key:"at",value:function at(){return null;}},{key:"ct",value:function ct(){return null;}},{key:"Pt",value:function Pt(){return!1;}// For testing.
},{key:"Dt",value:function Dt(){return!0;}},{key:"Ct",value:function Ct(){return 0;}},{key:"key",get:function get(){throw p();}},{key:"value",get:function get(){throw p();}},{key:"color",get:function get(){throw p();}},{key:"left",get:function get(){throw p();}},{key:"right",get:function get(){throw p();}}]);return _class;}())();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */var xt=/*#__PURE__*/function(){function xt(t){_classCallCheck(this,xt);this.i=t,this.data=new Nt(this.i);}_createClass(xt,[{key:"has",value:function has(t){return null!==this.data.get(t);}},{key:"first",value:function first(){return this.data.at();}},{key:"last",value:function last(){return this.data.ct();}},{key:"indexOf",value:function indexOf(t){return this.data.indexOf(t);}/** Iterates elements in order defined by "comparator" */},{key:"forEach",value:function forEach(t){this.data.ut(function(e,n){return t(e),!1;});}/** Iterates over `elem`s such that: range[0] <= elem < range[1]. */},{key:"Nt",value:function Nt(t,e){var n=this.data._t(t[0]);for(;n.It();){var _s8=n.Et();if(this.i(_s8.key,t[1])>=0)return;e(_s8.key);}}/**
     * Iterates over `elem`s such that: start <= elem until false is returned.
     */},{key:"Ft",value:function Ft(t,e){var n;for(n=void 0!==e?this.data._t(e):this.data.lt();n.It();){if(!t(n.Et().key))return;}}/** Finds the least element greater than or equal to `elem`. */},{key:"$t",value:function $t(t){var e=this.data._t(t);return e.It()?e.Et().key:null;}},{key:"lt",value:function lt(){return new kt(this.data.lt());}},{key:"_t",value:function _t(t){return new kt(this.data._t(t));}/** Inserts or updates an element */},{key:"add",value:function add(t){return this.copy(this.data.remove(t).rt(t,!0));}/** Deletes an element */},{key:"delete",value:function _delete(t){return this.has(t)?this.copy(this.data.remove(t)):this;}},{key:"m",value:function m(){return this.data.m();}},{key:"xt",value:function xt(t){var e=this;// Make sure `result` always refers to the larger one of the two sets.
return e.size<t.size&&(e=t,t=this),t.forEach(function(t){e=e.add(t);}),e;}},{key:"isEqual",value:function isEqual(t){if(!(t instanceof xt))return!1;if(this.size!==t.size)return!1;var e=this.data.lt(),n=t.data.lt();for(;e.It();){var _t5=e.Et().key,_s9=n.Et().key;if(0!==this.i(_t5,_s9))return!1;}return!0;}},{key:"A",value:function A(){var t=[];return this.forEach(function(e){t.push(e);}),t;}},{key:"toString",value:function toString(){var t=[];return this.forEach(function(e){return t.push(e);}),"SortedSet("+t.toString()+")";}},{key:"copy",value:function copy(t){var e=new xt(this.i);return e.data=t,e;}},{key:"size",get:function get(){return this.data.size;}}]);return xt;}();var kt=/*#__PURE__*/function(){function kt(t){_classCallCheck(this,kt);this.kt=t;}_createClass(kt,[{key:"Et",value:function Et(){return this.kt.Et().key;}},{key:"It",value:function It(){return this.kt.It();}}]);return kt;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Mt=new Nt(k.i);function Ot(){return Mt;}function Lt(){return Ot();}var Bt=new Nt(k.i);function qt(){return Bt;}var Ut=new Nt(k.i);var Qt=new xt(k.i);function Wt(){var e=Qt;for(var _len5=arguments.length,t=new Array(_len5),_key5=0;_key5<_len5;_key5++){t[_key5]=arguments[_key5];}for(var _i7=0,_t6=t;_i7<_t6.length;_i7++){var _n15=_t6[_i7];e=e.add(_n15);}return e;}var jt=new xt(rt);function Kt(){return jt;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */var Gt=/*#__PURE__*/function(){/** The default ordering is by key if the comparator is omitted */function Gt(t){_classCallCheck(this,Gt);// We are adding document key comparator to the end as it's the only
// guaranteed unique property of a document.
this.i=t?function(e,n){return t(e,n)||k.i(e.key,n.key);}:function(t,e){return k.i(t.key,e.key);},this.Mt=qt(),this.Ot=new Nt(this.i);}/**
     * Returns an empty copy of the existing DocumentSet, using the same
     * comparator.
     */_createClass(Gt,[{key:"has",value:function has(t){return null!=this.Mt.get(t);}},{key:"get",value:function get(t){return this.Mt.get(t);}},{key:"first",value:function first(){return this.Ot.at();}},{key:"last",value:function last(){return this.Ot.ct();}},{key:"m",value:function m(){return this.Ot.m();}/**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */},{key:"indexOf",value:function indexOf(t){var e=this.Mt.get(t);return e?this.Ot.indexOf(e):-1;}},{key:"forEach",/** Iterates documents in order defined by "comparator" */value:function forEach(t){this.Ot.ut(function(e,n){return t(e),!1;});}/** Inserts or updates a document with the same key */},{key:"add",value:function add(t){// First remove the element if we have it.
var e=this["delete"](t.key);return e.copy(e.Mt.rt(t.key,t),e.Ot.rt(t,null));}/** Deletes a document with a given key */},{key:"delete",value:function _delete(t){var e=this.get(t);return e?this.copy(this.Mt.remove(t),this.Ot.remove(e)):this;}},{key:"isEqual",value:function isEqual(t){if(!(t instanceof Gt))return!1;if(this.size!==t.size)return!1;var e=this.Ot.lt(),n=t.Ot.lt();for(;e.It();){var _t7=e.Et().key,_s10=n.Et().key;if(!_t7.isEqual(_s10))return!1;}return!0;}},{key:"toString",value:function toString(){var t=[];return this.forEach(function(e){t.push(e.toString());}),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)";}},{key:"copy",value:function copy(t,e){var n=new Gt();return n.i=this.i,n.Mt=t,n.Ot=e,n;}},{key:"size",get:function get(){return this.Ot.size;}}],[{key:"Lt",value:function Lt(t){return new Gt(t.i);}}]);return Gt;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */var zt=/*#__PURE__*/function(){function zt(){_classCallCheck(this,zt);this.Bt=new Nt(k.i);}_createClass(zt,[{key:"track",value:function track(t){var e=t.doc.key,n=this.Bt.get(e);n?// Merge the new change with the existing change.
0/* Added */!==t.type&&3/* Metadata */===n.type?this.Bt=this.Bt.rt(e,t):3/* Metadata */===t.type&&1/* Removed */!==n.type?this.Bt=this.Bt.rt(e,{type:n.type,doc:t.doc}):2/* Modified */===t.type&&2/* Modified */===n.type?this.Bt=this.Bt.rt(e,{type:2/* Modified */,doc:t.doc}):2/* Modified */===t.type&&0/* Added */===n.type?this.Bt=this.Bt.rt(e,{type:0/* Added */,doc:t.doc}):1/* Removed */===t.type&&0/* Added */===n.type?this.Bt=this.Bt.remove(e):1/* Removed */===t.type&&2/* Modified */===n.type?this.Bt=this.Bt.rt(e,{type:1/* Removed */,doc:n.doc}):0/* Added */===t.type&&1/* Removed */===n.type?this.Bt=this.Bt.rt(e,{type:2/* Modified */,doc:t.doc}):// This includes these cases, which don't make sense:
// Added->Added
// Removed->Removed
// Modified->Added
// Removed->Modified
// Metadata->Added
// Removed->Metadata
p():this.Bt=this.Bt.rt(e,t);}},{key:"qt",value:function qt(){var t=[];return this.Bt.ut(function(e,n){t.push(n);}),t;}}]);return zt;}();var Ht=/*#__PURE__*/function(){function Ht(t,e,n,s,i,r,o,a){_classCallCheck(this,Ht);this.query=t,this.docs=e,this.Ut=n,this.docChanges=s,this.Qt=i,this.fromCache=r,this.Wt=o,this.jt=a;}/** Returns a view snapshot as if all documents in the snapshot were added. */_createClass(Ht,[{key:"isEqual",value:function isEqual(t){if(!(this.fromCache===t.fromCache&&this.Wt===t.Wt&&this.Qt.isEqual(t.Qt)&&as(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.Ut.isEqual(t.Ut)))return!1;var e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(var _t8=0;_t8<e.length;_t8++){if(e[_t8].type!==n[_t8].type||!e[_t8].doc.isEqual(n[_t8].doc))return!1;}return!0;}},{key:"hasPendingWrites",get:function get(){return!this.Qt.m();}}],[{key:"Kt",value:function Kt(t,e,n,s){var i=[];return e.forEach(function(t){i.push({type:0/* Added */,doc:t});}),new Ht(t,e,Gt.Lt(e),i,n,s,/* syncStateChanged= */!0,/* excludesMetadataChanges= */!1);}}]);return Ht;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */var Yt=/*#__PURE__*/function(){function Yt(/**
     * The snapshot version this event brings us up to, or MIN if not set.
     */t,/**
     * A map from target to changes to the target. See TargetChange.
     */e,/**
     * A set of targets that is known to be inconsistent. Listens for these
     * targets should be re-established without resume tokens.
     */n,/**
     * A set of which documents have changed or been deleted, along with the
     * doc's new values (if not deleted).
     */s,/**
     * A set of which document updates are due only to limbo resolution targets.
     */i){_classCallCheck(this,Yt);this.et=t,this.Gt=e,this.zt=n,this.Ht=s,this.Yt=i;}/**
     * HACK: Views require RemoteEvents in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized RemoteEvent that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */ // PORTING NOTE: Multi-tab only
_createClass(Yt,null,[{key:"Jt",value:function Jt(t,e){var n=new Map();return n.set(t,_Jt.Xt(t,e)),new Yt(mt.min(),n,Kt(),Ot(),Wt());}}]);return Yt;}();/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */var _Jt=/*#__PURE__*/function(){function _Jt(/**
     * An opaque, server-assigned token that allows watching a query to be resumed
     * after disconnecting without retransmitting all the data that matches the
     * query. The resume token essentially identifies a point in time from which
     * the server should resume sending results.
     */t,/**
     * The "current" (synced) status of this target. Note that "current"
     * has special meaning in the RPC protocol that implies that a target is
     * both up-to-date and consistent with the rest of the watch stream.
     */e,/**
     * The set of documents that were newly assigned to this target as part of
     * this remote event.
     */n,/**
     * The set of documents that were already assigned to this target but received
     * an update during this remote event.
     */s,/**
     * The set of documents that were removed from this target as part of this
     * remote event.
     */i){_classCallCheck(this,_Jt);this.resumeToken=t,this.Zt=e,this.te=n,this.ee=s,this.ne=i;}/**
     * This method is used to create a synthesized TargetChanges that can be used to
     * apply a CURRENT status change to a View (for queries executed in a different
     * tab) or for new queries (to raise snapshots with correct CURRENT status).
     */_createClass(_Jt,null,[{key:"Xt",value:function Xt(t,e){return new _Jt(ct.B,e,Wt(),Wt(),Wt());}}]);return _Jt;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a changed document and a list of target ids to which this change
 * applies.
 *
 * If document has been deleted NoDocument will be provided.
 */var Xt=function Xt(/** The new document applies to all of these targets. */t,/** The new document is removed from all of these targets. */e,/** The key of the document for this change. */n,/**
     * The new document or NoDocument if it was deleted. Is null if the
     * document went out of view without the server sending a new document.
     */s){_classCallCheck(this,Xt);this.se=t,this.removedTargetIds=e,this.key=n,this.ie=s;};var Zt=function Zt(t,e){_classCallCheck(this,Zt);this.targetId=t,this.re=e;};var te=function te(/** What kind of change occurred to the watch target. */t,/** The target IDs that were added/removed/set. */e){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ct.B;var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;_classCallCheck(this,te);this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=s;};/** Tracks the internal state of a Watch target. */var ee=/*#__PURE__*/function(){function ee(){_classCallCheck(this,ee);/**
         * The number of pending responses (adds or removes) that we are waiting on.
         * We only consider targets active that have no pending responses.
         */this.oe=0,/**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */this.ae=ie(),/** See public getters for explanations of these fields. */this.ce=ct.B,this.ue=!1,/**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */this.he=!0;}/**
     * Whether this target has been marked 'current'.
     *
     * 'Current' has special meaning in the RPC protocol: It implies that the
     * Watch backend has sent us all changes up to the point at which the target
     * was added and that the target is consistent with the rest of the watch
     * stream.
     */_createClass(ee,[{key:"fe",/**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */value:function fe(t){t.O()>0&&(this.he=!0,this.ce=t);}/**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */},{key:"de",value:function de(){var t=Wt(),e=Wt(),n=Wt();return this.ae.forEach(function(s,i){switch(i){case 0/* Added */:t=t.add(s);break;case 2/* Modified */:e=e.add(s);break;case 1/* Removed */:n=n.add(s);break;default:p();}}),new _Jt(this.ce,this.ue,t,e,n);}/**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */},{key:"we",value:function we(){this.he=!1,this.ae=ie();}},{key:"me",value:function me(t,e){this.he=!0,this.ae=this.ae.rt(t,e);}},{key:"Te",value:function Te(t){this.he=!0,this.ae=this.ae.remove(t);}},{key:"Ee",value:function Ee(){this.oe+=1;}},{key:"Ie",value:function Ie(){this.oe-=1;}},{key:"Ae",value:function Ae(){this.he=!0,this.ue=!0;}},{key:"Zt",get:function get(){return this.ue;}/** The last resume token sent to us for this target. */},{key:"resumeToken",get:function get(){return this.ce;}/** Whether this target has pending target adds or target removes. */},{key:"le",get:function get(){return 0!==this.oe;}/** Whether we have modified any state that should trigger a snapshot. */},{key:"_e",get:function get(){return this.he;}}]);return ee;}();/**
 * A helper class to accumulate watch changes into a RemoteEvent.
 */var ne=/*#__PURE__*/function(){function ne(t){_classCallCheck(this,ne);this.Re=t,/** The internal state of all tracked targets. */this.ge=new Map(),/** Keeps track of the documents to update since the last raised snapshot. */this.Pe=Ot(),/** A mapping of document keys to their set of target IDs. */this.ye=se(),/**
         * A list of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */this.Ve=new xt(rt);}/**
     * Processes and adds the DocumentWatchChange to the current set of changes.
     */_createClass(ne,[{key:"pe",value:function pe(t){var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=t.se[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var _e14=_step4.value;t.ie instanceof jn?this.be(_e14,t.ie):t.ie instanceof Kn&&this.ve(_e14,t.key,t.ie);}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4["return"]!=null){_iterator4["return"]();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=t.removedTargetIds[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var _e15=_step5.value;this.ve(_e15,t.key,t.ie);}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5["return"]!=null){_iterator5["return"]();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}}/** Processes and adds the WatchTargetChange to the current set of changes. */},{key:"Se",value:function Se(t){var _this2=this;this.De(t,function(e){var n=_this2.Ce(e);switch(t.state){case 0/* NoChange */:_this2.Ne(e)&&n.fe(t.resumeToken);break;case 1/* Added */:// We need to decrement the number of pending acks needed from watch
// for this targetId.
n.Ie(),n.le||// We have a freshly added target, so we need to reset any state
// that we had previously. This can happen e.g. when remove and add
// back a target for existence filter mismatches.
n.we(),n.fe(t.resumeToken);break;case 2/* Removed */:// We need to keep track of removed targets to we can post-filter and
// remove any target changes.
// We need to decrement the number of pending acks needed from watch
// for this targetId.
n.Ie(),n.le||_this2.removeTarget(e);break;case 3/* Current */:_this2.Ne(e)&&(n.Ae(),n.fe(t.resumeToken));break;case 4/* Reset */:_this2.Ne(e)&&(// Reset the target and synthesizes removes for all existing
// documents. The backend will re-add any documents that still
// match the target before it sends the next global snapshot.
_this2.Fe(e),n.fe(t.resumeToken));break;default:p();}});}/**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */},{key:"De",value:function De(t,e){var _this3=this;t.targetIds.length>0?t.targetIds.forEach(e):this.ge.forEach(function(t,n){_this3.Ne(n)&&e(n);});}/**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */},{key:"$e",value:function $e(t){var e=t.targetId,n=t.re.count,s=this.xe(e);if(s){var _t9=s.target;if(Vt(_t9)){if(0===n){// The existence filter told us the document does not exist. We deduce
// that this document does not exist and apply a deleted document to
// our updates. Without applying this deleted document there might be
// another query that will raise this document as part of a snapshot
// until it is resolved, essentially exposing inconsistency between
// queries.
var _n16=new k(_t9.path);this.ve(e,_n16,new Kn(_n16,mt.min()));}else b(1===n);}else{this.ke(e)!==n&&(// Existence filter mismatch: We reset the mapping and raise a new
// snapshot with `isFromCache:true`.
this.Fe(e),this.Ve=this.Ve.add(e));}}}/**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */},{key:"Me",value:function Me(t){var _this4=this;var e=new Map();this.ge.forEach(function(n,s){var i=_this4.xe(s);if(i){if(n.Zt&&Vt(i.target)){// Document queries for document that don't exist can produce an empty
// result set. To update our local cache, we synthesize a document
// delete if we have not previously received the document. This
// resolves the limbo state of the document, removing it from
// limboDocumentRefs.
// TODO(dimond): Ideally we would have an explicit lookup target
// instead resulting in an explicit delete message and we could
// remove this special logic.
var _e16=new k(i.target.path);null!==_this4.Pe.get(_e16)||_this4.Oe(s,_e16)||_this4.ve(s,_e16,new Kn(_e16,t));}n._e&&(e.set(s,n.de()),n.we());}});var n=Wt();// We extract the set of limbo-only document updates as the GC logic
// special-cases documents that do not appear in the target cache.
// TODO(gsoltis): Expand on this comment once GC is available in the JS
// client.
this.ye.forEach(function(t,e){var s=!0;e.Ft(function(t){var e=_this4.xe(t);return!e||2/* LimboResolution */===e.tt||(s=!1,!1);}),s&&(n=n.add(t));});var s=new Yt(t,e,this.Ve,this.Pe,n);return this.Pe=Ot(),this.ye=se(),this.Ve=new xt(rt),s;}/**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */ // Visible for testing.
},{key:"be",value:function be(t,e){if(!this.Ne(t))return;var n=this.Oe(t,e.key)?2/* Modified */:0/* Added */;this.Ce(t).me(e.key,n),this.Pe=this.Pe.rt(e.key,e),this.ye=this.ye.rt(e.key,this.Le(e.key).add(t));}/**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */ // Visible for testing.
},{key:"ve",value:function ve(t,e,n){if(!this.Ne(t))return;var s=this.Ce(t);this.Oe(t,e)?s.me(e,1/* Removed */):// The document may have entered and left the target before we raised a
// snapshot, so we can just ignore the change.
s.Te(e),this.ye=this.ye.rt(e,this.Le(e)["delete"](t)),n&&(this.Pe=this.Pe.rt(e,n));}},{key:"removeTarget",value:function removeTarget(t){this.ge["delete"](t);}/**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */},{key:"ke",value:function ke(t){var e=this.Ce(t).de();return this.Re.Be(t).size+e.te.size-e.ne.size;}/**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */},{key:"Ee",value:function Ee(t){this.Ce(t).Ee();}},{key:"Ce",value:function Ce(t){var e=this.ge.get(t);return e||(e=new ee(),this.ge.set(t,e)),e;}},{key:"Le",value:function Le(t){var e=this.ye.get(t);return e||(e=new xt(rt),this.ye=this.ye.rt(t,e)),e;}/**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */},{key:"Ne",value:function Ne(t){var e=null!==this.xe(t);return e||g("WatchChangeAggregator","Detected inactive target",t),e;}/**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */},{key:"xe",value:function xe(t){var e=this.ge.get(t);return e&&e.le?null:this.Re.qe(t);}/**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */},{key:"Fe",value:function Fe(t){var _this5=this;this.ge.set(t,new ee());this.Re.Be(t).forEach(function(e){_this5.ve(t,e,/*updatedDocument=*/null);});}/**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */},{key:"Oe",value:function Oe(t,e){return this.Re.Be(t).has(e);}}]);return ne;}();function se(){return new Nt(k.i);}function ie(){return new Nt(k.i);}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
 *   the local view of a document. Therefore they do not need to be parsed or
 *   serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */function re(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue);}/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */ /**
 * Returns the local time at which this timestamp was first set.
 */function oe(t){var e=we(t.mapValue.fields.__local_write_time__.timestampValue);return new wt(e.seconds,e.nanos);}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
var ae=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);/** Extracts the backend's type order for the provided value. */function ce(t){return"nullValue"in t?0/* NullValue */:"booleanValue"in t?1/* BooleanValue */:"integerValue"in t||"doubleValue"in t?2/* NumberValue */:"timestampValue"in t?3/* TimestampValue */:"stringValue"in t?5/* StringValue */:"bytesValue"in t?6/* BlobValue */:"referenceValue"in t?7/* RefValue */:"geoPointValue"in t?8/* GeoPointValue */:"arrayValue"in t?9/* ArrayValue */:"mapValue"in t?re(t)?4/* ServerTimestampValue */:10/* ObjectValue */:p();}/** Tests `left` and `right` for equality based on the backend semantics. */function ue(t,e){var n=ce(t);if(n!==ce(e))return!1;switch(n){case 0/* NullValue */:return!0;case 1/* BooleanValue */:return t.booleanValue===e.booleanValue;case 4/* ServerTimestampValue */:return oe(t).isEqual(oe(e));case 3/* TimestampValue */:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)// Use string equality for ISO 8601 timestamps
return t.timestampValue===e.timestampValue;var n=we(t.timestampValue),s=we(e.timestampValue);return n.seconds===s.seconds&&n.nanos===s.nanos;}(t,e);case 5/* StringValue */:return t.stringValue===e.stringValue;case 6/* BlobValue */:return function(t,e){return Te(t.bytesValue).isEqual(Te(e.bytesValue));}(t,e);case 7/* RefValue */:return t.referenceValue===e.referenceValue;case 8/* GeoPointValue */:return function(t,e){return me(t.geoPointValue.latitude)===me(e.geoPointValue.latitude)&&me(t.geoPointValue.longitude)===me(e.geoPointValue.longitude);}(t,e);case 2/* NumberValue */:return function(t,e){if("integerValue"in t&&"integerValue"in e)return me(t.integerValue)===me(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){var _n17=me(t.doubleValue),_s11=me(e.doubleValue);return _n17===_s11?Et(_n17)===Et(_s11):isNaN(_n17)&&isNaN(_s11);}return!1;}(t,e);case 9/* ArrayValue */:return ot(t.arrayValue.values||[],e.arrayValue.values||[],ue);case 10/* ObjectValue */:return function(t,e){var n=t.mapValue.fields||{},s=e.mapValue.fields||{};if(S(n)!==S(s))return!1;for(var _t10 in n){if(n.hasOwnProperty(_t10)&&(void 0===s[_t10]||!ue(n[_t10],s[_t10])))return!1;}return!0;}/** Returns true if the ArrayValue contains the specified element. */(t,e);default:return p();}}function he(t,e){return void 0!==(t.values||[]).find(function(t){return ue(t,e);});}function le(t,e){var n=ce(t),s=ce(e);if(n!==s)return rt(n,s);switch(n){case 0/* NullValue */:return 0;case 1/* BooleanValue */:return rt(t.booleanValue,e.booleanValue);case 2/* NumberValue */:return function(t,e){var n=me(t.integerValue||t.doubleValue),s=me(e.integerValue||e.doubleValue);return n<s?-1:n>s?1:n===s?0:// one or both are NaN.
isNaN(n)?isNaN(s)?0:-1:1;}(t,e);case 3/* TimestampValue */:return _e(t.timestampValue,e.timestampValue);case 4/* ServerTimestampValue */:return _e(oe(t),oe(e));case 5/* StringValue */:return rt(t.stringValue,e.stringValue);case 6/* BlobValue */:return function(t,e){var n=Te(t),s=Te(e);return n.L(s);}(t.bytesValue,e.bytesValue);case 7/* RefValue */:return function(t,e){var n=t.split("/"),s=e.split("/");for(var _t11=0;_t11<n.length&&_t11<s.length;_t11++){var _e17=rt(n[_t11],s[_t11]);if(0!==_e17)return _e17;}return rt(n.length,s.length);}(t.referenceValue,e.referenceValue);case 8/* GeoPointValue */:return function(t,e){var n=rt(me(t.latitude),me(e.latitude));if(0!==n)return n;return rt(me(t.longitude),me(e.longitude));}(t.geoPointValue,e.geoPointValue);case 9/* ArrayValue */:return function(t,e){var n=t.values||[],s=e.values||[];for(var _t12=0;_t12<n.length&&_t12<s.length;++_t12){var _e18=le(n[_t12],s[_t12]);if(_e18)return _e18;}return rt(n.length,s.length);}(t.arrayValue,e.arrayValue);case 10/* ObjectValue */:return function(t,e){var n=t.fields||{},s=Object.keys(n),i=e.fields||{},r=Object.keys(i);// Even though MapValues are likely sorted correctly based on their insertion
// order (e.g. when received from the backend), local modifications can bring
// elements out of order. We need to re-sort the elements to ensure that
// canonical IDs are independent of insertion order.
s.sort(),r.sort();for(var _t13=0;_t13<s.length&&_t13<r.length;++_t13){var _e19=rt(s[_t13],r[_t13]);if(0!==_e19)return _e19;var _o2=le(n[s[_t13]],i[r[_t13]]);if(0!==_o2)return _o2;}return rt(s.length,r.length);}/**
 * Generates the canonical ID for the provided field value (as used in Target
 * serialization).
 */(t.mapValue,e.mapValue);default:throw p();}}function _e(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return rt(t,e);var n=we(t),s=we(e),i=rt(n.seconds,s.seconds);return 0!==i?i:rt(n.nanos,s.nanos);}function fe(t){return de(t);}function de(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){var e=we(t);return"time(".concat(e.seconds,",").concat(e.nanos,")");}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?Te(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,k.C(n).toString()):"geoPointValue"in t?"geo(".concat((e=t.geoPointValue).latitude,",").concat(e.longitude,")"):"arrayValue"in t?function(t){var e="[",n=!0;var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=(t.values||[])[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var _s12=_step6.value;n?n=!1:e+=",",e+=de(_s12);}}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6["return"]!=null){_iterator6["return"]();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}return e+"]";}/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */(t.arrayValue):"mapValue"in t?function(t){// Iteration order in JavaScript is not guaranteed. To ensure that we generate
// matching canonical IDs for identical maps, we need to sort the keys.
var e=Object.keys(t.fields||{}).sort();var n="{",s=!0;var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=e[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var _i8=_step7.value;s?s=!1:n+=",",n+="".concat(_i8,":").concat(de(t.fields[_i8]));}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7["return"]!=null){_iterator7["return"]();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}return n+"}";}(t.mapValue):p();var e,n;}function we(t){// The json interface (for the browser) will return an iso timestamp string,
// while the proto js library (for node) will return a
// google.protobuf.Timestamp instance.
if(b(!!t),"string"==typeof t){// The date string can have higher precision (nanos) than the Date class
// (millis), so we do some custom parsing here.
// Parse the nanos right out of the string.
var _e20=0;var _n18=ae.exec(t);if(b(!!_n18),_n18[1]){// Pad the fraction out to 9 digits (nanos).
var _t14=_n18[1];_t14=(_t14+"000000000").substr(0,9),_e20=Number(_t14);}// Parse the date to get the seconds.
var _s13=new Date(t);return{seconds:Math.floor(_s13.getTime()/1e3),nanos:_e20};}return{seconds:me(t.seconds),nanos:me(t.nanos)};}/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */function me(t){// TODO(bjornick): Handle int64 greater than 53 bits.
return"number"==typeof t?t:"string"==typeof t?Number(t):0;}/** Converts the possible Proto types for Blobs into a ByteString. */function Te(t){return"string"==typeof t?ct.fromBase64String(t):ct.fromUint8Array(t);}/** Returns a reference value for the provided database and key. */function Ee(t,e){return{referenceValue:"projects/".concat(t.projectId,"/databases/").concat(t.database,"/documents/").concat(e.path.R())};}/** Returns true if `value` is an IntegerValue . */function Ie(t){return!!t&&"integerValue"in t;}/** Returns true if `value` is a DoubleValue. */ /** Returns true if `value` is an ArrayValue. */function Ae(t){return!!t&&"arrayValue"in t;}/** Returns true if `value` is a NullValue. */function Re(t){return!!t&&"nullValue"in t;}/** Returns true if `value` is NaN. */function ge(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue));}/** Returns true if `value` is a MapValue. */function Pe(t){return!!t&&"mapValue"in t;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ye=function(){var t={asc:"ASCENDING",desc:"DESCENDING"};return t;}(),Ve=function(){var t={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS","in":"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};return t;}();/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */var pe=function pe(t,e){_classCallCheck(this,pe);this.U=t,this.Ue=e;};/**
 * Returns an IntegerValue for `value`.
 */function be(t){return{integerValue:""+t};}/**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */function ve(t,e){if(t.Ue){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"};}return{doubleValue:Et(e)?"-0":e};}/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */function Se(t,e){return It(e)?be(e):ve(t,e);}/**
 * Returns a value for a Date that's appropriate to put into a proto.
 */function De(t,e){if(t.Ue){return"".concat(new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z",""),".").concat(("000000000"+e.nanoseconds).slice(-9),"Z");}return{seconds:""+e.seconds,nanos:e.nanoseconds};}/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */function Ce(t,e){return t.Ue?e.toBase64():e.toUint8Array();}/**
 * Returns a ByteString based on the proto string value.
 */function Ne(t,e){return De(t,e.X());}function Fe(t){return b(!!t),mt.Y(function(t){var e=we(t);return new wt(e.seconds,e.nanos);}(t));}function $e(t,e){return function(t){return new F(["projects",t.projectId,"databases",t.database]);}(t).child("documents").child(e).R();}function xe(t){var e=F.g(t);return b(cn(e)),e;}function ke(t,e){return $e(t.U,e.path);}function Me(t,e){var n=xe(e);return b(n.get(1)===t.U.projectId),b(!n.get(3)&&!t.U.database||n.get(3)===t.U.database),new k(qe(n));}function Oe(t,e){return $e(t.U,e);}function Le(t){var e=xe(t);// In v1beta1 queries for collections at the root did not have a trailing
// "/documents". In v1 all resource paths contain "/documents". Preserve the
// ability to read the v1beta1 form for compatibility with queries persisted
// in the local target cache.
return 4===e.length?F.P():qe(e);}function Be(t){return new F(["projects",t.U.projectId,"databases",t.U.database]).R();}function qe(t){return b(t.length>4&&"documents"===t.get(4)),t.u(5);}/** Creates a Document proto from key and fields (but no create/update time) */function Ue(t,e,n){return{name:ke(t,e),fields:n.proto.mapValue.fields};}function Qe(t,e){return"found"in e?function(t,e){b(!!e.found),e.found.name,e.found.updateTime;var n=Me(t,e.found.name),s=Fe(e.found.updateTime),i=new qn({mapValue:{fields:e.found.fields}});return new jn(n,s,i,{});}(t,e):"missing"in e?function(t,e){b(!!e.missing),b(!!e.readTime);var n=Me(t,e.missing),s=Fe(e.readTime);return new Kn(n,s);}(t,e):p();}function We(t,e){var n;if("targetChange"in e){e.targetChange;// proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
// if unset
var _s14=function(t){return"NO_CHANGE"===t?0/* NoChange */:"ADD"===t?1/* Added */:"REMOVE"===t?2/* Removed */:"CURRENT"===t?3/* Current */:"RESET"===t?4/* Reset */:p();}(e.targetChange.targetChangeType||"NO_CHANGE"),_i9=e.targetChange.targetIds||[],_r3=function(t,e){return t.Ue?(b(void 0===e||"string"==typeof e),ct.fromBase64String(e||"")):(b(void 0===e||e instanceof Uint8Array),ct.fromUint8Array(e||new Uint8Array()));}(t,e.targetChange.resumeToken),_o3=e.targetChange.cause,_a2=_o3&&function(t){var e=void 0===t.code?E.UNKNOWN:Ct(t.code);return new I(e,t.message||"");}/**
 * Returns a value for a number (or null) that's appropriate to put into
 * a google.protobuf.Int32Value proto.
 * DO NOT USE THIS FOR ANYTHING ELSE.
 * This method cheats. It's typed as returning "number" because that's what
 * our generated proto interfaces say Int32Value must be. But GRPC actually
 * expects a { value: <number> } struct.
 */(_o3);n=new te(_s14,_i9,_r3,_a2||null);}else if("documentChange"in e){e.documentChange;var _s15=e.documentChange;_s15.document,_s15.document.name,_s15.document.updateTime;var _i10=Me(t,_s15.document.name),_r4=Fe(_s15.document.updateTime),_o4=new qn({mapValue:{fields:_s15.document.fields}}),_a3=new jn(_i10,_r4,_o4,{}),_c2=_s15.targetIds||[],_u=_s15.removedTargetIds||[];n=new Xt(_c2,_u,_a3.key,_a3);}else if("documentDelete"in e){e.documentDelete;var _s16=e.documentDelete;_s16.document;var _i11=Me(t,_s16.document),_r5=_s16.readTime?Fe(_s16.readTime):mt.min(),_o5=new Kn(_i11,_r5),_a4=_s16.removedTargetIds||[];n=new Xt([],_a4,_o5.key,_o5);}else if("documentRemove"in e){e.documentRemove;var _s17=e.documentRemove;_s17.document;var _i12=Me(t,_s17.document),_r6=_s17.removedTargetIds||[];n=new Xt([],_r6,_i12,null);}else{if(!("filter"in e))return p();{e.filter;var _t15=e.filter;_t15.targetId;var _s18=_t15.count||0,_i13=new bt(_s18),_r7=_t15.targetId;n=new Zt(_r7,_i13);}}return n;}function je(t,e){var n;if(e instanceof Fn)n={update:Ue(t,e.key,e.value)};else if(e instanceof Ln)n={"delete":ke(t,e.key)};else if(e instanceof $n)n={update:Ue(t,e.key,e.data),updateMask:an(e.Qe)};else if(e instanceof kn)n={transform:{document:ke(t,e.key),fieldTransforms:e.fieldTransforms.map(function(t){return function(t,e){var n=e.transform;if(n instanceof fn)return{fieldPath:e.field.R(),setToServerValue:"REQUEST_TIME"};if(n instanceof dn)return{fieldPath:e.field.R(),appendMissingElements:{values:n.elements}};if(n instanceof mn)return{fieldPath:e.field.R(),removeAllFromArray:{values:n.elements}};if(n instanceof En)return{fieldPath:e.field.R(),increment:n.We};throw p();}(0,t);})}};else{if(!(e instanceof Bn))return p();n={verify:ke(t,e.key)};}return e.Ke.je||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:Ne(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:p();}(t,e.Ke)),n;}function Ke(t,e){var n=e.currentDocument?function(t){return void 0!==t.updateTime?Vn.updateTime(Fe(t.updateTime)):void 0!==t.exists?Vn.exists(t.exists):Vn.Ge();}(e.currentDocument):Vn.Ge();if(e.update){e.update.name;var _s19=Me(t,e.update.name),_i14=new qn({mapValue:{fields:e.update.fields}});if(e.updateMask){var _t16=function(t){var e=t.fieldPaths||[];return new Rn(e.map(function(t){return x.S(t);}));}(e.updateMask);return new $n(_s19,_i14,_t16,n);}return new Fn(_s19,_i14,n);}if(e["delete"]){var _s20=Me(t,e["delete"]);return new Ln(_s20,n);}if(e.transform){var _s21=Me(t,e.transform.document),_i15=e.transform.fieldTransforms.map(function(e){return function(t,e){var n=null;if("setToServerValue"in e)b("REQUEST_TIME"===e.setToServerValue),n=new fn();else if("appendMissingElements"in e){var _t17=e.appendMissingElements.values||[];n=new dn(_t17);}else if("removeAllFromArray"in e){var _t18=e.removeAllFromArray.values||[];n=new mn(_t18);}else"increment"in e?n=new En(t,e.increment):p();var s=x.S(e.fieldPath);return new gn(s,n);}(t,e);});return b(!0===n.exists),new kn(_s21,_i15);}if(e.verify){var _s22=Me(t,e.verify);return new Bn(_s22,n);}return p();}function Ge(t,e){return t&&t.length>0?(b(void 0!==e),t.map(function(t){return function(t,e){// NOTE: Deletes don't have an updateTime.
var n=t.updateTime?Fe(t.updateTime):Fe(e);n.isEqual(mt.min())&&(// The Firestore Emulator currently returns an update time of 0 for
// deletes of non-existing documents (rather than null). This breaks the
// test "get deleted doc while offline with source=cache" as NoDocuments
// with version 0 are filtered by IndexedDb's RemoteDocumentCache.
// TODO(#2149): Remove this when Emulator is fixed
n=Fe(e));var s=null;return t.transformResults&&t.transformResults.length>0&&(s=t.transformResults),new yn(n,s);}(t,e);})):[];}function ze(t,e){return{documents:[Oe(t,e.path)]};}function He(t,e){// Dissect the path into parent, collectionId, and optional key filter.
var n={structuredQuery:{}},s=e.path;null!==e.collectionGroup?(n.parent=Oe(t,s),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=Oe(t,s.h()),n.structuredQuery.from=[{collectionId:s._()}]);var i=function(t){if(0===t.length)return;var e=t.map(function(t){return(// visible for testing
function(t){if("=="/* EQUAL */===t.op){if(ge(t.value))return{unaryFilter:{field:nn(t.field),op:"IS_NAN"}};if(Re(t.value))return{unaryFilter:{field:nn(t.field),op:"IS_NULL"}};}else if("!="/* NOT_EQUAL */===t.op){if(ge(t.value))return{unaryFilter:{field:nn(t.field),op:"IS_NOT_NAN"}};if(Re(t.value))return{unaryFilter:{field:nn(t.field),op:"IS_NOT_NULL"}};}return{fieldFilter:{field:nn(t.field),op:en(t.op),value:t.value}};}(t));});if(1===e.length)return e[0];return{compositeFilter:{op:"AND",filters:e}};}(e.filters);i&&(n.structuredQuery.where=i);var r=function(t){if(0===t.length)return;return t.map(function(t){return(// visible for testing
function(t){return{field:nn(t.field),direction:tn(t.dir)};}(t));});}(e.orderBy);r&&(n.structuredQuery.orderBy=r);var o=function(t,e){return t.Ue||Tt(e)?e:{value:e};}/**
 * Returns a number (or null) from a google.protobuf.Int32Value proto.
 */(t,e.limit);return null!==o&&(n.structuredQuery.limit=o),e.startAt&&(n.structuredQuery.startAt=Xe(e.startAt)),e.endAt&&(n.structuredQuery.endAt=Xe(e.endAt)),n;}function Ye(t){var e=Le(t.parent);var n=t.structuredQuery,s=n.from?n.from.length:0;var i=null;if(s>0){b(1===s);var _t19=n.from[0];_t19.allDescendants?i=_t19.collectionId:e=e.child(_t19.collectionId);}var r=[];n.where&&(r=function t(e){return e?void 0!==e.unaryFilter?[on(e)]:void 0!==e.fieldFilter?[rn(e)]:void 0!==e.compositeFilter?e.compositeFilter.filters.map(function(e){return t(e);}).reduce(function(t,e){return t.concat(e);}):p():[];}(n.where));var o=[];n.orderBy&&(o=n.orderBy.map(function(t){return function(t){return new ps(sn(t.field),// visible for testing
function(t){switch(t){case"ASCENDING":return"asc"/* ASCENDING */;case"DESCENDING":return"desc"/* DESCENDING */;default:return;}}// visible for testing
(t.direction));}(t);}));var a=null;n.limit&&(a=function(t){var e;return e="object"==_typeof(t)?t.value:t,Tt(e)?null:e;}(n.limit));var c=null;n.startAt&&(c=Ze(n.startAt));var u=null;return n.endAt&&(u=Ze(n.endAt)),ss(Hn(e,i,o,r,a,"F"/* First */,c,u));}function Je(t,e){var n=function(t,e){switch(e){case 0/* Listen */:return null;case 1/* ExistenceFilterMismatch */:return"existence-filter-mismatch";case 2/* LimboResolution */:return"limbo-document";default:return p();}}(0,e.tt);return null==n?null:{"goog-listen-tags":n};}function Xe(t){return{before:t.before,values:t.position};}function Ze(t){var e=!!t.before,n=t.values||[];return new gs(n,e);}// visible for testing
function tn(t){return ye[t];}function en(t){return Ve[t];}function nn(t){return{fieldPath:t.R()};}function sn(t){return x.S(t.fieldPath);}function rn(t){return _s.create(sn(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"=="/* EQUAL */;case"NOT_EQUAL":return"!="/* NOT_EQUAL */;case"GREATER_THAN":return">"/* GREATER_THAN */;case"GREATER_THAN_OR_EQUAL":return">="/* GREATER_THAN_OR_EQUAL */;case"LESS_THAN":return"<"/* LESS_THAN */;case"LESS_THAN_OR_EQUAL":return"<="/* LESS_THAN_OR_EQUAL */;case"ARRAY_CONTAINS":return"array-contains"/* ARRAY_CONTAINS */;case"IN":return"in"/* IN */;case"NOT_IN":return"not-in"/* NOT_IN */;case"ARRAY_CONTAINS_ANY":return"array-contains-any"/* ARRAY_CONTAINS_ANY */;case"OPERATOR_UNSPECIFIED":default:return p();}}(t.fieldFilter.op),t.fieldFilter.value);}function on(t){switch(t.unaryFilter.op){case"IS_NAN":var _e21=sn(t.unaryFilter.field);return _s.create(_e21,"=="/* EQUAL */,{doubleValue:NaN});case"IS_NULL":var _n19=sn(t.unaryFilter.field);return _s.create(_n19,"=="/* EQUAL */,{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":var _s23=sn(t.unaryFilter.field);return _s.create(_s23,"!="/* NOT_EQUAL */,{doubleValue:NaN});case"IS_NOT_NULL":var _i16=sn(t.unaryFilter.field);return _s.create(_i16,"!="/* NOT_EQUAL */,{nullValue:"NULL_VALUE"});case"OPERATOR_UNSPECIFIED":default:return p();}}function an(t){var e=[];return t.fields.forEach(function(t){return e.push(t.R());}),{fieldPaths:e};}function cn(t){// Resource names have at least 4 components (project ID, database ID)
return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2);}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Represents a transform within a TransformMutation. */var un=function un(){_classCallCheck(this,un);// Make sure that the structural type of `TransformOperation` is unique.
// See https://github.com/microsoft/TypeScript/issues/5451
this.ze=void 0;};/**
 * Computes the local transform result against the provided `previousValue`,
 * optionally using the provided localWriteTime.
 */function hn(t,e,n){return t instanceof fn?function(t,e){var n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n};}/**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */(n,e):t instanceof dn?wn(t,e):t instanceof mn?Tn(t,e):function(t,e){// PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
// precision and resolves overflows by reducing precision, we do not
// manually cap overflows at 2^63.
var n=_n(t,e),s=In(n)+In(t.We);return Ie(n)&&Ie(t.We)?be(s):ve(t.serializer,s);}(t,e);}/**
 * Computes a final transform result after the transform has been acknowledged
 * by the server, potentially using the server-provided transformResult.
 */function ln(t,e,n){// The server just sends null as the transform result for array operations,
// so we have to calculate a result the same as we do for local
// applications.
return t instanceof dn?wn(t,e):t instanceof mn?Tn(t,e):n;}/**
 * If this transform operation is not idempotent, returns the base value to
 * persist for this transform. If a base value is returned, the transform
 * operation is always applied to this base value, even if document has
 * already been updated.
 *
 * Base values provide consistent behavior for non-idempotent transforms and
 * allow us to return the same latency-compensated value even if the backend
 * has already applied the transform operation. The base value is null for
 * idempotent transforms, as they can be re-played even if the backend has
 * already applied them.
 *
 * @return a base value to store along with the mutation, or null for
 * idempotent transforms.
 */function _n(t,e){return t instanceof En?Ie(n=e)||function(t){return!!t&&"doubleValue"in t;}/** Returns true if `value` is either an IntegerValue or a DoubleValue. */(n)?e:{integerValue:0}:null;var n;}/** Transforms a value into a server-generated timestamp. */var fn=/*#__PURE__*/function(_un){_inherits(fn,_un);function fn(){_classCallCheck(this,fn);return _possibleConstructorReturn(this,_getPrototypeOf(fn).apply(this,arguments));}return fn;}(un);/** Transforms an array value via a union operation. */var dn=/*#__PURE__*/function(_un2){_inherits(dn,_un2);function dn(t){var _this6;_classCallCheck(this,dn);_this6=_possibleConstructorReturn(this,_getPrototypeOf(dn).call(this)),_this6.elements=t;return _this6;}return dn;}(un);function wn(t,e){var n=An(e);var _iteratorNormalCompletion8=true;var _didIteratorError8=false;var _iteratorError8=undefined;try{var _loop=function _loop(){var e=_step8.value;n.some(function(t){return ue(t,e);})||n.push(e);};for(var _iterator8=t.elements[Symbol.iterator](),_step8;!(_iteratorNormalCompletion8=(_step8=_iterator8.next()).done);_iteratorNormalCompletion8=true){_loop();}}catch(err){_didIteratorError8=true;_iteratorError8=err;}finally{try{if(!_iteratorNormalCompletion8&&_iterator8["return"]!=null){_iterator8["return"]();}}finally{if(_didIteratorError8){throw _iteratorError8;}}}return{arrayValue:{values:n}};}/** Transforms an array value via a remove operation. */var mn=/*#__PURE__*/function(_un3){_inherits(mn,_un3);function mn(t){var _this7;_classCallCheck(this,mn);_this7=_possibleConstructorReturn(this,_getPrototypeOf(mn).call(this)),_this7.elements=t;return _this7;}return mn;}(un);function Tn(t,e){var n=An(e);var _iteratorNormalCompletion9=true;var _didIteratorError9=false;var _iteratorError9=undefined;try{var _loop2=function _loop2(){var e=_step9.value;n=n.filter(function(t){return!ue(t,e);});};for(var _iterator9=t.elements[Symbol.iterator](),_step9;!(_iteratorNormalCompletion9=(_step9=_iterator9.next()).done);_iteratorNormalCompletion9=true){_loop2();}}catch(err){_didIteratorError9=true;_iteratorError9=err;}finally{try{if(!_iteratorNormalCompletion9&&_iterator9["return"]!=null){_iterator9["return"]();}}finally{if(_didIteratorError9){throw _iteratorError9;}}}return{arrayValue:{values:n}};}/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */var En=/*#__PURE__*/function(_un4){_inherits(En,_un4);function En(t,e){var _this8;_classCallCheck(this,En);_this8=_possibleConstructorReturn(this,_getPrototypeOf(En).call(this)),_this8.serializer=t,_this8.We=e;return _this8;}return En;}(un);function In(t){return me(t.integerValue||t.doubleValue);}function An(t){return Ae(t)&&t.arrayValue.values?t.arrayValue.values.slice():[];}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */var Rn=/*#__PURE__*/function(){function Rn(t){_classCallCheck(this,Rn);this.fields=t,// TODO(dimond): validation of FieldMask
// Sort the field mask to support `FieldMask.isEqual()` and assert below.
t.sort(x.i);}/**
     * Verifies that `fieldPath` is included by at least one field in this field
     * mask.
     *
     * This is an O(n) operation, where `n` is the size of the field mask.
     */_createClass(Rn,[{key:"He",value:function He(t){var _iteratorNormalCompletion10=true;var _didIteratorError10=false;var _iteratorError10=undefined;try{for(var _iterator10=this.fields[Symbol.iterator](),_step10;!(_iteratorNormalCompletion10=(_step10=_iterator10.next()).done);_iteratorNormalCompletion10=true){var _e22=_step10.value;if(_e22.T(t))return!0;}}catch(err){_didIteratorError10=true;_iteratorError10=err;}finally{try{if(!_iteratorNormalCompletion10&&_iterator10["return"]!=null){_iterator10["return"]();}}finally{if(_didIteratorError10){throw _iteratorError10;}}}return!1;}},{key:"isEqual",value:function isEqual(t){return ot(this.fields,t.fields,function(t,e){return t.isEqual(e);});}}]);return Rn;}();/** A field path and the TransformOperation to perform upon it. */var gn=function gn(t,e){_classCallCheck(this,gn);this.field=t,this.transform=e;};function Pn(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof dn&&e instanceof dn||t instanceof mn&&e instanceof mn?ot(t.elements,e.elements,ue):t instanceof En&&e instanceof En?ue(t.We,e.We):t instanceof fn&&e instanceof fn;}(t.transform,e.transform);}/** The result of successfully applying a mutation to the backend. */var yn=function yn(/**
     * The version at which the mutation was committed:
     *
     * - For most operations, this is the updateTime in the WriteResult.
     * - For deletes, the commitTime of the WriteResponse (because deletes are
     *   not stored and have no updateTime).
     *
     * Note that these versions can be different: No-op writes will not change
     * the updateTime even though the commitTime advances.
     */t,/**
     * The resulting fields returned from the backend after a
     * TransformMutation has been committed. Contains one FieldValue for each
     * FieldTransform that was in the mutation.
     *
     * Will be null if the mutation was not a TransformMutation.
     */e){_classCallCheck(this,yn);this.version=t,this.transformResults=e;};/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */var Vn=/*#__PURE__*/function(){function Vn(t,e){_classCallCheck(this,Vn);this.updateTime=t,this.exists=e;}/** Creates a new empty Precondition. */_createClass(Vn,[{key:"isEqual",value:function isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime);}},{key:"je",/** Returns whether this Precondition is empty. */get:function get(){return void 0===this.updateTime&&void 0===this.exists;}}],[{key:"Ge",value:function Ge(){return new Vn();}/** Creates a new Precondition with an exists flag. */},{key:"exists",value:function exists(t){return new Vn(void 0,t);}/** Creates a new Precondition based on a version a document exists at. */},{key:"updateTime",value:function updateTime(t){return new Vn(t);}}]);return Vn;}();/**
 * Returns true if the preconditions is valid for the given document
 * (or null if no document is available).
 */function pn(t,e){return void 0!==t.updateTime?e instanceof jn&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e instanceof jn;}/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set, Patch, and Transform mutations. For Delete
 * mutations, we reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        null                  Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      null                  null
 * TransformMutation  Document(v3)          Document(v3)
 * TransformMutation  NoDocument(v3)        NoDocument(v3)
 * TransformMutation  null                  null
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     null                  NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set, Patch, and Transform mutations. As deletes
 * have no explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we return an `UnknownDocument` and rely on Watch to send us the
 * updated version.
 *
 * Note that TransformMutations don't create Documents (in the case of being
 * applied to a NoDocument), even though they would on the backend. This is
 * because the client always combines the TransformMutation with a SetMutation
 * or PatchMutation and we only want to apply the transform if the prior
 * mutation resulted in a Document (always true for a SetMutation, but not
 * necessarily for a PatchMutation).
 *
 * ## Subclassing Notes
 *
 * Subclasses of Mutation need to implement applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document.
 */var bn=function bn(){_classCallCheck(this,bn);};/**
 * Applies this mutation to the given MaybeDocument or null for the purposes
 * of computing a new remote document. If the input document doesn't match the
 * expected state (e.g. it is null or outdated), an `UnknownDocument` can be
 * returned.
 *
 * @param mutation The mutation to apply.
 * @param maybeDoc The document to mutate. The input document can be null if
 *     the client has no knowledge of the pre-mutation state of the document.
 * @param mutationResult The result of applying the mutation from the backend.
 * @return The mutated document. The returned document may be an
 *     UnknownDocument if the mutation could not be applied to the locally
 *     cached base document.
 */function vn(t,e,n){return t instanceof Fn?function(t,e,n){// Unlike applySetMutationToLocalView, if we're applying a mutation to a
// remote document the server has accepted the mutation so the precondition
// must have held.
return new jn(t.key,n.version,t.value,{hasCommittedMutations:!0});}(t,0,n):t instanceof $n?function(t,e,n){if(!pn(t.Ke,e))// Since the mutation was not rejected, we know that the  precondition
// matched on the backend. We therefore must not have the expected version
// of the document in our cache and return an UnknownDocument with the
// known updateTime.
return new Gn(t.key,n.version);var s=xn(t,e);return new jn(t.key,n.version,s,{hasCommittedMutations:!0});}(t,e,n):t instanceof kn?function(t,e,n){if(b(null!=n.transformResults),!pn(t.Ke,e))// Since the mutation was not rejected, we know that the  precondition
// matched on the backend. We therefore must not have the expected version
// of the document in our cache and return an UnknownDocument with the
// known updateTime.
return new Gn(t.key,n.version);var s=Mn(t,e),i=/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use after a
 * TransformMutation has been acknowledged by the server.
 *
 * @param fieldTransforms The field transforms to apply the result to.
 * @param baseDoc The document prior to applying this mutation batch.
 * @param serverTransformResults The transform results received by the server.
 * @return The transform results list.
 */function(t,e,n){var s=[];b(t.length===n.length);for(var _i17=0;_i17<n.length;_i17++){var _r8=t[_i17],_o6=_r8.transform;var _a5=null;e instanceof jn&&(_a5=e.field(_r8.field)),s.push(ln(_o6,_a5,n[_i17]));}return s;}/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use when applying a
 * TransformMutation locally.
 *
 * @param fieldTransforms The field transforms to apply the result to.
 * @param localWriteTime The local time of the transform mutation (used to
 *     generate ServerTimestampValues).
 * @param maybeDoc The current state of the document after applying all
 *     previous mutations.
 * @param baseDoc The document prior to applying this mutation batch.
 * @return The transform results list.
 */(t.fieldTransforms,e,n.transformResults),r=n.version,o=On(t,s.data(),i);return new jn(t.key,r,o,{hasCommittedMutations:!0});}(t,e,n):function(t,e,n){// Unlike applyToLocalView, if we're applying a mutation to a remote
// document the server has accepted the mutation so the precondition must
// have held.
return new Kn(t.key,n.version,{hasCommittedMutations:!0});}(t,0,n);}/**
 * Applies this mutation to the given MaybeDocument or null for the purposes
 * of computing the new local view of a document. Both the input and returned
 * documents can be null.
 *
 * @param mutation The mutation to apply.
 * @param maybeDoc The document to mutate. The input document can be null if
 *     the client has no knowledge of the pre-mutation state of the document.
 * @param baseDoc The state of the document prior to this mutation batch. The
 *     input document can be null if the client has no knowledge of the
 *     pre-mutation state of the document.
 * @param localWriteTime A timestamp indicating the local write time of the
 *     batch this mutation is a part of.
 * @return The mutated document. The returned document may be null, but only
 *     if maybeDoc was null and the mutation would not create a new document.
 */function Sn(t,e,n,s){return t instanceof Fn?function(t,e){if(!pn(t.Ke,e))return e;var n=Nn(e);return new jn(t.key,n,t.value,{Ye:!0});}/**
 * A mutation that modifies fields of the document at the given key with the
 * given values. The values are applied through a field mask:
 *
 *  * When a field is in both the mask and the values, the corresponding field
 *    is updated.
 *  * When a field is in neither the mask nor the values, the corresponding
 *    field is unmodified.
 *  * When a field is in the mask but not in the values, the corresponding field
 *    is deleted.
 *  * When a field is not in the mask but is in the values, the values map is
 *    ignored.
 */(t,e):t instanceof $n?function(t,e){if(!pn(t.Ke,e))return e;var n=Nn(e),s=xn(t,e);return new jn(t.key,n,s,{Ye:!0});}/**
 * Patches the data of document if available or creates a new document. Note
 * that this does not check whether or not the precondition of this patch
 * holds.
 */(t,e):t instanceof kn?function(t,e,n,s){if(!pn(t.Ke,e))return e;var i=Mn(t,e),r=function(t,e,n,s){var i=[];var _iteratorNormalCompletion11=true;var _didIteratorError11=false;var _iteratorError11=undefined;try{for(var _iterator11=t[Symbol.iterator](),_step11;!(_iteratorNormalCompletion11=(_step11=_iterator11.next()).done);_iteratorNormalCompletion11=true){var _r9=_step11.value;var _t20=_r9.transform;var _o7=null;n instanceof jn&&(_o7=n.field(_r9.field)),null===_o7&&s instanceof jn&&(// If the current document does not contain a value for the mutated
// field, use the value that existed before applying this mutation
// batch. This solves an edge case where a PatchMutation clears the
// values in a nested map before the TransformMutation is applied.
_o7=s.field(_r9.field)),i.push(hn(_t20,_o7,e));}}catch(err){_didIteratorError11=true;_iteratorError11=err;}finally{try{if(!_iteratorNormalCompletion11&&_iterator11["return"]!=null){_iterator11["return"]();}}finally{if(_didIteratorError11){throw _iteratorError11;}}}return i;}(t.fieldTransforms,n,e,s),o=On(t,i.data(),r);return new jn(t.key,i.version,o,{Ye:!0});}(t,e,s,n):function(t,e){if(!pn(t.Ke,e))return e;return new Kn(t.key,mt.min());}/**
 * A mutation that verifies the existence of the document at the given key with
 * the provided precondition.
 *
 * The `verify` operation is only used in Transactions, and this class serves
 * primarily to facilitate serialization into protos.
 */(t,e);}/**
 * If this mutation is not idempotent, returns the base value to persist with
 * this mutation. If a base value is returned, the mutation is always applied
 * to this base value, even if document has already been updated.
 *
 * The base value is a sparse object that consists of only the document
 * fields for which this mutation contains a non-idempotent transformation
 * (e.g. a numeric increment). The provided value guarantees consistent
 * behavior for non-idempotent transforms and allow us to return the same
 * latency-compensated value even if the backend has already applied the
 * mutation. The base value is null for idempotent mutations, as they can be
 * re-played even if the backend has already applied them.
 *
 * @return a base value to store along with the mutation, or null for
 * idempotent mutations.
 */function Dn(t,e){return t instanceof kn?function(t,e){var n=null;var _iteratorNormalCompletion12=true;var _didIteratorError12=false;var _iteratorError12=undefined;try{for(var _iterator12=t.fieldTransforms[Symbol.iterator](),_step12;!(_iteratorNormalCompletion12=(_step12=_iterator12.next()).done);_iteratorNormalCompletion12=true){var _s24=_step12.value;var _t21=e instanceof jn?e.field(_s24.field):void 0,_i18=_n(_s24.transform,_t21||null);null!=_i18&&(n=null==n?new Un().set(_s24.field,_i18):n.set(_s24.field,_i18));}}catch(err){_didIteratorError12=true;_iteratorError12=err;}finally{try{if(!_iteratorNormalCompletion12&&_iterator12["return"]!=null){_iterator12["return"]();}}finally{if(_didIteratorError12){throw _iteratorError12;}}}return n?n.Je():null;}/**
 * Asserts that the given MaybeDocument is actually a Document and verifies
 * that it matches the key for this mutation. Since we only support
 * transformations with precondition exists this method is guaranteed to be
 * safe.
 */(t,e):null;}function Cn(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.Ke.isEqual(e.Ke)&&(0/* Set */===t.type?t.value.isEqual(e.value):1/* Patch */===t.type?t.data.isEqual(e.data)&&t.Qe.isEqual(e.Qe):2/* Transform */!==t.type||ot(t.fieldTransforms,t.fieldTransforms,function(t,e){return Pn(t,e);}));}/**
 * Returns the version from the given document for use as the result of a
 * mutation. Mutations are defined to return the version of the base document
 * only if it is an existing document. Deleted and unknown documents have a
 * post-mutation version of SnapshotVersion.min().
 */function Nn(t){return t instanceof jn?t.version:mt.min();}/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */var Fn=/*#__PURE__*/function(_bn){_inherits(Fn,_bn);function Fn(t,e,n){var _this9;_classCallCheck(this,Fn);_this9=_possibleConstructorReturn(this,_getPrototypeOf(Fn).call(this)),_this9.key=t,_this9.value=e,_this9.Ke=n,_this9.type=0/* Set */;return _this9;}return Fn;}(bn);var $n=/*#__PURE__*/function(_bn2){_inherits($n,_bn2);function $n(t,e,n,s){var _this10;_classCallCheck(this,$n);_this10=_possibleConstructorReturn(this,_getPrototypeOf($n).call(this)),_this10.key=t,_this10.data=e,_this10.Qe=n,_this10.Ke=s,_this10.type=1/* Patch */;return _this10;}return $n;}(bn);function xn(t,e){var n;return n=e instanceof jn?e.data():qn.empty(),function(t,e){var n=new Un(e);return t.Qe.fields.forEach(function(e){if(!e.m()){var _s25=t.data.field(e);null!==_s25?n.set(e,_s25):n["delete"](e);}}),n.Je();}/**
 * A mutation that modifies specific fields of the document with transform
 * operations. Currently the only supported transform is a server timestamp, but
 * IP Address, increment(n), etc. could be supported in the future.
 *
 * It is somewhat similar to a PatchMutation in that it patches specific fields
 * and has no effect when applied to a null or NoDocument (see comment on
 * Mutation for rationale).
 */(t,n);}var kn=/*#__PURE__*/function(_bn3){_inherits(kn,_bn3);function kn(t,e){var _this11;_classCallCheck(this,kn);_this11=_possibleConstructorReturn(this,_getPrototypeOf(kn).call(this)),_this11.key=t,_this11.fieldTransforms=e,_this11.type=2/* Transform */,// NOTE: We set a precondition of exists: true as a safety-check, since we
// always combine TransformMutations with a SetMutation or PatchMutation which
// (if successful) should end up with an existing document.
_this11.Ke=Vn.exists(!0);return _this11;}return kn;}(bn);function Mn(t,e){return e;}function On(t,e,n){var s=new Un(e);for(var _e23=0;_e23<t.fieldTransforms.length;_e23++){var _i19=t.fieldTransforms[_e23];s.set(_i19.field,n[_e23]);}return s.Je();}/** A mutation that deletes the document at the given key. */var Ln=/*#__PURE__*/function(_bn4){_inherits(Ln,_bn4);function Ln(t,e){var _this12;_classCallCheck(this,Ln);_this12=_possibleConstructorReturn(this,_getPrototypeOf(Ln).call(this)),_this12.key=t,_this12.Ke=e,_this12.type=3/* Delete */;return _this12;}return Ln;}(bn);var Bn=/*#__PURE__*/function(_bn5){_inherits(Bn,_bn5);function Bn(t,e){var _this13;_classCallCheck(this,Bn);_this13=_possibleConstructorReturn(this,_getPrototypeOf(Bn).call(this)),_this13.key=t,_this13.Ke=e,_this13.type=4/* Verify */;return _this13;}return Bn;}(bn);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
 * ability to add and remove fields (via the ObjectValueBuilder).
 */var qn=/*#__PURE__*/function(){function qn(t){_classCallCheck(this,qn);this.proto=t;}_createClass(qn,[{key:"field",/**
     * Returns the value at the given path or null.
     *
     * @param path the path to search
     * @return The value at the path or if there it doesn't exist.
     */value:function field(t){if(t.m())return this.proto;{var _e24=this.proto;for(var _n20=0;_n20<t.length-1;++_n20){if(!_e24.mapValue.fields)return null;if(_e24=_e24.mapValue.fields[t.get(_n20)],!Pe(_e24))return null;}return _e24=(_e24.mapValue.fields||{})[t._()],_e24||null;}}},{key:"isEqual",value:function isEqual(t){return ue(this.proto,t.proto);}}],[{key:"empty",value:function empty(){return new qn({mapValue:{}});}}]);return qn;}();/**
 * An ObjectValueBuilder provides APIs to set and delete fields from an
 * ObjectValue.
 */var Un=/*#__PURE__*/function(){/**
     * @param baseObject The object to mutate.
     */function Un(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:qn.empty();_classCallCheck(this,Un);this.Xe=t,/** A map that contains the accumulated changes in this builder. */this.Ze=new Map();}/**
     * Sets the field to the provided value.
     *
     * @param path The field path to set.
     * @param value The value to set.
     * @return The current Builder instance.
     */_createClass(Un,[{key:"set",value:function set(t,e){return this.tn(t,e),this;}/**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path The field path to remove.
     * @return The current Builder instance.
     */},{key:"delete",value:function _delete(t){return this.tn(t,null),this;}/**
     * Adds `value` to the overlay map at `path`. Creates nested map entries if
     * needed.
     */},{key:"tn",value:function tn(t,e){var n=this.Ze;for(var _e25=0;_e25<t.length-1;++_e25){var _s26=t.get(_e25);var _i20=n.get(_s26);_i20 instanceof Map?// Re-use a previously created map
n=_i20:_i20&&10/* ObjectValue */===ce(_i20)?(// Convert the existing Protobuf MapValue into a map
_i20=new Map(Object.entries(_i20.mapValue.fields||{})),n.set(_s26,_i20),n=_i20):(// Create an empty map to represent the current nesting level
_i20=new Map(),n.set(_s26,_i20),n=_i20);}n.set(t._(),e);}/** Returns an ObjectValue with all mutations applied. */},{key:"Je",value:function Je(){var t=this.en(x.P(),this.Ze);return null!=t?new qn(t):this.Xe;}/**
     * Applies any overlays from `currentOverlays` that exist at `currentPath`
     * and returns the merged data at `currentPath` (or null if there were no
     * changes).
     *
     * @param currentPath The path at the current nesting level. Can be set to
     * FieldValue.emptyPath() to represent the root.
     * @param currentOverlays The overlays at the current nesting level in the
     * same format as `overlayMap`.
     * @return The merged data at `currentPath` or null if no modifications
     * were applied.
     */},{key:"en",value:function en(t,e){var _this14=this;var n=!1;var s=this.Xe.field(t),i=Pe(s)?// If there is already data at the current path, base our
Object.assign({},s.mapValue.fields):{};return e.forEach(function(e,s){if(e instanceof Map){var _r10=_this14.en(t.child(s),e);null!=_r10&&(i[s]=_r10,n=!0);}else null!==e?(i[s]=e,n=!0):i.hasOwnProperty(s)&&(delete i[s],n=!0);}),n?{mapValue:{fields:i}}:null;}}]);return Un;}();/**
 * Returns a FieldMask built from all fields in a MapValue.
 */function Qn(t){var e=[];return D(t.fields||{},function(t,n){var s=new x([t]);if(Pe(n)){var _t22=Qn(n.mapValue).fields;if(0===_t22.length)// Preserve the empty map by adding it to the FieldMask.
e.push(s);else{// For nested and non-empty ObjectValues, add the FieldPath of the
// leaf nodes.
var _iteratorNormalCompletion13=true;var _didIteratorError13=false;var _iteratorError13=undefined;try{for(var _iterator13=_t22[Symbol.iterator](),_step13;!(_iteratorNormalCompletion13=(_step13=_iterator13.next()).done);_iteratorNormalCompletion13=true){var _n21=_step13.value;e.push(s.child(_n21));}}catch(err){_didIteratorError13=true;_iteratorError13=err;}finally{try{if(!_iteratorNormalCompletion13&&_iterator13["return"]!=null){_iterator13["return"]();}}finally{if(_didIteratorError13){throw _iteratorError13;}}}}}else// For nested and non-empty ObjectValues, add the FieldPath of the leaf
// nodes.
e.push(s);}),new Rn(e);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The result of a lookup for a given path may be an existing document or a
 * marker that this document does not exist at a given version.
 */var Wn=function Wn(t,e){_classCallCheck(this,Wn);this.key=t,this.version=e;};/**
 * Represents a document in Firestore with a key, version, data and whether the
 * data has local mutations applied to it.
 */var jn=/*#__PURE__*/function(_Wn){_inherits(jn,_Wn);function jn(t,e,n,s){var _this15;_classCallCheck(this,jn);_this15=_possibleConstructorReturn(this,_getPrototypeOf(jn).call(this,t,e)),_this15.nn=n,_this15.Ye=!!s.Ye,_this15.hasCommittedMutations=!!s.hasCommittedMutations;return _this15;}_createClass(jn,[{key:"field",value:function field(t){return this.nn.field(t);}},{key:"data",value:function data(){return this.nn;}},{key:"sn",value:function sn(){return this.nn.proto;}},{key:"isEqual",value:function isEqual(t){return t instanceof jn&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.Ye===t.Ye&&this.hasCommittedMutations===t.hasCommittedMutations&&this.nn.isEqual(t.nn);}},{key:"toString",value:function toString(){return"Document(".concat(this.key,", ").concat(this.version,", ").concat(this.nn.toString(),", {hasLocalMutations: ").concat(this.Ye,"}), {hasCommittedMutations: ").concat(this.hasCommittedMutations,"})");}},{key:"hasPendingWrites",get:function get(){return this.Ye||this.hasCommittedMutations;}}]);return jn;}(Wn);/**
 * Compares the value for field `field` in the provided documents. Throws if
 * the field does not exist in both documents.
 */ /**
 * A class representing a deleted document.
 * Version is set to 0 if we don't point to any specific time, otherwise it
 * denotes time we know it didn't exist at.
 */var Kn=/*#__PURE__*/function(_Wn2){_inherits(Kn,_Wn2);function Kn(t,e,n){var _this16;_classCallCheck(this,Kn);_this16=_possibleConstructorReturn(this,_getPrototypeOf(Kn).call(this,t,e)),_this16.hasCommittedMutations=!(!n||!n.hasCommittedMutations);return _this16;}_createClass(Kn,[{key:"toString",value:function toString(){return"NoDocument(".concat(this.key,", ").concat(this.version,")");}},{key:"isEqual",value:function isEqual(t){return t instanceof Kn&&t.hasCommittedMutations===this.hasCommittedMutations&&t.version.isEqual(this.version)&&t.key.isEqual(this.key);}},{key:"hasPendingWrites",get:function get(){return this.hasCommittedMutations;}}]);return Kn;}(Wn);/**
 * A class representing an existing document whose data is unknown (e.g. a
 * document that was updated without a known base document).
 */var Gn=/*#__PURE__*/function(_Wn3){_inherits(Gn,_Wn3);function Gn(){_classCallCheck(this,Gn);return _possibleConstructorReturn(this,_getPrototypeOf(Gn).apply(this,arguments));}_createClass(Gn,[{key:"toString",value:function toString(){return"UnknownDocument(".concat(this.key,", ").concat(this.version,")");}},{key:"isEqual",value:function isEqual(t){return t instanceof Gn&&t.version.isEqual(this.version)&&t.key.isEqual(this.key);}},{key:"hasPendingWrites",get:function get(){return!0;}}]);return Gn;}(Wn);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */var zn=/**
     * Initializes a Query with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     */function zn(t){var e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var i=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;var r=arguments.length>5&&arguments[5]!==undefined?arguments[5]:"F";var o=arguments.length>6&&arguments[6]!==undefined?arguments[6]:null;var a=arguments.length>7&&arguments[7]!==undefined?arguments[7]:null;_classCallCheck(this,zn);this.path=t,this.collectionGroup=e,this.rn=n,this.filters=s,this.limit=i,this.on=r,this.startAt=o,this.endAt=a,this.an=null,// The corresponding `Target` of this `Query` instance.
this.cn=null,this.startAt,this.endAt;};/** Creates a new Query instance with the options provided. */function Hn(t,e,n,s,i,r,o,a){return new zn(t,e,n,s,i,r,o,a);}/** Creates a new Query for a query that matches all documents at `path` */function Yn(t){return new zn(t);}/**
 * Helper to convert a collection group query into a collection query at a
 * specific path. This is used when executing collection group queries, since
 * we have to split the query into a set of collection queries at multiple
 * paths.
 */function Jn(t){return!Tt(t.limit)&&"F"/* First */===t.on;}function Xn(t){return!Tt(t.limit)&&"L"/* Last */===t.on;}function Zn(t){return t.rn.length>0?t.rn[0].field:null;}function ts(t){var _iteratorNormalCompletion14=true;var _didIteratorError14=false;var _iteratorError14=undefined;try{for(var _iterator14=t.filters[Symbol.iterator](),_step14;!(_iteratorNormalCompletion14=(_step14=_iterator14.next()).done);_iteratorNormalCompletion14=true){var _e26=_step14.value;if(_e26.un())return _e26.field;}}catch(err){_didIteratorError14=true;_iteratorError14=err;}finally{try{if(!_iteratorNormalCompletion14&&_iterator14["return"]!=null){_iterator14["return"]();}}finally{if(_didIteratorError14){throw _iteratorError14;}}}return null;}/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */ /**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */function es(t){return null!==t.collectionGroup;}/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */function ns(t){var e=v(t);if(null===e.an){e.an=[];var _t23=ts(e),_n22=Zn(e);if(null!==_t23&&null===_n22)// In order to implicitly add key ordering, we must also add the
// inequality filter field for it to be a valid query.
// Note that the default inequality field and key ordering is ascending.
_t23.p()||e.an.push(new ps(_t23)),e.an.push(new ps(x.v(),"asc"/* ASCENDING */));else{var _t24=!1;var _iteratorNormalCompletion15=true;var _didIteratorError15=false;var _iteratorError15=undefined;try{for(var _iterator15=e.rn[Symbol.iterator](),_step15;!(_iteratorNormalCompletion15=(_step15=_iterator15.next()).done);_iteratorNormalCompletion15=true){var _n23=_step15.value;e.an.push(_n23),_n23.field.p()&&(_t24=!0);}}catch(err){_didIteratorError15=true;_iteratorError15=err;}finally{try{if(!_iteratorNormalCompletion15&&_iterator15["return"]!=null){_iterator15["return"]();}}finally{if(_didIteratorError15){throw _iteratorError15;}}}if(!_t24){// The order of the implicit key ordering always matches the last
// explicit order by
var _t25=e.rn.length>0?e.rn[e.rn.length-1].dir:"asc"/* ASCENDING */;e.an.push(new ps(x.v(),_t25));}}}return e.an;}/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */function ss(t){var e=v(t);if(!e.cn)if("F"/* First */===e.on)e.cn=Rt(e.path,e.collectionGroup,ns(e),e.filters,e.limit,e.startAt,e.endAt);else{// Flip the orderBy directions since we want the last results
var _t26=[];var _iteratorNormalCompletion16=true;var _didIteratorError16=false;var _iteratorError16=undefined;try{for(var _iterator16=ns(e)[Symbol.iterator](),_step16;!(_iteratorNormalCompletion16=(_step16=_iterator16.next()).done);_iteratorNormalCompletion16=true){var _n25=_step16.value;var _e27="desc"/* DESCENDING */===_n25.dir?"asc"/* ASCENDING */:"desc"/* DESCENDING */;_t26.push(new ps(_n25.field,_e27));}// We need to swap the cursors to match the now-flipped query ordering.
}catch(err){_didIteratorError16=true;_iteratorError16=err;}finally{try{if(!_iteratorNormalCompletion16&&_iterator16["return"]!=null){_iterator16["return"]();}}finally{if(_didIteratorError16){throw _iteratorError16;}}}var _n24=e.endAt?new gs(e.endAt.position,!e.endAt.before):null,_s27=e.startAt?new gs(e.startAt.position,!e.startAt.before):null;// Now return as a LimitType.First query.
e.cn=Rt(e.path,e.collectionGroup,_t26,e.filters,e.limit,_n24,_s27);}return e.cn;}function is(t,e,n){return new zn(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),e,n,t.startAt,t.endAt);}function rs(t,e){return new zn(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.on,e,t.endAt);}function os(t,e){return new zn(t.path,t.collectionGroup,t.rn.slice(),t.filters.slice(),t.limit,t.on,t.startAt,e);}function as(t,e){return yt(ss(t),ss(e))&&t.on===e.on;}// TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.
function cs(t){return"".concat(gt(ss(t)),"|lt:").concat(t.on);}function us(t){return"Query(target=".concat(Pt(ss(t)),"; limitType=").concat(t.on,")");}/** Returns whether `doc` matches the constraints of `query`. */function hs(t,e){return function(t,e){var n=e.key.path;return null!==t.collectionGroup?e.key.N(t.collectionGroup)&&t.path.T(n):k.F(t.path)?t.path.isEqual(n):t.path.I(n);}/**
 * A document must have a value for every ordering clause in order to show up
 * in the results.
 */(t,e)&&function(t,e){var _iteratorNormalCompletion17=true;var _didIteratorError17=false;var _iteratorError17=undefined;try{for(var _iterator17=t.rn[Symbol.iterator](),_step17;!(_iteratorNormalCompletion17=(_step17=_iterator17.next()).done);_iteratorNormalCompletion17=true){var _n26=_step17.value;// order by key always matches
if(!_n26.field.p()&&null===e.field(_n26.field))return!1;}}catch(err){_didIteratorError17=true;_iteratorError17=err;}finally{try{if(!_iteratorNormalCompletion17&&_iterator17["return"]!=null){_iterator17["return"]();}}finally{if(_didIteratorError17){throw _iteratorError17;}}}return!0;}(t,e)&&function(t,e){var _iteratorNormalCompletion18=true;var _didIteratorError18=false;var _iteratorError18=undefined;try{for(var _iterator18=t.filters[Symbol.iterator](),_step18;!(_iteratorNormalCompletion18=(_step18=_iterator18.next()).done);_iteratorNormalCompletion18=true){var _n27=_step18.value;if(!_n27.matches(e))return!1;}}catch(err){_didIteratorError18=true;_iteratorError18=err;}finally{try{if(!_iteratorNormalCompletion18&&_iterator18["return"]!=null){_iterator18["return"]();}}finally{if(_didIteratorError18){throw _iteratorError18;}}}return!0;}/** Makes sure a document is within the bounds, if provided. */(t,e)&&function(t,e){if(t.startAt&&!ys(t.startAt,ns(t),e))return!1;if(t.endAt&&ys(t.endAt,ns(t),e))return!1;return!0;}/**
 * Returns a new comparator function that can be used to compare two documents
 * based on the Query's ordering constraint.
 */(t,e);}function ls(t){return function(e,n){var s=!1;var _iteratorNormalCompletion19=true;var _didIteratorError19=false;var _iteratorError19=undefined;try{for(var _iterator19=ns(t)[Symbol.iterator](),_step19;!(_iteratorNormalCompletion19=(_step19=_iterator19.next()).done);_iteratorNormalCompletion19=true){var _i21=_step19.value;var _t27=bs(_i21,e,n);if(0!==_t27)return _t27;s=s||_i21.field.p();}}catch(err){_didIteratorError19=true;_iteratorError19=err;}finally{try{if(!_iteratorNormalCompletion19&&_iterator19["return"]!=null){_iterator19["return"]();}}finally{if(_didIteratorError19){throw _iteratorError19;}}}return 0;};}var _s=/*#__PURE__*/function(_ref){_inherits(_s,_ref);function _s(t,e,n){var _this17;_classCallCheck(this,_s);_this17=_possibleConstructorReturn(this,_getPrototypeOf(_s).call(this)),_this17.field=t,_this17.op=e,_this17.value=n;return _this17;}/**
     * Creates a filter based on the provided arguments.
     */_createClass(_s,[{key:"matches",value:function matches(t){var e=t.field(this.field);// Types do not have to match in NOT_EQUAL filters.
return"!="/* NOT_EQUAL */===this.op?null!==e&&this.ln(le(e,this.value)):null!==e&&ce(this.value)===ce(e)&&this.ln(le(e,this.value));// Only compare types with matching backend order (such as double and int).
}},{key:"ln",value:function ln(t){switch(this.op){case"<"/* LESS_THAN */:return t<0;case"<="/* LESS_THAN_OR_EQUAL */:return t<=0;case"=="/* EQUAL */:return 0===t;case"!="/* NOT_EQUAL */:return 0!==t;case">"/* GREATER_THAN */:return t>0;case">="/* GREATER_THAN_OR_EQUAL */:return t>=0;default:return p();}}},{key:"un",value:function un(){return["<"/* LESS_THAN */,"<="/* LESS_THAN_OR_EQUAL */,">"/* GREATER_THAN */,">="/* GREATER_THAN_OR_EQUAL */,"!="/* NOT_EQUAL */,"not-in"/* NOT_IN */].indexOf(this.op)>=0;}}],[{key:"create",value:function create(t,e,n){if(t.p())return"in"/* IN */===e||"not-in"/* NOT_IN */===e?this.hn(t,e,n):new ds(t,e,n);if(Re(n)){if("=="/* EQUAL */!==e&&"!="/* NOT_EQUAL */!==e)throw new I(E.INVALID_ARGUMENT,"Invalid query. Null only supports '==' and '!=' comparisons.");return new _s(t,e,n);}if(ge(n)){if("=="/* EQUAL */!==e&&"!="/* NOT_EQUAL */!==e)throw new I(E.INVALID_ARGUMENT,"Invalid query. NaN only supports '==' and '!=' comparisons.");return new _s(t,e,n);}return"array-contains"/* ARRAY_CONTAINS */===e?new Es(t,n):"in"/* IN */===e?new Is(t,n):"not-in"/* NOT_IN */===e?new As(t,n):"array-contains-any"/* ARRAY_CONTAINS_ANY */===e?new Rs(t,n):new _s(t,e,n);}},{key:"hn",value:function hn(t,e,n){return"in"/* IN */===e?new ws(t,n):new ms(t,n);}}]);return _s;}(/*#__PURE__*/function(){function _class2(){_classCallCheck(this,_class2);}return _class2;}());function fs(t){// TODO(b/29183165): Technically, this won't be unique if two values have
// the same description, such as the int 3 and the string "3". So we should
// add the types in here somehow, too.
return t.field.R()+t.op.toString()+fe(t.value);}var ds=/*#__PURE__*/function(_s28){_inherits(ds,_s28);function ds(t,e,n){var _this18;_classCallCheck(this,ds);_this18=_possibleConstructorReturn(this,_getPrototypeOf(ds).call(this,t,e,n)),_this18.key=k.C(n.referenceValue);return _this18;}_createClass(ds,[{key:"matches",value:function matches(t){var e=k.i(t.key,this.key);return this.ln(e);}}]);return ds;}(_s);/** Filter that matches on key fields within an array. */var ws=/*#__PURE__*/function(_s29){_inherits(ws,_s29);function ws(t,e){var _this19;_classCallCheck(this,ws);_this19=_possibleConstructorReturn(this,_getPrototypeOf(ws).call(this,t,"in"/* IN */,e)),_this19.keys=Ts("in"/* IN */,e);return _this19;}_createClass(ws,[{key:"matches",value:function matches(t){return this.keys.some(function(e){return e.isEqual(t.key);});}}]);return ws;}(_s);/** Filter that matches on key fields not present within an array. */var ms=/*#__PURE__*/function(_s30){_inherits(ms,_s30);function ms(t,e){var _this20;_classCallCheck(this,ms);_this20=_possibleConstructorReturn(this,_getPrototypeOf(ms).call(this,t,"not-in"/* NOT_IN */,e)),_this20.keys=Ts("not-in"/* NOT_IN */,e);return _this20;}_createClass(ms,[{key:"matches",value:function matches(t){return!this.keys.some(function(e){return e.isEqual(t.key);});}}]);return ms;}(_s);function Ts(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map(function(t){return k.C(t.referenceValue);});}/** A Filter that implements the array-contains operator. */var Es=/*#__PURE__*/function(_s31){_inherits(Es,_s31);function Es(t,e){_classCallCheck(this,Es);return _possibleConstructorReturn(this,_getPrototypeOf(Es).call(this,t,"array-contains"/* ARRAY_CONTAINS */,e));}_createClass(Es,[{key:"matches",value:function matches(t){var e=t.field(this.field);return Ae(e)&&he(e.arrayValue,this.value);}}]);return Es;}(_s);/** A Filter that implements the IN operator. */var Is=/*#__PURE__*/function(_s32){_inherits(Is,_s32);function Is(t,e){_classCallCheck(this,Is);return _possibleConstructorReturn(this,_getPrototypeOf(Is).call(this,t,"in"/* IN */,e));}_createClass(Is,[{key:"matches",value:function matches(t){var e=t.field(this.field);return null!==e&&he(this.value.arrayValue,e);}}]);return Is;}(_s);/** A Filter that implements the not-in operator. */var As=/*#__PURE__*/function(_s33){_inherits(As,_s33);function As(t,e){_classCallCheck(this,As);return _possibleConstructorReturn(this,_getPrototypeOf(As).call(this,t,"not-in"/* NOT_IN */,e));}_createClass(As,[{key:"matches",value:function matches(t){if(he(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;var e=t.field(this.field);return null!==e&&!he(this.value.arrayValue,e);}}]);return As;}(_s);/** A Filter that implements the array-contains-any operator. */var Rs=/*#__PURE__*/function(_s34){_inherits(Rs,_s34);function Rs(t,e){_classCallCheck(this,Rs);return _possibleConstructorReturn(this,_getPrototypeOf(Rs).call(this,t,"array-contains-any"/* ARRAY_CONTAINS_ANY */,e));}_createClass(Rs,[{key:"matches",value:function matches(t){var _this21=this;var e=t.field(this.field);return!(!Ae(e)||!e.arrayValue.values)&&e.arrayValue.values.some(function(t){return he(_this21.value.arrayValue,t);});}}]);return Rs;}(_s);/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */var gs=function gs(t,e){_classCallCheck(this,gs);this.position=t,this.before=e;};function Ps(t){// TODO(b/29183165): Make this collision robust.
return"".concat(t.before?"b":"a",":").concat(t.position.map(function(t){return fe(t);}).join(","));}/**
 * Returns true if a document sorts before a bound using the provided sort
 * order.
 */function ys(t,e,n){var s=0;for(var _i22=0;_i22<t.position.length;_i22++){var _r11=e[_i22],_o8=t.position[_i22];if(_r11.field.p())s=k.i(k.C(_o8.referenceValue),n.key);else{s=le(_o8,n.field(_r11.field));}if("desc"/* DESCENDING */===_r11.dir&&(s*=-1),0!==s)break;}return t.before?s<=0:s<0;}function Vs(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(var _n28=0;_n28<t.position.length;_n28++){if(!ue(t.position[_n28],e.position[_n28]))return!1;}return!0;}/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */var ps=function ps(t)/* ASCENDING */{var e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"asc";_classCallCheck(this,ps);this.field=t,this.dir=e;};function bs(t,e,n){var s=t.field.p()?k.i(e.key,n.key):function(t,e,n){var s=e.field(t),i=n.field(t);return null!==s&&null!==i?le(s,i):p();}(t.field,e,n);switch(t.dir){case"asc"/* ASCENDING */:return s;case"desc"/* DESCENDING */:return-1*s;default:return p();}}function vs(t,e){return t.dir===e.dir&&t.field.isEqual(e.field);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ss=function Ss(){var _this22=this;_classCallCheck(this,Ss);this.promise=new Promise(function(t,e){_this22.resolve=t,_this22.reject=e;});};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */var Ds=/*#__PURE__*/function(){function Ds(/**
     * The AsyncQueue to run backoff operations on.
     */t,/**
     * The ID to use when scheduling backoff operations on the AsyncQueue.
     */e){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1e3;var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1.5;var i=arguments.length>4&&arguments[4]!==undefined?arguments[4]:6e4;_classCallCheck(this,Ds);this._n=t,this.fn=e,this.dn=n,this.wn=s,this.mn=i,this.Tn=0,this.En=null,/** The last backoff attempt, as epoch milliseconds. */this.In=Date.now(),this.reset();}/**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */_createClass(Ds,[{key:"reset",value:function reset(){this.Tn=0;}/**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */},{key:"An",value:function An(){this.Tn=this.mn;}/**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */},{key:"Rn",value:function Rn(t){var _this23=this;// Cancel any pending backoff operation.
this.cancel();// First schedule using the current base (which may be 0 and should be
// honored as such).
var e=Math.floor(this.Tn+this.gn()),n=Math.max(0,Date.now()-this.In),s=Math.max(0,e-n);// Guard against lastAttemptTime being in the future due to a clock change.
s>0&&g("ExponentialBackoff","Backing off for ".concat(s," ms (base delay: ").concat(this.Tn," ms, delay with jitter: ").concat(e," ms, last attempt: ").concat(n," ms ago)")),this.En=this._n.Pn(this.fn,s,function(){return _this23.In=Date.now(),t();}),// Apply backoff factor to determine next delay and ensure it is within
// bounds.
this.Tn*=this.wn,this.Tn<this.dn&&(this.Tn=this.dn),this.Tn>this.mn&&(this.Tn=this.mn);}},{key:"yn",value:function yn(){null!==this.En&&(this.En.Vn(),this.En=null);}},{key:"cancel",value:function cancel(){null!==this.En&&(this.En.cancel(),this.En=null);}/** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */},{key:"gn",value:function gn(){return(Math.random()-.5)*this.Tn;}}]);return Ds;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * PersistencePromise<> is essentially a re-implementation of Promise<> except
 * it has a .next() method instead of .then() and .next() and .catch() callbacks
 * are executed synchronously when a PersistencePromise resolves rather than
 * asynchronously (Promise<> implementations use setImmediate() or similar).
 *
 * This is necessary to interoperate with IndexedDB which will automatically
 * commit transactions if control is returned to the event loop without
 * synchronously initiating another operation on the transaction.
 *
 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
 * Promises.
 */var Cs=/*#__PURE__*/function(){function Cs(t){var _this24=this;_classCallCheck(this,Cs);// NOTE: next/catchCallback will always point to our own wrapper functions,
// not the user's raw next() or catch() callbacks.
this.pn=null,this.bn=null,// When the operation resolves, we'll set result or error and mark isDone.
this.result=void 0,this.error=void 0,this.vn=!1,// Set to true when .then() or .catch() are called and prevents additional
// chaining.
this.Sn=!1,t(function(t){_this24.vn=!0,_this24.result=t,_this24.pn&&// value should be defined unless T is Void, but we can't express
// that in the type system.
_this24.pn(t);},function(t){_this24.vn=!0,_this24.error=t,_this24.bn&&_this24.bn(t);});}_createClass(Cs,[{key:"catch",value:function _catch(t){return this.next(void 0,t);}},{key:"next",value:function next(t,e){var _this25=this;return this.Sn&&p(),this.Sn=!0,this.vn?this.error?this.Dn(e,this.error):this.Cn(t,this.result):new Cs(function(n,s){_this25.pn=function(e){_this25.Cn(t,e).next(n,s);},_this25.bn=function(t){_this25.Dn(e,t).next(n,s);};});}},{key:"Nn",value:function Nn(){var _this26=this;return new Promise(function(t,e){_this26.next(t,e);});}},{key:"Fn",value:function Fn(t){try{var _e28=t();return _e28 instanceof Cs?_e28:Cs.resolve(_e28);}catch(t){return Cs.reject(t);}}},{key:"Cn",value:function Cn(t,e){return t?this.Fn(function(){return t(e);}):Cs.resolve(e);}},{key:"Dn",value:function Dn(t,e){return t?this.Fn(function(){return t(e);}):Cs.reject(e);}}],[{key:"resolve",value:function resolve(t){return new Cs(function(e,n){e(t);});}},{key:"reject",value:function reject(t){return new Cs(function(e,n){n(t);});}},{key:"$n",value:function $n(// Accept all Promise types in waitFor().
// eslint-disable-next-line @typescript-eslint/no-explicit-any
t){return new Cs(function(e,n){var s=0,i=0,r=!1;t.forEach(function(t){++s,t.next(function(){++i,r&&i===s&&e();},function(t){return n(t);});}),r=!0,i===s&&e();});}/**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */},{key:"xn",value:function xn(t){var e=Cs.resolve(!1);var _iteratorNormalCompletion20=true;var _didIteratorError20=false;var _iteratorError20=undefined;try{var _loop3=function _loop3(){var n=_step20.value;e=e.next(function(t){return t?Cs.resolve(t):n();});};for(var _iterator20=t[Symbol.iterator](),_step20;!(_iteratorNormalCompletion20=(_step20=_iterator20.next()).done);_iteratorNormalCompletion20=true){_loop3();}}catch(err){_didIteratorError20=true;_iteratorError20=err;}finally{try{if(!_iteratorNormalCompletion20&&_iterator20["return"]!=null){_iterator20["return"]();}}finally{if(_didIteratorError20){throw _iteratorError20;}}}return e;}},{key:"forEach",value:function forEach(t,e){var _this27=this;var n=[];return t.forEach(function(t,s){n.push(e.call(_this27,t,s));}),this.$n(n);}}]);return Cs;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // References to `window` are guarded by SimpleDb.isAvailable()
/* eslint-disable no-restricted-globals */ /**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */var Ns=/*#__PURE__*/function(){/*
     * Creates a new SimpleDb wrapper for IndexedDb database `name`.
     *
     * Note that `version` must not be a downgrade. IndexedDB does not support
     * downgrading the schema version. We currently do not support any way to do
     * versioning outside of IndexedDB's versioning mechanism, as only
     * version-upgrade transactions are allowed to do things like create
     * objectstores.
     */function Ns(t,e,s){_classCallCheck(this,Ns);this.name=t,this.version=e,this.kn=s;// NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
// bug we're checking for should exist in iOS >= 12.2 and < 13, but for
// whatever reason it's much harder to hit after 12.2 so we only proactively
// log on 12.2.
12.2===Ns.Mn((0,_util.getUA)())&&P("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");}/** Deletes the specified database. */_createClass(Ns,[{key:"Qn",/**
     * Opens the specified database, creating or upgrading it if necessary.
     */value:function Qn(){var _this28=this;return regeneratorRuntime.async(function Qn$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=this.db;if(_context.t0){_context.next=6;break;}g("SimpleDb","Opening database:",this.name);_context.next=5;return regeneratorRuntime.awrap(new Promise(function(t,e){// TODO(mikelehen): Investigate browser compatibility.
// https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
// suggests IE9 and older WebKit browsers handle upgrade
// differently. They expect setVersion, as described here:
// https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
var n=indexedDB.open(_this28.name,_this28.version);n.onsuccess=function(e){var n=e.target.result;t(n);},n.onblocked=function(){e(new $s("Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));},n.onerror=function(t){var n=t.target.error;"VersionError"===n.name?e(new I(E.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")):e(new $s(n));},n.onupgradeneeded=function(t){g("SimpleDb",'Database "'+_this28.name+'" requires upgrade from version:',t.oldVersion);var e=t.target.result;_this28.kn.createOrUpgrade(e,n.transaction,t.oldVersion,_this28.version).next(function(){g("SimpleDb","Database upgrade to version "+_this28.version+" complete");});};}));case 5:this.db=_context.sent;case 6:this.Wn&&(this.db.onversionchange=function(t){return _this28.Wn(t);});return _context.abrupt("return",this.db);case 8:case"end":return _context.stop();}}},null,this);}},{key:"jn",value:function jn(t){this.Wn=t,this.db&&(this.db.onversionchange=function(e){return t(e);});}},{key:"runTransaction",value:function runTransaction(t,e,n){var _this29=this;var s,i,_ret,_e29;return regeneratorRuntime.async(function runTransaction$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:s="readonly"===t;i=0;case 2:++i;_context3.prev=3;_context3.next=6;return regeneratorRuntime.awrap(function _callee(){var t,i;return regeneratorRuntime.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return regeneratorRuntime.awrap(_this29.Qn());case 2:_this29.db=_context2.sent;t=ks.open(_this29.db,s?"readonly":"readwrite",e),i=n(t)["catch"](function(e){return(// Abort the transaction if there was an error.
t.abort(e),Cs.reject(e));}).Nn();// As noted above, errors are propagated by aborting the transaction. So
// we swallow any error here to avoid the browser logging it as unhandled.
i["catch"](function(){});_context2.next=7;return regeneratorRuntime.awrap(t.Kn);case 7:_context2.t0=i;return _context2.abrupt("return",{v:_context2.t0});case 9:case"end":return _context2.stop();}}});}());case 6:_ret=_context3.sent;if(!(_typeof(_ret)==="object")){_context3.next=9;break;}return _context3.abrupt("return",_ret.v);case 9:_context3.next=16;break;case 11:_context3.prev=11;_context3.t0=_context3["catch"](3);// TODO(schmidt-sebastian): We could probably be smarter about this and
// not retry exceptions that are likely unrecoverable (such as quota
// exceeded errors).
// Note: We cannot use an instanceof check for FirestoreException, since the
// exception is wrapped in a generic error by our async/await handling.
_e29="FirebaseError"!==_context3.t0.name&&i<3;if(!(g("SimpleDb","Transaction failed with error:",_context3.t0.message,"Retrying:",_e29),this.close(),!_e29)){_context3.next=16;break;}return _context3.abrupt("return",Promise.reject(_context3.t0));case 16:_context3.next=2;break;case 18:case"end":return _context3.stop();}}},null,this,[[3,11]]);}},{key:"close",value:function close(){this.db&&this.db.close(),this.db=void 0;}}],[{key:"delete",value:function _delete(t){return g("SimpleDb","Removing database:",t),Os(window.indexedDB.deleteDatabase(t)).Nn();}/** Returns true if IndexedDB is available in the current environment. */},{key:"On",value:function On(){if("undefined"==typeof indexedDB)return!1;if(Ns.Ln())return!0;// We extensively use indexed array values and compound keys,
// which IE and Edge do not support. However, they still have indexedDB
// defined on the window, so we need to check for them here and make sure
// to return that persistence is not enabled for those browsers.
// For tracking support of this feature, see here:
// https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
// Check the UA string to find out the browser.
var t=(0,_util.getUA)(),e=Ns.Mn(t),s=0<e&&e<10,i=Ns.Bn(t),r=0<i&&i<4.5;// IE 10
// ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
// IE 11
// ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
// Edge
// ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
// like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
// iOS Safari: Disable for users running iOS version < 10.
return!(t.indexOf("MSIE ")>0||t.indexOf("Trident/")>0||t.indexOf("Edge/")>0||s||r);}/**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */},{key:"Ln",value:function Ln(){var t;return"undefined"!=typeof process&&"YES"===(null===(t=process.env)||void 0===t?void 0:t.qn);}/** Helper to get a typed SimpleDbStore from a transaction. */},{key:"Un",value:function Un(t,e){return t.store(e);}// visible for testing
/** Parse User Agent to determine iOS version. Returns -1 if not found. */},{key:"Mn",value:function Mn(t){var e=t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),n=e?e[1].split("_").slice(0,2).join("."):"-1";return Number(n);}// visible for testing
/** Parse User Agent to determine Android version. Returns -1 if not found. */},{key:"Bn",value:function Bn(t){var e=t.match(/Android ([\d.]+)/i),n=e?e[1].split(".").slice(0,2).join("."):"-1";return Number(n);}}]);return Ns;}();/**
 * A controller for iterating over a key range or index. It allows an iterate
 * callback to delete the currently-referenced object, or jump to a new key
 * within the key range or index.
 */var Fs=/*#__PURE__*/function(){function Fs(t){_classCallCheck(this,Fs);this.Gn=t,this.zn=!1,this.Hn=null;}_createClass(Fs,[{key:"done",/**
     * This function can be called to stop iteration at any point.
     */value:function done(){this.zn=!0;}/**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */},{key:"Jn",value:function Jn(t){this.Hn=t;}/**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */},{key:"delete",value:function _delete(){return Os(this.Gn["delete"]());}},{key:"vn",get:function get(){return this.zn;}},{key:"Yn",get:function get(){return this.Hn;}},{key:"cursor",set:function set(t){this.Gn=t;}}]);return Fs;}();/** An error that wraps exceptions that thrown during IndexedDB execution. */var $s=/*#__PURE__*/function(_I){_inherits($s,_I);function $s(t){var _this30;_classCallCheck(this,$s);_this30=_possibleConstructorReturn(this,_getPrototypeOf($s).call(this,E.UNAVAILABLE,"IndexedDB transaction failed: "+t)),_this30.name="IndexedDbTransactionError";return _this30;}return $s;}(I);/** Verifies whether `e` is an IndexedDbTransactionError. */function xs(t){// Use name equality, as instanceof checks on errors don't work with errors
// that wrap other errors.
return"IndexedDbTransactionError"===t.name;}/**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */var ks=/*#__PURE__*/function(){function ks(t){var _this31=this;_classCallCheck(this,ks);this.transaction=t,this.aborted=!1,/**
         * A promise that resolves with the result of the IndexedDb transaction.
         */this.Xn=new Ss(),this.transaction.oncomplete=function(){_this31.Xn.resolve();},this.transaction.onabort=function(){t.error?_this31.Xn.reject(new $s(t.error)):_this31.Xn.resolve();},this.transaction.onerror=function(t){var e=Bs(t.target.error);_this31.Xn.reject(new $s(e));};}_createClass(ks,[{key:"abort",value:function abort(t){t&&this.Xn.reject(t),this.aborted||(g("SimpleDb","Aborting transaction:",t?t.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort());}/**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */},{key:"store",value:function store(t){var e=this.transaction.objectStore(t);return new Ms(e);}},{key:"Kn",get:function get(){return this.Xn.promise;}}],[{key:"open",value:function open(t,e,n){try{return new ks(t.transaction(n,e));}catch(t){throw new $s(t);}}}]);return ks;}();/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */var Ms=/*#__PURE__*/function(){function Ms(t){_classCallCheck(this,Ms);this.store=t;}_createClass(Ms,[{key:"put",value:function put(t,e){var n;return void 0!==e?(g("SimpleDb","PUT",this.store.name,t,e),n=this.store.put(e,t)):(g("SimpleDb","PUT",this.store.name,"<auto-key>",t),n=this.store.put(t)),Os(n);}/**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value The object to write.
     * @return The key of the value to add.
     */},{key:"add",value:function add(t){g("SimpleDb","ADD",this.store.name,t,t);return Os(this.store.add(t));}/**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @return The object with the specified key or null if no object exists.
     */},{key:"get",value:function get(t){var _this32=this;// We're doing an unsafe cast to ValueType.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
return Os(this.store.get(t)).next(function(e){return(// Normalize nonexistence to null.
void 0===e&&(e=null),g("SimpleDb","GET",_this32.store.name,t,e),e);});}},{key:"delete",value:function _delete(t){g("SimpleDb","DELETE",this.store.name,t);return Os(this.store["delete"](t));}/**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */},{key:"count",value:function count(){g("SimpleDb","COUNT",this.store.name);return Os(this.store.count());}},{key:"Zn",value:function Zn(t,e){var n=this.cursor(this.options(t,e)),s=[];return this.ts(n,function(t,e){s.push(e);}).next(function(){return s;});}},{key:"es",value:function es(t,e){g("SimpleDb","DELETE ALL",this.store.name);var n=this.options(t,e);n.ns=!1;var s=this.cursor(n);return this.ts(s,function(t,e,n){return n["delete"]();});}},{key:"ss",value:function ss(t,e){var n;e?n=t:(n={},e=t);var s=this.cursor(n);return this.ts(s,e);}/**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */},{key:"rs",value:function rs(t){var e=this.cursor({});return new Cs(function(n,s){e.onerror=function(t){var e=Bs(t.target.error);s(e);},e.onsuccess=function(e){var s=e.target.result;s?t(s.primaryKey,s.value).next(function(t){t?s["continue"]():n();}):n();};});}},{key:"ts",value:function ts(t,e){var n=[];return new Cs(function(s,i){t.onerror=function(t){i(t.target.error);},t.onsuccess=function(t){var i=t.target.result;if(!i)return void s();var r=new Fs(i),o=e(i.primaryKey,i.value,r);if(o instanceof Cs){var _t28=o["catch"](function(t){return r.done(),Cs.reject(t);});n.push(_t28);}r.vn?s():null===r.Yn?i["continue"]():i["continue"](r.Yn);};}).next(function(){return Cs.$n(n);});}},{key:"options",value:function options(t,e){var n=void 0;return void 0!==t&&("string"==typeof t?n=t:e=t),{index:n,range:e};}},{key:"cursor",value:function cursor(t){var e="next";if(t.reverse&&(e="prev"),t.index){var _n29=this.store.index(t.index);return t.ns?_n29.openKeyCursor(t.range,e):_n29.openCursor(t.range,e);}return this.store.openCursor(t.range,e);}}]);return Ms;}();/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */function Os(t){return new Cs(function(e,n){t.onsuccess=function(t){var n=t.target.result;e(n);},t.onerror=function(t){var e=Bs(t.target.error);n(e);};});}// Guard so we only report the error once.
var Ls=!1;function Bs(t){var e=Ns.Mn((0,_util.getUA)());if(e>=12.2&&e<13){var _e30="An internal error was encountered in the Indexed Database server";if(t.message.indexOf(_e30)>=0){// Wrap error in a more descriptive one.
var _t29=new I("internal","IOS_INDEXEDDB_BUG1: IndexedDb has thrown '".concat(_e30,"'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround."));return Ls||(Ls=!0,// Throw a global exception outside of this promise chain, for the user to
// potentially catch.
setTimeout(function(){throw _t29;},0)),_t29;}}return t;}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The Platform's 'window' implementation or null if not available. */function qs(){// `window` is not always available, e.g. in ReactNative and WebWorkers.
// eslint-disable-next-line no-restricted-globals
return"undefined"!=typeof window?window:null;}/** The Platform's 'document' implementation or null if not available. */function Us(){// `document` is not always available, e.g. in ReactNative and WebWorkers.
// eslint-disable-next-line no-restricted-globals
return"undefined"!=typeof document?document:null;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */var Qs=/*#__PURE__*/function(){function Qs(t,e,n,s,i){_classCallCheck(this,Qs);this.os=t,this.fn=e,this.cs=n,this.op=s,this.us=i,this.hs=new Ss(),this.then=this.hs.promise.then.bind(this.hs.promise),// It's normal for the deferred promise to be canceled (due to cancellation)
// and so we attach a dummy catch callback to avoid
// 'UnhandledPromiseRejectionWarning' log spam.
this.hs.promise["catch"](function(t){});}/**
     * Creates and returns a DelayedOperation that has been scheduled to be
     * executed on the provided asyncQueue after the provided delayMs.
     *
     * @param asyncQueue The queue to schedule the operation on.
     * @param id A Timer ID identifying the type of operation this is.
     * @param delayMs The delay (ms) before the operation should be scheduled.
     * @param op The operation to run.
     * @param removalCallback A callback to be called synchronously once the
     *   operation is executed or canceled, notifying the AsyncQueue to remove it
     *   from its delayedOperations list.
     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
     *   the DelayedOperation class public.
     */_createClass(Qs,[{key:"start",/**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */value:function start(t){var _this33=this;this._s=setTimeout(function(){return _this33.fs();},t);}/**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */},{key:"Vn",value:function Vn(){return this.fs();}/**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */},{key:"cancel",value:function cancel(t){null!==this._s&&(this.clearTimeout(),this.hs.reject(new I(E.CANCELLED,"Operation cancelled"+(t?": "+t:""))));}},{key:"fs",value:function fs(){var _this34=this;this.os.ds(function(){return null!==_this34._s?(_this34.clearTimeout(),_this34.op().then(function(t){return _this34.hs.resolve(t);})):Promise.resolve();});}},{key:"clearTimeout",value:function(_clearTimeout){function clearTimeout(){return _clearTimeout.apply(this,arguments);}clearTimeout.toString=function(){return _clearTimeout.toString();};return clearTimeout;}(function(){null!==this._s&&(this.us(this),clearTimeout(this._s),this._s=null);})}],[{key:"ls",value:function ls(t,e,n,s,i){var r=Date.now()+n,o=new Qs(t,e,r,s,i);return o.start(n),o;}}]);return Qs;}();var Ws=/*#__PURE__*/function(){function Ws(){var _this35=this;_classCallCheck(this,Ws);// The last promise in the queue.
this.ws=Promise.resolve(),// A list of retryable operations. Retryable operations are run in order and
// retried with backoff.
this.Ts=[],// Is this AsyncQueue being shut down? Once it is set to true, it will not
// be changed again.
this.Es=!1,// Operations scheduled to be queued in the future. Operations are
// automatically removed after they are run or canceled.
this.Is=[],// visible for testing
this.As=null,// Flag set while there's an outstanding AsyncQueue operation, used for
// assertion sanity-checks.
this.Rs=!1,// List of TimerIds to fast-forward delays for.
this.gs=[],// Backoff timer used to schedule retries for retryable operations
this.Ps=new Ds(this,"async_queue_retry"/* AsyncQueueRetry */),// Visibility handler that triggers an immediate retry of all retryable
// operations. Meant to speed up recovery when we regain file system access
// after page comes into foreground.
this.ys=function(){var t=Us();t&&g("AsyncQueue","Visibility state changed to  ",t.visibilityState),_this35.Ps.yn();};var t=Us();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.ys);}// Is this AsyncQueue being shut down? If true, this instance will not enqueue
// any new operations, Promises from enqueue requests will not resolve.
_createClass(Ws,[{key:"ds",/**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */value:function ds(t){// eslint-disable-next-line @typescript-eslint/no-floating-promises
this.enqueue(t);}/**
     * Regardless if the queue has initialized shutdown, adds a new operation to the
     * queue without waiting for it to complete (i.e. we ignore the Promise result).
     */},{key:"ps",value:function ps(t){this.bs(),// eslint-disable-next-line @typescript-eslint/no-floating-promises
this.vs(t);}/**
     * Initialize the shutdown of this queue. Once this method is called, the
     * only possible way to request running an operation is through
     * `enqueueEvenWhileRestricted()`.
     */},{key:"Ss",value:function Ss(){if(!this.Es){this.Es=!0;var _t30=Us();_t30&&"function"==typeof _t30.removeEventListener&&_t30.removeEventListener("visibilitychange",this.ys);}}/**
     * Adds a new operation to the queue. Returns a promise that will be resolved
     * when the promise returned by the new operation is (with its value).
     */},{key:"enqueue",value:function enqueue(t){return this.bs(),this.Es?new Promise(function(t){}):this.vs(t);}/**
     * Enqueue a retryable operation.
     *
     * A retryable operation is rescheduled with backoff if it fails with a
     * IndexedDbTransactionError (the error type used by SimpleDb). All
     * retryable operations are executed in order and only run if all prior
     * operations were retried successfully.
     */},{key:"Ds",value:function Ds(t){var _this36=this;this.Ts.push(t),this.ds(function(){return _this36.Cs();});}/**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */},{key:"Cs",value:function Cs(){var _this37=this;return regeneratorRuntime.async(function Cs$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(0!==this.Ts.length)){_context4.next=14;break;}_context4.prev=1;_context4.next=4;return regeneratorRuntime.awrap(this.Ts[0]());case 4:this.Ts.shift();this.Ps.reset();_context4.next=13;break;case 8:_context4.prev=8;_context4.t0=_context4["catch"](1);if(xs(_context4.t0)){_context4.next=12;break;}throw _context4.t0;case 12:// Failure will be handled by AsyncQueue
g("AsyncQueue","Operation failed with retryable error: "+_context4.t0);case 13:this.Ts.length>0&&// If there are additional operations, we re-schedule `retryNextOp()`.
// This is necessary to run retryable operations that failed during
// their initial attempt since we don't know whether they are already
// enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
// needs to  be re-run, we will run `op1`, `op1`, `op2` using the
// already enqueued calls to `retryNextOp()`. `op3()` will then run in the
// call scheduled here.
// Since `backoffAndRun()` cancels an existing backoff and schedules a
// new backoff on every call, there is only ever a single additional
// operation in the queue.
this.Ps.Rn(function(){return _this37.Cs();});case 14:case"end":return _context4.stop();}}},null,this,[[1,8]]);}},{key:"vs",value:function vs(t){var _this38=this;var e=this.ws.then(function(){return _this38.Rs=!0,t()["catch"](function(t){_this38.As=t,_this38.Rs=!1;// Re-throw the error so that this.tail becomes a rejected Promise and
// all further attempts to chain (via .then) will just short-circuit
// and return the rejected Promise.
throw P("INTERNAL UNHANDLED ERROR: ",/**
 * Chrome includes Error.message in Error.stack. Other browsers do not.
 * This returns expected output of message + stack when available.
 * @param error Error or FirestoreError
 */function(t){var e=t.message||"";t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack);return e;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */(t)),t;}).then(function(t){return _this38.Rs=!1,t;});});return this.ws=e,e;}/**
     * Schedules an operation to be queued on the AsyncQueue once the specified
     * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel
     * or fast-forward the operation prior to its running.
     */},{key:"Pn",value:function Pn(t,e,n){var _this39=this;this.bs(),// Fast-forward delays for timerIds that have been overriden.
this.gs.indexOf(t)>-1&&(e=0);var s=Qs.ls(this,t,e,n,function(t){return _this39.Ns(t);});return this.Is.push(s),s;}},{key:"bs",value:function bs(){this.As&&p();}/**
     * Verifies there's an operation currently in-progress on the AsyncQueue.
     * Unfortunately we can't verify that the running code is in the promise chain
     * of that operation, so this isn't a foolproof check, but it should be enough
     * to catch some bugs.
     */},{key:"Fs",value:function Fs(){}/**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */},{key:"$s",value:function $s(){var t;return regeneratorRuntime.async(function $s$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:t=this.ws;_context5.next=3;return regeneratorRuntime.awrap(t);case 3:if(t!==this.ws){_context5.next=0;break;}case 4:case"end":return _context5.stop();}}},null,this);}/**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */},{key:"xs",value:function xs(t){var _iteratorNormalCompletion21=true;var _didIteratorError21=false;var _iteratorError21=undefined;try{for(var _iterator21=this.Is[Symbol.iterator](),_step21;!(_iteratorNormalCompletion21=(_step21=_iterator21.next()).done);_iteratorNormalCompletion21=true){var _e31=_step21.value;if(_e31.fn===t)return!0;}}catch(err){_didIteratorError21=true;_iteratorError21=err;}finally{try{if(!_iteratorNormalCompletion21&&_iterator21["return"]!=null){_iterator21["return"]();}}finally{if(_didIteratorError21){throw _iteratorError21;}}}return!1;}/**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId Delayed operations up to and including this TimerId will
     *  be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */},{key:"ks",value:function ks(t){var _this40=this;// Note that draining may generate more delayed ops, so we do that first.
return this.$s().then(function(){// Run ops in the same order they'd run if they ran naturally.
_this40.Is.sort(function(t,e){return t.cs-e.cs;});var _iteratorNormalCompletion22=true;var _didIteratorError22=false;var _iteratorError22=undefined;try{for(var _iterator22=_this40.Is[Symbol.iterator](),_step22;!(_iteratorNormalCompletion22=(_step22=_iterator22.next()).done);_iteratorNormalCompletion22=true){var _e32=_step22.value;if(_e32.Vn(),"all"/* All */!==t&&_e32.fn===t)break;}}catch(err){_didIteratorError22=true;_iteratorError22=err;}finally{try{if(!_iteratorNormalCompletion22&&_iterator22["return"]!=null){_iterator22["return"]();}}finally{if(_didIteratorError22){throw _iteratorError22;}}}return _this40.$s();});}/**
     * For Tests: Skip all subsequent delays for a timer id.
     */},{key:"Ms",value:function Ms(t){this.gs.push(t);}/** Called once a DelayedOperation is run or canceled. */},{key:"Ns",value:function Ns(t){// NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
var e=this.Is.indexOf(t);this.Is.splice(e,1);}},{key:"Vs",get:function get(){return this.Es;}}]);return Ws;}();/**
 * Returns a FirestoreError that can be surfaced to the user if the provided
 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
 */function js(t,e){if(P("AsyncQueue","".concat(e,": ").concat(t)),xs(t))return new I(E.UNAVAILABLE,"".concat(e,": ").concat(t));throw t;}var Ks=function Ks(){_classCallCheck(this,Ks);this.Os=void 0,this.listeners=[];};var Gs=function Gs(){_classCallCheck(this,Gs);this.Ls=new dt(function(t){return cs(t);},as),this.onlineState="Unknown"/* Unknown */,this.Bs=new Set();};function zs(t,e){var n,s,i,r,_n30;return regeneratorRuntime.async(function zs$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:n=v(t),s=e.query;i=!1,r=n.Ls.get(s);if(!(r||(i=!0,r=new Ks()),i)){_context6.next=13;break;}_context6.prev=3;_context6.next=6;return regeneratorRuntime.awrap(n.qs(s));case 6:r.Os=_context6.sent;_context6.next=13;break;case 9:_context6.prev=9;_context6.t0=_context6["catch"](3);_n30=js(_context6.t0,"Initialization of query '".concat(us(e.query),"' failed"));return _context6.abrupt("return",void e.onError(_n30));case 13:n.Ls.set(s,r),r.listeners.push(e);// Run global snapshot listeners if a consistent snapshot has been emitted.
e.Us(n.onlineState);if(r.Os){e.Qs(r.Os)&&Xs(n);}case 16:case"end":return _context6.stop();}}},null,null,[[3,9]]);}function Hs(t,e){var n,s,i,r,_t31;return regeneratorRuntime.async(function Hs$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:n=v(t),s=e.query;i=!1;r=n.Ls.get(s);if(r){_t31=r.listeners.indexOf(e);_t31>=0&&(r.listeners.splice(_t31,1),i=0===r.listeners.length);}if(!i){_context7.next=6;break;}return _context7.abrupt("return",(n.Ls["delete"](s),n.Ws(s)));case 6:case"end":return _context7.stop();}}});}function Ys(t,e){var n=v(t);var s=!1;var _iteratorNormalCompletion23=true;var _didIteratorError23=false;var _iteratorError23=undefined;try{for(var _iterator23=e[Symbol.iterator](),_step23;!(_iteratorNormalCompletion23=(_step23=_iterator23.next()).done);_iteratorNormalCompletion23=true){var _t32=_step23.value;var _e33=_t32.query,_i23=n.Ls.get(_e33);if(_i23){var _iteratorNormalCompletion24=true;var _didIteratorError24=false;var _iteratorError24=undefined;try{for(var _iterator24=_i23.listeners[Symbol.iterator](),_step24;!(_iteratorNormalCompletion24=(_step24=_iterator24.next()).done);_iteratorNormalCompletion24=true){var _e34=_step24.value;_e34.Qs(_t32)&&(s=!0);}}catch(err){_didIteratorError24=true;_iteratorError24=err;}finally{try{if(!_iteratorNormalCompletion24&&_iterator24["return"]!=null){_iterator24["return"]();}}finally{if(_didIteratorError24){throw _iteratorError24;}}}_i23.Os=_t32;}}}catch(err){_didIteratorError23=true;_iteratorError23=err;}finally{try{if(!_iteratorNormalCompletion23&&_iterator23["return"]!=null){_iterator23["return"]();}}finally{if(_didIteratorError23){throw _iteratorError23;}}}s&&Xs(n);}function Js(t,e,n){var s=v(t),i=s.Ls.get(e);if(i){var _iteratorNormalCompletion25=true;var _didIteratorError25=false;var _iteratorError25=undefined;try{for(var _iterator25=i.listeners[Symbol.iterator](),_step25;!(_iteratorNormalCompletion25=(_step25=_iterator25.next()).done);_iteratorNormalCompletion25=true){var _t33=_step25.value;_t33.onError(n);}}catch(err){_didIteratorError25=true;_iteratorError25=err;}finally{try{if(!_iteratorNormalCompletion25&&_iterator25["return"]!=null){_iterator25["return"]();}}finally{if(_didIteratorError25){throw _iteratorError25;}}}}// Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
// after an error.
s.Ls["delete"](e);}// Call all global snapshot listeners that have been set.
function Xs(t){t.Bs.forEach(function(t){t.next();});}/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */var Zs=/*#__PURE__*/function(){function Zs(t,e,n){_classCallCheck(this,Zs);this.query=t,this.js=e,/**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */this.Ks=!1,this.Gs=null,this.onlineState="Unknown"/* Unknown */,this.options=n||{};}/**
     * Applies the new ViewSnapshot to this listener, raising a user-facing event
     * if applicable (depending on what changed, whether the user has opted into
     * metadata-only changes, etc.). Returns true if a user-facing event was
     * indeed raised.
     */_createClass(Zs,[{key:"Qs",value:function Qs(t){if(!this.options.includeMetadataChanges){// Remove the metadata only changes.
var _e35=[];var _iteratorNormalCompletion26=true;var _didIteratorError26=false;var _iteratorError26=undefined;try{for(var _iterator26=t.docChanges[Symbol.iterator](),_step26;!(_iteratorNormalCompletion26=(_step26=_iterator26.next()).done);_iteratorNormalCompletion26=true){var _n31=_step26.value;3/* Metadata */!==_n31.type&&_e35.push(_n31);}}catch(err){_didIteratorError26=true;_iteratorError26=err;}finally{try{if(!_iteratorNormalCompletion26&&_iterator26["return"]!=null){_iterator26["return"]();}}finally{if(_didIteratorError26){throw _iteratorError26;}}}t=new Ht(t.query,t.docs,t.Ut,_e35,t.Qt,t.fromCache,t.Wt,/* excludesMetadataChanges= */!0);}var e=!1;return this.Ks?this.zs(t)&&(this.js.next(t),e=!0):this.Hs(t,this.onlineState)&&(this.Ys(t),e=!0),this.Gs=t,e;}},{key:"onError",value:function onError(t){this.js.error(t);}/** Returns whether a snapshot was raised. */},{key:"Us",value:function Us(t){this.onlineState=t;var e=!1;return this.Gs&&!this.Ks&&this.Hs(this.Gs,t)&&(this.Ys(this.Gs),e=!0),e;}},{key:"Hs",value:function Hs(t,e){// Always raise the first event when we're synced
if(!t.fromCache)return!0;// NOTE: We consider OnlineState.Unknown as online (it should become Offline
// or Online if we wait long enough).
var n="Offline"/* Offline */!==e;// Don't raise the event if we're online, aren't synced yet (checked
// above) and are waiting for a sync.
return(!this.options.Js||!n)&&(!t.docs.m()||"Offline"/* Offline */===e);// Raise data from cache if we have any documents or we are offline
}},{key:"zs",value:function zs(t){// We don't need to handle includeDocumentMetadataChanges here because
// the Metadata only changes have already been stripped out if needed.
// At this point the only changes we will see are the ones we should
// propagate.
if(t.docChanges.length>0)return!0;var e=this.Gs&&this.Gs.hasPendingWrites!==t.hasPendingWrites;return!(!t.Wt&&!e)&&!0===this.options.includeMetadataChanges;// Generally we should have hit one of the cases above, but it's possible
// to get here if there were only metadata docChanges and they got
// stripped out.
}},{key:"Ys",value:function Ys(t){t=Ht.Kt(t.query,t.docs,t.Qt,t.fromCache),this.Ks=!0,this.js.next(t);}}]);return Zs;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */var ti=/*#__PURE__*/function(){function ti(t){_classCallCheck(this,ti);this.uid=t;}_createClass(ti,[{key:"Xs",value:function Xs(){return null!=this.uid;}/**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */},{key:"Zs",value:function Zs(){return this.Xs()?"uid:"+this.uid:"anonymous-user";}},{key:"isEqual",value:function isEqual(t){return t.uid===this.uid;}}]);return ti;}();/** A user with a null UID. */ti.UNAUTHENTICATED=new ti(null),// TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
ti.ti=new ti("google-credentials-uid"),ti.ei=new ti("first-party-uid");/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */var ei=/*#__PURE__*/function(){function ei(t,e){var _this41=this;_classCallCheck(this,ei);this.previousValue=t,e&&(e.ni=function(t){return _this41.si(t);},this.ii=function(t){return e.ri(t);});}_createClass(ei,[{key:"si",value:function si(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue;}},{key:"next",value:function next(){var t=++this.previousValue;return this.ii&&this.ii(t),t;}}]);return ei;}();ei.oi=-1;/** Assembles the key for a client state in WebStorage */function ni(t,e){return"firestore_clients_".concat(t,"_").concat(e);}// The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.
/** Assembles the key for a mutation batch in WebStorage */function si(t,e,n){var s="firestore_mutations_".concat(t,"_").concat(n);return e.Xs()&&(s+="_"+e.uid),s;}// The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>
/** Assembles the key for a query state in WebStorage */function ii(t,e){return"firestore_targets_".concat(t,"_").concat(e);}// The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>
/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */ // Visible for testing
var ri=/*#__PURE__*/function(){function ri(t,e,n,s){_classCallCheck(this,ri);this.user=t,this.batchId=e,this.state=n,this.error=s;}/**
     * Parses a MutationMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */_createClass(ri,[{key:"ci",value:function ci(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t);}}],[{key:"ai",value:function ai(t,e,n){var s=JSON.parse(n);var i="object"==_typeof(s)&&-1!==["pending","acknowledged","rejected"].indexOf(s.state)&&(void 0===s.error||"object"==_typeof(s.error)),r=void 0;return i&&s.error&&(i="string"==typeof s.error.message&&"string"==typeof s.error.code,i&&(r=new I(s.error.code,s.error.message))),i?new ri(t,e,s.state,r):(P("SharedClientState","Failed to parse mutation state for ID '".concat(e,"': ").concat(n)),null);}}]);return ri;}();/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */ // Visible for testing
var oi=/*#__PURE__*/function(){function oi(t,e,n){_classCallCheck(this,oi);this.targetId=t,this.state=e,this.error=n;}/**
     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */_createClass(oi,[{key:"ci",value:function ci(){var t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t);}}],[{key:"ai",value:function ai(t,e){var n=JSON.parse(e);var s="object"==_typeof(n)&&-1!==["not-current","current","rejected"].indexOf(n.state)&&(void 0===n.error||"object"==_typeof(n.error)),i=void 0;return s&&n.error&&(s="string"==typeof n.error.message&&"string"==typeof n.error.code,s&&(i=new I(n.error.code,n.error.message))),s?new oi(t,n.state,i):(P("SharedClientState","Failed to parse target state for ID '".concat(t,"': ").concat(e)),null);}}]);return oi;}();/**
 * This class represents the immutable ClientState for a client read from
 * WebStorage, containing the list of active query targets.
 */var _ai=/*#__PURE__*/function(){function ai(t,e){_classCallCheck(this,ai);this.clientId=t,this.activeTargetIds=e;}/**
     * Parses a RemoteClientState from the JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */_createClass(ai,null,[{key:"ai",value:function ai(t,e){var n=JSON.parse(e);var s="object"==_typeof(n)&&n.activeTargetIds instanceof Array,i=Kt();for(var _t34=0;s&&_t34<n.activeTargetIds.length;++_t34){s=It(n.activeTargetIds[_t34]),i=i.add(n.activeTargetIds[_t34]);}return s?new _ai(t,i):(P("SharedClientState","Failed to parse client data for instance '".concat(t,"': ").concat(e)),null);}}]);return ai;}();/**
 * This class represents the online state for all clients participating in
 * multi-tab. The online state is only written to by the primary client, and
 * used in secondary clients to update their query views.
 */var ci=/*#__PURE__*/function(){function ci(t,e){_classCallCheck(this,ci);this.clientId=t,this.onlineState=e;}/**
     * Parses a SharedOnlineState from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */_createClass(ci,null,[{key:"ai",value:function ai(t){var e=JSON.parse(t);return"object"==_typeof(e)&&-1!==["Unknown","Online","Offline"].indexOf(e.onlineState)&&"string"==typeof e.clientId?new ci(e.clientId,e.onlineState):(P("SharedClientState","Failed to parse online state: "+t),null);}}]);return ci;}();/**
 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
 * mutable and keeps track of all pending mutations, which allows us to
 * update the range of pending mutation batch IDs as new mutations are added or
 * removed.
 *
 * The data in `LocalClientState` is not read from WebStorage and instead
 * updated via its instance methods. The updated state can be serialized via
 * `toWebStorageJSON()`.
 */ // Visible for testing.
var ui=/*#__PURE__*/function(){function ui(){_classCallCheck(this,ui);this.activeTargetIds=Kt();}_createClass(ui,[{key:"ui",value:function ui(t){this.activeTargetIds=this.activeTargetIds.add(t);}},{key:"hi",value:function hi(t){this.activeTargetIds=this.activeTargetIds["delete"](t);}/**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */},{key:"ci",value:function ci(){var t={activeTargetIds:this.activeTargetIds.A(),updateTimeMs:Date.now()};return JSON.stringify(t);}}]);return ui;}();/**
 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
 * backing store for the SharedClientState. It keeps track of all active
 * clients and supports modifications of the local client's data.
 */var hi=/*#__PURE__*/function(){function hi(t,e,n,s,i){_classCallCheck(this,hi);this.window=t,this._n=e,this.persistenceKey=n,this.li=s,this._i=null,this.fi=null,this.ni=null,this.di=this.wi.bind(this),this.mi=new Nt(rt),this.Ti=!1,/**
         * Captures WebStorage events that occur before `start()` is called. These
         * events are replayed once `WebStorageSharedClientState` is started.
         */this.Ei=[];// Escape the special characters mentioned here:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
var r=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.window.localStorage,this.currentUser=i,this.Ii=ni(this.persistenceKey,this.li),this.Ai=/** Assembles the key for the current sequence number. */function(t){return"firestore_sequence_number_"+t;}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(this.persistenceKey),this.mi=this.mi.rt(this.li,new ui()),this.Ri=new RegExp("^firestore_clients_".concat(r,"_([^_]*)$")),this.gi=new RegExp("^firestore_mutations_".concat(r,"_(\\d+)(?:_(.*))?$")),this.Pi=new RegExp("^firestore_targets_".concat(r,"_(\\d+)$")),this.yi=/** Assembles the key for the online state of the primary tab. */function(t){return"firestore_online_state_"+t;}// The WebStorage key prefix for the key that stores the last sequence number allocated. The key
// looks like 'firestore_sequence_number_<persistence_prefix>'.
(this.persistenceKey),// Rather than adding the storage observer during start(), we add the
// storage observer during initialization. This ensures that we collect
// events before other components populate their initial state (during their
// respective start() calls). Otherwise, we might for example miss a
// mutation that is added after LocalStore's start() processed the existing
// mutations but before we observe WebStorage events.
this.window.addEventListener("storage",this.di);}/** Returns 'true' if WebStorage is available in the current environment. */_createClass(hi,[{key:"start",value:function start(){var _this42=this;var t,_iteratorNormalCompletion27,_didIteratorError27,_iteratorError27,_iterator27,_step27,_e36,_t36,_n32,e,_t35,_iteratorNormalCompletion28,_didIteratorError28,_iteratorError28,_iterator28,_step28,_t37;return regeneratorRuntime.async(function start$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return regeneratorRuntime.awrap(this._i.Vi());case 2:t=_context8.sent;_iteratorNormalCompletion27=true;_didIteratorError27=false;_iteratorError27=undefined;_context8.prev=6;_iterator27=t[Symbol.iterator]();case 8:if(_iteratorNormalCompletion27=(_step27=_iterator27.next()).done){_context8.next=17;break;}_e36=_step27.value;if(!(_e36===this.li)){_context8.next=12;break;}return _context8.abrupt("continue",14);case 12:_t36=this.getItem(ni(this.persistenceKey,_e36));if(_t36){_n32=ai.ai(_e36,_t36);_n32&&(this.mi=this.mi.rt(_n32.clientId,_n32));}case 14:_iteratorNormalCompletion27=true;_context8.next=8;break;case 17:_context8.next=23;break;case 19:_context8.prev=19;_context8.t0=_context8["catch"](6);_didIteratorError27=true;_iteratorError27=_context8.t0;case 23:_context8.prev=23;_context8.prev=24;if(!_iteratorNormalCompletion27&&_iterator27["return"]!=null){_iterator27["return"]();}case 26:_context8.prev=26;if(!_didIteratorError27){_context8.next=29;break;}throw _iteratorError27;case 29:return _context8.finish(26);case 30:return _context8.finish(23);case 31:this.pi();// Check if there is an existing online state and call the callback handler
// if applicable.
e=this.storage.getItem(this.yi);if(e){_t35=this.bi(e);_t35&&this.vi(_t35);}_iteratorNormalCompletion28=true;_didIteratorError28=false;_iteratorError28=undefined;_context8.prev=37;for(_iterator28=this.Ei[Symbol.iterator]();!(_iteratorNormalCompletion28=(_step28=_iterator28.next()).done);_iteratorNormalCompletion28=true){_t37=_step28.value;this.wi(_t37);}_context8.next=45;break;case 41:_context8.prev=41;_context8.t1=_context8["catch"](37);_didIteratorError28=true;_iteratorError28=_context8.t1;case 45:_context8.prev=45;_context8.prev=46;if(!_iteratorNormalCompletion28&&_iterator28["return"]!=null){_iterator28["return"]();}case 48:_context8.prev=48;if(!_didIteratorError28){_context8.next=51;break;}throw _iteratorError28;case 51:return _context8.finish(48);case 52:return _context8.finish(45);case 53:this.Ei=[],// Register a window unload hook to remove the client metadata entry from
// WebStorage even if `shutdown()` was not called.
this.window.addEventListener("unload",function(){return _this42.Si();}),this.Ti=!0;case 54:case"end":return _context8.stop();}}},null,this,[[6,19,23,31],[24,,26,30],[37,41,45,53],[46,,48,52]]);}},{key:"ri",value:function ri(t){this.setItem(this.Ai,JSON.stringify(t));}},{key:"Di",value:function Di(){return this.Ci(this.mi);}},{key:"Ni",value:function Ni(t){var e=!1;return this.mi.forEach(function(n,s){s.activeTargetIds.has(t)&&(e=!0);}),e;}},{key:"Fi",value:function Fi(t){this.$i(t,"pending");}},{key:"xi",value:function xi(t,e,n){this.$i(t,e,n),// Once a final mutation result is observed by other clients, they no longer
// access the mutation's metadata entry. Since WebStorage replays events
// in order, it is safe to delete the entry right after updating it.
this.ki(t);}},{key:"Mi",value:function Mi(t){var e="not-current";// Lookup an existing query state if the target ID was already registered
// by another tab
if(this.Ni(t)){var _n33=this.storage.getItem(ii(this.persistenceKey,t));if(_n33){var _s35=oi.ai(t,_n33);_s35&&(e=_s35.state);}}return this.Oi.ui(t),this.pi(),e;}},{key:"Li",value:function Li(t){this.Oi.hi(t),this.pi();}},{key:"Bi",value:function Bi(t){return this.Oi.activeTargetIds.has(t);}},{key:"qi",value:function qi(t){this.removeItem(ii(this.persistenceKey,t));}},{key:"Ui",value:function Ui(t,e,n){this.Qi(t,e,n);}},{key:"Wi",value:function Wi(t,e,n){var _this43=this;e.forEach(function(t){_this43.ki(t);}),this.currentUser=t,n.forEach(function(t){_this43.Fi(t);});}},{key:"ji",value:function ji(t){this.Ki(t);}},{key:"Si",value:function Si(){this.Ti&&(this.window.removeEventListener("storage",this.di),this.removeItem(this.Ii),this.Ti=!1);}},{key:"getItem",value:function getItem(t){var e=this.storage.getItem(t);return g("SharedClientState","READ",t,e),e;}},{key:"setItem",value:function setItem(t,e){g("SharedClientState","SET",t,e),this.storage.setItem(t,e);}},{key:"removeItem",value:function removeItem(t){g("SharedClientState","REMOVE",t),this.storage.removeItem(t);}},{key:"wi",value:function wi(t){var _this44=this;// Note: The function is typed to take Event to be interface-compatible with
// `Window.addEventListener`.
var e=t;if(e.storageArea===this.storage){if(g("SharedClientState","EVENT",e.key,e.newValue),e.key===this.Ii)return void P("Received WebStorage notification for local change. Another client might have garbage-collected our state");this._n.Ds(function _callee2(){var _t38,_t39,_t40,_t41,_t42,_t43;return regeneratorRuntime.async(function _callee2$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:if(!_this44.Ti){_context9.next=35;break;}if(!(null!==e.key)){_context9.next=33;break;}if(!_this44.Ri.test(e.key)){_context9.next=11;break;}if(!(null==e.newValue)){_context9.next=6;break;}_t38=_this44.Gi(e.key);return _context9.abrupt("return",_this44.zi(_t38,null));case 6:_t39=_this44.Hi(e.key,e.newValue);if(!_t39){_context9.next=9;break;}return _context9.abrupt("return",_this44.zi(_t39.clientId,_t39));case 9:_context9.next=33;break;case 11:if(!_this44.gi.test(e.key)){_context9.next=18;break;}if(!(null!==e.newValue)){_context9.next=16;break;}_t40=_this44.Yi(e.key,e.newValue);if(!_t40){_context9.next=16;break;}return _context9.abrupt("return",_this44.Ji(_t40));case 16:_context9.next=33;break;case 18:if(!_this44.Pi.test(e.key)){_context9.next=25;break;}if(!(null!==e.newValue)){_context9.next=23;break;}_t41=_this44.Xi(e.key,e.newValue);if(!_t41){_context9.next=23;break;}return _context9.abrupt("return",_this44.Zi(_t41));case 23:_context9.next=33;break;case 25:if(!(e.key===_this44.yi)){_context9.next=32;break;}if(!(null!==e.newValue)){_context9.next=30;break;}_t42=_this44.bi(e.newValue);if(!_t42){_context9.next=30;break;}return _context9.abrupt("return",_this44.vi(_t42));case 30:_context9.next=33;break;case 32:if(e.key===_this44.Ai){_t43=function(t){var e=ei.oi;if(null!=t)try{var _n34=JSON.parse(t);b("number"==typeof _n34),e=_n34;}catch(t){P("SharedClientState","Failed to read sequence number from WebStorage",t);}return e;}/**
 * `MemorySharedClientState` is a simple implementation of SharedClientState for
 * clients using memory persistence. The state in this class remains fully
 * isolated and no synchronization is performed.
 */(e.newValue);_t43!==ei.oi&&_this44.ni(_t43);}case 33:_context9.next=36;break;case 35:_this44.Ei.push(e);case 36:case"end":return _context9.stop();}}});});}}},{key:"pi",value:function pi(){this.setItem(this.Ii,this.Oi.ci());}},{key:"$i",value:function $i(t,e,n){var s=new ri(this.currentUser,t,e,n),i=si(this.persistenceKey,this.currentUser,t);this.setItem(i,s.ci());}},{key:"ki",value:function ki(t){var e=si(this.persistenceKey,this.currentUser,t);this.removeItem(e);}},{key:"Ki",value:function Ki(t){var e={clientId:this.li,onlineState:t};this.storage.setItem(this.yi,JSON.stringify(e));}},{key:"Qi",value:function Qi(t,e,n){var s=ii(this.persistenceKey,t),i=new oi(t,e,n);this.setItem(s,i.ci());}/**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */},{key:"Gi",value:function Gi(t){var e=this.Ri.exec(t);return e?e[1]:null;}/**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */},{key:"Hi",value:function Hi(t,e){var n=this.Gi(t);return ai.ai(n,e);}/**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */},{key:"Yi",value:function Yi(t,e){var n=this.gi.exec(t),s=Number(n[1]),i=void 0!==n[2]?n[2]:null;return ri.ai(new ti(i),s,e);}/**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */},{key:"Xi",value:function Xi(t,e){var n=this.Pi.exec(t),s=Number(n[1]);return oi.ai(s,e);}/**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */},{key:"bi",value:function bi(t){return ci.ai(t);}},{key:"Ji",value:function Ji(t){return regeneratorRuntime.async(function Ji$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:if(!(t.user.uid===this.currentUser.uid)){_context10.next=2;break;}return _context10.abrupt("return",this._i.tr(t.batchId,t.state,t.error));case 2:g("SharedClientState","Ignoring mutation for non-active user "+t.user.uid);case 3:case"end":return _context10.stop();}}},null,this);}},{key:"Zi",value:function Zi(t){return this._i.er(t.targetId,t.state,t.error);}},{key:"zi",value:function zi(t,e){var _this45=this;var n=e?this.mi.rt(t,e):this.mi.remove(t),s=this.Ci(this.mi),i=this.Ci(n),r=[],o=[];return i.forEach(function(t){s.has(t)||r.push(t);}),s.forEach(function(t){i.has(t)||o.push(t);}),this._i.nr(r,o).then(function(){_this45.mi=n;});}},{key:"vi",value:function vi(t){// We check whether the client that wrote this online state is still active
// by comparing its client ID to the list of clients kept active in
// IndexedDb. If a client does not update their IndexedDb client state
// within 5 seconds, it is considered inactive and we don't emit an online
// state event.
this.mi.get(t.clientId)&&this.fi(t.onlineState);}},{key:"Ci",value:function Ci(t){var e=Kt();return t.forEach(function(t,n){e=e.xt(n.activeTargetIds);}),e;}},{key:"Oi",get:function get(){return this.mi.get(this.li);}}],[{key:"On",value:function On(t){return!(!t||!t.localStorage);}}]);return hi;}();var li=/*#__PURE__*/function(){function li(){_classCallCheck(this,li);this.sr=new ui(),this.ir={},this.fi=null,this.ni=null;}_createClass(li,[{key:"Fi",value:function Fi(t){// No op.
}},{key:"xi",value:function xi(t,e,n){// No op.
}},{key:"Mi",value:function Mi(t){return this.sr.ui(t),this.ir[t]||"not-current";}},{key:"Ui",value:function Ui(t,e,n){this.ir[t]=e;}},{key:"Li",value:function Li(t){this.sr.hi(t);}},{key:"Bi",value:function Bi(t){return this.sr.activeTargetIds.has(t);}},{key:"qi",value:function qi(t){delete this.ir[t];}},{key:"Di",value:function Di(){return this.sr.activeTargetIds;}},{key:"Ni",value:function Ni(t){return this.sr.activeTargetIds.has(t);}},{key:"start",value:function start(){return this.sr=new ui(),Promise.resolve();}},{key:"Wi",value:function Wi(t,e,n){// No op.
}},{key:"ji",value:function ji(t){// No op.
}},{key:"Si",value:function Si(){}},{key:"ri",value:function ri(t){}}]);return li;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A batch of mutations that will be sent as one unit to the backend.
 */var _i=/*#__PURE__*/function(){/**
     * @param batchId The unique ID of this mutation batch.
     * @param localWriteTime The original write time of this mutation.
     * @param baseMutations Mutations that are used to populate the base
     * values when this mutation is applied locally. This can be used to locally
     * overwrite values that are persisted in the remote document cache. Base
     * mutations are never sent to the backend.
     * @param mutations The user-provided mutations in this mutation batch.
     * User-provided mutations are applied both locally and remotely on the
     * backend.
     */function _i(t,e,n,s){_classCallCheck(this,_i);this.batchId=t,this.rr=e,this.baseMutations=n,this.mutations=s;}/**
     * Applies all the mutations in this MutationBatch to the specified document
     * to create a new remote document
     *
     * @param docKey The key of the document to apply mutations to.
     * @param maybeDoc The document to apply mutations to.
     * @param batchResult The result of applying the MutationBatch to the
     * backend.
     */_createClass(_i,[{key:"ar",value:function ar(t,e,n){var s=n.cr;for(var _n35=0;_n35<this.mutations.length;_n35++){var _i24=this.mutations[_n35];if(_i24.key.isEqual(t)){e=vn(_i24,e,s[_n35]);}}return e;}/**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param docKey The key of the document to apply mutations to.
     * @param maybeDoc The document to apply mutations to.
     */},{key:"ur",value:function ur(t,e){// First, apply the base state. This allows us to apply non-idempotent
// transform against a consistent set of values.
var _iteratorNormalCompletion29=true;var _didIteratorError29=false;var _iteratorError29=undefined;try{for(var _iterator29=this.baseMutations[Symbol.iterator](),_step29;!(_iteratorNormalCompletion29=(_step29=_iterator29.next()).done);_iteratorNormalCompletion29=true){var _n36=_step29.value;_n36.key.isEqual(t)&&(e=Sn(_n36,e,e,this.rr));}}catch(err){_didIteratorError29=true;_iteratorError29=err;}finally{try{if(!_iteratorNormalCompletion29&&_iterator29["return"]!=null){_iterator29["return"]();}}finally{if(_didIteratorError29){throw _iteratorError29;}}}var n=e;// Second, apply all user-provided mutations.
var _iteratorNormalCompletion30=true;var _didIteratorError30=false;var _iteratorError30=undefined;try{for(var _iterator30=this.mutations[Symbol.iterator](),_step30;!(_iteratorNormalCompletion30=(_step30=_iterator30.next()).done);_iteratorNormalCompletion30=true){var _s36=_step30.value;_s36.key.isEqual(t)&&(e=Sn(_s36,e,n,this.rr));}}catch(err){_didIteratorError30=true;_iteratorError30=err;}finally{try{if(!_iteratorNormalCompletion30&&_iterator30["return"]!=null){_iterator30["return"]();}}finally{if(_didIteratorError30){throw _iteratorError30;}}}return e;}/**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */},{key:"hr",value:function hr(t){var _this46=this;// TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
// directly (as done in `applyToLocalView()`), we can reduce the complexity
// to O(n).
var e=t;return this.mutations.forEach(function(n){var s=_this46.ur(n.key,t.get(n.key));s&&(e=e.rt(n.key,s));}),e;}},{key:"keys",value:function keys(){return this.mutations.reduce(function(t,e){return t.add(e.key);},Wt());}},{key:"isEqual",value:function isEqual(t){return this.batchId===t.batchId&&ot(this.mutations,t.mutations,function(t,e){return Cn(t,e);})&&ot(this.baseMutations,t.baseMutations,function(t,e){return Cn(t,e);});}}]);return _i;}();/** The result of applying a mutation batch to the backend. */var fi=/*#__PURE__*/function(){function fi(t,e,n,/**
     * A pre-computed mapping from each mutated document to the resulting
     * version.
     */s){_classCallCheck(this,fi);this.batch=t,this.lr=e,this.cr=n,this._r=s;}/**
     * Creates a new MutationBatchResult for the given batch and results. There
     * must be one result for each mutation in the batch. This static factory
     * caches a document=>version mapping (docVersions).
     */_createClass(fi,null,[{key:"from",value:function from(t,e,n){b(t.mutations.length===n.length);var s=Ut;var i=t.mutations;for(var _t44=0;_t44<i.length;_t44++){s=s.rt(i[_t44].key,n[_t44].version);}return new fi(t,e,n,s);}}]);return fi;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */var di=/*#__PURE__*/function(){function di(){_classCallCheck(this,di);// A mapping of document key to the new cache entry that should be written (or null if any
// existing cache entry should be removed).
this.dr=new dt(function(t){return t.toString();},function(t,e){return t.isEqual(e);}),this.wr=!1;}_createClass(di,[{key:"Tr",/**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */value:function Tr(t,e){this.Er(),this.readTime=e,this.dr.set(t.key,t);}/**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */},{key:"Ir",value:function Ir(t,e){this.Er(),e&&(this.readTime=e),this.dr.set(t,null);}/**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction The transaction in which to perform any persistence
     *     operations.
     * @param documentKey The key of the entry to look up.
     * @return The cached Document or NoDocument entry, or null if we have nothing
     * cached.
     */},{key:"Ar",value:function Ar(t,e){this.Er();var n=this.dr.get(e);return void 0!==n?Cs.resolve(n):this.Rr(t,e);}/**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys The keys of the entries to look up.
     * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
     *     entry cannot be found, the corresponding key will be mapped to a null
     *     value.
     */},{key:"getEntries",value:function getEntries(t,e){return this.gr(t,e);}/**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */},{key:"apply",value:function apply(t){return this.Er(),this.wr=!0,this.Pr(t);}/** Helper to assert this.changes is not null  */},{key:"Er",value:function Er(){}},{key:"readTime",set:function set(t){this.mr=t;},get:function get(){return this.mr;}}]);return di;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var wi="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";/**
 * A base class representing a persistence transaction, encapsulating both the
 * transaction's sequence numbers as well as a list of onCommitted listeners.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */var mi=/*#__PURE__*/function(){function mi(){_classCallCheck(this,mi);this.yr=[];}_createClass(mi,[{key:"Vr",value:function Vr(t){this.yr.push(t);}},{key:"pr",value:function pr(){this.yr.forEach(function(t){return t();});}}]);return mi;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */var Ti=/*#__PURE__*/function(){function Ti(t,e,n){_classCallCheck(this,Ti);this.br=t,this.vr=e,this.Sr=n;}/**
     * Get the local view of the document identified by `key`.
     *
     * @return Local view of the document or null if we don't have any cached
     * state for it.
     */_createClass(Ti,[{key:"Dr",value:function Dr(t,e){var _this47=this;return this.vr.Cr(t,e).next(function(n){return _this47.Nr(t,e,n);});}/** Internal version of `getDocument` that allows reusing batches. */},{key:"Nr",value:function Nr(t,e,n){return this.br.Ar(t,e).next(function(t){var _iteratorNormalCompletion31=true;var _didIteratorError31=false;var _iteratorError31=undefined;try{for(var _iterator31=n[Symbol.iterator](),_step31;!(_iteratorNormalCompletion31=(_step31=_iterator31.next()).done);_iteratorNormalCompletion31=true){var _s37=_step31.value;t=_s37.ur(e,t);}}catch(err){_didIteratorError31=true;_iteratorError31=err;}finally{try{if(!_iteratorNormalCompletion31&&_iterator31["return"]!=null){_iterator31["return"]();}}finally{if(_didIteratorError31){throw _iteratorError31;}}}return t;});}// Returns the view of the given `docs` as they would appear after applying
// all mutations in the given `batches`.
},{key:"Fr",value:function Fr(t,e,n){var s=Lt();return e.forEach(function(t,e){var _iteratorNormalCompletion32=true;var _didIteratorError32=false;var _iteratorError32=undefined;try{for(var _iterator32=n[Symbol.iterator](),_step32;!(_iteratorNormalCompletion32=(_step32=_iterator32.next()).done);_iteratorNormalCompletion32=true){var _s38=_step32.value;e=_s38.ur(t,e);}}catch(err){_didIteratorError32=true;_iteratorError32=err;}finally{try{if(!_iteratorNormalCompletion32&&_iterator32["return"]!=null){_iterator32["return"]();}}finally{if(_didIteratorError32){throw _iteratorError32;}}}s=s.rt(t,e);}),s;}/**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */},{key:"$r",value:function $r(t,e){var _this48=this;return this.br.getEntries(t,e).next(function(e){return _this48.kr(t,e);});}/**
     * Similar to `getDocuments`, but creates the local view from the given
     * `baseDocs` without retrieving documents from the local store.
     */},{key:"kr",value:function kr(t,e){var _this49=this;return this.vr.Mr(t,e).next(function(n){var s=_this49.Fr(t,e,n);var i=Ot();return s.forEach(function(t,e){// TODO(http://b/32275378): Don't conflate missing / deleted.
e||(e=new Kn(t,mt.min())),i=i.rt(t,e);}),i;});}/**
     * Performs a query against the local view of all documents.
     *
     * @param transaction The persistence transaction.
     * @param query The query to match documents against.
     * @param sinceReadTime If not set to SnapshotVersion.min(), return only
     *     documents that have been read since this snapshot version (exclusive).
     */},{key:"Or",value:function Or(t,e,n){/**
 * Returns whether the query matches a single document by path (rather than a
 * collection).
 */return function(t){return k.F(t.path)&&null===t.collectionGroup&&0===t.filters.length;}(e)?this.Lr(t,e.path):es(e)?this.Br(t,e,n):this.qr(t,e,n);}},{key:"Lr",value:function Lr(t,e){// Just do a simple document lookup.
return this.Dr(t,new k(e)).next(function(t){var e=qt();return t instanceof jn&&(e=e.rt(t.key,t)),e;});}},{key:"Br",value:function Br(t,e,n){var _this50=this;var s=e.collectionGroup;var i=qt();return this.Sr.Ur(t,s).next(function(r){return Cs.forEach(r,function(r){var o=function(t,e){return new zn(e,/*collectionGroup=*/null,t.rn.slice(),t.filters.slice(),t.limit,t.on,t.startAt,t.endAt);}/**
 * Returns true if this query does not specify any query constraints that
 * could remove results.
 */(e,r.child(s));return _this50.qr(t,o,n).next(function(t){t.forEach(function(t,e){i=i.rt(t,e);});});}).next(function(){return i;});});}},{key:"qr",value:function qr(t,e,n){var _this51=this;// Query the remote documents and overlay mutations.
var s,i;return this.br.Or(t,e,n).next(function(n){return s=n,_this51.vr.Qr(t,e);}).next(function(e){return i=e,_this51.Wr(t,i,s).next(function(t){s=t;var _iteratorNormalCompletion33=true;var _didIteratorError33=false;var _iteratorError33=undefined;try{for(var _iterator33=i[Symbol.iterator](),_step33;!(_iteratorNormalCompletion33=(_step33=_iterator33.next()).done);_iteratorNormalCompletion33=true){var _t45=_step33.value;var _iteratorNormalCompletion34=true;var _didIteratorError34=false;var _iteratorError34=undefined;try{for(var _iterator34=_t45.mutations[Symbol.iterator](),_step34;!(_iteratorNormalCompletion34=(_step34=_iterator34.next()).done);_iteratorNormalCompletion34=true){var _e37=_step34.value;var _n37=_e37.key,_i25=s.get(_n37),_r12=Sn(_e37,_i25,_i25,_t45.rr);s=_r12 instanceof jn?s.rt(_n37,_r12):s.remove(_n37);}}catch(err){_didIteratorError34=true;_iteratorError34=err;}finally{try{if(!_iteratorNormalCompletion34&&_iterator34["return"]!=null){_iterator34["return"]();}}finally{if(_didIteratorError34){throw _iteratorError34;}}}}}catch(err){_didIteratorError33=true;_iteratorError33=err;}finally{try{if(!_iteratorNormalCompletion33&&_iterator33["return"]!=null){_iterator33["return"]();}}finally{if(_didIteratorError33){throw _iteratorError33;}}}});}).next(function(){return(// Finally, filter out any documents that don't actually match
// the query.
s.forEach(function(t,n){hs(e,n)||(s=s.remove(t));}),s);});}},{key:"Wr",value:function Wr(t,e,n){var s=Wt();var _iteratorNormalCompletion35=true;var _didIteratorError35=false;var _iteratorError35=undefined;try{for(var _iterator35=e[Symbol.iterator](),_step35;!(_iteratorNormalCompletion35=(_step35=_iterator35.next()).done);_iteratorNormalCompletion35=true){var _t46=_step35.value;var _iteratorNormalCompletion36=true;var _didIteratorError36=false;var _iteratorError36=undefined;try{for(var _iterator36=_t46.mutations[Symbol.iterator](),_step36;!(_iteratorNormalCompletion36=(_step36=_iterator36.next()).done);_iteratorNormalCompletion36=true){var _e38=_step36.value;_e38 instanceof $n&&null===n.get(_e38.key)&&(s=s.add(_e38.key));}}catch(err){_didIteratorError36=true;_iteratorError36=err;}finally{try{if(!_iteratorNormalCompletion36&&_iterator36["return"]!=null){_iterator36["return"]();}}finally{if(_didIteratorError36){throw _iteratorError36;}}}}}catch(err){_didIteratorError35=true;_iteratorError35=err;}finally{try{if(!_iteratorNormalCompletion35&&_iterator35["return"]!=null){_iterator35["return"]();}}finally{if(_didIteratorError35){throw _iteratorError35;}}}var i=n;return this.br.getEntries(t,s).next(function(t){return t.forEach(function(t,e){null!==e&&e instanceof jn&&(i=i.rt(t,e));}),i;});}}]);return Ti;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A set of changes to what documents are currently in view and out of view for
 * a given query. These changes are sent to the LocalStore by the View (via
 * the SyncEngine) and are used to pin / unpin documents as appropriate.
 */var Ei=/*#__PURE__*/function(){function Ei(t,e,n,s){_classCallCheck(this,Ei);this.targetId=t,this.fromCache=e,this.jr=n,this.Kr=s;}_createClass(Ei,null,[{key:"Gr",value:function Gr(t,e){var n=Wt(),s=Wt();var _iteratorNormalCompletion37=true;var _didIteratorError37=false;var _iteratorError37=undefined;try{for(var _iterator37=e.docChanges[Symbol.iterator](),_step37;!(_iteratorNormalCompletion37=(_step37=_iterator37.next()).done);_iteratorNormalCompletion37=true){var _t47=_step37.value;switch(_t47.type){case 0/* Added */:n=n.add(_t47.doc.key);break;case 1/* Removed */:s=s.add(_t47.doc.key);// do nothing
}}}catch(err){_didIteratorError37=true;_iteratorError37=err;}finally{try{if(!_iteratorNormalCompletion37&&_iterator37["return"]!=null){_iterator37["return"]();}}finally{if(_didIteratorError37){throw _iteratorError37;}}}return new Ei(t,e.fromCache,n,s);}}]);return Ei;}();/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function Ii(_ref2,_ref3){var _ref4=_slicedToArray(_ref2,2),t=_ref4[0],e=_ref4[1];var _ref5=_slicedToArray(_ref3,2),n=_ref5[0],s=_ref5[1];var i=rt(t,n);return 0===i?rt(e,s):i;}/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */var Ai=/*#__PURE__*/function(){function Ai(t){_classCallCheck(this,Ai);this.zr=t,this.buffer=new xt(Ii),this.Hr=0;}_createClass(Ai,[{key:"Yr",value:function Yr(){return++this.Hr;}},{key:"Jr",value:function Jr(t){var e=[t,this.Yr()];if(this.buffer.size<this.zr)this.buffer=this.buffer.add(e);else{var _t48=this.buffer.last();Ii(e,_t48)<0&&(this.buffer=this.buffer["delete"](_t48).add(e));}}},{key:"maxValue",get:function get(){// Guaranteed to be non-empty. If we decide we are not collecting any
// sequence numbers, nthSequenceNumber below short-circuits. If we have
// decided that we are collecting n sequence numbers, it's because n is some
// percentage of the existing sequence numbers. That means we should never
// be in a situation where we are collecting sequence numbers but don't
// actually have any.
return this.buffer.last()[0];}}]);return Ai;}();var Ri={Xr:!1,Zr:0,eo:0,no:0};var gi=/*#__PURE__*/function(){function gi(// When we attempt to collect, we will only do so if the cache size is greater than this
// threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
t,// The percentage of sequence numbers that we will attempt to collect
e,// A cap on the total number of sequence numbers that will be collected. This prevents
// us from collecting a huge number of sequence numbers if the cache has grown very large.
n){_classCallCheck(this,gi);this.so=t,this.io=e,this.ro=n;}_createClass(gi,null,[{key:"oo",value:function oo(t){return new gi(t,gi.ao,gi.co);}}]);return gi;}();gi.uo=-1,gi.ho=1048576,gi.lo=41943040,gi.ao=10,gi.co=1e3,gi._o=new gi(gi.lo,gi.ao,gi.co),gi.fo=new gi(gi.uo,0,0);/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */var Pi=/*#__PURE__*/function(){function Pi(t,e){_classCallCheck(this,Pi);this["do"]=t,this.os=e,this.wo=!1,this.mo=null;}_createClass(Pi,[{key:"start",value:function start(t){this["do"].params.so!==gi.uo&&this.To(t);}},{key:"stop",value:function stop(){this.mo&&(this.mo.cancel(),this.mo=null);}},{key:"To",value:function To(t){var _this52=this;var e=this.wo?3e5:6e4;g("LruGarbageCollector","Garbage collection scheduled in ".concat(e,"ms")),this.mo=this.os.Pn("lru_garbage_collection"/* LruGarbageCollection */,e,function _callee3(){return regeneratorRuntime.async(function _callee3$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:_this52.mo=null,_this52.wo=!0;_context11.prev=1;_context11.next=4;return regeneratorRuntime.awrap(t.Eo(_this52["do"]));case 4:_context11.next=14;break;case 6:_context11.prev=6;_context11.t0=_context11["catch"](1);if(!xs(_context11.t0)){_context11.next=12;break;}g("LruGarbageCollector","Ignoring IndexedDB error during garbage collection: ",_context11.t0);_context11.next=14;break;case 12:_context11.next=14;return regeneratorRuntime.awrap(Lr(_context11.t0));case 14:_context11.next=16;return regeneratorRuntime.awrap(_this52.To(t));case 16:case"end":return _context11.stop();}}},null,null,[[1,6]]);});}},{key:"Ti",get:function get(){return null!==this.mo;}}]);return Pi;}();/** Implements the steps for LRU garbage collection. */var yi=/*#__PURE__*/function(){function yi(t,e){_classCallCheck(this,yi);this.Io=t,this.params=e;}/** Given a percentile of target to collect, returns the number of targets to collect. */_createClass(yi,[{key:"Ao",value:function Ao(t,e){return this.Io.Ro(t).next(function(t){return Math.floor(e/100*t);});}/** Returns the nth sequence number, counting in order from the smallest. */},{key:"Po",value:function Po(t,e){var _this53=this;if(0===e)return Cs.resolve(ei.oi);var n=new Ai(e);return this.Io.De(t,function(t){return n.Jr(t.sequenceNumber);}).next(function(){return _this53.Io.yo(t,function(t){return n.Jr(t);});}).next(function(){return n.maxValue;});}/**
     * Removes targets with a sequence number equal to or less than the given upper bound, and removes
     * document associations with those targets.
     */},{key:"Vo",value:function Vo(t,e,n){return this.Io.Vo(t,e,n);}/**
     * Removes documents that have a sequence number equal to or less than the upper bound and are not
     * otherwise pinned.
     */},{key:"po",value:function po(t,e){return this.Io.po(t,e);}},{key:"bo",value:function bo(t,e){var _this54=this;return this.params.so===gi.uo?(g("LruGarbageCollector","Garbage collection skipped; disabled"),Cs.resolve(Ri)):this.vo(t).next(function(n){return n<_this54.params.so?(g("LruGarbageCollector","Garbage collection skipped; Cache size ".concat(n," is lower than threshold ")+_this54.params.so),Ri):_this54.So(t,e);});}},{key:"vo",value:function vo(t){return this.Io.vo(t);}},{key:"So",value:function So(t,e){var _this55=this;var n,s,i,r,o,a,c;var u=Date.now();return this.Ao(t,this.params.io).next(function(e){return(// Cap at the configured max
e>_this55.params.ro?(g("LruGarbageCollector","Capping sequence numbers to collect down to the maximum of ".concat(_this55.params.ro," from ")+e),s=_this55.params.ro):s=e,r=Date.now(),_this55.Po(t,s));}).next(function(s){return n=s,o=Date.now(),_this55.Vo(t,n,e);}).next(function(e){return i=e,a=Date.now(),_this55.po(t,n);}).next(function(t){if(c=Date.now(),R()<=_logger.LogLevel.DEBUG){g("LruGarbageCollector","LRU Garbage Collection\n\tCounted targets in ".concat(r-u,"ms\n\tDetermined least recently used ").concat(s," in ")+(o-r)+"ms\n"+"\tRemoved ".concat(i," targets in ")+(a-o)+"ms\n"+"\tRemoved ".concat(t," documents in ")+(c-a)+"ms\n"+"Total Duration: ".concat(c-u,"ms"));}return Cs.resolve({Xr:!0,Zr:s,eo:i,no:t});});}}]);return yi;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */function Vi(t){var e="";for(var _n38=0;_n38<t.length;_n38++){e.length>0&&(e=bi(e)),e=pi(t.get(_n38),e);}return bi(e);}/** Encodes a single segment of a resource path into the given result */function pi(t,e){var n=e;var s=t.length;for(var _e39=0;_e39<s;_e39++){var _s39=t.charAt(_e39);switch(_s39){case"\0":n+="";break;case"":n+="";break;default:n+=_s39;}}return n;}/** Encodes a path separator into the given result */function bi(t){return t+"";}/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */function vi(t){// Event the empty path must encode as a path of at least length 2. A path
// with exactly 2 must be the empty path.
var e=t.length;if(b(e>=2),2===e)return b(""===t.charAt(0)&&""===t.charAt(1)),F.P();// Escape characters cannot exist past the second-to-last position in the
// source value.
var n=e-2,s=[];var i="";for(var _r13=0;_r13<e;){// The last two characters of a valid encoded path must be a separator, so
// there must be an end to this segment.
var _e40=t.indexOf("",_r13);(_e40<0||_e40>n)&&p();switch(t.charAt(_e40+1)){case"":var _n39=t.substring(_r13,_e40);var _o9=void 0;0===i.length?// Avoid copying for the common case of a segment that excludes \0
// and \001
_o9=_n39:(i+=_n39,_o9=i,i=""),s.push(_o9);break;case"":i+=t.substring(_r13,_e40),i+="\0";break;case"":// The escape character can be used in the output to encode itself.
i+=t.substring(_r13,_e40+1);break;default:p();}_r13=_e40+2;}return new F(s);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Serializer for values stored in the LocalStore. */var Si=function Si(t){_classCallCheck(this,Si);this.Do=t;};/** Decodes a remote document from storage locally to a Document. */function Di(t,e){if(e.document)return function(t,e,n){var s=Me(t,e.name),i=Fe(e.updateTime),r=new qn({mapValue:{fields:e.fields}});return new jn(s,i,r,{hasCommittedMutations:!!n});}(t.Do,e.document,!!e.hasCommittedMutations);if(e.noDocument){var _t49=k.$(e.noDocument.path),_n40=xi(e.noDocument.readTime);return new Kn(_t49,_n40,{hasCommittedMutations:!!e.hasCommittedMutations});}if(e.unknownDocument){var _t50=k.$(e.unknownDocument.path),_n41=xi(e.unknownDocument.version);return new Gn(_t50,_n41);}return p();}/** Encodes a document for storage locally. */function Ci(t,e,n){var s=Ni(n),i=e.key.path.h().A();if(e instanceof jn){var _n42=function(t,e){return{name:ke(t,e.key),fields:e.sn().mapValue.fields,updateTime:De(t,e.version.X())};}(t.Do,e),_r14=e.hasCommittedMutations;return new or(/* unknownDocument= */null,/* noDocument= */null,_n42,_r14,s,i);}if(e instanceof Kn){var _t51=e.key.path.A(),_n43=$i(e.version),_r15=e.hasCommittedMutations;return new or(/* unknownDocument= */null,new ir(_t51,_n43),/* document= */null,_r15,s,i);}if(e instanceof Gn){var _t52=e.key.path.A(),_n44=$i(e.version);return new or(new rr(_t52,_n44),/* noDocument= */null,/* document= */null,/* hasCommittedMutations= */!0,s,i);}return p();}function Ni(t){var e=t.X();return[e.seconds,e.nanoseconds];}function Fi(t){var e=new wt(t[0],t[1]);return mt.Y(e);}function $i(t){var e=t.X();return new Zi(e.seconds,e.nanoseconds);}function xi(t){var e=new wt(t.seconds,t.nanoseconds);return mt.Y(e);}/** Encodes a batch of mutations into a DbMutationBatch for local storage. */ /** Decodes a DbMutationBatch into a MutationBatch */function ki(t,e){var n=(e.baseMutations||[]).map(function(e){return Ke(t.Do,e);}),s=e.mutations.map(function(e){return Ke(t.Do,e);}),i=wt.fromMillis(e.localWriteTimeMs);return new _i(e.batchId,i,n,s);}/** Decodes a DbTarget into TargetData */function Mi(t){var e=xi(t.readTime),n=void 0!==t.lastLimboFreeSnapshotVersion?xi(t.lastLimboFreeSnapshotVersion):mt.min();var s;var i;return void 0!==t.query.documents?(b(1===(i=t.query).documents.length),s=ss(Yn(Le(i.documents[0])))):s=Ye(t.query),new pt(s,t.targetId,0/* Listen */,t.lastListenSequenceNumber,e,n,ct.fromBase64String(t.resumeToken));}/** Encodes TargetData into a DbTarget for storage locally. */function Oi(t,e){var n=$i(e.et),s=$i(e.lastLimboFreeSnapshotVersion);var i;i=Vt(e.target)?ze(t.Do,e.target):He(t.Do,e.target);// We can't store the resumeToken as a ByteString in IndexedDb, so we
// convert it to a base64 string for storage.
var r=e.resumeToken.toBase64();// lastListenSequenceNumber is always 0 until we do real GC.
return new cr(e.targetId,gt(e.target),n,r,e.sequenceNumber,s,i);}/**
 * A helper function for figuring out what kind of query has been stored.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A mutation queue for a specific user, backed by IndexedDB. */var Li=/*#__PURE__*/function(){function Li(/**
     * The normalized userId (e.g. null UID => "" userId) used to store /
     * retrieve mutations.
     */t,e,n,s){_classCallCheck(this,Li);this.userId=t,this.serializer=e,this.Sr=n,this.Co=s,/**
         * Caches the document keys for pending mutation batches. If the mutation
         * has been removed from IndexedDb, the cached value may continue to
         * be used to retrieve the batch's document keys. To remove a cached value
         * locally, `removeCachedMutationKeys()` should be invoked either directly
         * or through `removeMutationBatches()`.
         *
         * With multi-tab, when the primary client acknowledges or rejects a mutation,
         * this cache is used by secondary clients to invalidate the local
         * view of the documents that were previously affected by the mutation.
         */ // PORTING NOTE: Multi-tab only.
this.No={};}/**
     * Creates a new mutation queue for the given user.
     * @param user The user for which to create a mutation queue.
     * @param serializer The serializer to use when persisting to IndexedDb.
     */_createClass(Li,[{key:"$o",value:function $o(t){var e=!0;var n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return Ui(t).ss({index:nr.userMutationsIndex,range:n},function(t,n,s){e=!1,s.done();}).next(function(){return e;});}},{key:"xo",value:function xo(t,e,n,s){var _this56=this;var i=Qi(t),r=Ui(t);// The IndexedDb implementation in Chrome (and Firefox) does not handle
// compound indices that include auto-generated keys correctly. To ensure
// that the index entry is added correctly in all browsers, we perform two
// writes: The first write is used to retrieve the next auto-generated Batch
// ID, and the second write populates the index and stores the actual
// mutation batch.
// See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
// We write an empty object to obtain key
// eslint-disable-next-line @typescript-eslint/no-explicit-any
return r.add({}).next(function(o){b("number"==typeof o);var a=new _i(o,e,n,s),c=function(t,e,n){var s=n.baseMutations.map(function(e){return je(t.Do,e);}),i=n.mutations.map(function(e){return je(t.Do,e);});return new nr(e,n.batchId,n.rr.toMillis(),s,i);}(_this56.serializer,_this56.userId,a),u=[];var h=new xt(function(t,e){return rt(t.R(),e.R());});var _iteratorNormalCompletion38=true;var _didIteratorError38=false;var _iteratorError38=undefined;try{for(var _iterator38=s[Symbol.iterator](),_step38;!(_iteratorNormalCompletion38=(_step38=_iterator38.next()).done);_iteratorNormalCompletion38=true){var _t53=_step38.value;var _e41=sr.key(_this56.userId,_t53.key.path,o);h=h.add(_t53.key.path.h()),u.push(r.put(c)),u.push(i.put(_e41,sr.PLACEHOLDER));}}catch(err){_didIteratorError38=true;_iteratorError38=err;}finally{try{if(!_iteratorNormalCompletion38&&_iterator38["return"]!=null){_iterator38["return"]();}}finally{if(_didIteratorError38){throw _iteratorError38;}}}return h.forEach(function(e){u.push(_this56.Sr.ko(t,e));}),t.Vr(function(){_this56.No[o]=a.keys();}),Cs.$n(u).next(function(){return a;});});}},{key:"Mo",value:function Mo(t,e){var _this57=this;return Ui(t).get(e).next(function(t){return t?(b(t.userId===_this57.userId),ki(_this57.serializer,t)):null;});}/**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */ // PORTING NOTE: Multi-tab only.
},{key:"Oo",value:function Oo(t,e){var _this58=this;return this.No[e]?Cs.resolve(this.No[e]):this.Mo(t,e).next(function(t){if(t){var _n45=t.keys();return _this58.No[e]=_n45,_n45;}return null;});}},{key:"Lo",value:function Lo(t,e){var _this59=this;var n=e+1,s=IDBKeyRange.lowerBound([this.userId,n]);var i=null;return Ui(t).ss({index:nr.userMutationsIndex,range:s},function(t,e,s){e.userId===_this59.userId&&(b(e.batchId>=n),i=ki(_this59.serializer,e)),s.done();}).next(function(){return i;});}},{key:"Bo",value:function Bo(t){var e=IDBKeyRange.upperBound([this.userId,Number.POSITIVE_INFINITY]);var n=-1;return Ui(t).ss({index:nr.userMutationsIndex,range:e,reverse:!0},function(t,e,s){n=e.batchId,s.done();}).next(function(){return n;});}},{key:"qo",value:function qo(t){var _this60=this;var e=IDBKeyRange.bound([this.userId,-1],[this.userId,Number.POSITIVE_INFINITY]);return Ui(t).Zn(nr.userMutationsIndex,e).next(function(t){return t.map(function(t){return ki(_this60.serializer,t);});});}},{key:"Cr",value:function Cr(t,e){var _this61=this;// Scan the document-mutation index starting with a prefix starting with
// the given documentKey.
var n=sr.prefixForPath(this.userId,e.path),s=IDBKeyRange.lowerBound(n),i=[];return Qi(t).ss({range:s},function(n,s,r){var _n46=_slicedToArray(n,3),o=_n46[0],a=_n46[1],c=_n46[2],u=vi(a);// Only consider rows matching exactly the specific key of
// interest. Note that because we order by path first, and we
// order terminators before path separators, we'll encounter all
// the index rows for documentKey contiguously. In particular, all
// the rows for documentKey will occur before any rows for
// documents nested in a subcollection beneath documentKey so we
// can stop as soon as we hit any such row.
if(o===_this61.userId&&e.path.isEqual(u))// Look up the mutation batch in the store.
return Ui(t).get(c).next(function(t){if(!t)throw p();b(t.userId===_this61.userId),i.push(ki(_this61.serializer,t));});r.done();}).next(function(){return i;});}},{key:"Mr",value:function Mr(t,e){var _this62=this;var n=new xt(rt);var s=[];return e.forEach(function(e){var i=sr.prefixForPath(_this62.userId,e.path),r=IDBKeyRange.lowerBound(i),o=Qi(t).ss({range:r},function(t,s,i){var _t54=_slicedToArray(t,3),r=_t54[0],o=_t54[1],a=_t54[2],c=vi(o);// Only consider rows matching exactly the specific key of
// interest. Note that because we order by path first, and we
// order terminators before path separators, we'll encounter all
// the index rows for documentKey contiguously. In particular, all
// the rows for documentKey will occur before any rows for
// documents nested in a subcollection beneath documentKey so we
// can stop as soon as we hit any such row.
r===_this62.userId&&e.path.isEqual(c)?n=n.add(a):i.done();});s.push(o);}),Cs.$n(s).next(function(){return _this62.Uo(t,n);});}},{key:"Qr",value:function Qr(t,e){var _this63=this;var n=e.path,s=n.length+1,i=sr.prefixForPath(this.userId,n),r=IDBKeyRange.lowerBound(i);// Collect up unique batchIDs encountered during a scan of the index. Use a
// SortedSet to accumulate batch IDs so they can be traversed in order in a
// scan of the main table.
var o=new xt(rt);return Qi(t).ss({range:r},function(t,e,i){var _t55=_slicedToArray(t,3),r=_t55[0],a=_t55[1],c=_t55[2],u=vi(a);r===_this63.userId&&n.T(u)?// Rows with document keys more than one segment longer than the
// query path can't be matches. For example, a query on 'rooms'
// can't match the document /rooms/abc/messages/xyx.
// TODO(mcg): we'll need a different scanner when we implement
// ancestor queries.
u.length===s&&(o=o.add(c)):i.done();}).next(function(){return _this63.Uo(t,o);});}},{key:"Uo",value:function Uo(t,e){var _this64=this;var n=[],s=[];// TODO(rockwood): Implement this using iterate.
return e.forEach(function(e){s.push(Ui(t).get(e).next(function(t){if(null===t)throw p();b(t.userId===_this64.userId),n.push(ki(_this64.serializer,t));}));}),Cs.$n(s).next(function(){return n;});}},{key:"Qo",value:function Qo(t,e){var _this65=this;return qi(t.Wo,this.userId,e).next(function(n){return t.Vr(function(){_this65.jo(e.batchId);}),Cs.forEach(n,function(e){return _this65.Co.Ko(t,e);});});}/**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */ // PORTING NOTE: Multi-tab only
},{key:"jo",value:function jo(t){delete this.No[t];}},{key:"Go",value:function Go(t){var _this66=this;return this.$o(t).next(function(e){if(!e)return Cs.resolve();// Verify that there are no entries in the documentMutations index if
// the queue is empty.
var n=IDBKeyRange.lowerBound(sr.prefixForUser(_this66.userId)),s=[];return Qi(t).ss({range:n},function(t,e,n){if(t[0]===_this66.userId){var _e42=vi(t[1]);s.push(_e42);}else n.done();}).next(function(){b(0===s.length);});});}},{key:"zo",value:function zo(t,e){return Bi(t,this.userId,e);}// PORTING NOTE: Multi-tab only (state is held in memory in other clients).
/** Returns the mutation queue's metadata from IndexedDb. */},{key:"Ho",value:function Ho(t){var _this67=this;return Wi(t).get(this.userId).next(function(t){return t||new er(_this67.userId,-1,/*lastStreamToken=*/"");});}}],[{key:"Fo",value:function Fo(t,e,n,s){// TODO(mcg): Figure out what constraints there are on userIDs
// In particular, are there any reserved characters? are empty ids allowed?
// For the moment store these together in the same mutations table assuming
// that empty userIDs aren't allowed.
b(""!==t.uid);var i=t.Xs()?t.uid:"";return new Li(i,e,n,s);}}]);return Li;}();/**
 * @return true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */function Bi(t,e,n){var s=sr.prefixForPath(e,n.path),i=s[1],r=IDBKeyRange.lowerBound(s);var o=!1;return Qi(t).ss({range:r,ns:!0},function(t,n,s){var _t56=_slicedToArray(t,3),r=_t56[0],a=_t56[1],/*batchID*/c=_t56[2];r===e&&a===i&&(o=!0),s.done();}).next(function(){return o;});}/** Returns true if any mutation queue contains the given document. */ /**
 * Delete a mutation batch and the associated document mutations.
 * @return A PersistencePromise of the document mutations that were removed.
 */function qi(t,e,n){var s=t.store(nr.store),i=t.store(sr.store),r=[],o=IDBKeyRange.only(n.batchId);var a=0;var c=s.ss({range:o},function(t,e,n){return a++,n["delete"]();});r.push(c.next(function(){b(1===a);}));var u=[];var _iteratorNormalCompletion39=true;var _didIteratorError39=false;var _iteratorError39=undefined;try{for(var _iterator39=n.mutations[Symbol.iterator](),_step39;!(_iteratorNormalCompletion39=(_step39=_iterator39.next()).done);_iteratorNormalCompletion39=true){var _t57=_step39.value;var _s40=sr.key(e,_t57.key.path,n.batchId);r.push(i["delete"](_s40)),u.push(_t57.key);}}catch(err){_didIteratorError39=true;_iteratorError39=err;}finally{try{if(!_iteratorNormalCompletion39&&_iterator39["return"]!=null){_iterator39["return"]();}}finally{if(_didIteratorError39){throw _iteratorError39;}}}return Cs.$n(r).next(function(){return u;});}/**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */function Ui(t){return yr.Un(t,nr.store);}/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */function Qi(t){return yr.Un(t,sr.store);}/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */function Wi(t){return yr.Un(t,er.store);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ji=/*#__PURE__*/function(){/**
     * @param {LocalSerializer} serializer The document serializer.
     * @param {IndexManager} indexManager The query indexes that need to be maintained.
     */function ji(t,e){_classCallCheck(this,ji);this.serializer=t,this.Sr=e;}/**
     * Adds the supplied entries to the cache.
     *
     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */_createClass(ji,[{key:"Tr",value:function Tr(t,e,n){return Gi(t).put(zi(e),n);}/**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */},{key:"Ir",value:function Ir(t,e){var n=Gi(t),s=zi(e);return n["delete"](s);}/**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */},{key:"updateMetadata",value:function updateMetadata(t,e){var _this68=this;return this.getMetadata(t).next(function(n){return n.byteSize+=e,_this68.Yo(t,n);});}},{key:"Ar",value:function Ar(t,e){var _this69=this;return Gi(t).get(zi(e)).next(function(t){return _this69.Jo(t);});}/**
     * Looks up an entry in the cache.
     *
     * @param documentKey The key of the entry to look up.
     * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
     */},{key:"Xo",value:function Xo(t,e){var _this70=this;return Gi(t).get(zi(e)).next(function(t){var e=_this70.Jo(t);return e?{Zo:e,size:Hi(t)}:null;});}},{key:"getEntries",value:function getEntries(t,e){var _this71=this;var n=Lt();return this.ta(t,e,function(t,e){var s=_this71.Jo(e);n=n.rt(t,s);}).next(function(){return n;});}/**
     * Looks up several entries in the cache.
     *
     * @param documentKeys The set of keys entries to look up.
     * @return A map of MaybeDocuments indexed by key (if a document cannot be
     *     found, the key will be mapped to null) and a map of sizes indexed by
     *     key (zero if the key cannot be found).
     */},{key:"ea",value:function ea(t,e){var _this72=this;var n=Lt(),s=new Nt(k.i);return this.ta(t,e,function(t,e){var i=_this72.Jo(e);i?(n=n.rt(t,i),s=s.rt(t,Hi(e))):(n=n.rt(t,null),s=s.rt(t,0));}).next(function(){return{na:n,sa:s};});}},{key:"ta",value:function ta(t,e,n){if(e.m())return Cs.resolve();var s=IDBKeyRange.bound(e.first().path.A(),e.last().path.A()),i=e.lt();var r=i.Et();return Gi(t).ss({range:s},function(t,e,s){var o=k.$(t);// Go through keys not found in cache.
for(;r&&k.i(r,o)<0;){n(r,null),r=i.Et();}r&&r.isEqual(o)&&(// Key found in cache.
n(r,e),r=i.It()?i.Et():null),// Skip to the next key (if there is one).
r?s.Jn(r.path.A()):s.done();}).next(function(){// The rest of the keys are not in the cache. One case where `iterate`
// above won't go through them is when the cache is empty.
for(;r;){n(r,null),r=i.It()?i.Et():null;}});}},{key:"Or",value:function Or(t,e,n){var _this73=this;var s=qt();var i=e.path.length+1,r={};if(n.isEqual(mt.min())){// Documents are ordered by key, so we can use a prefix scan to narrow
// down the documents we need to match the query against.
var _t58=e.path.A();r.range=IDBKeyRange.lowerBound(_t58);}else{// Execute an index-free query and filter by read time. This is safe
// since all document changes to queries that have a
// lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
var _t59=e.path.A(),_s41=Ni(n);r.range=IDBKeyRange.lowerBound([_t59,_s41],/* open= */!0),r.index=or.collectionReadTimeIndex;}return Gi(t).ss(r,function(t,n,r){// The query is actually returning any path that starts with the query
// path prefix which may include documents in subcollections. For
// example, a query on 'rooms' will return rooms/abc/messages/xyx but we
// shouldn't match it. Fix this by discarding rows with document keys
// more than one segment longer than the query path.
if(t.length!==i)return;var o=Di(_this73.serializer,n);e.path.T(o.key.path)?o instanceof jn&&hs(e,o)&&(s=s.rt(o.key,o)):r.done();}).next(function(){return s;});}/**
     * Returns the set of documents that have changed since the specified read
     * time.
     */ // PORTING NOTE: This is only used for multi-tab synchronization.
},{key:"ia",value:function ia(t,e){var _this74=this;var n=Ot(),s=Ni(e);var i=Gi(t),r=IDBKeyRange.lowerBound(s,!0);return i.ss({index:or.readTimeIndex,range:r},function(t,e){// Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
// the documents directly since we want to keep sentinel deletes.
var i=Di(_this74.serializer,e);n=n.rt(i.key,i),s=e.readTime;}).next(function(){return{ra:n,readTime:Fi(s)};});}/**
     * Returns the read time of the most recently read document in the cache, or
     * SnapshotVersion.min() if not available.
     */ // PORTING NOTE: This is only used for multi-tab synchronization.
},{key:"oa",value:function oa(t){var e=Gi(t);// If there are no existing entries, we return SnapshotVersion.min().
var n=mt.min();return e.ss({index:or.readTimeIndex,reverse:!0},function(t,e,s){e.readTime&&(n=Fi(e.readTime)),s.done();}).next(function(){return n;});}},{key:"aa",value:function aa(t){return new ji.ca(this,!!t&&t.ua);}},{key:"ha",value:function ha(t){return this.getMetadata(t).next(function(t){return t.byteSize;});}},{key:"getMetadata",value:function getMetadata(t){return Ki(t).get(ar.key).next(function(t){return b(!!t),t;});}},{key:"Yo",value:function Yo(t,e){return Ki(t).put(ar.key,e);}/**
     * Decodes `remoteDoc` and returns the document (or null, if the document
     * corresponds to the format used for sentinel deletes).
     */},{key:"Jo",value:function Jo(t){if(t){var _e43=Di(this.serializer,t);return _e43 instanceof Kn&&_e43.version.isEqual(mt.min())?null:_e43;}return null;}}]);return ji;}();/**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
 *
 * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
 * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
 * when we apply the changes.
 */function Ki(t){return yr.Un(t,ar.store);}/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */function Gi(t){return yr.Un(t,or.store);}function zi(t){return t.path.A();}/**
 * Retrusn an approximate size for the given document.
 */function Hi(t){var e;if(t.document)e=t.document;else if(t.unknownDocument)e=t.unknownDocument;else{if(!t.noDocument)throw p();e=t.noDocument;}return JSON.stringify(e).length;}/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory implementation of IndexManager.
 */ji.ca=/*#__PURE__*/function(_di){_inherits(_class3,_di);/**
     * @param documentCache The IndexedDbRemoteDocumentCache to apply the changes to.
     * @param trackRemovals Whether to create sentinel deletes that can be tracked by
     * `getNewDocumentChanges()`.
     */function _class3(t,e){var _this75;_classCallCheck(this,_class3);_this75=_possibleConstructorReturn(this,_getPrototypeOf(_class3).call(this)),_this75.la=t,_this75.ua=e,// A map of document sizes prior to applying the changes in this buffer.
_this75._a=new dt(function(t){return t.toString();},function(t,e){return t.isEqual(e);});return _this75;}_createClass(_class3,[{key:"Pr",value:function Pr(t){var _this76=this;var e=[];var n=0,s=new xt(function(t,e){return rt(t.R(),e.R());});return this.dr.forEach(function(i,r){var o=_this76._a.get(i);if(r){var _a6=Ci(_this76.la.serializer,r,_this76.readTime);s=s.add(i.path.h());var _c3=Hi(_a6);n+=_c3-o,e.push(_this76.la.Tr(t,i,_a6));}else if(n-=o,_this76.ua){// In order to track removals, we store a "sentinel delete" in the
// RemoteDocumentCache. This entry is represented by a NoDocument
// with a version of 0 and ignored by `maybeDecodeDocument()` but
// preserved in `getNewDocumentChanges()`.
var _n47=Ci(_this76.la.serializer,new Kn(i,mt.min()),_this76.readTime);e.push(_this76.la.Tr(t,i,_n47));}else e.push(_this76.la.Ir(t,i));}),s.forEach(function(n){e.push(_this76.la.Sr.ko(t,n));}),e.push(this.la.updateMetadata(t,n)),Cs.$n(e);}},{key:"Rr",value:function Rr(t,e){var _this77=this;// Record the size of everything we load from the cache so we can compute a delta later.
return this.la.Xo(t,e).next(function(t){return null===t?(_this77._a.set(e,0),null):(_this77._a.set(e,t.size),t.Zo);});}},{key:"gr",value:function gr(t,e){var _this78=this;// Record the size of everything we load from the cache so we can compute
// a delta later.
return this.la.ea(t,e).next(function(_ref6){var t=_ref6.na,e=_ref6.sa;return(// Note: `getAllFromCache` returns two maps instead of a single map from
// keys to `DocumentSizeEntry`s. This is to allow returning the
// `NullableMaybeDocumentMap` directly, without a conversion.
e.forEach(function(t,e){_this78._a.set(t,e);}),t);});}}]);return _class3;}(di);var Yi=/*#__PURE__*/function(){function Yi(){_classCallCheck(this,Yi);this.fa=new Ji();}_createClass(Yi,[{key:"ko",value:function ko(t,e){return this.fa.add(e),Cs.resolve();}},{key:"Ur",value:function Ur(t,e){return Cs.resolve(this.fa.getEntries(e));}}]);return Yi;}();/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */var Ji=/*#__PURE__*/function(){function Ji(){_classCallCheck(this,Ji);this.index={};}// Returns false if the entry already existed.
_createClass(Ji,[{key:"add",value:function add(t){var e=t._(),n=t.h(),s=this.index[e]||new xt(F.i),i=!s.has(n);return this.index[e]=s.add(n),i;}},{key:"has",value:function has(t){var e=t._(),n=t.h(),s=this.index[e];return s&&s.has(n);}},{key:"getEntries",value:function getEntries(t){return(this.index[t]||new xt(F.i)).A();}}]);return Ji;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Schema Version for the Web client:
 * 1.  Initial version including Mutation Queue, Query Cache, and Remote
 *     Document Cache
 * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
 *     longer required because migration 3 unconditionally clears it.
 * 3.  Dropped and re-created Query Cache to deal with cache corruption related
 *     to limbo resolution. Addresses
 *     https://github.com/firebase/firebase-ios-sdk/issues/1548
 * 4.  Multi-Tab Support.
 * 5.  Removal of held write acks.
 * 6.  Create document global for tracking document cache size.
 * 7.  Ensure every cached document has a sentinel row with a sequence number.
 * 8.  Add collection-parent index for Collection Group queries.
 * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
 *     an auto-incrementing ID. This is required for Index-Free queries.
 * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
 */ /** Performs database creation and schema upgrades. */var Xi=/*#__PURE__*/function(){function Xi(t){_classCallCheck(this,Xi);this.serializer=t;}/**
     * Performs database creation and schema upgrades.
     *
     * Note that in production, this method is only ever used to upgrade the schema
     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
     * and local feature development.
     */_createClass(Xi,[{key:"createOrUpgrade",value:function createOrUpgrade(t,e,n,s){var _this79=this;b(n<s&&n>=0&&s<=10);var i=new ks(e);n<1&&s>=1&&(function(t){t.createObjectStore(tr.store);}/**
 * An object to be stored in the 'mutationQueues' store in IndexedDb.
 *
 * Each user gets a single queue of MutationBatches to apply to the server.
 * DbMutationQueue tracks the metadata about the queue.
 */(t),function(t){t.createObjectStore(er.store,{keyPath:er.keyPath});t.createObjectStore(nr.store,{keyPath:nr.keyPath,autoIncrement:!0}).createIndex(nr.userMutationsIndex,nr.userMutationsKeyPath,{unique:!0}),t.createObjectStore(sr.store);}/**
 * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
 * and rewrites all data.
 */(t),_r(t),function(t){t.createObjectStore(or.store);}/**
 * Represents the known absence of a document at a particular version.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */(t));// Migration 2 to populate the targetGlobal object no longer needed since
// migration 3 unconditionally clears it.
var r=Cs.resolve();return n<3&&s>=3&&(// Brand new clients don't need to drop and recreate--only clients that
// potentially have corrupt data.
0!==n&&(!function(t){t.deleteObjectStore(ur.store),t.deleteObjectStore(cr.store),t.deleteObjectStore(hr.store);}(t),_r(t)),r=r.next(function(){return(/**
 * Creates the target global singleton row.
 *
 * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
 */function(t){var e=t.store(hr.store),n=new hr(/*highestTargetId=*/0,/*lastListenSequenceNumber=*/0,mt.min().X(),/*targetCount=*/0);return e.put(hr.key,n);}/**
 * Creates indices on the RemoteDocuments store used for both multi-tab
 * and Index-Free queries.
 */(i));})),n<4&&s>=4&&(0!==n&&(// Schema version 3 uses auto-generated keys to generate globally unique
// mutation batch IDs (this was previously ensured internally by the
// client). To migrate to the new schema, we have to read all mutations
// and write them back out. We preserve the existing batch IDs to guarantee
// consistency with other object stores. Any further mutation batch IDs will
// be auto-generated.
r=r.next(function(){return function(t,e){return e.store(nr.store).Zn().next(function(n){t.deleteObjectStore(nr.store);t.createObjectStore(nr.store,{keyPath:nr.keyPath,autoIncrement:!0}).createIndex(nr.userMutationsIndex,nr.userMutationsKeyPath,{unique:!0});var s=e.store(nr.store),i=n.map(function(t){return s.put(t);});return Cs.$n(i);});}/**
 * An object to be stored in the 'documentMutations' store in IndexedDb.
 *
 * A manually maintained index of all the mutation batches that affect a given
 * document key. The rows in this table are references based on the contents of
 * DbMutationBatch.mutations.
 */(t,i);})),r=r.next(function(){!function(t){t.createObjectStore(fr.store,{keyPath:fr.keyPath});}// Visible for testing
(t);})),n<5&&s>=5&&(r=r.next(function(){return _this79.removeAcknowledgedMutations(i);})),n<6&&s>=6&&(r=r.next(function(){return function(t){t.createObjectStore(ar.store);}/**
 * An object to be stored in the 'targets' store in IndexedDb.
 *
 * This is based on and should be kept in sync with the proto used in the iOS
 * client.
 *
 * Each query the client listens to against the server is tracked on disk so
 * that the query can be efficiently resumed on restart.
 */(t),_this79.addDocumentGlobal(i);})),n<7&&s>=7&&(r=r.next(function(){return _this79.ensureSequenceNumbers(i);})),n<8&&s>=8&&(r=r.next(function(){return _this79.createCollectionParentIndex(t,i);})),n<9&&s>=9&&(r=r.next(function(){// Multi-Tab used to manage its own changelog, but this has been moved
// to the DbRemoteDocument object store itself. Since the previous change
// log only contained transient data, we can drop its object store.
!function(t){t.objectStoreNames.contains("remoteDocumentChanges")&&t.deleteObjectStore("remoteDocumentChanges");}(t),function(t){var e=t.objectStore(or.store);e.createIndex(or.readTimeIndex,or.readTimeIndexPath,{unique:!1}),e.createIndex(or.collectionReadTimeIndex,or.collectionReadTimeIndexPath,{unique:!1});}/**
 * A record of the metadata state of each client.
 *
 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
 * to be ported to iOS or Android.
 */(e);})),n<10&&s>=10&&(r=r.next(function(){return _this79.rewriteCanonicalIds(i);})),r;}},{key:"addDocumentGlobal",value:function addDocumentGlobal(t){var e=0;return t.store(or.store).ss(function(t,n){e+=Hi(n);}).next(function(){var n=new ar(e);return t.store(ar.store).put(ar.key,n);});}},{key:"removeAcknowledgedMutations",value:function removeAcknowledgedMutations(t){var _this80=this;var e=t.store(er.store),n=t.store(nr.store);return e.Zn().next(function(e){return Cs.forEach(e,function(e){var s=IDBKeyRange.bound([e.userId,-1],[e.userId,e.lastAcknowledgedBatchId]);return n.Zn(nr.userMutationsIndex,s).next(function(n){return Cs.forEach(n,function(n){b(n.userId===e.userId);var s=ki(_this80.serializer,n);return qi(t,e.userId,s).next(function(){});});});});});}/**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */},{key:"ensureSequenceNumbers",value:function ensureSequenceNumbers(t){var e=t.store(ur.store),n=t.store(or.store);return t.store(hr.store).get(hr.key).next(function(t){var s=[];return n.ss(function(n,i){var r=new F(n),o=function(t){return[0,Vi(t)];}/**
 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
 */(r);s.push(e.get(o).next(function(n){return n?Cs.resolve():function(n){return e.put(new ur(0,Vi(n),t.highestListenSequenceNumber));}(r);}));}).next(function(){return Cs.$n(s);});});}},{key:"createCollectionParentIndex",value:function createCollectionParentIndex(t,e){// Create the index.
t.createObjectStore(lr.store,{keyPath:lr.keyPath});var n=e.store(lr.store),s=new Ji(),i=function i(t){if(s.add(t)){var _e44=t._(),_s42=t.h();return n.put({collectionId:_e44,parent:Vi(_s42)});}};// Helper to add an index entry iff we haven't already written it.
// Index existing remote documents.
return e.store(or.store).ss({ns:!0},function(t,e){var n=new F(t);return i(n.h());}).next(function(){return e.store(sr.store).ss({ns:!0},function(_ref7,s){var _ref8=_slicedToArray(_ref7,3),t=_ref8[0],e=_ref8[1],n=_ref8[2];var r=vi(e);return i(r.h());});});}},{key:"rewriteCanonicalIds",value:function rewriteCanonicalIds(t){var _this81=this;var e=t.store(cr.store);return e.ss(function(t,n){var s=Mi(n),i=Oi(_this81.serializer,s);return e.put(i);});}}]);return Xi;}();var Zi=function Zi(t,e){_classCallCheck(this,Zi);this.seconds=t,this.nanoseconds=e;};/**
 * A singleton object to be stored in the 'owner' store in IndexedDb.
 *
 * A given database can have a single primary tab assigned at a given time. That
 * tab must validate that it is still holding the primary lease before every
 * operation that requires locked access. The primary tab should regularly
 * write an updated timestamp to this lease to prevent other tabs from
 * "stealing" the primary lease
 */var tr=function tr(t,/** Whether to allow shared access from multiple tabs. */e,n){_classCallCheck(this,tr);this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n;};/**
 * Name of the IndexedDb object store.
 *
 * Note that the name 'owner' is chosen to ensure backwards compatibility with
 * older clients that only supported single locked access to the persistence
 * layer.
 */tr.store="owner",/**
 * The key string used for the single object that exists in the
 * DbPrimaryClient store.
 */tr.key="owner";var er=function er(/**
     * The normalized user ID to which this queue belongs.
     */t,/**
     * An identifier for the highest numbered batch that has been acknowledged
     * by the server. All MutationBatches in this queue with batchIds less
     * than or equal to this value are considered to have been acknowledged by
     * the server.
     *
     * NOTE: this is deprecated and no longer used by the code.
     */e,/**
     * A stream token that was previously sent by the server.
     *
     * See StreamingWriteRequest in datastore.proto for more details about
     * usage.
     *
     * After sending this token, earlier tokens may not be used anymore so
     * only a single stream token is retained.
     *
     * NOTE: this is deprecated and no longer used by the code.
     */n){_classCallCheck(this,er);this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n;};/** Name of the IndexedDb object store.  */er.store="mutationQueues",/** Keys are automatically assigned via the userId property. */er.keyPath="userId";/**
 * An object to be stored in the 'mutations' store in IndexedDb.
 *
 * Represents a batch of user-level mutations intended to be sent to the server
 * in a single write. Each user-level batch gets a separate DbMutationBatch
 * with a new batchId.
 */var nr=function nr(/**
     * The normalized user ID to which this batch belongs.
     */t,/**
     * An identifier for this batch, allocated using an auto-generated key.
     */e,/**
     * The local write time of the batch, stored as milliseconds since the
     * epoch.
     */n,/**
     * A list of "mutations" that represent a partial base state from when this
     * write batch was initially created. During local application of the write
     * batch, these baseMutations are applied prior to the real writes in order
     * to override certain document fields from the remote document cache. This
     * is necessary in the case of non-idempotent writes (e.g. `increment()`
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     *
     * These mutations are never sent to the backend.
     */s,/**
     * A list of mutations to apply. All mutations will be applied atomically.
     *
     * Mutations are serialized via toMutation().
     */i){_classCallCheck(this,nr);this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=s,this.mutations=i;};/** Name of the IndexedDb object store.  */nr.store="mutations",/** Keys are automatically assigned via the userId, batchId properties. */nr.keyPath="batchId",/** The index name for lookup of mutations by user. */nr.userMutationsIndex="userMutationsIndex",/** The user mutations index is keyed by [userId, batchId] pairs. */nr.userMutationsKeyPath=["userId","batchId"];var sr=/*#__PURE__*/function(){function sr(){_classCallCheck(this,sr);}/**
     * Creates a [userId] key for use in the DbDocumentMutations index to iterate
     * over all of a user's document mutations.
     */_createClass(sr,null,[{key:"prefixForUser",value:function prefixForUser(t){return[t];}/**
     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
     * index to iterate over all at document mutations for a given path or lower.
     */},{key:"prefixForPath",value:function prefixForPath(t,e){return[t,Vi(e)];}/**
     * Creates a full index key of [userId, encodedPath, batchId] for inserting
     * and deleting into the DbDocumentMutations index.
     */},{key:"key",value:function key(t,e,n){return[t,Vi(e),n];}}]);return sr;}();sr.store="documentMutations",/**
 * Because we store all the useful information for this store in the key,
 * there is no useful information to store as the value. The raw (unencoded)
 * path cannot be stored because IndexedDb doesn't store prototype
 * information.
 */sr.PLACEHOLDER=new sr();var ir=function ir(t,e){_classCallCheck(this,ir);this.path=t,this.readTime=e;};/**
 * Represents a document that is known to exist but whose data is unknown.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */var rr=function rr(t,e){_classCallCheck(this,rr);this.path=t,this.version=e;};/**
 * An object to be stored in the 'remoteDocuments' store in IndexedDb.
 * It represents either:
 *
 * - A complete document.
 * - A "no document" representing a document that is known not to exist (at
 * some version).
 * - An "unknown document" representing a document that is known to exist (at
 * some version) but whose contents are unknown.
 *
 * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
 * be made more general if necessary.
 */var or=// TODO: We are currently storing full document keys almost three times
// (once as part of the primary key, once - partly - as `parentPath` and once
// inside the encoded documents). During our next migration, we should
// rewrite the primary key as parentPath + document ID which would allow us
// to drop one value.
function or(/**
     * Set to an instance of DbUnknownDocument if the data for a document is
     * not known, but it is known that a document exists at the specified
     * version (e.g. it had a successful update applied to it)
     */t,/**
     * Set to an instance of a DbNoDocument if it is known that no document
     * exists.
     */e,/**
     * Set to an instance of a Document if there's a cached version of the
     * document.
     */n,/**
     * Documents that were written to the remote document store based on
     * a write acknowledgment are marked with `hasCommittedMutations`. These
     * documents are potentially inconsistent with the backend's copy and use
     * the write's commit version as their document version.
     */s,/**
     * When the document was read from the backend. Undefined for data written
     * prior to schema version 9.
     */i,/**
     * The path of the collection this document is part of. Undefined for data
     * written prior to schema version 9.
     */r){_classCallCheck(this,or);this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=s,this.readTime=i,this.parentPath=r;};or.store="remoteDocuments",/**
 * An index that provides access to all entries sorted by read time (which
 * corresponds to the last modification time of each row).
 *
 * This index is used to provide a changelog for Multi-Tab.
 */or.readTimeIndex="readTimeIndex",or.readTimeIndexPath="readTime",/**
 * An index that provides access to documents in a collection sorted by read
 * time.
 *
 * This index is used to allow the RemoteDocumentCache to fetch newly changed
 * documents in a collection.
 */or.collectionReadTimeIndex="collectionReadTimeIndex",or.collectionReadTimeIndexPath=["parentPath","readTime"];/**
 * Contains a single entry that has metadata about the remote document cache.
 */var ar=/**
     * @param byteSize Approximately the total size in bytes of all the documents in the document
     * cache.
     */function ar(t){_classCallCheck(this,ar);this.byteSize=t;};ar.store="remoteDocumentGlobal",ar.key="remoteDocumentGlobalKey";var cr=function cr(/**
     * An auto-generated sequential numeric identifier for the query.
     *
     * Queries are stored using their canonicalId as the key, but these
     * canonicalIds can be quite long so we additionally assign a unique
     * queryId which can be used by referenced data structures (e.g.
     * indexes) to minimize the on-disk cost.
     */t,/**
     * The canonical string representing this query. This is not unique.
     */e,/**
     * The last readTime received from the Watch Service for this query.
     *
     * This is the same value as TargetChange.read_time in the protos.
     */n,/**
     * An opaque, server-assigned token that allows watching a query to be
     * resumed after disconnecting without retransmitting all the data
     * that matches the query. The resume token essentially identifies a
     * point in time from which the server should resume sending results.
     *
     * This is related to the snapshotVersion in that the resumeToken
     * effectively also encodes that value, but the resumeToken is opaque
     * and sometimes encodes additional information.
     *
     * A consequence of this is that the resumeToken should be used when
     * asking the server to reason about where this client is in the watch
     * stream, but the client should use the snapshotVersion for its own
     * purposes.
     *
     * This is the same value as TargetChange.resume_token in the protos.
     */s,/**
     * A sequence number representing the last time this query was
     * listened to, used for garbage collection purposes.
     *
     * Conventionally this would be a timestamp value, but device-local
     * clocks are unreliable and they must be able to create new listens
     * even while disconnected. Instead this should be a monotonically
     * increasing number that's incremented on each listen call.
     *
     * This is different from the queryId since the queryId is an
     * immutable identifier assigned to the Query on first use while
     * lastListenSequenceNumber is updated every time the query is
     * listened to.
     */i,/**
     * Denotes the maximum snapshot version at which the associated query view
     * contained no limbo documents.  Undefined for data written prior to
     * schema version 9.
     */r,/**
     * The query for this target.
     *
     * Because canonical ids are not unique we must store the actual query. We
     * use the proto to have an object we can persist without having to
     * duplicate translation logic to and from a `Query` object.
     */o){_classCallCheck(this,cr);this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=s,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=r,this.query=o;};cr.store="targets",/** Keys are automatically assigned via the targetId property. */cr.keyPath="targetId",/** The name of the queryTargets index. */cr.queryTargetsIndexName="queryTargetsIndex",/**
 * The index of all canonicalIds to the targets that they match. This is not
 * a unique mapping because canonicalId does not promise a unique name for all
 * possible queries, so we append the targetId to make the mapping unique.
 */cr.queryTargetsKeyPath=["canonicalId","targetId"];/**
 * An object representing an association between a target and a document, or a
 * sentinel row marking the last sequence number at which a document was used.
 * Each document cached must have a corresponding sentinel row before lru
 * garbage collection is enabled.
 *
 * The target associations and sentinel rows are co-located so that orphaned
 * documents and their sequence numbers can be identified efficiently via a scan
 * of this store.
 */var ur=function ur(/**
     * The targetId identifying a target or 0 for a sentinel row.
     */t,/**
     * The path to the document, as encoded in the key.
     */e,/**
     * If this is a sentinel row, this should be the sequence number of the last
     * time the document specified by `path` was used. Otherwise, it should be
     * `undefined`.
     */n){_classCallCheck(this,ur);this.targetId=t,this.path=e,this.sequenceNumber=n;};/** Name of the IndexedDb object store.  */ur.store="targetDocuments",/** Keys are automatically assigned via the targetId, path properties. */ur.keyPath=["targetId","path"],/** The index name for the reverse index. */ur.documentTargetsIndex="documentTargetsIndex",/** We also need to create the reverse index for these properties. */ur.documentTargetsKeyPath=["path","targetId"];/**
 * A record of global state tracked across all Targets, tracked separately
 * to avoid the need for extra indexes.
 *
 * This should be kept in-sync with the proto used in the iOS client.
 */var hr=function hr(/**
     * The highest numbered target id across all targets.
     *
     * See DbTarget.targetId.
     */t,/**
     * The highest numbered lastListenSequenceNumber across all targets.
     *
     * See DbTarget.lastListenSequenceNumber.
     */e,/**
     * A global snapshot version representing the last consistent snapshot we
     * received from the backend. This is monotonically increasing and any
     * snapshots received from the backend prior to this version (e.g. for
     * targets resumed with a resumeToken) should be suppressed (buffered)
     * until the backend has caught up to this snapshot version again. This
     * prevents our cache from ever going backwards in time.
     */n,/**
     * The number of targets persisted.
     */s){_classCallCheck(this,hr);this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=s;};/**
 * The key string used for the single object that exists in the
 * DbTargetGlobal store.
 */hr.key="targetGlobalKey",hr.store="targetGlobal";/**
 * An object representing an association between a Collection id (e.g. 'messages')
 * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
 * This is used to efficiently find all collections to query when performing
 * a Collection Group query.
 */var lr=function lr(/**
     * The collectionId (e.g. 'messages')
     */t,/**
     * The path to the parent (either a document location or an empty path for
     * a root-level collection).
     */e){_classCallCheck(this,lr);this.collectionId=t,this.parent=e;};/** Name of the IndexedDb object store. */function _r(t){t.createObjectStore(ur.store,{keyPath:ur.keyPath}).createIndex(ur.documentTargetsIndex,ur.documentTargetsKeyPath,{unique:!0});// NOTE: This is unique only because the TargetId is the suffix.
t.createObjectStore(cr.store,{keyPath:cr.keyPath}).createIndex(cr.queryTargetsIndexName,cr.queryTargetsKeyPath,{unique:!0}),t.createObjectStore(hr.store);}lr.store="collectionParents",/** Keys are automatically assigned via the collectionId, parent properties. */lr.keyPath=["collectionId","parent"];var fr=function fr(// Note: Previous schema versions included a field
// "lastProcessedDocumentChangeId". Don't use anymore.
/** The auto-generated client id assigned at client startup. */t,/** The last time this state was updated. */e,/** Whether the client's network connection is enabled. */n,/** Whether this client is running in a foreground tab. */s){_classCallCheck(this,fr);this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=s;};/** Name of the IndexedDb object store. */fr.store="clientMetadata",/** Keys are automatically assigned via the clientId properties. */fr.keyPath="clientId";var dr=[er.store,nr.store,sr.store,or.store,cr.store,tr.store,hr.store,ur.store].concat([fr.store]).concat([ar.store]).concat([lr.store]);// V2 is no longer usable (see comment at top of file)
// Visible for testing
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A persisted implementation of IndexManager.
 */var wr=/*#__PURE__*/function(){function wr(){_classCallCheck(this,wr);/**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be used to
         * satisfy reads.
         */this.da=new Ji();}/**
     * Adds a new entry to the collection parent index.
     *
     * Repeated calls for the same collectionPath should be avoided within a
     * transaction as IndexedDbIndexManager only caches writes once a transaction
     * has been committed.
     */_createClass(wr,[{key:"ko",value:function ko(t,e){var _this82=this;if(!this.da.has(e)){var _n48=e._(),_s43=e.h();t.Vr(function(){// Add the collection to the in memory cache only if the transaction was
// successfully committed.
_this82.da.add(e);});var _i26={collectionId:_n48,parent:Vi(_s43)};return mr(t).put(_i26);}return Cs.resolve();}},{key:"Ur",value:function Ur(t,e){var n=[],s=IDBKeyRange.bound([e,""],[at(e),""],/*lowerOpen=*/!1,/*upperOpen=*/!0);return mr(t).Zn(s).next(function(t){var _iteratorNormalCompletion40=true;var _didIteratorError40=false;var _iteratorError40=undefined;try{for(var _iterator40=t[Symbol.iterator](),_step40;!(_iteratorNormalCompletion40=(_step40=_iterator40.next()).done);_iteratorNormalCompletion40=true){var _s44=_step40.value;// This collectionId guard shouldn't be necessary (and isn't as long
// as we're running in a real browser), but there's a bug in
// indexeddbshim that breaks our range in our tests running in node:
// https://github.com/axemclion/IndexedDBShim/issues/334
if(_s44.collectionId!==e)break;n.push(vi(_s44.parent));}}catch(err){_didIteratorError40=true;_iteratorError40=err;}finally{try{if(!_iteratorNormalCompletion40&&_iterator40["return"]!=null){_iterator40["return"]();}}finally{if(_didIteratorError40){throw _iteratorError40;}}}return n;});}}]);return wr;}();/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */function mr(t){return yr.Un(t,lr.store);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Offset to ensure non-overlapping target ids. */ /**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the target cache, and one for
 * for the sync engine (to generate limbo documents targets). These
 * generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */var Tr=/*#__PURE__*/function(){function Tr(t){_classCallCheck(this,Tr);this.wa=t;}_createClass(Tr,[{key:"next",value:function next(){return this.wa+=2,this.wa;}}],[{key:"ma",value:function ma(){// The target cache generator must return '2' in its first call to `next()`
// as there is no differentiation in the protocol layer between an unset
// number and the number '0'. If we were to sent a target with target ID
// '0', the backend would consider it unset and replace it with its own ID.
return new Tr(0);}},{key:"Ta",value:function Ta(){// Sync engine assigns target IDs for limbo document detection.
return new Tr(-1);}}]);return Tr;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Er=/*#__PURE__*/function(){function Er(t,e){_classCallCheck(this,Er);this.Co=t,this.serializer=e;}// PORTING NOTE: We don't cache global metadata for the target cache, since
// some of it (in particular `highestTargetId`) can be modified by secondary
// tabs. We could perhaps be more granular (and e.g. still cache
// `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
// to IndexedDb whenever we need to read metadata. We can revisit if it turns
// out to have a meaningful performance impact.
_createClass(Er,[{key:"Ea",value:function Ea(t){var _this83=this;return this.Ia(t).next(function(e){var n=new Tr(e.highestTargetId);return e.highestTargetId=n.next(),_this83.Aa(t,e).next(function(){return e.highestTargetId;});});}},{key:"Ra",value:function Ra(t){return this.Ia(t).next(function(t){return mt.Y(new wt(t.lastRemoteSnapshotVersion.seconds,t.lastRemoteSnapshotVersion.nanoseconds));});}},{key:"ga",value:function ga(t){return this.Ia(t).next(function(t){return t.highestListenSequenceNumber;});}},{key:"Pa",value:function Pa(t,e,n){var _this84=this;return this.Ia(t).next(function(s){return s.highestListenSequenceNumber=e,n&&(s.lastRemoteSnapshotVersion=n.X()),e>s.highestListenSequenceNumber&&(s.highestListenSequenceNumber=e),_this84.Aa(t,s);});}},{key:"ya",value:function ya(t,e){var _this85=this;return this.Va(t,e).next(function(){return _this85.Ia(t).next(function(n){return n.targetCount+=1,_this85.pa(e,n),_this85.Aa(t,n);});});}},{key:"ba",value:function ba(t,e){return this.Va(t,e);}},{key:"va",value:function va(t,e){var _this86=this;return this.Sa(t,e.targetId).next(function(){return Ir(t)["delete"](e.targetId);}).next(function(){return _this86.Ia(t);}).next(function(e){return b(e.targetCount>0),e.targetCount-=1,_this86.Aa(t,e);});}/**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */},{key:"Vo",value:function Vo(t,e,n){var _this87=this;var s=0;var i=[];return Ir(t).ss(function(r,o){var a=Mi(o);a.sequenceNumber<=e&&null===n.get(a.targetId)&&(s++,i.push(_this87.va(t,a)));}).next(function(){return Cs.$n(i);}).next(function(){return s;});}/**
     * Call provided function with each `TargetData` that we have cached.
     */},{key:"De",value:function De(t,e){return Ir(t).ss(function(t,n){var s=Mi(n);e(s);});}},{key:"Ia",value:function Ia(t){return Ar(t).get(hr.key).next(function(t){return b(null!==t),t;});}},{key:"Aa",value:function Aa(t,e){return Ar(t).put(hr.key,e);}},{key:"Va",value:function Va(t,e){return Ir(t).put(Oi(this.serializer,e));}/**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */},{key:"pa",value:function pa(t,e){var n=!1;return t.targetId>e.highestTargetId&&(e.highestTargetId=t.targetId,n=!0),t.sequenceNumber>e.highestListenSequenceNumber&&(e.highestListenSequenceNumber=t.sequenceNumber,n=!0),n;}},{key:"Da",value:function Da(t){return this.Ia(t).next(function(t){return t.targetCount;});}},{key:"Ca",value:function Ca(t,e){// Iterating by the canonicalId may yield more than one result because
// canonicalId values are not required to be unique per target. This query
// depends on the queryTargets index to be efficient.
var n=gt(e),s=IDBKeyRange.bound([n,Number.NEGATIVE_INFINITY],[n,Number.POSITIVE_INFINITY]);var i=null;return Ir(t).ss({range:s,index:cr.queryTargetsIndexName},function(t,n,s){var r=Mi(n);// After finding a potential match, check that the target is
// actually equal to the requested target.
yt(e,r.target)&&(i=r,s.done());}).next(function(){return i;});}},{key:"Na",value:function Na(t,e,n){var _this88=this;// PORTING NOTE: The reverse index (documentsTargets) is maintained by
// IndexedDb.
var s=[],i=Rr(t);return e.forEach(function(e){var r=Vi(e.path);s.push(i.put(new ur(n,r))),s.push(_this88.Co.Fa(t,n,e));}),Cs.$n(s);}},{key:"$a",value:function $a(t,e,n){var _this89=this;// PORTING NOTE: The reverse index (documentsTargets) is maintained by
// IndexedDb.
var s=Rr(t);return Cs.forEach(e,function(e){var i=Vi(e.path);return Cs.$n([s["delete"]([n,i]),_this89.Co.xa(t,n,e)]);});}},{key:"Sa",value:function Sa(t,e){var n=Rr(t),s=IDBKeyRange.bound([e],[e+1],/*lowerOpen=*/!1,/*upperOpen=*/!0);return n["delete"](s);}},{key:"ka",value:function ka(t,e){var n=IDBKeyRange.bound([e],[e+1],/*lowerOpen=*/!1,/*upperOpen=*/!0),s=Rr(t);var i=Wt();return s.ss({range:n,ns:!0},function(t,e,n){var s=vi(t[1]),r=new k(s);i=i.add(r);}).next(function(){return i;});}},{key:"zo",value:function zo(t,e){var n=Vi(e.path),s=IDBKeyRange.bound([n],[at(n)],/*lowerOpen=*/!1,/*upperOpen=*/!0);var i=0;return Rr(t).ss({index:ur.documentTargetsIndex,ns:!0,range:s},function(_ref9,n,s){var _ref10=_slicedToArray(_ref9,2),t=_ref10[0],e=_ref10[1];// Having a sentinel row for a document does not count as containing that document;
// For the target cache, containing the document means the document is part of some
// target.
0!==t&&(i++,s.done());}).next(function(){return i>0;});}/**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId The target ID of the TargetData entry to look up.
     * @return The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */ // PORTING NOTE: Multi-tab only.
},{key:"qe",value:function qe(t,e){return Ir(t).get(e).next(function(t){return t?Mi(t):null;});}}]);return Er;}();/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */function Ir(t){return yr.Un(t,cr.store);}/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */function Ar(t){return yr.Un(t,hr.store);}/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */function Rr(t){return yr.Un(t,ur.store);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var gr="Failed to obtain exclusive access to the persistence layer. To allow shared access, make sure to invoke `enablePersistence()` with `synchronizeTabs:true` in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */var Pr=/*#__PURE__*/function(_mi){_inherits(Pr,_mi);function Pr(t,e){var _this90;_classCallCheck(this,Pr);_this90=_possibleConstructorReturn(this,_getPrototypeOf(Pr).call(this)),_this90.Wo=t,_this90.Ma=e;return _this90;}return Pr;}(mi);/**
 * An IndexedDB-backed instance of Persistence. Data is stored persistently
 * across sessions.
 *
 * On Web only, the Firestore SDKs support shared access to its persistence
 * layer. This allows multiple browser tabs to read and write to IndexedDb and
 * to synchronize state even without network connectivity. Shared access is
 * currently optional and not enabled unless all clients invoke
 * `enablePersistence()` with `{synchronizeTabs:true}`.
 *
 * In multi-tab mode, if multiple clients are active at the same time, the SDK
 * will designate one client as the “primary client”. An effort is made to pick
 * a visible, network-connected and active client, and this client is
 * responsible for letting other clients know about its presence. The primary
 * client writes a unique client-generated identifier (the client ID) to
 * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
 * update this entry, another client can acquire the lease and take over as
 * primary.
 *
 * Some persistence operations in the SDK are designated as primary-client only
 * operations. This includes the acknowledgment of mutations and all updates of
 * remote documents. The effects of these operations are written to persistence
 * and then broadcast to other tabs via LocalStorage (see
 * `WebStorageSharedClientState`), which then refresh their state from
 * persistence.
 *
 * Similarly, the primary client listens to notifications sent by secondary
 * clients to discover persistence changes written by secondary clients, such as
 * the addition of new mutations and query targets.
 *
 * If multi-tab is not enabled and another tab already obtained the primary
 * lease, IndexedDbPersistence enters a failed state and all subsequent
 * operations will automatically fail.
 *
 * Additionally, there is an optimization so that when a tab is closed, the
 * primary lease is released immediately (this is especially important to make
 * sure that a refreshed tab is able to immediately re-acquire the primary
 * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
 * since it is an asynchronous API. So in addition to attempting to give up the
 * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
 * LocalStorage which acts as an indicator that another tab should go ahead and
 * take the primary lease immediately regardless of the current lease timestamp.
 *
 * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
 * longer optional.
 */var yr=/*#__PURE__*/function(){function yr(/**
     * Whether to synchronize the in-memory state of multiple tabs and share
     * access to local persistence.
     */t,e,n,s,i,r,o,a,c,/**
     * If set to true, forcefully obtains database access. Existing tabs will
     * no longer be able to access IndexedDB.
     */u){_classCallCheck(this,yr);if(this.allowTabSynchronization=t,this.persistenceKey=e,this.clientId=n,this._n=i,this.window=r,this.document=o,this.Oa=c,this.La=u,this.Ba=null,this.qa=!1,this.isPrimary=!1,this.networkEnabled=!0,/** Our window.unload handler, if registered. */this.Ua=null,this.inForeground=!1,/** Our 'visibilitychange' listener if registered. */this.Qa=null,/** The client metadata refresh task. */this.Wa=null,/** The last time we garbage collected the client metadata object store. */this.ja=Number.NEGATIVE_INFINITY,/** A listener to notify on primary state changes. */this.Ka=function(t){return Promise.resolve();},!yr.On())throw new I(E.UNIMPLEMENTED,"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");this.Co=new br(this,s),this.Ga=e+"main",this.serializer=new Si(a),this.za=new Ns(this.Ga,10,new Xi(this.serializer)),this.Ha=new Er(this.Co,this.serializer),this.Sr=new wr(),this.br=new ji(this.serializer,this.Sr),this.window&&this.window.localStorage?this.Ya=this.window.localStorage:(this.Ya=null,!1===u&&P("IndexedDbPersistence","LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));}_createClass(yr,[{key:"start",/**
     * Attempt to start IndexedDb persistence.
     *
     * @return {Promise<void>} Whether persistence was enabled.
     */value:function start(){var _this91=this;// NOTE: This is expected to fail sometimes (in the case of another tab
// already having the persistence lock), so it's the first thing we should
// do.
return this.Ja().then(function(){if(!_this91.isPrimary&&!_this91.allowTabSynchronization)// Fail `start()` if `synchronizeTabs` is disabled and we cannot
// obtain the primary lease.
throw new I(E.FAILED_PRECONDITION,gr);return _this91.Xa(),_this91.Za(),_this91.tc(),_this91.runTransaction("getHighestListenSequenceNumber","readonly",function(t){return _this91.Ha.ga(t);});}).then(function(t){_this91.Ba=new ei(t,_this91.Oa);}).then(function(){_this91.qa=!0;})["catch"](function(t){return _this91.za&&_this91.za.close(),Promise.reject(t);});}/**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */},{key:"ec",value:function ec(t){var _this92=this;return this.Ka=function _callee4(e){return regeneratorRuntime.async(function _callee4$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:if(!_this92.Ti){_context12.next=2;break;}return _context12.abrupt("return",t(e));case 2:case"end":return _context12.stop();}}});},t(this.isPrimary);}/**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */},{key:"nc",value:function nc(t){this.za.jn(function _callee5(e){return regeneratorRuntime.async(function _callee5$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:_context13.t0=null===e.newVersion;if(!_context13.t0){_context13.next=4;break;}_context13.next=4;return regeneratorRuntime.awrap(t());case 4:case"end":return _context13.stop();}}});});}/**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */},{key:"sc",value:function sc(t){var _this93=this;this.networkEnabled!==t&&(this.networkEnabled=t,// Schedule a primary lease refresh for immediate execution. The eventual
// lease update will be propagated via `primaryStateListener`.
this._n.ds(function _callee6(){return regeneratorRuntime.async(function _callee6$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:_context14.t0=_this93.Ti;if(!_context14.t0){_context14.next=4;break;}_context14.next=4;return regeneratorRuntime.awrap(_this93.Ja());case 4:case"end":return _context14.stop();}}});}));}/**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */},{key:"Ja",value:function Ja(){var _this94=this;return this.runTransaction("updateClientMetadataAndTryBecomePrimary","readwrite",function(t){return pr(t).put(new fr(_this94.clientId,Date.now(),_this94.networkEnabled,_this94.inForeground)).next(function(){if(_this94.isPrimary)return _this94.ic(t).next(function(t){t||(_this94.isPrimary=!1,_this94._n.Ds(function(){return _this94.Ka(!1);}));});}).next(function(){return _this94.rc(t);}).next(function(e){return _this94.isPrimary&&!e?_this94.oc(t).next(function(){return!1;}):!!e&&_this94.ac(t).next(function(){return!0;});});})["catch"](function(t){if(xs(t))// Proceed with the existing state. Any subsequent access to
// IndexedDB will verify the lease.
return g("IndexedDbPersistence","Failed to extend owner lease: ",t),_this94.isPrimary;if(!_this94.allowTabSynchronization)throw t;return g("IndexedDbPersistence","Releasing owner lease after error during lease refresh",t),/* isPrimary= */!1;}).then(function(t){_this94.isPrimary!==t&&_this94._n.Ds(function(){return _this94.Ka(t);}),_this94.isPrimary=t;});}},{key:"ic",value:function ic(t){var _this95=this;return Vr(t).get(tr.key).next(function(t){return Cs.resolve(_this95.cc(t));});}},{key:"uc",value:function uc(t){return pr(t)["delete"](this.clientId);}/**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */},{key:"hc",value:function hc(){var _this96=this;var t,_iteratorNormalCompletion41,_didIteratorError41,_iteratorError41,_iterator41,_step41,_e45;return regeneratorRuntime.async(function hc$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:if(!(this.isPrimary&&!this.lc(this.ja,18e5))){_context15.next=25;break;}this.ja=Date.now();_context15.next=4;return regeneratorRuntime.awrap(this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",function(t){var e=yr.Un(t,fr.store);return e.Zn().next(function(t){var n=_this96._c(t,18e5),s=t.filter(function(t){return-1===n.indexOf(t);});// Delete metadata for clients that are no longer considered active.
return Cs.forEach(s,function(t){return e["delete"](t.clientId);}).next(function(){return s;});});})["catch"](function(){return[];}));case 4:t=_context15.sent;if(!this.Ya){_context15.next=25;break;}_iteratorNormalCompletion41=true;_didIteratorError41=false;_iteratorError41=undefined;_context15.prev=9;for(_iterator41=t[Symbol.iterator]();!(_iteratorNormalCompletion41=(_step41=_iterator41.next()).done);_iteratorNormalCompletion41=true){_e45=_step41.value;this.Ya.removeItem(this.fc(_e45.clientId));}_context15.next=17;break;case 13:_context15.prev=13;_context15.t0=_context15["catch"](9);_didIteratorError41=true;_iteratorError41=_context15.t0;case 17:_context15.prev=17;_context15.prev=18;if(!_iteratorNormalCompletion41&&_iterator41["return"]!=null){_iterator41["return"]();}case 20:_context15.prev=20;if(!_didIteratorError41){_context15.next=23;break;}throw _iteratorError41;case 23:return _context15.finish(20);case 24:return _context15.finish(17);case 25:case"end":return _context15.stop();}}},null,this,[[9,13,17,25],[18,,20,24]]);}/**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */},{key:"tc",value:function tc(){var _this97=this;this.Wa=this._n.Pn("client_metadata_refresh"/* ClientMetadataRefresh */,4e3,function(){return _this97.Ja().then(function(){return _this97.hc();}).then(function(){return _this97.tc();});});}/** Checks whether `client` is the local client. */},{key:"cc",value:function cc(t){return!!t&&t.ownerId===this.clientId;}/**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */},{key:"rc",value:function rc(t){var _this98=this;if(this.La)return Cs.resolve(!0);return Vr(t).get(tr.key).next(function(e){// A client is eligible for the primary lease if:
// - its network is enabled and the client's tab is in the foreground.
// - its network is enabled and no other client's tab is in the
//   foreground.
// - every clients network is disabled and the client's tab is in the
//   foreground.
// - every clients network is disabled and no other client's tab is in
//   the foreground.
// - the `forceOwningTab` setting was passed in.
if(null!==e&&_this98.lc(e.leaseTimestampMs,5e3)&&!_this98.dc(e.ownerId)){if(_this98.cc(e)&&_this98.networkEnabled)return!0;if(!_this98.cc(e)){if(!e.allowTabSynchronization)// Fail the `canActAsPrimary` check if the current leaseholder has
// not opted into multi-tab synchronization. If this happens at
// client startup, we reject the Promise returned by
// `enablePersistence()` and the user can continue to use Firestore
// with in-memory persistence.
// If this fails during a lease refresh, we will instead block the
// AsyncQueue from executing further operations. Note that this is
// acceptable since mixing & matching different `synchronizeTabs`
// settings is not supported.
// TODO(b/114226234): Remove this check when `synchronizeTabs` can
// no longer be turned off.
throw new I(E.FAILED_PRECONDITION,gr);return!1;}}return!(!_this98.networkEnabled||!_this98.inForeground)||pr(t).Zn().next(function(t){return void 0===_this98._c(t,5e3).find(function(t){if(_this98.clientId!==t.clientId){var _e46=!_this98.networkEnabled&&t.networkEnabled,_n49=!_this98.inForeground&&t.inForeground,_s45=_this98.networkEnabled===t.networkEnabled;if(_e46||_n49&&_s45)return!0;}return!1;});});}).next(function(t){return _this98.isPrimary!==t&&g("IndexedDbPersistence","Client ".concat(t?"is":"is not"," eligible for a primary lease.")),t;});}},{key:"Si",value:function Si(){var _this99=this;return regeneratorRuntime.async(function Si$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:this.qa=!1;this.wc();this.Wa&&(this.Wa.cancel(),this.Wa=null);this.mc();this.Tc();_context16.next=7;return regeneratorRuntime.awrap(this.za.runTransaction("readwrite",[tr.store,fr.store],function(t){var e=new Pr(t,ei.oi);return _this99.oc(e).next(function(){return _this99.uc(e);});}));case 7:this.za.close();// Remove the entry marking the client as zombied from LocalStorage since
// we successfully deleted its metadata from IndexedDb.
this.Ec();case 9:case"end":return _context16.stop();}}},null,this);}/**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */},{key:"_c",value:function _c(t,e){var _this100=this;return t.filter(function(t){return _this100.lc(t.updateTimeMs,e)&&!_this100.dc(t.clientId);});}/**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */},{key:"Vi",value:function Vi(){var _this101=this;return this.runTransaction("getActiveClients","readonly",function(t){return pr(t).Zn().next(function(t){return _this101._c(t,18e5).map(function(t){return t.clientId;});});});}},{key:"Ic",value:function Ic(t){return Li.Fo(t,this.serializer,this.Sr,this.Co);}},{key:"Ac",value:function Ac(){return this.Ha;}},{key:"Rc",value:function Rc(){return this.br;}},{key:"gc",value:function gc(){return this.Sr;}},{key:"runTransaction",value:function runTransaction(t,e,n){var _this102=this;g("IndexedDbPersistence","Starting transaction:",t);var s="readonly"===e?"readonly":"readwrite";var i;// Do all transactions as readwrite against all object stores, since we
// are the only reader/writer.
return this.za.runTransaction(s,dr,function(s){return i=new Pr(s,_this102.Ba?_this102.Ba.next():ei.oi),"readwrite-primary"===e?_this102.ic(i).next(function(t){return!!t||_this102.rc(i);}).next(function(e){if(!e)throw P("Failed to obtain primary lease for action '".concat(t,"'.")),_this102.isPrimary=!1,_this102._n.Ds(function(){return _this102.Ka(!1);}),new I(E.FAILED_PRECONDITION,wi);return n(i);}).next(function(t){return _this102.ac(i).next(function(){return t;});}):_this102.Pc(i).next(function(){return n(i);});}).then(function(t){return i.pr(),t;});}/**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */ // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
// be turned off.
},{key:"Pc",value:function Pc(t){var _this103=this;return Vr(t).get(tr.key).next(function(t){if(null!==t&&_this103.lc(t.leaseTimestampMs,5e3)&&!_this103.dc(t.ownerId)&&!_this103.cc(t)&&!(_this103.La||_this103.allowTabSynchronization&&t.allowTabSynchronization))throw new I(E.FAILED_PRECONDITION,gr);});}/**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */},{key:"ac",value:function ac(t){var e=new tr(this.clientId,this.allowTabSynchronization,Date.now());return Vr(t).put(tr.key,e);}},{key:"oc",/** Checks the primary lease and removes it if we are the current primary. */value:function oc(t){var _this104=this;var e=Vr(t);return e.get(tr.key).next(function(t){return _this104.cc(t)?(g("IndexedDbPersistence","Releasing primary lease."),e["delete"](tr.key)):Cs.resolve();});}/** Verifies that `updateTimeMs` is within `maxAgeMs`. */},{key:"lc",value:function lc(t,e){var n=Date.now();return!(t<n-e)&&(!(t>n)||(P("Detected an update time that is in the future: ".concat(t," > ").concat(n)),!1));}},{key:"Xa",value:function Xa(){var _this105=this;null!==this.document&&"function"==typeof this.document.addEventListener&&(this.Qa=function(){_this105._n.ds(function(){return _this105.inForeground="visible"===_this105.document.visibilityState,_this105.Ja();});},this.document.addEventListener("visibilitychange",this.Qa),this.inForeground="visible"===this.document.visibilityState);}},{key:"mc",value:function mc(){this.Qa&&(this.document.removeEventListener("visibilitychange",this.Qa),this.Qa=null);}/**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */},{key:"Za",value:function Za(){var _this106=this;var t;"function"==typeof(null===(t=this.window)||void 0===t?void 0:t.addEventListener)&&(this.Ua=function(){// Note: In theory, this should be scheduled on the AsyncQueue since it
// accesses internal state. We execute this code directly during shutdown
// to make sure it gets a chance to run.
_this106.wc(),_this106._n.ds(function(){return _this106.Si();});},this.window.addEventListener("unload",this.Ua));}},{key:"Tc",value:function Tc(){this.Ua&&(this.window.removeEventListener("unload",this.Ua),this.Ua=null);}/**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */},{key:"dc",value:function dc(t){var e;try{var _n50=null!==(null===(e=this.Ya)||void 0===e?void 0:e.getItem(this.fc(t)));return g("IndexedDbPersistence","Client '".concat(t,"' ").concat(_n50?"is":"is not"," zombied in LocalStorage")),_n50;}catch(t){// Gracefully handle if LocalStorage isn't working.
return P("IndexedDbPersistence","Failed to get zombied client id.",t),!1;}}/**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */},{key:"wc",value:function wc(){if(this.Ya)try{this.Ya.setItem(this.fc(this.clientId),String(Date.now()));}catch(t){// Gracefully handle if LocalStorage isn't available / working.
P("Failed to set zombie client id.",t);}}/** Removes the zombied client entry if it exists. */},{key:"Ec",value:function Ec(){if(this.Ya)try{this.Ya.removeItem(this.fc(this.clientId));}catch(t){// Ignore
}}},{key:"fc",value:function fc(t){return"firestore_zombie_".concat(this.persistenceKey,"_").concat(t);}},{key:"Ti",get:function get(){return this.qa;}}],[{key:"Un",value:function Un(t,e){if(t instanceof Pr)return Ns.Un(t.Wo,e);throw p();}},{key:"On",value:function On(){return Ns.On();}}]);return yr;}();/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */function Vr(t){return yr.Un(t,tr.store);}/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */function pr(t){return yr.Un(t,fr.store);}/** Provides LRU functionality for IndexedDB persistence. */var br=/*#__PURE__*/function(){function br(t,e){_classCallCheck(this,br);this.db=t,this["do"]=new yi(this,e);}_createClass(br,[{key:"Ro",value:function Ro(t){var e=this.yc(t);return this.db.Ac().Da(t).next(function(t){return e.next(function(e){return t+e;});});}},{key:"yc",value:function yc(t){var e=0;return this.yo(t,function(t){e++;}).next(function(){return e;});}},{key:"De",value:function De(t,e){return this.db.Ac().De(t,e);}},{key:"yo",value:function yo(t,e){return this.Vc(t,function(t,n){return e(n);});}},{key:"Fa",value:function Fa(t,e,n){return vr(t,n);}},{key:"xa",value:function xa(t,e,n){return vr(t,n);}},{key:"Vo",value:function Vo(t,e,n){return this.db.Ac().Vo(t,e,n);}},{key:"Ko",value:function Ko(t,e){return vr(t,e);}/**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */},{key:"bc",value:function bc(t,e){return function(t,e){var n=!1;return Wi(t).rs(function(s){return Bi(t,s,e).next(function(t){return t&&(n=!0),Cs.resolve(!t);});}).next(function(){return n;});}(t,e);}},{key:"po",value:function po(t,e){var _this107=this;var n=this.db.Rc().aa(),s=[];var i=0;return this.Vc(t,function(r,o){if(o<=e){var _e47=_this107.bc(t,r).next(function(e){if(!e)// Our size accounting requires us to read all documents before
// removing them.
return i++,n.Ar(t,r).next(function(){return n.Ir(r),Rr(t)["delete"]([0,Vi(r.path)]);});});s.push(_e47);}}).next(function(){return Cs.$n(s);}).next(function(){return n.apply(t);}).next(function(){return i;});}},{key:"removeTarget",value:function removeTarget(t,e){var n=e.nt(t.Ma);return this.db.Ac().ba(t,n);}},{key:"vc",value:function vc(t,e){return vr(t,e);}/**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */},{key:"Vc",value:function Vc(t,e){var n=Rr(t);var s,i=ei.oi;return n.ss({index:ur.documentTargetsIndex},function(_ref11,_ref12){var _ref13=_slicedToArray(_ref11,2),t=_ref13[0],n=_ref13[1];var r=_ref12.path,o=_ref12.sequenceNumber;0===t?(// if nextToReport is valid, report it, this is a new key so the
// last one must not be a member of any targets.
i!==ei.oi&&e(new k(vi(s)),i),// set nextToReport to be this sequence number. It's the next one we
// might report, if we don't find any targets for this document.
// Note that the sequence number must be defined when the targetId
// is 0.
i=o,s=r):// set nextToReport to be invalid, we know we don't need to report
// this one since we found a target for it.
i=ei.oi;}).next(function(){// Since we report sequence numbers after getting to the next key, we
// need to check if the last key we iterated over was an orphaned
// document and report it.
i!==ei.oi&&e(new k(vi(s)),i);});}},{key:"vo",value:function vo(t){return this.db.Rc().ha(t);}}]);return br;}();function vr(t,e){return Rr(t).put(/**
 * @return A value suitable for writing a sentinel row in the target-document
 * store.
 */function(t,e){return new ur(0,Vi(t.path),e);}(e,t.Ma));}/**
 * Generates a string used as a prefix when storing data in IndexedDB and
 * LocalStorage.
 */function Sr(t,e){// Use two different prefix formats:
//   * firestore / persistenceKey / projectID . databaseID / ...
//   * firestore / persistenceKey / projectID / ...
// projectIDs are DNS-compatible names and cannot contain dots
// so there's no danger of collisions.
var n=t.projectId;return t.W||(n+="."+t.database),"firestore/"+e+"/"+n+"/";}/**
 * Implements `LocalStore` interface.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */var Dr=/*#__PURE__*/function(){function Dr(/** Manages our in-memory or durable persistence. */t,e,n){_classCallCheck(this,Dr);this.persistence=t,this.Sc=e,/**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */this.Dc=new Nt(rt),/** Maps a target to its targetID. */ // TODO(wuandy): Evaluate if TargetId can be part of Target.
this.Cc=new dt(function(t){return gt(t);},yt),/**
         * The read time of the last entry processed by `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */this.Nc=mt.min(),this.vr=t.Ic(n),this.Fc=t.Rc(),this.Ha=t.Ac(),this.$c=new Ti(this.Fc,this.vr,this.persistence.gc()),this.Sc.xc(this.$c);}_createClass(Dr,[{key:"Eo",value:function Eo(t){var _this108=this;return this.persistence.runTransaction("Collect garbage","readwrite-primary",function(e){return t.bo(e,_this108.Dc);});}}]);return Dr;}();/**
 * Acknowledges the given batch.
 *
 * On the happy path when a batch is acknowledged, the local store will
 *
 *  + remove the batch from the mutation queue;
 *  + apply the changes to the remote document cache;
 *  + recalculate the latency compensated view implied by those changes (there
 *    may be mutations in the queue that affect the documents but haven't been
 *    acknowledged yet); and
 *  + give the changed documents back the sync engine
 *
 * @returns The resulting (modified) documents.
 */function Cr(t,e){var n=v(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",function(t){var s=e.batch.keys(),i=n.Fc.aa({ua:!0});return function(t,e,n,s){var i=n.batch,r=i.keys();var o=Cs.resolve();return r.forEach(function(t){o=o.next(function(){return s.Ar(e,t);}).next(function(e){var r=e;var o=n._r.get(t);b(null!==o),(!r||r.version.L(o)<0)&&(r=i.ar(t,r,n),r&&// We use the commitVersion as the readTime rather than the
// document's updateTime since the updateTime is not advanced
// for updates that do not modify the underlying document.
s.Tr(r,n.lr));});}),o.next(function(){return t.vr.Qo(e,i);});}/** Returns the local view of the documents affected by a mutation batch. */ // PORTING NOTE: Multi-Tab only.
(n,t,e,i).next(function(){return i.apply(t);}).next(function(){return n.vr.Go(t);}).next(function(){return n.$c.$r(t,s);});});}/**
 * Removes mutations from the MutationQueue for the specified batch;
 * LocalDocuments will be recalculated.
 *
 * @returns The resulting modified documents.
 */ /**
 * Returns the last consistent snapshot processed (used by the RemoteStore to
 * determine whether to buffer incoming snapshots from the backend).
 */function Nr(t){var e=v(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",function(t){return e.Ha.Ra(t);});}/**
 * Updates the "ground-state" (remote) documents. We assume that the remote
 * event reflects any write batches that have been acknowledged or rejected
 * (i.e. we do not re-apply local mutations to updates from this event).
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */function Fr(t,e){var n=v(t),s=e.et;var i=n.Dc;return n.persistence.runTransaction("Apply remote event","readwrite-primary",function(t){var r=n.Fc.aa({ua:!0});// Reset newTargetDataByTargetMap in case this transaction gets re-run.
i=n.Dc;var o=[];e.Gt.forEach(function(e,r){var a=i.get(r);if(!a)return;// Only update the remote keys if the target is still active. This
// ensures that we can persist the updated target data along with
// the updated assignment.
o.push(n.Ha.$a(t,e.ne,r).next(function(){return n.Ha.Na(t,e.te,r);}));var c=e.resumeToken;// Update the resume token if the change includes one.
if(c.O()>0){var _u2=a.st(c,s).nt(t.Ma);i=i.rt(r,_u2),// Update the target data if there are target changes (or if
// sufficient time has passed since the last update).
/**
 * Returns true if the newTargetData should be persisted during an update of
 * an active target. TargetData should always be persisted when a target is
 * being released and should not call this function.
 *
 * While the target is active, TargetData updates can be omitted when nothing
 * about the target has changed except metadata like the resume token or
 * snapshot version. Occasionally it's worth the extra write to prevent these
 * values from getting too stale after a crash, but this doesn't have to be
 * too frequent.
 */function(t,e,n){// Always persist target data if we don't already have a resume token.
if(b(e.resumeToken.O()>0),0===t.resumeToken.O())return!0;// Don't allow resume token changes to be buffered indefinitely. This
// allows us to be reasonably up-to-date after a crash and avoids needing
// to loop over all active queries on shutdown. Especially in the browser
// we may not get time to do anything interesting while the current tab is
// closing.
if(e.et.J()-t.et.J()>=3e8)return!0;// Otherwise if the only thing that has changed about a target is its resume
// token it's not worth persisting. Note that the RemoteStore keeps an
// in-memory view of the currently active targets which includes the current
// resume token, so stream failure or user changes will still use an
// up-to-date resume token regardless of what we do here.
return n.te.size+n.ee.size+n.ne.size>0;}/**
 * Notifies local store of the changed views to locally pin documents.
 */(a,_u2,e)&&o.push(n.Ha.ba(t,_u2));}});var a=Ot(),c=Wt();// HACK: The only reason we allow a null snapshot version is so that we
// can synthesize remote events when we get permission denied errors while
// trying to resolve the state of a locally cached document that is in
// limbo.
if(e.Ht.forEach(function(t,e){c=c.add(t);}),// Each loop iteration only affects its "own" doc, so it's safe to get all the remote
// documents in advance in a single call.
o.push(r.getEntries(t,c).next(function(i){e.Ht.forEach(function(c,u){var h=i.get(c);// Note: The order of the steps below is important, since we want
// to ensure that rejected limbo resolutions (which fabricate
// NoDocuments with SnapshotVersion.min()) never add documents to
// cache.
u instanceof Kn&&u.version.isEqual(mt.min())?(// NoDocuments with SnapshotVersion.min() are used in manufactured
// events. We remove these documents from cache since we lost
// access.
r.Ir(c,s),a=a.rt(c,u)):null==h||u.version.L(h.version)>0||0===u.version.L(h.version)&&h.hasPendingWrites?(r.Tr(u,s),a=a.rt(c,u)):g("LocalStore","Ignoring outdated watch update for ",c,". Current version:",h.version," Watch version:",u.version),e.Yt.has(c)&&o.push(n.persistence.Co.vc(t,c));});})),!s.isEqual(mt.min())){var _e48=n.Ha.Ra(t).next(function(e){return n.Ha.Pa(t,t.Ma,s);});o.push(_e48);}return Cs.$n(o).next(function(){return r.apply(t);}).next(function(){return n.$c.kr(t,a);});}).then(function(t){return n.Dc=i,t;});}/**
 * Gets the mutation batch after the passed in batchId in the mutation queue
 * or null if empty.
 * @param afterBatchId If provided, the batch to search after.
 * @returns The next mutation or null if there wasn't one.
 */function $r(t,e){var n=v(t);return n.persistence.runTransaction("Get next mutation batch","readonly",function(t){return void 0===e&&(e=-1),n.vr.Lo(t,e);});}/**
 * Reads the current value of a Document with a given key or null if not
 * found - used for testing.
 */ /**
 * Assigns the given target an internal ID so that its results can be pinned so
 * they don't get GC'd. A target must be allocated in the local store before
 * the store can be used to manage its view.
 *
 * Allocating an already allocated `Target` will return the existing `TargetData`
 * for that `Target`.
 */function xr(t,e){var n=v(t);return n.persistence.runTransaction("Allocate target","readwrite",function(t){var s;return n.Ha.Ca(t,e).next(function(i){return i?(// This target has been listened to previously, so reuse the
// previous targetID.
// TODO(mcg): freshen last accessed date?
s=i,Cs.resolve(s)):n.Ha.Ea(t).next(function(i){return s=new pt(e,i,0/* Listen */,t.Ma),n.Ha.ya(t,s).next(function(){return s;});});});}).then(function(t){// If Multi-Tab is enabled, the existing target data may be newer than
// the in-memory data
var s=n.Dc.get(t.targetId);return(null===s||t.et.L(s.et)>0)&&(n.Dc=n.Dc.rt(t.targetId,t),n.Cc.set(e,t.targetId)),t;});}/**
 * Returns the TargetData as seen by the LocalStore, including updates that may
 * have not yet been persisted to the TargetCache.
 */ // Visible for testing.
/**
 * Unpins all the documents associated with the given target. If
 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
 * directly removes the associated target data from the target cache.
 *
 * Releasing a non-existing `Target` is a no-op.
 */ // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
function kr(t,e,n){var s,i,r;return regeneratorRuntime.async(function kr$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:s=v(t),i=s.Dc.get(e),r=n?"readwrite":"readwrite-primary";_context17.prev=1;_context17.t0=n;if(_context17.t0){_context17.next=6;break;}_context17.next=6;return regeneratorRuntime.awrap(s.persistence.runTransaction("Release target",r,function(t){return s.persistence.Co.removeTarget(t,i);}));case 6:_context17.next=13;break;case 8:_context17.prev=8;_context17.t1=_context17["catch"](1);if(xs(_context17.t1)){_context17.next=12;break;}throw _context17.t1;case 12:// All `releaseTarget` does is record the final metadata state for the
// target, but we've been recording this periodically during target
// activity. If we lose this write this could cause a very slight
// difference in the order of target deletion during GC, but we
// don't define exact LRU semantics so this is acceptable.
g("LocalStore","Failed to update sequence numbers for target ".concat(e,": ").concat(_context17.t1));case 13:s.Dc=s.Dc.remove(e),s.Cc["delete"](i.target);case 14:case"end":return _context17.stop();}}},null,null,[[1,8]]);}/**
 * Runs the specified query against the local store and returns the results,
 * potentially taking advantage of query data from previous executions (such
 * as the set of remote keys).
 *
 * @param usePreviousResults Whether results from previous executions can
 * be used to optimize this query execution.
 */function Mr(t,e,n){var s=v(t);var i=mt.min(),r=Wt();return s.persistence.runTransaction("Execute query","readonly",function(t){return function(t,e,n){var s=v(t),i=s.Cc.get(n);return void 0!==i?Cs.resolve(s.Dc.get(i)):s.Ha.Ca(e,n);}(s,t,ss(e)).next(function(e){if(e)return i=e.lastLimboFreeSnapshotVersion,s.Ha.ka(t,e.targetId).next(function(t){r=t;});}).next(function(){return s.Sc.Or(t,e,n?i:mt.min(),n?r:Wt());}).next(function(t){return{documents:t,kc:r};});});}// PORTING NOTE: Multi-Tab only.
function Or(t,e){var n=v(t),s=v(n.Ha),i=n.Dc.get(e);return i?Promise.resolve(i.target):n.persistence.runTransaction("Get target data","readonly",function(t){return s.qe(t,e).next(function(t){return t?t.target:null;});});}/**
 * Returns the set of documents that have been updated since the last call.
 * If this is the first call, returns the set of changes since client
 * initialization. Further invocations will return document that have changed
 * since the prior call.
 */ // PORTING NOTE: Multi-Tab only.
/**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err An error returned by a LocalStore operation.
 * @return A Promise that resolves after we recovered, or the original error.
 */function Lr(t){return regeneratorRuntime.async(function Lr$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:if(!(t.code!==E.FAILED_PRECONDITION||t.message!==wi)){_context18.next=2;break;}throw t;case 2:g("LocalStore","Unexpectedly lost primary lease");case 3:case"end":return _context18.stop();}}});}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */var Br=/*#__PURE__*/function(){function Br(){_classCallCheck(this,Br);// A set of outstanding references to a document sorted by key.
this.Mc=new xt(qr.Oc),// A set of outstanding references to a document sorted by target id.
this.Lc=new xt(qr.Bc);}/** Returns true if the reference set contains no references. */_createClass(Br,[{key:"m",value:function m(){return this.Mc.m();}/** Adds a reference to the given document key for the given ID. */},{key:"Fa",value:function Fa(t,e){var n=new qr(t,e);this.Mc=this.Mc.add(n),this.Lc=this.Lc.add(n);}/** Add references to the given document keys for the given ID. */},{key:"qc",value:function qc(t,e){var _this109=this;t.forEach(function(t){return _this109.Fa(t,e);});}/**
     * Removes a reference to the given document key for the given
     * ID.
     */},{key:"xa",value:function xa(t,e){this.Uc(new qr(t,e));}},{key:"Qc",value:function Qc(t,e){var _this110=this;t.forEach(function(t){return _this110.xa(t,e);});}/**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */},{key:"Wc",value:function Wc(t){var _this111=this;var e=new k(new F([])),n=new qr(e,t),s=new qr(e,t+1),i=[];return this.Lc.Nt([n,s],function(t){_this111.Uc(t),i.push(t.key);}),i;}},{key:"jc",value:function jc(){var _this112=this;this.Mc.forEach(function(t){return _this112.Uc(t);});}},{key:"Uc",value:function Uc(t){this.Mc=this.Mc["delete"](t),this.Lc=this.Lc["delete"](t);}},{key:"Kc",value:function Kc(t){var e=new k(new F([])),n=new qr(e,t),s=new qr(e,t+1);var i=Wt();return this.Lc.Nt([n,s],function(t){i=i.add(t.key);}),i;}},{key:"zo",value:function zo(t){var e=new qr(t,0),n=this.Mc.$t(e);return null!==n&&t.isEqual(n.key);}}]);return Br;}();var qr=/*#__PURE__*/function(){function qr(t,e){_classCallCheck(this,qr);this.key=t,this.Gc=e;}/** Compare by key then by ID */_createClass(qr,null,[{key:"Oc",value:function Oc(t,e){return k.i(t.key,e.key)||rt(t.Gc,e.Gc);}/** Compare by ID then by key */},{key:"Bc",value:function Bc(t,e){return rt(t.Gc,e.Gc)||k.i(t.key,e.key);}}]);return qr;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ur=function Ur(t,e){_classCallCheck(this,Ur);this.user=e,this.type="OAuth",this.zc={},// Set the headers using Object Literal notation to avoid minification
this.zc.Authorization="Bearer "+t;};/** A CredentialsProvider that always yields an empty token. */var Qr=/*#__PURE__*/function(){function Qr(){_classCallCheck(this,Qr);/**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */this.Hc=null;}_createClass(Qr,[{key:"getToken",value:function getToken(){return Promise.resolve(null);}},{key:"Yc",value:function Yc(){}},{key:"Jc",value:function Jc(t){this.Hc=t,// Fire with initial user.
t(ti.UNAUTHENTICATED);}},{key:"Xc",value:function Xc(){this.Hc=null;}}]);return Qr;}();var Wr=/*#__PURE__*/function(){function Wr(t){var _this113=this;_classCallCheck(this,Wr);/**
         * The auth token listener registered with FirebaseApp, retained here so we
         * can unregister it.
         */this.Zc=null,/** Tracks the current User. */this.currentUser=ti.UNAUTHENTICATED,this.tu=!1,/**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */this.eu=0,/** The listener registered with setChangeListener(). */this.Hc=null,this.forceRefresh=!1,this.Zc=function(){_this113.eu++,_this113.currentUser=_this113.nu(),_this113.tu=!0,_this113.Hc&&_this113.Hc(_this113.currentUser);},this.eu=0,this.auth=t.getImmediate({optional:!0}),this.auth?this.auth.addAuthTokenListener(this.Zc):(// if auth is not available, invoke tokenListener once with null token
this.Zc(null),t.get().then(function(t){_this113.auth=t,_this113.Zc&&// tokenListener can be removed by removeChangeListener()
_this113.auth.addAuthTokenListener(_this113.Zc);},function(){}));}_createClass(Wr,[{key:"getToken",value:function getToken(){var _this114=this;// Take note of the current value of the tokenCounter so that this method
// can fail (with an ABORTED error) if there is a token change while the
// request is outstanding.
var t=this.eu,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then(function(e){return(// Cancel the request since the token changed while the request was
// outstanding so the response is potentially for a previous user (which
// user, we can't be sure).
_this114.eu!==t?(g("FirebaseCredentialsProvider","getToken aborted due to token change."),_this114.getToken()):e?(b("string"==typeof e.accessToken),new Ur(e.accessToken,_this114.currentUser)):null);}):Promise.resolve(null);}},{key:"Yc",value:function Yc(){this.forceRefresh=!0;}},{key:"Jc",value:function Jc(t){this.Hc=t,// Fire the initial event
this.tu&&t(this.currentUser);}},{key:"Xc",value:function Xc(){this.auth&&this.auth.removeAuthTokenListener(this.Zc),this.Zc=null,this.Hc=null;}// Auth.getUid() can return null even with a user logged in. It is because
// getUid() is synchronous, but the auth code populating Uid is asynchronous.
// This method should only be called in the AuthTokenListener callback
// to guarantee to get the actual user.
},{key:"nu",value:function nu(){var t=this.auth&&this.auth.getUid();return b(null===t||"string"==typeof t),new ti(t);}}]);return Wr;}();/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */var jr=/*#__PURE__*/function(){function jr(t,e){_classCallCheck(this,jr);this.su=t,this.iu=e,this.type="FirstParty",this.user=ti.ei;}_createClass(jr,[{key:"zc",get:function get(){var t={"X-Goog-AuthUser":this.iu},e=this.su.auth.getAuthHeaderValueForFirstParty([]);// Use array notation to prevent minification
return e&&(t.Authorization=e),t;}}]);return jr;}();/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */var Kr=/*#__PURE__*/function(){function Kr(t,e){_classCallCheck(this,Kr);this.su=t,this.iu=e;}_createClass(Kr,[{key:"getToken",value:function getToken(){return Promise.resolve(new jr(this.su,this.iu));}},{key:"Jc",value:function Jc(t){// Fire with initial uid.
t(ti.ei);}},{key:"Xc",value:function Xc(){}},{key:"Yc",value:function Yc(){}}]);return Kr;}();/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */ /**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */var Gr=/*#__PURE__*/function(){function Gr(t,e,n,s,i,r){_classCallCheck(this,Gr);this._n=t,this.ru=n,this.ou=s,this.au=i,this.listener=r,this.state=0/* Initial */,/**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */this.cu=0,this.uu=null,this.stream=null,this.Ps=new Ds(t,e);}/**
     * Returns true if start() has been called and no error has occurred. True
     * indicates the stream is open or in the process of opening (which
     * encompasses respecting backoff, getting auth tokens, and starting the
     * actual RPC). Use isOpen() to determine if the stream is open and ready for
     * outbound requests.
     */_createClass(Gr,[{key:"hu",value:function hu(){return 1/* Starting */===this.state||2/* Open */===this.state||4/* Backoff */===this.state;}/**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */},{key:"lu",value:function lu(){return 2/* Open */===this.state;}/**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */},{key:"start",value:function start(){3/* Error */!==this.state?this.auth():this._u();}/**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */},{key:"stop",value:function stop(){return regeneratorRuntime.async(function stop$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:_context19.t0=this.hu();if(!_context19.t0){_context19.next=4;break;}_context19.next=4;return regeneratorRuntime.awrap(this.close(0/* Initial */));case 4:case"end":return _context19.stop();}}},null,this);}/**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */},{key:"fu",value:function fu(){this.state=0/* Initial */,this.Ps.reset();}/**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */},{key:"du",value:function du(){var _this115=this;// Starts the idle time if we are in state 'Open' and are not yet already
// running a timer (in which case the previous idle timeout still applies).
this.lu()&&null===this.uu&&(this.uu=this._n.Pn(this.ru,6e4,function(){return _this115.wu();}));}/** Sends a message to the underlying stream. */},{key:"mu",value:function mu(t){this.Tu(),this.stream.send(t);}/** Called by the idle timer when the stream should close due to inactivity. */},{key:"wu",value:function wu(){return regeneratorRuntime.async(function wu$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:if(!this.lu()){_context20.next=2;break;}return _context20.abrupt("return",this.close(0/* Initial */));case 2:case"end":return _context20.stop();}}},null,this);}/** Marks the stream as active again. */},{key:"Tu",value:function Tu(){this.uu&&(this.uu.cancel(),this.uu=null);}/**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState the intended state of the stream after closing.
     * @param error the error the connection was closed with.
     */},{key:"close",value:function close(t,e){return regeneratorRuntime.async(function close$(_context21){while(1){switch(_context21.prev=_context21.next){case 0:this.Tu();this.Ps.cancel();// Invalidates any stream-related callbacks (e.g. from auth or the
// underlying stream), guaranteeing they won't execute.
this.cu++;3/* Error */!==t?// If this is an intentional close ensure we don't delay our next connection attempt.
this.Ps.reset():e&&e.code===E.RESOURCE_EXHAUSTED?(// Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
P(e.toString()),P("Using maximum backoff delay to prevent overloading the backend."),this.Ps.An()):e&&e.code===E.UNAUTHENTICATED&&// "unauthenticated" error means the token was rejected. Try force refreshing it in case it
// just expired.
this.au.Yc();// Clean up the underlying stream because we are no longer interested in events.
null!==this.stream&&(this.Eu(),this.stream.close(),this.stream=null);// This state must be assigned before calling onClose() to allow the callback to
// inhibit backoff or otherwise manipulate the state in its non-started state.
this.state=t;_context21.next=8;return regeneratorRuntime.awrap(this.listener.Iu(e));case 8:case"end":return _context21.stop();}}},null,this);}/**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */},{key:"Eu",value:function Eu(){}},{key:"auth",value:function auth(){var _this116=this;this.state=1/* Starting */;var t=this.Au(this.cu),e=this.cu;// TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
this.au.getToken().then(function(t){// Stream can be stopped while waiting for authentication.
// TODO(mikelehen): We really should just use dispatchIfNotClosed
// and let this dispatch onto the queue, but that opened a spec test can
// of worms that I don't want to deal with in this PR.
_this116.cu===e&&// Normally we'd have to schedule the callback on the AsyncQueue.
// However, the following calls are safe to be called outside the
// AsyncQueue since they don't chain asynchronous calls
_this116.Ru(t);},function(e){t(function(){var t=new I(E.UNKNOWN,"Fetching auth token failed: "+e.message);return _this116.gu(t);});});}},{key:"Ru",value:function Ru(t){var _this117=this;var e=this.Au(this.cu);this.stream=this.Pu(t),this.stream.yu(function(){e(function(){return _this117.state=2/* Open */,_this117.listener.yu();});}),this.stream.Iu(function(t){e(function(){return _this117.gu(t);});}),this.stream.onMessage(function(t){e(function(){return _this117.onMessage(t);});});}},{key:"_u",value:function _u(){var _this118=this;this.state=4/* Backoff */,this.Ps.Rn(function _callee7(){return regeneratorRuntime.async(function _callee7$(_context22){while(1){switch(_context22.prev=_context22.next){case 0:_this118.state=0/* Initial */,_this118.start();case 1:case"end":return _context22.stop();}}});});}// Visible for tests
},{key:"gu",value:function gu(t){// In theory the stream could close cleanly, however, in our current model
// we never expect this to happen because if we stop a stream ourselves,
// this callback will never be called. To prevent cases where we retry
// without a backoff accidentally, we set the stream to error in all cases.
return g("PersistentStream","close with error: "+t),this.stream=null,this.close(3/* Error */,t);}/**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */},{key:"Au",value:function Au(t){var _this119=this;return function(e){_this119._n.ds(function(){return _this119.cu===t?e():(g("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve());});};}}]);return Gr;}();/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */var zr=/*#__PURE__*/function(_Gr){_inherits(zr,_Gr);function zr(t,e,n,s,i){var _this120;_classCallCheck(this,zr);_this120=_possibleConstructorReturn(this,_getPrototypeOf(zr).call(this,t,"listen_stream_connection_backoff"/* ListenStreamConnectionBackoff */,"listen_stream_idle"/* ListenStreamIdle */,e,n,i)),_this120.serializer=s;return _this120;}_createClass(zr,[{key:"Pu",value:function Pu(t){return this.ou.Vu("Listen",t);}},{key:"onMessage",value:function onMessage(t){// A successful response means the stream is healthy
this.Ps.reset();var e=We(this.serializer,t),n=function(t){// We have only reached a consistent snapshot for the entire stream if there
// is a read_time set and it applies to all targets (i.e. the list of
// targets is empty). The backend is guaranteed to send such responses.
if(!("targetChange"in t))return mt.min();var e=t.targetChange;return e.targetIds&&e.targetIds.length?mt.min():e.readTime?Fe(e.readTime):mt.min();}(t);return this.listener.pu(e,n);}/**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */},{key:"bu",value:function bu(t){var e={};e.database=Be(this.serializer),e.addTarget=function(t,e){var n;var s=e.target;return n=Vt(s)?{documents:ze(t,s)}:{query:He(t,s)},n.targetId=e.targetId,e.resumeToken.O()>0&&(n.resumeToken=Ce(t,e.resumeToken)),n;}(this.serializer,t);var n=Je(this.serializer,t);n&&(e.labels=n),this.mu(e);}/**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */},{key:"vu",value:function vu(t){var e={};e.database=Be(this.serializer),e.removeTarget=t,this.mu(e);}}]);return zr;}(Gr);/**
 * A Stream that implements the Write RPC.
 *
 * The Write RPC requires the caller to maintain special streamToken
 * state in between calls, to help the server understand which responses the
 * client has processed by the time the next request is made. Every response
 * will contain a streamToken; this value must be passed to the next
 * request.
 *
 * After calling start() on this stream, the next request must be a handshake,
 * containing whatever streamToken is on hand. Once a response to this
 * request is received, all pending mutations may be submitted. When
 * submitting multiple batches of mutations at the same time, it's
 * okay to use the same streamToken for the calls to writeMutations.
 *
 * TODO(b/33271235): Use proto types
 */var Hr=/*#__PURE__*/function(_Gr2){_inherits(Hr,_Gr2);function Hr(t,e,n,s,i){var _this121;_classCallCheck(this,Hr);_this121=_possibleConstructorReturn(this,_getPrototypeOf(Hr).call(this,t,"write_stream_connection_backoff"/* WriteStreamConnectionBackoff */,"write_stream_idle"/* WriteStreamIdle */,e,n,i)),_this121.serializer=s,_this121.Su=!1;return _this121;}/**
     * Tracks whether or not a handshake has been successfully exchanged and
     * the stream is ready to accept mutations.
     */_createClass(Hr,[{key:"start",// Override of PersistentStream.start
value:function start(){this.Su=!1,this.lastStreamToken=void 0,_get(_getPrototypeOf(Hr.prototype),"start",this).call(this);}},{key:"Eu",value:function Eu(){this.Su&&this.Cu([]);}},{key:"Pu",value:function Pu(t){return this.ou.Vu("Write",t);}},{key:"onMessage",value:function onMessage(t){if(// Always capture the last stream token.
b(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Su){// A successful first write response means the stream is healthy,
// Note, that we could consider a successful handshake healthy, however,
// the write itself might be causing an error we want to back off from.
this.Ps.reset();var _e49=Ge(t.writeResults,t.commitTime),_n51=Fe(t.commitTime);return this.listener.Nu(_n51,_e49);}// The first response is always the handshake response
return b(!t.writeResults||0===t.writeResults.length),this.Su=!0,this.listener.Fu();}/**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */},{key:"$u",value:function $u(){// TODO(dimond): Support stream resumption. We intentionally do not set the
// stream token on the handshake, ignoring any stream token we might have.
var t={};t.database=Be(this.serializer),this.mu(t);}/** Sends a group of mutations to the Firestore backend to apply. */},{key:"Cu",value:function Cu(t){var _this122=this;var e={streamToken:this.lastStreamToken,writes:t.map(function(t){return je(_this122.serializer,t);})};this.mu(e);}},{key:"Du",get:function get(){return this.Su;}}]);return Hr;}(Gr);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Datastore and its related methods are a wrapper around the external Google
 * Cloud Datastore grpc API, which provides an interface that is more convenient
 * for the rest of the client SDK architecture to consume.
 */ /**
 * An implementation of Datastore that exposes additional state for internal
 * consumption.
 */var Yr=/*#__PURE__*/function(_ref14){_inherits(Yr,_ref14);function Yr(t,e,n){var _this123;_classCallCheck(this,Yr);_this123=_possibleConstructorReturn(this,_getPrototypeOf(Yr).call(this)),_this123.credentials=t,_this123.ou=e,_this123.serializer=n,_this123.xu=!1;return _this123;}_createClass(Yr,[{key:"ku",value:function ku(){if(this.xu)throw new I(E.FAILED_PRECONDITION,"The client has already been terminated.");}/** Gets an auth token and invokes the provided RPC. */},{key:"Mu",value:function Mu(t,e,n){var _this124=this;return this.ku(),this.credentials.getToken().then(function(s){return _this124.ou.Mu(t,e,n,s);})["catch"](function(t){throw t.code===E.UNAUTHENTICATED&&_this124.credentials.Yc(),t;});}/** Gets an auth token and invokes the provided RPC with streamed results. */},{key:"Ou",value:function Ou(t,e,n){var _this125=this;return this.ku(),this.credentials.getToken().then(function(s){return _this125.ou.Ou(t,e,n,s);})["catch"](function(t){throw t.code===E.UNAUTHENTICATED&&_this125.credentials.Yc(),t;});}},{key:"terminate",value:function terminate(){this.xu=!1;}}]);return Yr;}(/*#__PURE__*/function(){function _class4(){_classCallCheck(this,_class4);}return _class4;}());// TODO(firestorexp): Make sure there is only one Datastore instance per
// firestore-exp client.
/**
 * A component used by the RemoteStore to track the OnlineState (that is,
 * whether or not the client as a whole should be considered to be online or
 * offline), implementing the appropriate heuristics.
 *
 * In particular, when the client is trying to connect to the backend, we
 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
 * a connection to succeed. If we have too many failures or the timeout elapses,
 * then we set the OnlineState to Offline, and the client will behave as if
 * it is offline (get()s will return cached data, etc.).
 */var Jr=/*#__PURE__*/function(){function Jr(t,e){_classCallCheck(this,Jr);this.os=t,this.fi=e,/** The current OnlineState. */this.state="Unknown"/* Unknown */,/**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */this.Lu=0,/**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */this.Bu=null,/**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */this.qu=!0;}/**
     * Called by RemoteStore when a watch stream is started (including on each
     * backoff attempt).
     *
     * If this is the first attempt, it sets the OnlineState to Unknown and starts
     * the onlineStateTimer.
     */_createClass(Jr,[{key:"Uu",value:function Uu(){var _this126=this;0===this.Lu&&(this.Qu("Unknown"/* Unknown */),this.Bu=this.os.Pn("online_state_timeout"/* OnlineStateTimeout */,1e4,function(){return _this126.Bu=null,_this126.Wu("Backend didn't respond within 10 seconds."),_this126.Qu("Offline"/* Offline */),Promise.resolve();}));}/**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */},{key:"ju",value:function ju(t){"Online"/* Online */===this.state?this.Qu("Unknown"/* Unknown */):(this.Lu++,this.Lu>=1&&(this.Ku(),this.Wu("Connection failed 1 times. Most recent error: "+t.toString()),this.Qu("Offline"/* Offline */)));}/**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */},{key:"set",value:function set(t){this.Ku(),this.Lu=0,"Online"/* Online */===t&&(// We've connected to watch at least once. Don't warn the developer
// about being offline going forward.
this.qu=!1),this.Qu(t);}},{key:"Qu",value:function Qu(t){t!==this.state&&(this.state=t,this.fi(t));}},{key:"Wu",value:function Wu(t){var e="Could not reach Cloud Firestore backend. ".concat(t,"\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.");this.qu?(P(e),this.qu=!1):g("OnlineStateTracker",e);}},{key:"Ku",value:function Ku(){null!==this.Bu&&(this.Bu.cancel(),this.Bu=null);}}]);return Jr;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Xr=function Xr(/**
     * The local store, used to fill the write pipeline with outbound mutations.
     */t,/** The client-side proxy for interacting with the backend. */e,n,s,i){var _this127=this;_classCallCheck(this,Xr);this.Gu=t,this.zu=e,this.os=n,this.Hu={},/**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */this.Yu=[],/**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */this.Ju=new Map(),/**
         * A set of reasons for why the RemoteStore may be offline. If empty, the
         * RemoteStore may start its network connections.
         */this.Xu=new Set(),/**
         * Event handlers that get called when the network is disabled or enabled.
         *
         * PORTING NOTE: These functions are used on the Web client to create the
         * underlying streams (to support tree-shakeable streams). On Android and iOS,
         * the streams are created during construction of RemoteStore.
         */this.Zu=[],this.th=i,this.th.eh(function(t){n.ds(function _callee9(){return regeneratorRuntime.async(function _callee9$(_context24){while(1){switch(_context24.prev=_context24.next){case 0:_context24.t0=co(_this127);if(!_context24.t0){_context24.next=5;break;}g("RemoteStore","Restarting streams for network reachability change.");_context24.next=5;return regeneratorRuntime.awrap(function _callee8(t){var e;return regeneratorRuntime.async(function _callee8$(_context23){while(1){switch(_context23.prev=_context23.next){case 0:e=v(t);e.Xu.add(4/* ConnectivityChange */);_context23.next=4;return regeneratorRuntime.awrap(to(e));case 4:e.nh.set("Unknown"/* Unknown */);e.Xu["delete"](4/* ConnectivityChange */);_context23.next=8;return regeneratorRuntime.awrap(Zr(e));case 8:case"end":return _context23.stop();}}});}(_this127));case 5:case"end":return _context24.stop();}}});});}),this.nh=new Jr(n,s);};function Zr(t){var _iteratorNormalCompletion42,_didIteratorError42,_iteratorError42,_iterator42,_step42,_e50;return regeneratorRuntime.async(function Zr$(_context25){while(1){switch(_context25.prev=_context25.next){case 0:if(!co(t)){_context25.next=27;break;}_iteratorNormalCompletion42=true;_didIteratorError42=false;_iteratorError42=undefined;_context25.prev=4;_iterator42=t.Zu[Symbol.iterator]();case 6:if(_iteratorNormalCompletion42=(_step42=_iterator42.next()).done){_context25.next=13;break;}_e50=_step42.value;_context25.next=10;return regeneratorRuntime.awrap(_e50(/* enabled= */!0));case 10:_iteratorNormalCompletion42=true;_context25.next=6;break;case 13:_context25.next=19;break;case 15:_context25.prev=15;_context25.t0=_context25["catch"](4);_didIteratorError42=true;_iteratorError42=_context25.t0;case 19:_context25.prev=19;_context25.prev=20;if(!_iteratorNormalCompletion42&&_iterator42["return"]!=null){_iterator42["return"]();}case 22:_context25.prev=22;if(!_didIteratorError42){_context25.next=25;break;}throw _iteratorError42;case 25:return _context25.finish(22);case 26:return _context25.finish(19);case 27:case"end":return _context25.stop();}}},null,null,[[4,15,19,27],[20,,22,26]]);}/**
 * Temporarily disables the network. The network can be re-enabled using
 * enableNetwork().
 */function to(t){var _iteratorNormalCompletion43,_didIteratorError43,_iteratorError43,_iterator43,_step43,_e51;return regeneratorRuntime.async(function to$(_context26){while(1){switch(_context26.prev=_context26.next){case 0:_iteratorNormalCompletion43=true;_didIteratorError43=false;_iteratorError43=undefined;_context26.prev=3;_iterator43=t.Zu[Symbol.iterator]();case 5:if(_iteratorNormalCompletion43=(_step43=_iterator43.next()).done){_context26.next=12;break;}_e51=_step43.value;_context26.next=9;return regeneratorRuntime.awrap(_e51(/* enabled= */!1));case 9:_iteratorNormalCompletion43=true;_context26.next=5;break;case 12:_context26.next=18;break;case 14:_context26.prev=14;_context26.t0=_context26["catch"](3);_didIteratorError43=true;_iteratorError43=_context26.t0;case 18:_context26.prev=18;_context26.prev=19;if(!_iteratorNormalCompletion43&&_iterator43["return"]!=null){_iterator43["return"]();}case 21:_context26.prev=21;if(!_didIteratorError43){_context26.next=24;break;}throw _iteratorError43;case 24:return _context26.finish(21);case 25:return _context26.finish(18);case 26:case"end":return _context26.stop();}}},null,null,[[3,14,18,26],[19,,21,25]]);}function eo(t){var e;return regeneratorRuntime.async(function eo$(_context27){while(1){switch(_context27.prev=_context27.next){case 0:e=v(t);g("RemoteStore","RemoteStore shutting down.");e.Xu.add(5/* Shutdown */);_context27.next=5;return regeneratorRuntime.awrap(to(e));case 5:e.th.Si();// Set the OnlineState to Unknown (rather than Offline) to avoid potentially
// triggering spurious listener events with cached data, etc.
e.nh.set("Unknown"/* Unknown */);case 7:case"end":return _context27.stop();}}});}/**
 * Starts new listen for the given target. Uses resume token if provided. It
 * is a no-op if the target of given `TargetData` is already being listened to.
 */function no(t,e){var n=v(t);n.Ju.has(e.targetId)||(// Mark this as something the client is currently listening for.
n.Ju.set(e.targetId,e),ao(n)?// The listen will be sent in onWatchStreamOpen
oo(n):po(n).lu()&&io(n,e));}/**
 * Removes the listen from server. It is a no-op if the given target id is
 * not being listened to.
 */function so(t,e){var n=v(t),s=po(n);n.Ju["delete"](e),s.lu()&&ro(n,e),0===n.Ju.size&&(s.lu()?s.du():co(n)&&// Revert to OnlineState.Unknown if the watch stream is not open and we
// have no listeners, since without any listens to send we cannot
// confirm if the stream is healthy and upgrade to OnlineState.Online.
n.nh.set("Unknown"/* Unknown */));}/**
 * We need to increment the the expected number of pending responses we're due
 * from watch so we wait for the ack to process any messages from this target.
 */function io(t,e){t.sh.Ee(e.targetId),po(t).bu(e);}/**
 * We need to increment the expected number of pending responses we're due
 * from watch so we wait for the removal on the server before we process any
 * messages from this target.
 */function ro(t,e){t.sh.Ee(e),po(t).vu(e);}function oo(t){t.sh=new ne({Be:function Be(e){return t.Hu.Be(e);},qe:function qe(e){return t.Ju.get(e)||null;}}),po(t).start(),t.nh.Uu();}/**
 * Returns whether the watch stream should be started because it's necessary
 * and has not yet been started.
 */function ao(t){return co(t)&&!po(t).hu()&&t.Ju.size>0;}function co(t){return 0===v(t).Xu.size;}function uo(t){t.sh=void 0;}function ho(t){return regeneratorRuntime.async(function ho$(_context28){while(1){switch(_context28.prev=_context28.next){case 0:t.Ju.forEach(function(e,n){io(t,e);});case 1:case"end":return _context28.stop();}}});}function lo(t,e){return regeneratorRuntime.async(function lo$(_context29){while(1){switch(_context29.prev=_context29.next){case 0:uo(t),// If we still need the watch stream, retry the connection.
ao(t)?(t.nh.ju(e),oo(t)):// No need to restart watch stream because there are no active targets.
// The online state is set to unknown because there is no active attempt
// at establishing a connection
t.nh.set("Unknown"/* Unknown */);case 1:case"end":return _context29.stop();}}});}function _o(t,e,n){var _e52;return regeneratorRuntime.async(function _o$(_context31){while(1){switch(_context31.prev=_context31.next){case 0:if(!(// Mark the client as online since we got a message from the server
t.nh.set("Online"/* Online */),e instanceof te&&2/* Removed */===e.state&&e.cause)){_context31.next=13;break;}_context31.prev=1;_context31.next=4;return regeneratorRuntime.awrap(/** Handles an error on a target */function _callee10(t,e){var n,_iteratorNormalCompletion44,_didIteratorError44,_iteratorError44,_iterator44,_step44,_s46;return regeneratorRuntime.async(function _callee10$(_context30){while(1){switch(_context30.prev=_context30.next){case 0:n=e.cause;_iteratorNormalCompletion44=true;_didIteratorError44=false;_iteratorError44=undefined;_context30.prev=4;_iterator44=e.targetIds[Symbol.iterator]();case 6:if(_iteratorNormalCompletion44=(_step44=_iterator44.next()).done){_context30.next=17;break;}_s46=_step44.value;_context30.t0=t.Ju.has(_s46);if(!_context30.t0){_context30.next=14;break;}_context30.next=12;return regeneratorRuntime.awrap(t.Hu.ih(_s46,n));case 12:t.Ju["delete"](_s46);t.sh.removeTarget(_s46);case 14:_iteratorNormalCompletion44=true;_context30.next=6;break;case 17:_context30.next=23;break;case 19:_context30.prev=19;_context30.t1=_context30["catch"](4);_didIteratorError44=true;_iteratorError44=_context30.t1;case 23:_context30.prev=23;_context30.prev=24;if(!_iteratorNormalCompletion44&&_iterator44["return"]!=null){_iterator44["return"]();}case 26:_context30.prev=26;if(!_didIteratorError44){_context30.next=29;break;}throw _iteratorError44;case 29:return _context30.finish(26);case 30:return _context30.finish(23);case 31:case"end":return _context30.stop();}}},null,null,[[4,19,23,31],[24,,26,30]]);}/**
 * Attempts to fill our write pipeline with writes from the LocalStore.
 *
 * Called internally to bootstrap or refill the write pipeline and by
 * SyncEngine whenever there are new mutations to process.
 *
 * Starts the write stream if necessary.
 */(t,e));case 4:_context31.next=11;break;case 6:_context31.prev=6;_context31.t0=_context31["catch"](1);g("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),_context31.t0);_context31.next=11;return regeneratorRuntime.awrap(fo(t,_context31.t0));case 11:_context31.next=29;break;case 13:if(!(e instanceof Xt?t.sh.pe(e):e instanceof Zt?t.sh.$e(e):t.sh.Se(e),!n.isEqual(mt.min()))){_context31.next=29;break;}_context31.prev=14;_context31.next=17;return regeneratorRuntime.awrap(Nr(t.Gu));case 17:_e52=_context31.sent;_context31.t1=n.L(_e52)>=0;if(!_context31.t1){_context31.next=22;break;}_context31.next=22;return regeneratorRuntime.awrap(/**
 * Takes a batch of changes from the Datastore, repackages them as a
 * RemoteEvent, and passes that on to the listener, which is typically the
 * SyncEngine.
 */function(t,e){var n=t.sh.Me(e);// Update in-memory resume tokens. LocalStore will update the
// persistent view of these when applying the completed RemoteEvent.
return n.Gt.forEach(function(n,s){if(n.resumeToken.O()>0){var _i27=t.Ju.get(s);// A watched target might have been removed already.
_i27&&t.Ju.set(s,_i27.st(n.resumeToken,e));}}),// Re-establish listens for the targets that have been invalidated by
// existence filter mismatches.
n.zt.forEach(function(e){var n=t.Ju.get(e);if(!n)// A watched target might have been removed already.
return;// Clear the resume token for the target, since we're in a known mismatch
// state.
t.Ju.set(e,n.st(ct.B,n.et)),// Cause a hard reset by unwatching and rewatching immediately, but
// deliberately don't send a resume token so that we get a full update.
ro(t,e);// Mark the target we send as being on behalf of an existence filter
// mismatch, but don't actually retain that in listenTargets. This ensures
// that we flag the first re-listen this way without impacting future
// listens of this target (that might happen e.g. on reconnect).
var s=new pt(n.target,e,1/* ExistenceFilterMismatch */,n.sequenceNumber);io(t,s);}),t.Hu.rh(n);}(t,n));case 22:_context31.next=29;break;case 24:_context31.prev=24;_context31.t2=_context31["catch"](14);g("RemoteStore","Failed to raise snapshot:",_context31.t2);_context31.next=29;return regeneratorRuntime.awrap(fo(t,_context31.t2));case 29:case"end":return _context31.stop();}}},null,null,[[1,6],[14,24]]);}/**
 * Recovery logic for IndexedDB errors that takes the network offline until
 * `op` succeeds. Retries are scheduled with backoff using
 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
 * validated via a generic operation.
 *
 * The returned Promise is resolved once the network is disabled and before
 * any retry attempt.
 */function fo(t,e,n){return regeneratorRuntime.async(function fo$(_context33){while(1){switch(_context33.prev=_context33.next){case 0:if(xs(e)){_context33.next=2;break;}throw e;case 2:t.Xu.add(1/* IndexedDbFailed */);_context33.next=5;return regeneratorRuntime.awrap(to(t));case 5:t.nh.set("Offline"/* Offline */);n||(// Use a simple read operation to determine if IndexedDB recovered.
// Ideally, we would expose a health check directly on SimpleDb, but
// RemoteStore only has access to persistence through LocalStore.
n=function n(){return Nr(t.Gu);});// Probe IndexedDB periodically and re-enable network
t.os.Ds(function _callee11(){return regeneratorRuntime.async(function _callee11$(_context32){while(1){switch(_context32.prev=_context32.next){case 0:g("RemoteStore","Retrying IndexedDB access");_context32.next=3;return regeneratorRuntime.awrap(n());case 3:t.Xu["delete"](1/* IndexedDbFailed */);_context32.next=6;return regeneratorRuntime.awrap(Zr(t));case 6:case"end":return _context32.stop();}}});});case 8:case"end":return _context33.stop();}}});}/**
 * Executes `op`. If `op` fails, takes the network offline until `op`
 * succeeds. Returns after the first attempt.
 */function wo(t,e){return e()["catch"](function(n){return fo(t,n,e);});}function mo(t){var e,n,s,_t60;return regeneratorRuntime.async(function mo$(_context34){while(1){switch(_context34.prev=_context34.next){case 0:e=v(t),n=bo(e);s=e.Yu.length>0?e.Yu[e.Yu.length-1].batchId:-1;case 2:if(!To(e)){_context34.next=19;break;}_context34.prev=3;_context34.next=6;return regeneratorRuntime.awrap($r(e.Gu,s));case 6:_t60=_context34.sent;if(!(null===_t60)){_context34.next=10;break;}0===e.Yu.length&&n.du();return _context34.abrupt("break",19);case 10:s=_t60.batchId,Eo(e,_t60);_context34.next=17;break;case 13:_context34.prev=13;_context34.t0=_context34["catch"](3);_context34.next=17;return regeneratorRuntime.awrap(fo(e,_context34.t0));case 17:_context34.next=2;break;case 19:Io(e)&&Ao(e);case 20:case"end":return _context34.stop();}}},null,null,[[3,13]]);}/**
 * Returns true if we can add to the write pipeline (i.e. the network is
 * enabled and the write pipeline is not full).
 */function To(t){return co(t)&&t.Yu.length<10;}/**
 * Queues additional writes to be sent to the write stream, sending them
 * immediately if the write stream is established.
 */function Eo(t,e){t.Yu.push(e);var n=bo(t);n.lu()&&n.Du&&n.Cu(e.mutations);}function Io(t){return co(t)&&!bo(t).hu()&&t.Yu.length>0;}function Ao(t){bo(t).start();}function Ro(t){return regeneratorRuntime.async(function Ro$(_context35){while(1){switch(_context35.prev=_context35.next){case 0:bo(t).$u();case 1:case"end":return _context35.stop();}}});}function go(t){var e,_iteratorNormalCompletion45,_didIteratorError45,_iteratorError45,_iterator45,_step45,_n52;return regeneratorRuntime.async(function go$(_context36){while(1){switch(_context36.prev=_context36.next){case 0:e=bo(t);// Send the write pipeline now that the stream is established.
_iteratorNormalCompletion45=true;_didIteratorError45=false;_iteratorError45=undefined;_context36.prev=4;for(_iterator45=t.Yu[Symbol.iterator]();!(_iteratorNormalCompletion45=(_step45=_iterator45.next()).done);_iteratorNormalCompletion45=true){_n52=_step45.value;e.Cu(_n52.mutations);}_context36.next=12;break;case 8:_context36.prev=8;_context36.t0=_context36["catch"](4);_didIteratorError45=true;_iteratorError45=_context36.t0;case 12:_context36.prev=12;_context36.prev=13;if(!_iteratorNormalCompletion45&&_iterator45["return"]!=null){_iterator45["return"]();}case 15:_context36.prev=15;if(!_didIteratorError45){_context36.next=18;break;}throw _iteratorError45;case 18:return _context36.finish(15);case 19:return _context36.finish(12);case 20:case"end":return _context36.stop();}}},null,null,[[4,8,12,20],[13,,15,19]]);}function Po(t,e,n){var s,i;return regeneratorRuntime.async(function Po$(_context37){while(1){switch(_context37.prev=_context37.next){case 0:s=t.Yu.shift(),i=fi.from(s,e,n);_context37.next=3;return regeneratorRuntime.awrap(wo(t,function(){return t.Hu.oh(i);}));case 3:_context37.next=5;return regeneratorRuntime.awrap(mo(t));case 5:case"end":return _context37.stop();}}});}function yo(t,e){return regeneratorRuntime.async(function yo$(_context39){while(1){switch(_context39.prev=_context39.next){case 0:_context39.t0=e&&bo(t).Du;if(!_context39.t0){_context39.next=4;break;}_context39.next=4;return regeneratorRuntime.awrap(function _callee12(t,e){var _n53,n;return regeneratorRuntime.async(function _callee12$(_context38){while(1){switch(_context38.prev=_context38.next){case 0:if(!(n=e.code,Dt(n)&&n!==E.ABORTED)){_context38.next=7;break;}// This was a permanent error, the request itself was the problem
// so it's not going to succeed if we resend it.
_n53=t.Yu.shift();// In this case it's also unlikely that the server itself is melting
// down -- this was just a bad request so inhibit backoff on the next
// restart.
bo(t).fu();_context38.next=5;return regeneratorRuntime.awrap(wo(t,function(){return t.Hu.ah(_n53.batchId,e);}));case 5:_context38.next=7;return regeneratorRuntime.awrap(mo(t));case 7:case"end":return _context38.stop();}}});}(t,e));case 4:// The write stream might have been started by refilling the write
// pipeline for failed writes
Io(t)&&Ao(t);case 5:case"end":return _context39.stop();}}});}/**
 * Toggles the network state when the client gains or loses its primary lease.
 */function Vo(t,e){var n;return regeneratorRuntime.async(function Vo$(_context40){while(1){switch(_context40.prev=_context40.next){case 0:n=v(t);if(!e){_context40.next=7;break;}n.Xu["delete"](2/* IsSecondary */);_context40.next=5;return regeneratorRuntime.awrap(Zr(n));case 5:_context40.next=13;break;case 7:_context40.t0=e;if(_context40.t0){_context40.next=13;break;}n.Xu.add(2/* IsSecondary */);_context40.next=12;return regeneratorRuntime.awrap(to(n));case 12:n.nh.set("Unknown"/* Unknown */);case 13:case"end":return _context40.stop();}}});}/**
 * If not yet initialized, registers the WatchStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */function po(t){return t.uh||(// Create stream (but note that it is not started yet).
t.uh=function(t,e,n){var s=v(t);return s.ku(),new zr(e,s.ou,s.credentials,s.serializer,n);}/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t.zu,t.os,{yu:ho.bind(null,t),Iu:lo.bind(null,t),pu:_o.bind(null,t)}),t.Zu.push(function _callee13(e){return regeneratorRuntime.async(function _callee13$(_context41){while(1){switch(_context41.prev=_context41.next){case 0:if(!e){_context41.next=4;break;}t.uh.fu(),ao(t)?oo(t):t.nh.set("Unknown"/* Unknown */);_context41.next=7;break;case 4:_context41.next=6;return regeneratorRuntime.awrap(t.uh.stop());case 6:uo(t);case 7:case"end":return _context41.stop();}}});})),t.uh;}/**
 * If not yet initialized, registers the WriteStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */function bo(t){return t.hh||(// Create stream (but note that it is not started yet).
t.hh=function(t,e,n){var s=v(t);return s.ku(),new Hr(e,s.ou,s.credentials,s.serializer,n);}(t.zu,t.os,{yu:Ro.bind(null,t),Iu:yo.bind(null,t),Fu:go.bind(null,t),Nu:Po.bind(null,t)}),t.Zu.push(function _callee14(e){return regeneratorRuntime.async(function _callee14$(_context42){while(1){switch(_context42.prev=_context42.next){case 0:if(!e){_context42.next=6;break;}t.hh.fu();_context42.next=4;return regeneratorRuntime.awrap(mo(t));case 4:_context42.next=9;break;case 6:_context42.next=8;return regeneratorRuntime.awrap(t.hh.stop());case 8:t.Yu.length>0&&(g("RemoteStore","Stopping write stream with ".concat(t.Yu.length," pending writes")),t.Yu=[]);case 9:case"end":return _context42.stop();}}});})),t.hh;}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var vo=function vo(t){_classCallCheck(this,vo);this.key=t;};var So=function So(t){_classCallCheck(this,So);this.key=t;};/**
 * View is responsible for computing the final merged truth of what docs are in
 * a query. It gets notified of local and remote changes to docs, and applies
 * the query filters and limits to determine the most correct possible results.
 */var Do=/*#__PURE__*/function(){function Do(t,/** Documents included in the remote target */e){_classCallCheck(this,Do);this.query=t,this.lh=e,this._h=null,/**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */this.Zt=!1,/** Documents in the view but not in the remote target */this.fh=Wt(),/** Document Keys that have local changes */this.Qt=Wt(),this.dh=ls(t),this.wh=new Gt(this.dh);}/**
     * The set of remote documents that the server has told us belongs to the target associated with
     * this view.
     */_createClass(Do,[{key:"Th",/**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges The doc changes to apply to this view.
     * @param previousChanges If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @return a new set of docs, changes, and refill flag.
     */value:function Th(t,e){var _this128=this;var n=e?e.Eh:new zt(),s=e?e.wh:this.wh;var i=e?e.Qt:this.Qt,r=s,o=!1;// Track the last doc in a (full) limit. This is necessary, because some
// update (a delete, or an update moving a doc past the old limit) might
// mean there is some other document in the local cache that either should
// come (1) between the old last limit doc and the new last document, in the
// case of updates, or (2) after the new last document, in the case of
// deletes. So we keep this doc at the old limit to compare the updates to.
// Note that this should never get used in a refill (when previousChanges is
// set), because there will only be adds -- no deletes or updates.
var a=Jn(this.query)&&s.size===this.query.limit?s.last():null,c=Xn(this.query)&&s.size===this.query.limit?s.first():null;// Drop documents out to meet limit/limitToLast requirement.
if(t.ut(function(t,e){var u=s.get(t);var h=e instanceof jn?e:null;h&&(h=hs(_this128.query,h)?h:null);var l=!!u&&_this128.Qt.has(u.key),_=!!h&&(h.Ye||// We only consider committed mutations for documents that were
// mutated during the lifetime of the view.
_this128.Qt.has(h.key)&&h.hasCommittedMutations);var f=!1;// Calculate change
if(u&&h){u.data().isEqual(h.data())?l!==_&&(n.track({type:3/* Metadata */,doc:h}),f=!0):_this128.Ih(u,h)||(n.track({type:2/* Modified */,doc:h}),f=!0,(a&&_this128.dh(h,a)>0||c&&_this128.dh(h,c)<0)&&(// This doc moved from inside the limit to outside the limit.
// That means there may be some other doc in the local cache
// that should be included instead.
o=!0));}else!u&&h?(n.track({type:0/* Added */,doc:h}),f=!0):u&&!h&&(n.track({type:1/* Removed */,doc:u}),f=!0,(a||c)&&(// A doc was removed from a full limit query. We'll need to
// requery from the local cache to see if we know about some other
// doc that should be in the results.
o=!0));f&&(h?(r=r.add(h),i=_?i.add(t):i["delete"](t)):(r=r["delete"](t),i=i["delete"](t)));}),Jn(this.query)||Xn(this.query))for(;r.size>this.query.limit;){var _t61=Jn(this.query)?r.last():r.first();r=r["delete"](_t61.key),i=i["delete"](_t61.key),n.track({type:1/* Removed */,doc:_t61});}return{wh:r,Eh:n,Ah:o,Qt:i};}},{key:"Ih",value:function Ih(t,e){// We suppress the initial change event for documents that were modified as
// part of a write acknowledgment (e.g. when the value of a server transform
// is applied) as Watch will send us the same document again.
// By suppressing the event, we only raise two user visible events (one with
// `hasPendingWrites` and the final state of the document) instead of three
// (one with `hasPendingWrites`, the modified document with
// `hasPendingWrites` and the final state of the document).
return t.Ye&&e.hasCommittedMutations&&!e.Ye;}/**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges The set of changes to make to the view's docs.
     * @param updateLimboDocuments Whether to update limbo documents based on this
     *        change.
     * @param targetChange A target change to apply for computing limbo docs and
     *        sync state.
     * @return A new ViewChange with the given docs, changes, and sync state.
     */ // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
},{key:"Pr",value:function Pr(t,e,n){var _this129=this;var s=this.wh;this.wh=t.wh,this.Qt=t.Qt;// Sort changes based on type and query comparator
var i=t.Eh.qt();i.sort(function(t,e){return function(t,e){var n=function n(t){switch(t){case 0/* Added */:return 1;case 2/* Modified */:case 3/* Metadata */:// A metadata change is converted to a modified change at the public
// api layer.  Since we sort by document key and then change type,
// metadata and modified changes must be sorted equivalently.
return 2;case 1/* Removed */:return 0;default:return p();}};return n(t)-n(e);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(t.type,e.type)||_this129.dh(t.doc,e.doc);}),this.Rh(n);var r=e?this.gh():[],o=0===this.fh.size&&this.Zt?1/* Synced */:0/* Local */,a=o!==this._h;if(this._h=o,0!==i.length||a){return{snapshot:new Ht(this.query,t.wh,s,i,t.Qt,0/* Local */===o,a,/* excludesMetadataChanges= */!1),Ph:r};}// no changes
return{Ph:r};}/**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */},{key:"Us",value:function Us(t){return this.Zt&&"Offline"/* Offline */===t?(// If we're offline, set `current` to false and then call applyChanges()
// to refresh our syncState and generate a ViewChange as appropriate. We
// are guaranteed to get a new TargetChange that sets `current` back to
// true once the client is back online.
this.Zt=!1,this.Pr({wh:this.wh,Eh:new zt(),Qt:this.Qt,Ah:!1},/* updateLimboDocuments= */!1)):{Ph:[]};}/**
     * Returns whether the doc for the given key should be in limbo.
     */},{key:"yh",value:function yh(t){// If the remote end says it's part of this query, it's not in limbo.
return!this.lh.has(t)&&// The local store doesn't think it's a result, so it shouldn't be in limbo.
!!this.wh.has(t)&&!this.wh.get(t).Ye;}/**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */},{key:"Rh",value:function Rh(t){var _this130=this;t&&(t.te.forEach(function(t){return _this130.lh=_this130.lh.add(t);}),t.ee.forEach(function(t){}),t.ne.forEach(function(t){return _this130.lh=_this130.lh["delete"](t);}),this.Zt=t.Zt);}},{key:"gh",value:function gh(){var _this131=this;// We can only determine limbo documents when we're in-sync with the server.
if(!this.Zt)return[];// TODO(klimt): Do this incrementally so that it's not quadratic when
// updating many documents.
var t=this.fh;this.fh=Wt(),this.wh.forEach(function(t){_this131.yh(t.key)&&(_this131.fh=_this131.fh.add(t.key));});// Diff the new limbo docs with the old limbo docs.
var e=[];return t.forEach(function(t){_this131.fh.has(t)||e.push(new So(t));}),this.fh.forEach(function(n){t.has(n)||e.push(new vo(n));}),e;}/**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @return The ViewChange that resulted from this synchronization.
     */ // PORTING NOTE: Multi-tab only.
},{key:"Vh",value:function Vh(t){this.lh=t.kc,this.fh=Wt();var e=this.Th(t.documents);return this.Pr(e,/*updateLimboDocuments=*/!0);}/**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */ // PORTING NOTE: Multi-tab only.
},{key:"ph",value:function ph(){return Ht.Kt(this.query,this.wh,this.Qt,0/* Local */===this._h);}},{key:"mh",get:function get(){return this.lh;}}]);return Do;}();/**
 * QueryView contains all of the data that SyncEngine needs to keep track of for
 * a particular query.
 */var Co=function Co(/**
     * The query itself.
     */t,/**
     * The target number created by the client that is used in the watch
     * stream to identify this query.
     */e,/**
     * The view is responsible for computing the final merged truth of what
     * docs are in the query. It gets notified of local and remote changes,
     * and applies the query filters and limits to determine the most correct
     * possible results.
     */n){_classCallCheck(this,Co);this.query=t,this.targetId=e,this.view=n;};/** Tracks a limbo resolution. */var No=function No(t){_classCallCheck(this,No);this.key=t,/**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */this.bh=!1;};/**
 * An implementation of `SyncEngine` coordinating with other parts of SDK.
 *
 * The parts of SyncEngine that act as a callback to RemoteStore need to be
 * registered individually. This is done in `syncEngineWrite()` and
 * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
 * serve as entry points to RemoteStore's functionality.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */var Fo=/*#__PURE__*/function(){function Fo(t,e,n,// PORTING NOTE: Manages state synchronization in multi-tab environments.
s,i,r){_classCallCheck(this,Fo);this.Gu=t,this.Sh=e,this.Dh=n,this.Ch=s,this.currentUser=i,this.Nh=r,this.Fh={},this.$h=new dt(function(t){return cs(t);},as),this.xh=new Map(),/**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query.
         */this.kh=[],/**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */this.Mh=new Nt(k.i),/**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */this.Oh=new Map(),this.Lh=new Br(),/** Stores user completion handlers, indexed by User and BatchId. */this.Bh={},/** Stores user callbacks waiting for all pending writes to be acknowledged. */this.qh=new Map(),this.Uh=Tr.Ta(),this.onlineState="Unknown"/* Unknown */,// The primary state is set to `true` or `false` immediately after Firestore
// startup. In the interim, a client should only be considered primary if
// `isPrimary` is true.
this.Qh=void 0;}_createClass(Fo,[{key:"Wh",get:function get(){return!0===this.Qh;}}]);return Fo;}();/**
 * Initiates the new listen, resolves promise when listen enqueued to the
 * server. All the subsequent view snapshots or errors are sent to the
 * subscribed handlers. Returns the initial snapshot.
 */function $o(t,e){var n,s,i,r,_t62,_r16;return regeneratorRuntime.async(function $o$(_context43){while(1){switch(_context43.prev=_context43.next){case 0:n=ca(t);r=n.$h.get(e);if(!r){_context43.next=6;break;}// PORTING NOTE: With Multi-Tab Web, it is possible that a query view
// already exists when EventManager calls us for the first time. This
// happens when the primary tab is already listening to this query on
// behalf of another tab and the user of the primary also starts listening
// to the query. EventManager will not have an assigned target ID in this
// case and calls `listen` to obtain this ID.
s=r.targetId,n.Ch.Mi(s),i=r.view.ph();_context43.next=15;break;case 6:_context43.next=8;return regeneratorRuntime.awrap(xr(n.Gu,ss(e)));case 8:_t62=_context43.sent;_r16=n.Ch.Mi(_t62.targetId);s=_t62.targetId;_context43.next=13;return regeneratorRuntime.awrap(xo(n,e,s,"current"===_r16));case 13:i=_context43.sent;n.Wh&&no(n.Sh,_t62);case 15:return _context43.abrupt("return",i);case 16:case"end":return _context43.stop();}}});}/**
 * Registers a view for a previously unknown query and computes its initial
 * snapshot.
 */function xo(t,e,n,s){var i,r,o,a,c,u;return regeneratorRuntime.async(function xo$(_context45){while(1){switch(_context45.prev=_context45.next){case 0:// PORTING NOTE: On Web only, we inject the code that registers new Limbo
// targets based on view changes. This allows us to only depend on Limbo
// changes when user code includes queries.
t.jh=function(e,n,s){return function _callee15(t,e,n,s){var i,r,o;return regeneratorRuntime.async(function _callee15$(_context44){while(1){switch(_context44.prev=_context44.next){case 0:i=e.view.Th(n);_context44.t0=i.Ah;if(!_context44.t0){_context44.next=6;break;}_context44.next=5;return regeneratorRuntime.awrap(Mr(t.Gu,e.query,/* usePreviousResults= */!1).then(function(_ref15){var t=_ref15.documents;return e.view.Th(t,i);}));case 5:i=_context44.sent;case 6:r=s&&s.Gt.get(e.targetId),o=e.view.Pr(i,/* updateLimboDocuments= */t.Wh,r);return _context44.abrupt("return",(zo(t,e.targetId,o.Ph),o.snapshot));case 8:case"end":return _context44.stop();}}});}(t,e,n,s);};_context45.next=3;return regeneratorRuntime.awrap(Mr(t.Gu,e,/* usePreviousResults= */!0));case 3:i=_context45.sent;r=new Do(e,i.kc);o=r.Th(i.documents);a=_Jt.Xt(n,s&&"Offline"/* Offline */!==t.onlineState);c=r.Pr(o,/* updateLimboDocuments= */t.Wh,a);zo(t,n,c.Ph);u=new Co(e,n,r);return _context45.abrupt("return",(t.$h.set(e,u),t.xh.has(n)?t.xh.get(n).push(e):t.xh.set(n,[e]),c.snapshot));case 11:case"end":return _context45.stop();}}});}/** Stops listening to the query. */function ko(t,e){var n,s,i;return regeneratorRuntime.async(function ko$(_context46){while(1){switch(_context46.prev=_context46.next){case 0:n=v(t),s=n.$h.get(e),i=n.xh.get(s.targetId);if(!(i.length>1)){_context46.next=3;break;}return _context46.abrupt("return",(n.xh.set(s.targetId,i.filter(function(t){return!as(t,e);})),void n.$h["delete"](e)));case 3:if(!n.Wh){_context46.next=11;break;}// We need to remove the local query target first to allow us to verify
// whether any other client is still interested in this target.
n.Ch.Li(s.targetId);_context46.t0=n.Ch.Ni(s.targetId);if(_context46.t0){_context46.next=9;break;}_context46.next=9;return regeneratorRuntime.awrap(kr(n.Gu,s.targetId,/*keepPersistedTargetData=*/!1).then(function(){n.Ch.qi(s.targetId),so(n.Sh,s.targetId),Ko(n,s.targetId);})["catch"](Lr));case 9:_context46.next=14;break;case 11:Ko(n,s.targetId);_context46.next=14;return regeneratorRuntime.awrap(kr(n.Gu,s.targetId,/*keepPersistedTargetData=*/!0));case 14:case"end":return _context46.stop();}}});}/**
 * Initiates the write of local mutation batch which involves adding the
 * writes to the mutation queue, notifying the remote store about new
 * mutations and raising events for any changes this write caused.
 *
 * The promise returned by this call is resolved when the above steps
 * have completed, *not* when the write was acked by the backend. The
 * userCallback is resolved once the write was acked/rejected by the
 * backend (or failed locally for any other reason).
 */function Mo(t,e,n){var s,_t63,_e54;return regeneratorRuntime.async(function Mo$(_context47){while(1){switch(_context47.prev=_context47.next){case 0:s=ua(t);_context47.prev=1;_context47.next=4;return regeneratorRuntime.awrap(/* Accepts locally generated Mutations and commit them to storage. */function(t,e){var n=v(t),s=wt.now(),i=e.reduce(function(t,e){return t.add(e.key);},Wt());var r;return n.persistence.runTransaction("Locally write mutations","readwrite",function(t){return n.$c.$r(t,i).next(function(i){r=i;// For non-idempotent mutations (such as `FieldValue.increment()`),
// we record the base state in a separate patch mutation. This is
// later used to guarantee consistent values and prevents flicker
// even if the backend sends us an update that already includes our
// transform.
var o=[];var _iteratorNormalCompletion46=true;var _didIteratorError46=false;var _iteratorError46=undefined;try{for(var _iterator46=e[Symbol.iterator](),_step46;!(_iteratorNormalCompletion46=(_step46=_iterator46.next()).done);_iteratorNormalCompletion46=true){var _t64=_step46.value;var _e53=Dn(_t64,r.get(_t64.key));null!=_e53&&// NOTE: The base state should only be applied if there's some
// existing document to override, so use a Precondition of
// exists=true
o.push(new $n(_t64.key,_e53,Qn(_e53.proto.mapValue),Vn.exists(!0)));}}catch(err){_didIteratorError46=true;_iteratorError46=err;}finally{try{if(!_iteratorNormalCompletion46&&_iterator46["return"]!=null){_iterator46["return"]();}}finally{if(_didIteratorError46){throw _iteratorError46;}}}return n.vr.xo(t,s,o,e);});}).then(function(t){var e=t.hr(r);return{batchId:t.batchId,dr:e};});}(s.Gu,e));case 4:_t63=_context47.sent;s.Ch.Fi(_t63.batchId);(function(t,e,n){var s=t.Bh[t.currentUser.Zs()];s||(s=new Nt(rt));s=s.rt(e,n),t.Bh[t.currentUser.Zs()]=s;}/**
 * Resolves or rejects the user callback for the given batch and then discards
 * it.
 */)(s,_t63.batchId,n);_context47.next=9;return regeneratorRuntime.awrap(Jo(s,_t63.dr));case 9:_context47.next=11;return regeneratorRuntime.awrap(mo(s.Sh));case 11:_context47.next=17;break;case 13:_context47.prev=13;_context47.t0=_context47["catch"](1);// If we can't persist the mutation, we reject the user callback and
// don't send the mutation. The user can then retry the write.
_e54=js(_context47.t0,"Failed to persist write");n.reject(_e54);case 17:case"end":return _context47.stop();}}},null,null,[[1,13]]);}/**
 * Applies one remote event to the sync engine, notifying any views of the
 * changes, and releasing any pending mutation batches that would become
 * visible because of the snapshot version the remote event contains.
 */function Oo(t,e){var n,_t65;return regeneratorRuntime.async(function Oo$(_context48){while(1){switch(_context48.prev=_context48.next){case 0:n=v(t);_context48.prev=1;_context48.next=4;return regeneratorRuntime.awrap(Fr(n.Gu,e));case 4:_t65=_context48.sent;e.Gt.forEach(function(t,e){var s=n.Oh.get(e);s&&(// Since this is a limbo resolution lookup, it's for a single document
// and it could be added, modified, or removed, but not a combination.
b(t.te.size+t.ee.size+t.ne.size<=1),t.te.size>0?s.bh=!0:t.ee.size>0?b(s.bh):t.ne.size>0&&(b(s.bh),s.bh=!1));});_context48.next=8;return regeneratorRuntime.awrap(Jo(n,_t65,e));case 8:_context48.next=14;break;case 10:_context48.prev=10;_context48.t0=_context48["catch"](1);_context48.next=14;return regeneratorRuntime.awrap(Lr(_context48.t0));case 14:case"end":return _context48.stop();}}},null,null,[[1,10]]);}/**
 * Applies an OnlineState change to the sync engine and notifies any views of
 * the change.
 */function Lo(t,e,n){var s=v(t);// If we are the secondary client, we explicitly ignore the remote store's
// online state (the local client may go offline, even though the primary
// tab remains online) and only apply the primary tab's online state from
// SharedClientState.
if(s.Wh&&0/* RemoteStore */===n||!s.Wh&&1/* SharedClientState */===n){var _t66=[];s.$h.forEach(function(n,s){var i=s.view.Us(e);i.snapshot&&_t66.push(i.snapshot);}),function(t,e){var n=v(t);n.onlineState=e;var s=!1;n.Ls.forEach(function(t,n){var _iteratorNormalCompletion47=true;var _didIteratorError47=false;var _iteratorError47=undefined;try{for(var _iterator47=n.listeners[Symbol.iterator](),_step47;!(_iteratorNormalCompletion47=(_step47=_iterator47.next()).done);_iteratorNormalCompletion47=true){var _t67=_step47.value;// Run global snapshot listeners if a consistent snapshot has been emitted.
_t67.Us(e)&&(s=!0);}}catch(err){_didIteratorError47=true;_iteratorError47=err;}finally{try{if(!_iteratorNormalCompletion47&&_iterator47["return"]!=null){_iterator47["return"]();}}finally{if(_didIteratorError47){throw _iteratorError47;}}}}),s&&Xs(n);}(s.Dh,e),_t66.length&&s.Fh.pu(_t66),s.onlineState=e,s.Wh&&s.Ch.ji(e);}}/**
 * Rejects the listen for the given targetID. This can be triggered by the
 * backend for any active target.
 *
 * @param syncEngine The sync engine implementation.
 * @param targetId The targetID corresponds to one previously initiated by the
 * user as part of TargetData passed to listen() on RemoteStore.
 * @param err A description of the condition that has forced the rejection.
 * Nearly always this will be an indication that the user is no longer
 * authorized to see the data matching the target.
 */function Bo(t,e,n){var s,i,r,_t68,_n54,_i28;return regeneratorRuntime.async(function Bo$(_context49){while(1){switch(_context49.prev=_context49.next){case 0:s=v(t);// PORTING NOTE: Multi-tab only.
s.Ch.Ui(e,"rejected",n);i=s.Oh.get(e),r=i&&i.key;if(!r){_context49.next=14;break;}// TODO(klimt): We really only should do the following on permission
// denied errors, but we don't have the cause code here.
// It's a limbo doc. Create a synthetic event saying it was deleted.
// This is kind of a hack. Ideally, we would have a method in the local
// store to purge a document. However, it would be tricky to keep all of
// the local store's invariants with another method.
_t68=new Nt(k.i);_t68=_t68.rt(r,new Kn(r,mt.min()));_n54=Wt().add(r),_i28=new Yt(mt.min(),/* targetChanges= */new Map(),/* targetMismatches= */new xt(rt),_t68,_n54);_context49.next=9;return regeneratorRuntime.awrap(Oo(s,_i28));case 9:// Since this query failed, we won't want to manually unlisten to it.
// We only remove it from bookkeeping after we successfully applied the
// RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
// this query when the RemoteStore restarts the Watch stream, which should
// re-trigger the target failure.
s.Mh=s.Mh.remove(r);s.Oh["delete"](e);Yo(s);_context49.next=16;break;case 14:_context49.next=16;return regeneratorRuntime.awrap(kr(s.Gu,e,/* keepPersistedTargetData */!1).then(function(){return Ko(s,e,n);})["catch"](Lr));case 16:case"end":return _context49.stop();}}});}function qo(t,e){var n,s,_t69;return regeneratorRuntime.async(function qo$(_context50){while(1){switch(_context50.prev=_context50.next){case 0:n=v(t),s=e.batch.batchId;_context50.prev=1;_context50.next=4;return regeneratorRuntime.awrap(Cr(n.Gu,e));case 4:_t69=_context50.sent;jo(n,s,/*error=*/null);Wo(n,s);n.Ch.xi(s,"acknowledged");_context50.next=10;return regeneratorRuntime.awrap(Jo(n,_t69));case 10:_context50.next=16;break;case 12:_context50.prev=12;_context50.t0=_context50["catch"](1);_context50.next=16;return regeneratorRuntime.awrap(Lr(_context50.t0));case 16:case"end":return _context50.stop();}}},null,null,[[1,12]]);}function Uo(t,e,n){var s,_t70;return regeneratorRuntime.async(function Uo$(_context51){while(1){switch(_context51.prev=_context51.next){case 0:s=v(t);_context51.prev=1;_context51.next=4;return regeneratorRuntime.awrap(function(t,e){var n=v(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",function(t){var s;return n.vr.Mo(t,e).next(function(e){return b(null!==e),s=e.keys(),n.vr.Qo(t,e);}).next(function(){return n.vr.Go(t);}).next(function(){return n.$c.$r(t,s);});});}/**
 * Returns the largest (latest) batch id in mutation queue that is pending
 * server response.
 *
 * Returns `BATCHID_UNKNOWN` if the queue is empty.
 */(s.Gu,e));case 4:_t70=_context51.sent;jo(s,e,n);Wo(s,e);s.Ch.xi(e,"rejected",n);_context51.next=10;return regeneratorRuntime.awrap(Jo(s,_t70));case 10:_context51.next=16;break;case 12:_context51.prev=12;_context51.t0=_context51["catch"](1);_context51.next=16;return regeneratorRuntime.awrap(Lr(_context51.t0));case 16:case"end":return _context51.stop();}}},null,null,[[1,12]]);}/**
 * Registers a user callback that resolves when all pending mutations at the moment of calling
 * are acknowledged .
 */function Qo(t,e){var n,_t71,s,_n55;return regeneratorRuntime.async(function Qo$(_context52){while(1){switch(_context52.prev=_context52.next){case 0:n=v(t);co(n.Sh)||g("SyncEngine","The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");_context52.prev=2;_context52.next=5;return regeneratorRuntime.awrap(function(t){var e=v(t);return e.persistence.runTransaction("Get highest unacknowledged batch id","readonly",function(t){return e.vr.Bo(t);});}(n.Gu));case 5:_t71=_context52.sent;if(!(-1===_t71)){_context52.next=8;break;}return _context52.abrupt("return",void e.resolve());case 8:s=n.qh.get(_t71)||[];s.push(e),n.qh.set(_t71,s);_context52.next=16;break;case 12:_context52.prev=12;_context52.t0=_context52["catch"](2);_n55=js(_context52.t0,"Initialization of waitForPendingWrites() operation failed");e.reject(_n55);case 16:case"end":return _context52.stop();}}},null,null,[[2,12]]);}/**
 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
 * if there are any.
 */function Wo(t,e){(t.qh.get(e)||[]).forEach(function(t){t.resolve();}),t.qh["delete"](e);}/** Reject all outstanding callbacks waiting for pending writes to complete. */function jo(t,e,n){var s=v(t);var i=s.Bh[s.currentUser.Zs()];// NOTE: Mutations restored from persistence won't have callbacks, so it's
// okay for there to be no callback for this ID.
if(i){var _t72=i.get(e);_t72&&(n?_t72.reject(n):_t72.resolve(),i=i.remove(e)),s.Bh[s.currentUser.Zs()]=i;}}function Ko(t,e){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;t.Ch.Li(e);var _iteratorNormalCompletion48=true;var _didIteratorError48=false;var _iteratorError48=undefined;try{for(var _iterator48=t.xh.get(e)[Symbol.iterator](),_step48;!(_iteratorNormalCompletion48=(_step48=_iterator48.next()).done);_iteratorNormalCompletion48=true){var s=_step48.value;t.$h["delete"](s),n&&t.Fh.Kh(s,n);}}catch(err){_didIteratorError48=true;_iteratorError48=err;}finally{try{if(!_iteratorNormalCompletion48&&_iterator48["return"]!=null){_iterator48["return"]();}}finally{if(_didIteratorError48){throw _iteratorError48;}}}if(t.xh["delete"](e),t.Wh){t.Lh.Wc(e).forEach(function(e){t.Lh.zo(e)||// We removed the last reference for this key
Go(t,e);});}}function Go(t,e){// It's possible that the target already got removed because the query failed. In that case,
// the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
var n=t.Mh.get(e);null!==n&&(so(t.Sh,n),t.Mh=t.Mh.remove(e),t.Oh["delete"](n),Yo(t));}function zo(t,e,n){var _iteratorNormalCompletion49=true;var _didIteratorError49=false;var _iteratorError49=undefined;try{for(var _iterator49=n[Symbol.iterator](),_step49;!(_iteratorNormalCompletion49=(_step49=_iterator49.next()).done);_iteratorNormalCompletion49=true){var s=_step49.value;if(s instanceof vo)t.Lh.Fa(s.key,e),Ho(t,s);else if(s instanceof So){g("SyncEngine","Document no longer in limbo: "+s.key),t.Lh.xa(s.key,e);t.Lh.zo(s.key)||// We removed the last reference for this key
Go(t,s.key);}else p();}}catch(err){_didIteratorError49=true;_iteratorError49=err;}finally{try{if(!_iteratorNormalCompletion49&&_iterator49["return"]!=null){_iterator49["return"]();}}finally{if(_didIteratorError49){throw _iteratorError49;}}}}function Ho(t,e){var n=e.key;t.Mh.get(n)||(g("SyncEngine","New document in limbo: "+n),t.kh.push(n),Yo(t));}/**
 * Starts listens for documents in limbo that are enqueued for resolution,
 * subject to a maximum number of concurrent resolutions.
 *
 * Without bounding the number of concurrent resolutions, the server can fail
 * with "resource exhausted" errors which can lead to pathological client
 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
 */function Yo(t){for(;t.kh.length>0&&t.Mh.size<t.Nh;){var _e55=t.kh.shift(),n=t.Uh.next();t.Oh.set(n,new No(_e55)),t.Mh=t.Mh.rt(_e55,n),no(t.Sh,new pt(ss(Yn(_e55.path)),n,2/* LimboResolution */,ei.oi));}}function Jo(t,e,n){var s,i,r,o;return regeneratorRuntime.async(function Jo$(_context54){while(1){switch(_context54.prev=_context54.next){case 0:s=v(t),i=[],r=[],o=[];_context54.t0=s.$h.m();if(_context54.t0){_context54.next=9;break;}s.$h.forEach(function(t,a){o.push(s.jh(a,e,n).then(function(t){if(t){s.Wh&&s.Ch.Ui(a.targetId,t.fromCache?"not-current":"current"),i.push(t);var _e56=Ei.Gr(a.targetId,t);r.push(_e56);}}));});_context54.next=6;return regeneratorRuntime.awrap(Promise.all(o));case 6:s.Fh.pu(i);_context54.next=9;return regeneratorRuntime.awrap(function _callee16(t,e){var n,_iteratorNormalCompletion50,_didIteratorError50,_iteratorError50,_iterator50,_step50,_t73,_e57,_t74,_s47,_i29;return regeneratorRuntime.async(function _callee16$(_context53){while(1){switch(_context53.prev=_context53.next){case 0:n=v(t);_context53.prev=1;_context53.next=4;return regeneratorRuntime.awrap(n.persistence.runTransaction("notifyLocalViewChanges","readwrite",function(t){return Cs.forEach(e,function(e){return Cs.forEach(e.jr,function(s){return n.persistence.Co.Fa(t,e.targetId,s);}).next(function(){return Cs.forEach(e.Kr,function(s){return n.persistence.Co.xa(t,e.targetId,s);});});});}));case 4:_context53.next=11;break;case 6:_context53.prev=6;_context53.t0=_context53["catch"](1);if(xs(_context53.t0)){_context53.next=10;break;}throw _context53.t0;case 10:// If `notifyLocalViewChanges` fails, we did not advance the sequence
// number for the documents that were included in this transaction.
// This might trigger them to be deleted earlier than they otherwise
// would have, but it should not invalidate the integrity of the data.
g("LocalStore","Failed to update sequence numbers: "+_context53.t0);case 11:_iteratorNormalCompletion50=true;_didIteratorError50=false;_iteratorError50=undefined;_context53.prev=14;for(_iterator50=e[Symbol.iterator]();!(_iteratorNormalCompletion50=(_step50=_iterator50.next()).done);_iteratorNormalCompletion50=true){_t73=_step50.value;_e57=_t73.targetId;if(!_t73.fromCache){_t74=n.Dc.get(_e57),_s47=_t74.et,_i29=_t74.it(_s47);// Advance the last limbo free snapshot version
n.Dc=n.Dc.rt(_e57,_i29);}}_context53.next=22;break;case 18:_context53.prev=18;_context53.t1=_context53["catch"](14);_didIteratorError50=true;_iteratorError50=_context53.t1;case 22:_context53.prev=22;_context53.prev=23;if(!_iteratorNormalCompletion50&&_iterator50["return"]!=null){_iterator50["return"]();}case 25:_context53.prev=25;if(!_didIteratorError50){_context53.next=28;break;}throw _iteratorError50;case 28:return _context53.finish(25);case 29:return _context53.finish(22);case 30:case"end":return _context53.stop();}}},null,null,[[1,6],[14,18,22,30],[23,,25,29]]);}(s.Gu,r));case 9:case"end":return _context54.stop();}}});}function Xo(t,e){var n,_t75;return regeneratorRuntime.async(function Xo$(_context56){while(1){switch(_context56.prev=_context56.next){case 0:n=v(t);if(n.currentUser.isEqual(e)){_context56.next=11;break;}g("SyncEngine","User change. New user:",e.Zs());_context56.next=5;return regeneratorRuntime.awrap(/**
 * Tells the LocalStore that the currently authenticated user has changed.
 *
 * In response the local store switches the mutation queue to the new user and
 * returns any resulting document changes.
 */ // PORTING NOTE: Android and iOS only return the documents affected by the
// change.
function _callee17(t,e){var n,s,i,r;return regeneratorRuntime.async(function _callee17$(_context55){while(1){switch(_context55.prev=_context55.next){case 0:n=v(t);s=n.vr,i=n.$c;_context55.next=4;return regeneratorRuntime.awrap(n.persistence.runTransaction("Handle user change","readonly",function(t){// Swap out the mutation queue, grabbing the pending mutation batches
// before and after.
var r;return n.vr.qo(t).next(function(o){return r=o,s=n.persistence.Ic(e),// Recreate our LocalDocumentsView using the new
// MutationQueue.
i=new Ti(n.Fc,s,n.persistence.gc()),s.qo(t);}).next(function(e){var n=[],s=[];// Union the old/new changed keys.
var o=Wt();var _iteratorNormalCompletion51=true;var _didIteratorError51=false;var _iteratorError51=undefined;try{for(var _iterator51=r[Symbol.iterator](),_step51;!(_iteratorNormalCompletion51=(_step51=_iterator51.next()).done);_iteratorNormalCompletion51=true){var _t76=_step51.value;n.push(_t76.batchId);var _iteratorNormalCompletion53=true;var _didIteratorError53=false;var _iteratorError53=undefined;try{for(var _iterator53=_t76.mutations[Symbol.iterator](),_step53;!(_iteratorNormalCompletion53=(_step53=_iterator53.next()).done);_iteratorNormalCompletion53=true){var _e58=_step53.value;o=o.add(_e58.key);}}catch(err){_didIteratorError53=true;_iteratorError53=err;}finally{try{if(!_iteratorNormalCompletion53&&_iterator53["return"]!=null){_iterator53["return"]();}}finally{if(_didIteratorError53){throw _iteratorError53;}}}}}catch(err){_didIteratorError51=true;_iteratorError51=err;}finally{try{if(!_iteratorNormalCompletion51&&_iterator51["return"]!=null){_iterator51["return"]();}}finally{if(_didIteratorError51){throw _iteratorError51;}}}var _iteratorNormalCompletion52=true;var _didIteratorError52=false;var _iteratorError52=undefined;try{for(var _iterator52=e[Symbol.iterator](),_step52;!(_iteratorNormalCompletion52=(_step52=_iterator52.next()).done);_iteratorNormalCompletion52=true){var _t77=_step52.value;s.push(_t77.batchId);var _iteratorNormalCompletion54=true;var _didIteratorError54=false;var _iteratorError54=undefined;try{for(var _iterator54=_t77.mutations[Symbol.iterator](),_step54;!(_iteratorNormalCompletion54=(_step54=_iterator54.next()).done);_iteratorNormalCompletion54=true){var _e59=_step54.value;o=o.add(_e59.key);}}catch(err){_didIteratorError54=true;_iteratorError54=err;}finally{try{if(!_iteratorNormalCompletion54&&_iterator54["return"]!=null){_iterator54["return"]();}}finally{if(_didIteratorError54){throw _iteratorError54;}}}}// Return the set of all (potentially) changed documents and the list
// of mutation batch IDs that were affected by change.
}catch(err){_didIteratorError52=true;_iteratorError52=err;}finally{try{if(!_iteratorNormalCompletion52&&_iterator52["return"]!=null){_iterator52["return"]();}}finally{if(_didIteratorError52){throw _iteratorError52;}}}return i.$r(t,o).next(function(t){return{Gh:t,zh:n,Hh:s};});});}));case 4:r=_context55.sent;return _context55.abrupt("return",(n.vr=s,n.$c=i,n.Sc.xc(n.$c),r));case 6:case"end":return _context55.stop();}}});}(n.Gu,e));case 5:_t75=_context56.sent;n.currentUser=e;// Fails tasks waiting for pending writes requested by previous user.
(function(t,e){t.qh.forEach(function(t){t.forEach(function(t){t.reject(new I(E.CANCELLED,e));});}),t.qh.clear();})(n,"'waitForPendingWrites' promise is rejected due to a user change.");// TODO(b/114226417): Consider calling this only in the primary tab.
n.Ch.Wi(e,_t75.zh,_t75.Hh);_context56.next=11;return regeneratorRuntime.awrap(Jo(n,_t75.Gh));case 11:case"end":return _context56.stop();}}});}function Zo(t,e){var n=v(t),s=n.Oh.get(e);if(s&&s.bh)return Wt().add(s.key);{var _t78=Wt();var _s48=n.xh.get(e);if(!_s48)return _t78;var _iteratorNormalCompletion55=true;var _didIteratorError55=false;var _iteratorError55=undefined;try{for(var _iterator55=_s48[Symbol.iterator](),_step55;!(_iteratorNormalCompletion55=(_step55=_iterator55.next()).done);_iteratorNormalCompletion55=true){var _e60=_step55.value;var _s49=n.$h.get(_e60);_t78=_t78.xt(_s49.view.mh);}}catch(err){_didIteratorError55=true;_iteratorError55=err;}finally{try{if(!_iteratorNormalCompletion55&&_iterator55["return"]!=null){_iterator55["return"]();}}finally{if(_didIteratorError55){throw _iteratorError55;}}}return _t78;}}/**
 * Reconcile the list of synced documents in an existing view with those
 * from persistence.
 */function ta(t,e){var n,s,i;return regeneratorRuntime.async(function ta$(_context57){while(1){switch(_context57.prev=_context57.next){case 0:n=v(t);_context57.next=3;return regeneratorRuntime.awrap(Mr(n.Gu,e.query,/* usePreviousResults= */!0));case 3:s=_context57.sent;i=e.view.Vh(s);return _context57.abrupt("return",(n.Wh&&zo(n,e.targetId,i.Ph),i));case 6:case"end":return _context57.stop();}}});}/** Applies a mutation state to an existing batch.  */ // PORTING NOTE: Multi-Tab only.
function ea(t,e,n,s){var i,r;return regeneratorRuntime.async(function ea$(_context58){while(1){switch(_context58.prev=_context58.next){case 0:i=v(t);_context58.next=3;return regeneratorRuntime.awrap(function(t,e){var n=v(t),s=v(n.vr);return n.persistence.runTransaction("Lookup mutation documents","readonly",function(t){return s.Oo(t,e).next(function(e){return e?n.$c.$r(t,e):Cs.resolve(null);});});}// PORTING NOTE: Multi-Tab only.
(i.Gu,e));case 3:r=_context58.sent;if(!(null!==r)){_context58.next=15;break;}if(!("pending"===n)){_context58.next=10;break;}_context58.next=8;return regeneratorRuntime.awrap(mo(i.Sh));case 8:_context58.next=11;break;case 10:"acknowledged"===n||"rejected"===n?(// NOTE: Both these methods are no-ops for batches that originated from
// other clients.
jo(i,e,s||null),Wo(i,e),function(t,e){v(v(t).vr).jo(e);}// PORTING NOTE: Multi-Tab only.
(i.Gu,e)):p();case 11:_context58.next=13;return regeneratorRuntime.awrap(Jo(i,r));case 13:_context58.next=16;break;case 15:// A throttled tab may not have seen the mutation before it was completed
// and removed from the mutation queue, in which case we won't have cached
// the affected documents. In this case we can safely ignore the update
// since that means we didn't apply the mutation locally at all (if we
// had, we would have cached the affected documents), and so we will just
// see any resulting document changes via normal remote document updates
// as applicable.
g("SyncEngine","Cannot apply mutation batch with id: "+e);case 16:case"end":return _context58.stop();}}});}/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
function na(t,e){var n,_t79,_e61,_iteratorNormalCompletion56,_didIteratorError56,_iteratorError56,_iterator56,_step56,_t80,_t81,_e62;return regeneratorRuntime.async(function na$(_context59){while(1){switch(_context59.prev=_context59.next){case 0:n=v(t);if(!(ca(n),ua(n),!0===e&&!0!==n.Qh)){_context59.next=30;break;}_t79=n.Ch.Di();_context59.next=5;return regeneratorRuntime.awrap(sa(n,_t79.A()));case 5:_e61=_context59.sent;n.Qh=!0;_context59.next=9;return regeneratorRuntime.awrap(Vo(n.Sh,!0));case 9:_iteratorNormalCompletion56=true;_didIteratorError56=false;_iteratorError56=undefined;_context59.prev=12;for(_iterator56=_e61[Symbol.iterator]();!(_iteratorNormalCompletion56=(_step56=_iterator56.next()).done);_iteratorNormalCompletion56=true){_t80=_step56.value;no(n.Sh,_t80);}_context59.next=20;break;case 16:_context59.prev=16;_context59.t0=_context59["catch"](12);_didIteratorError56=true;_iteratorError56=_context59.t0;case 20:_context59.prev=20;_context59.prev=21;if(!_iteratorNormalCompletion56&&_iterator56["return"]!=null){_iterator56["return"]();}case 23:_context59.prev=23;if(!_didIteratorError56){_context59.next=26;break;}throw _iteratorError56;case 26:return _context59.finish(23);case 27:return _context59.finish(20);case 28:_context59.next=42;break;case 30:if(!(!1===e&&!1!==n.Qh)){_context59.next=42;break;}_t81=[];_e62=Promise.resolve();n.xh.forEach(function(s,i){n.Ch.Bi(i)?_t81.push(i):_e62=_e62.then(function(){return Ko(n,i),kr(n.Gu,i,/*keepPersistedTargetData=*/!0);}),so(n.Sh,i);});_context59.next=36;return regeneratorRuntime.awrap(_e62);case 36:_context59.next=38;return regeneratorRuntime.awrap(sa(n,_t81));case 38:// PORTING NOTE: Multi-Tab only.
(function(t){var e=v(t);e.Oh.forEach(function(t,n){so(e.Sh,n);}),e.Lh.jc(),e.Oh=new Map(),e.Mh=new Nt(k.i);}/**
 * Reconcile the query views of the provided query targets with the state from
 * persistence. Raises snapshots for any changes that affect the local
 * client and returns the updated state of all target's query data.
 *
 * @param syncEngine The sync engine implementation
 * @param targets the list of targets with views that need to be recomputed
 * @param transitionToPrimary `true` iff the tab transitions from a secondary
 * tab to a primary tab
 */ // PORTING NOTE: Multi-Tab only.
)(n);n.Qh=!1;_context59.next=42;return regeneratorRuntime.awrap(Vo(n.Sh,!1));case 42:case"end":return _context59.stop();}}},null,null,[[12,16,20,28],[21,,23,27]]);}function sa(t,e,n){var s,i,r,_iteratorNormalCompletion57,_didIteratorError57,_iteratorError57,_iterator57,_step57,_t82,_e63,_n56,_iteratorNormalCompletion58,_didIteratorError58,_iteratorError58,_iterator58,_step58,_t83,_e64,_n57,_n58;return regeneratorRuntime.async(function sa$(_context60){while(1){switch(_context60.prev=_context60.next){case 0:s=v(t),i=[],r=[];_iteratorNormalCompletion57=true;_didIteratorError57=false;_iteratorError57=undefined;_context60.prev=4;_iterator57=e[Symbol.iterator]();case 6:if(_iteratorNormalCompletion57=(_step57=_iterator57.next()).done){_context60.next=57;break;}_t82=_step57.value;_e63=void 0;_n56=s.xh.get(_t82);if(!(_n56&&0!==_n56.length)){_context60.next=45;break;}_context60.next=13;return regeneratorRuntime.awrap(xr(s.Gu,ss(_n56[0])));case 13:_e63=_context60.sent;_iteratorNormalCompletion58=true;_didIteratorError58=false;_iteratorError58=undefined;_context60.prev=17;_iterator58=_n56[Symbol.iterator]();case 19:if(_iteratorNormalCompletion58=(_step58=_iterator58.next()).done){_context60.next=29;break;}_t83=_step58.value;_e64=s.$h.get(_t83);_context60.next=24;return regeneratorRuntime.awrap(ta(s,_e64));case 24:_n57=_context60.sent;_n57.snapshot&&r.push(_n57.snapshot);case 26:_iteratorNormalCompletion58=true;_context60.next=19;break;case 29:_context60.next=35;break;case 31:_context60.prev=31;_context60.t0=_context60["catch"](17);_didIteratorError58=true;_iteratorError58=_context60.t0;case 35:_context60.prev=35;_context60.prev=36;if(!_iteratorNormalCompletion58&&_iterator58["return"]!=null){_iterator58["return"]();}case 38:_context60.prev=38;if(!_didIteratorError58){_context60.next=41;break;}throw _iteratorError58;case 41:return _context60.finish(38);case 42:return _context60.finish(35);case 43:_context60.next=53;break;case 45:_context60.next=47;return regeneratorRuntime.awrap(Or(s.Gu,_t82));case 47:_n58=_context60.sent;_context60.next=50;return regeneratorRuntime.awrap(xr(s.Gu,_n58));case 50:_e63=_context60.sent;_context60.next=53;return regeneratorRuntime.awrap(xo(s,ia(_n58),_t82,/*current=*/!1));case 53:i.push(_e63);case 54:_iteratorNormalCompletion57=true;_context60.next=6;break;case 57:_context60.next=63;break;case 59:_context60.prev=59;_context60.t1=_context60["catch"](4);_didIteratorError57=true;_iteratorError57=_context60.t1;case 63:_context60.prev=63;_context60.prev=64;if(!_iteratorNormalCompletion57&&_iterator57["return"]!=null){_iterator57["return"]();}case 66:_context60.prev=66;if(!_didIteratorError57){_context60.next=69;break;}throw _iteratorError57;case 69:return _context60.finish(66);case 70:return _context60.finish(63);case 71:return _context60.abrupt("return",(s.Fh.pu(r),i));case 72:case"end":return _context60.stop();}}},null,null,[[4,59,63,71],[17,31,35,43],[36,,38,42],[64,,66,70]]);}/**
 * Creates a `Query` object from the specified `Target`. There is no way to
 * obtain the original `Query`, so we synthesize a `Query` from the `Target`
 * object.
 *
 * The synthesized result might be different from the original `Query`, but
 * since the synthesized `Query` should return the same results as the
 * original one (only the presentation of results might differ), the potential
 * difference will not cause issues.
 */ // PORTING NOTE: Multi-Tab only.
function ia(t){return Hn(t.path,t.collectionGroup,t.orderBy,t.filters,t.limit,"F"/* First */,t.startAt,t.endAt);}/** Returns the IDs of the clients that are currently active. */ // PORTING NOTE: Multi-Tab only.
function ra(t){var e=v(t);return v(v(e.Gu).persistence).Vi();}/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
function oa(t,e,n,s){var i,_t84,_s50;return regeneratorRuntime.async(function oa$(_context61){while(1){switch(_context61.prev=_context61.next){case 0:i=v(t);if(!i.Qh){_context61.next=5;break;}// If we receive a target state notification via WebStorage, we are
// either already secondary or another tab has taken the primary lease.
g("SyncEngine","Ignoring unexpected query state notification.");_context61.next=21;break;case 5:if(!i.xh.has(e)){_context61.next=21;break;}_context61.t0=n;_context61.next=_context61.t0==="current"?9:_context61.t0==="not-current"?9:_context61.t0==="rejected"?16:20;break;case 9:_context61.next=11;return regeneratorRuntime.awrap(function(t){var e=v(t),n=v(e.Fc);return e.persistence.runTransaction("Get new document changes","readonly",function(t){return n.ia(t,e.Nc);}).then(function(_ref16){var t=_ref16.ra,n=_ref16.readTime;return e.Nc=n,t;});}/**
 * Reads the newest document change from persistence and moves the internal
 * synchronization marker forward so that calls to `getNewDocumentChanges()`
 * only return changes that happened after client initialization.
 */ // PORTING NOTE: Multi-Tab only.
(i.Gu));case 11:_t84=_context61.sent;_s50=Yt.Jt(e,"current"===n);_context61.next=15;return regeneratorRuntime.awrap(Jo(i,_t84,_s50));case 15:return _context61.abrupt("break",21);case 16:_context61.next=18;return regeneratorRuntime.awrap(kr(i.Gu,e,/* keepPersistedTargetData */!0));case 18:Ko(i,e,s);return _context61.abrupt("break",21);case 20:p();case 21:case"end":return _context61.stop();}}});}/** Adds or removes Watch targets for queries from different tabs. */function aa(t,e,n){var s,_iteratorNormalCompletion59,_didIteratorError59,_iteratorError59,_iterator59,_step59,_t85,_e65,_n59,_iteratorNormalCompletion60,_didIteratorError60,_iteratorError60,_loop4,_iterator60,_step60;return regeneratorRuntime.async(function aa$(_context63){while(1){switch(_context63.prev=_context63.next){case 0:s=ca(t);if(!s.Qh){_context63.next=64;break;}_iteratorNormalCompletion59=true;_didIteratorError59=false;_iteratorError59=undefined;_context63.prev=5;_iterator59=e[Symbol.iterator]();case 7:if(_iteratorNormalCompletion59=(_step59=_iterator59.next()).done){_context63.next=24;break;}_t85=_step59.value;if(!s.xh.has(_t85)){_context63.next=12;break;}// A target might have been added in a previous attempt
g("SyncEngine","Adding an already active target "+_t85);return _context63.abrupt("continue",21);case 12:_context63.next=14;return regeneratorRuntime.awrap(Or(s.Gu,_t85));case 14:_e65=_context63.sent;_context63.next=17;return regeneratorRuntime.awrap(xr(s.Gu,_e65));case 17:_n59=_context63.sent;_context63.next=20;return regeneratorRuntime.awrap(xo(s,ia(_e65),_n59.targetId,/*current=*/!1));case 20:no(s.Sh,_n59);case 21:_iteratorNormalCompletion59=true;_context63.next=7;break;case 24:_context63.next=30;break;case 26:_context63.prev=26;_context63.t0=_context63["catch"](5);_didIteratorError59=true;_iteratorError59=_context63.t0;case 30:_context63.prev=30;_context63.prev=31;if(!_iteratorNormalCompletion59&&_iterator59["return"]!=null){_iterator59["return"]();}case 33:_context63.prev=33;if(!_didIteratorError59){_context63.next=36;break;}throw _iteratorError59;case 36:return _context63.finish(33);case 37:return _context63.finish(30);case 38:_iteratorNormalCompletion60=true;_didIteratorError60=false;_iteratorError60=undefined;_context63.prev=41;_loop4=function _loop4(){var t;return regeneratorRuntime.async(function _loop4$(_context62){while(1){switch(_context62.prev=_context62.next){case 0:t=_step60.value;_context62.t0=s.xh.has(t);if(!_context62.t0){_context62.next=5;break;}_context62.next=5;return regeneratorRuntime.awrap(kr(s.Gu,t,/* keepPersistedTargetData */!1).then(function(){so(s.Sh,t),Ko(s,t);})["catch"](Lr));case 5:case"end":return _context62.stop();}}});};_iterator60=n[Symbol.iterator]();case 44:if(_iteratorNormalCompletion60=(_step60=_iterator60.next()).done){_context63.next=50;break;}_context63.next=47;return regeneratorRuntime.awrap(_loop4());case 47:_iteratorNormalCompletion60=true;_context63.next=44;break;case 50:_context63.next=56;break;case 52:_context63.prev=52;_context63.t1=_context63["catch"](41);_didIteratorError60=true;_iteratorError60=_context63.t1;case 56:_context63.prev=56;_context63.prev=57;if(!_iteratorNormalCompletion60&&_iterator60["return"]!=null){_iterator60["return"]();}case 59:_context63.prev=59;if(!_didIteratorError60){_context63.next=62;break;}throw _iteratorError60;case 62:return _context63.finish(59);case 63:return _context63.finish(56);case 64:case"end":return _context63.stop();}}},null,null,[[5,26,30,38],[31,,33,37],[41,52,56,64],[57,,59,63]]);}function ca(t){var e=v(t);return e.Sh.Hu.rh=Oo.bind(null,e),e.Sh.Hu.Be=Zo.bind(null,e),e.Sh.Hu.ih=Bo.bind(null,e),e.Fh.pu=Ys.bind(null,e.Dh),e.Fh.Kh=Js.bind(null,e.Dh),e;}function ua(t){var e=v(t);return e.Sh.Hu.oh=qo.bind(null,e),e.Sh.Hu.ah=Uo.bind(null,e),e;}/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TOOD(b/140938512): Drop SimpleQueryEngine and rename IndexFreeQueryEngine.
/**
 * A query engine that takes advantage of the target document mapping in the
 * QueryCache. The IndexFreeQueryEngine optimizes query execution by only
 * reading the documents that previously matched a query plus any documents that were
 * edited after the query was last listened to.
 *
 * There are some cases where Index-Free queries are not guaranteed to produce
 * the same results as full collection scans. In these cases, the
 * IndexFreeQueryEngine falls back to full query processing. These cases are:
 *
 * - Limit queries where a document that matched the query previously no longer
 *   matches the query.
 *
 * - Limit queries where a document edit may cause the document to sort below
 *   another document that is in the local cache.
 *
 * - Queries that have never been CURRENT or free of Limbo documents.
 */var ha=/*#__PURE__*/function(){function ha(){_classCallCheck(this,ha);}_createClass(ha,[{key:"xc",value:function xc(t){this.Yh=t;}},{key:"Or",value:function Or(t,e,n,s){var _this132=this;// Queries that match all documents don't benefit from using
// IndexFreeQueries. It is more efficient to scan all documents in a
// collection, rather than to perform individual lookups.
return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.rn.length||1===t.rn.length&&t.rn[0].field.p());}(e)||n.isEqual(mt.min())?this.Jh(t,e):this.Yh.$r(t,s).next(function(i){var r=_this132.Xh(e,i);return(Jn(e)||Xn(e))&&_this132.Ah(e.on,r,s,n)?_this132.Jh(t,e):(R()<=_logger.LogLevel.DEBUG&&g("IndexFreeQueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),us(e)),_this132.Yh.Or(t,e,n).next(function(t){return(// We merge `previousResults` into `updateResults`, since
// `updateResults` is already a DocumentMap. If a document is
// contained in both lists, then its contents are the same.
r.forEach(function(e){t=t.rt(e.key,e);}),t);}));});// Queries that have never seen a snapshot without limbo free documents
// should also be run as a full collection scan.
}/** Applies the query filter and sorting to the provided documents.  */},{key:"Xh",value:function Xh(t,e){// Sort the documents and re-apply the query filter since previously
// matching documents do not necessarily still match the query.
var n=new xt(ls(t));return e.forEach(function(e,s){s instanceof jn&&hs(t,s)&&(n=n.add(s));}),n;}/**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param sortedPreviousResults The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion The version of the snapshot when the query
     * was last synchronized.
     */},{key:"Ah",value:function Ah(t,e,n,s){// The query needs to be refilled if a previously matching document no
// longer matches.
if(n.size!==e.size)return!0;// Limit queries are not eligible for index-free query execution if there is
// a potential that an older document from cache now sorts before a document
// that was previously part of the limit. This, however, can only happen if
// the document at the edge of the limit goes out of limit.
// If a document that is not the limit boundary sorts differently,
// the boundary of the limit itself did not change and documents from cache
// will continue to be "rejected" by this boundary. Therefore, we can ignore
// any modifications that don't affect the last document.
var i="F"/* First */===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.L(s)>0);}},{key:"Jh",value:function Jh(t,e){return R()<=_logger.LogLevel.DEBUG&&g("IndexFreeQueryEngine","Using full collection scan to execute query:",us(e)),this.Yh.Or(t,e,mt.min());}}]);return ha;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var la=/*#__PURE__*/function(){function la(t,e){_classCallCheck(this,la);this.Sr=t,this.Co=e,/**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */this.vr=[],/** Next value to use when assigning sequential IDs to each mutation batch. */this.Zh=1,/** An ordered mapping between documents and the mutations batch IDs. */this.tl=new xt(qr.Oc);}_createClass(la,[{key:"$o",value:function $o(t){return Cs.resolve(0===this.vr.length);}},{key:"xo",value:function xo(t,e,n,s){var i=this.Zh;if(this.Zh++,this.vr.length>0){this.vr[this.vr.length-1];}var r=new _i(i,e,n,s);this.vr.push(r);// Track references by document key and index collection parents.
var _iteratorNormalCompletion61=true;var _didIteratorError61=false;var _iteratorError61=undefined;try{for(var _iterator61=s[Symbol.iterator](),_step61;!(_iteratorNormalCompletion61=(_step61=_iterator61.next()).done);_iteratorNormalCompletion61=true){var _e66=_step61.value;this.tl=this.tl.add(new qr(_e66.key,i)),this.Sr.ko(t,_e66.key.path.h());}}catch(err){_didIteratorError61=true;_iteratorError61=err;}finally{try{if(!_iteratorNormalCompletion61&&_iterator61["return"]!=null){_iterator61["return"]();}}finally{if(_didIteratorError61){throw _iteratorError61;}}}return Cs.resolve(r);}},{key:"Mo",value:function Mo(t,e){return Cs.resolve(this.el(e));}},{key:"Lo",value:function Lo(t,e){var n=e+1,s=this.nl(n),i=s<0?0:s;// The requested batchId may still be out of range so normalize it to the
// start of the queue.
return Cs.resolve(this.vr.length>i?this.vr[i]:null);}},{key:"Bo",value:function Bo(){return Cs.resolve(0===this.vr.length?-1:this.Zh-1);}},{key:"qo",value:function qo(t){return Cs.resolve(this.vr.slice());}},{key:"Cr",value:function Cr(t,e){var _this133=this;var n=new qr(e,0),s=new qr(e,Number.POSITIVE_INFINITY),i=[];return this.tl.Nt([n,s],function(t){var e=_this133.el(t.Gc);i.push(e);}),Cs.resolve(i);}},{key:"Mr",value:function Mr(t,e){var _this134=this;var n=new xt(rt);return e.forEach(function(t){var e=new qr(t,0),s=new qr(t,Number.POSITIVE_INFINITY);_this134.tl.Nt([e,s],function(t){n=n.add(t.Gc);});}),Cs.resolve(this.sl(n));}},{key:"Qr",value:function Qr(t,e){// Use the query path as a prefix for testing if a document matches the
// query.
var n=e.path,s=n.length+1;// Construct a document reference for actually scanning the index. Unlike
// the prefix the document key in this reference must have an even number of
// segments. The empty segment can be used a suffix of the query path
// because it precedes all other segments in an ordered traversal.
var i=n;k.F(i)||(i=i.child(""));var r=new qr(new k(i),0);// Find unique batchIDs referenced by all documents potentially matching the
// query.
var o=new xt(rt);return this.tl.Ft(function(t){var e=t.key.path;return!!n.T(e)&&(// Rows with document keys more than one segment longer than the query
// path can't be matches. For example, a query on 'rooms' can't match
// the document /rooms/abc/messages/xyx.
// TODO(mcg): we'll need a different scanner when we implement
// ancestor queries.
e.length===s&&(o=o.add(t.Gc)),!0);},r),Cs.resolve(this.sl(o));}},{key:"sl",value:function sl(t){var _this135=this;// Construct an array of matching batches, sorted by batchID to ensure that
// multiple mutations affecting the same document key are applied in order.
var e=[];return t.forEach(function(t){var n=_this135.el(t);null!==n&&e.push(n);}),e;}},{key:"Qo",value:function Qo(t,e){var _this136=this;b(0===this.il(e.batchId,"removed")),this.vr.shift();var n=this.tl;return Cs.forEach(e.mutations,function(s){var i=new qr(s.key,e.batchId);return n=n["delete"](i),_this136.Co.Ko(t,s.key);}).next(function(){_this136.tl=n;});}},{key:"jo",value:function jo(t){// No-op since the memory mutation queue does not maintain a separate cache.
}},{key:"zo",value:function zo(t,e){var n=new qr(e,0),s=this.tl.$t(n);return Cs.resolve(e.isEqual(s&&s.key));}},{key:"Go",value:function Go(t){return this.vr.length,Cs.resolve();}/**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId The batchId to search for
     * @param action A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */},{key:"il",value:function il(t,e){return this.nl(t);}/**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @return The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */},{key:"nl",value:function nl(t){if(0===this.vr.length)// As an index this is past the end of the queue
return 0;// Examine the front of the queue to figure out the difference between the
// batchId and indexes in the array. Note that since the queue is ordered
// by batchId, if the first batch has a larger batchId then the requested
// batchId doesn't exist in the queue.
return t-this.vr[0].batchId;}/**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */},{key:"el",value:function el(t){var e=this.nl(t);if(e<0||e>=this.vr.length)return null;return this.vr[e];}}]);return la;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var _a=/*#__PURE__*/function(){/**
     * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
     * return 0 to avoid unnecessarily doing the work of calculating the size.
     */function _a(t,e){_classCallCheck(this,_a);this.Sr=t,this.rl=e,/** Underlying cache of documents and their read times. */this.docs=new Nt(k.i),/** Size of all cached documents. */this.size=0;}/**
     * Adds the supplied entry to the cache and updates the cache size as appropriate.
     *
     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */_createClass(_a,[{key:"Tr",value:function Tr(t,e,n){var s=e.key,i=this.docs.get(s),r=i?i.size:0,o=this.rl(e);return this.docs=this.docs.rt(s,{Zo:e,size:o,readTime:n}),this.size+=o-r,this.Sr.ko(t,s.path.h());}/**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */},{key:"Ir",value:function Ir(t){var e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size);}},{key:"Ar",value:function Ar(t,e){var n=this.docs.get(e);return Cs.resolve(n?n.Zo:null);}},{key:"getEntries",value:function getEntries(t,e){var _this137=this;var n=Lt();return e.forEach(function(t){var e=_this137.docs.get(t);n=n.rt(t,e?e.Zo:null);}),Cs.resolve(n);}},{key:"Or",value:function Or(t,e,n){var s=qt();// Documents are ordered by key, so we can use a prefix scan to narrow down
// the documents we need to match the query against.
var i=new k(e.path.child("")),r=this.docs._t(i);for(;r.It();){var _r$Et=r.Et(),_t86=_r$Et.key,_r$Et$value=_r$Et.value,_i30=_r$Et$value.Zo,_o10=_r$Et$value.readTime;if(!e.path.T(_t86.path))break;_o10.L(n)<=0||_i30 instanceof jn&&hs(e,_i30)&&(s=s.rt(_i30.key,_i30));}return Cs.resolve(s);}},{key:"ol",value:function ol(t,e){return Cs.forEach(this.docs,function(t){return e(t);});}},{key:"aa",value:function aa(t){// `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
// a separate changelog and does not need special handling for removals.
return new _a.ca(this);}},{key:"ha",value:function ha(t){return Cs.resolve(this.size);}}]);return _a;}();/**
 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
 */_a.ca=/*#__PURE__*/function(_di2){_inherits(_class5,_di2);function _class5(t){var _this138;_classCallCheck(this,_class5);_this138=_possibleConstructorReturn(this,_getPrototypeOf(_class5).call(this)),_this138.la=t;return _this138;}_createClass(_class5,[{key:"Pr",value:function Pr(t){var _this139=this;var e=[];return this.dr.forEach(function(n,s){s?e.push(_this139.la.Tr(t,s,_this139.readTime)):_this139.la.Ir(n);}),Cs.$n(e);}},{key:"Rr",value:function Rr(t,e){return this.la.Ar(t,e);}},{key:"gr",value:function gr(t,e){return this.la.getEntries(t,e);}}]);return _class5;}(di);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var fa=/*#__PURE__*/function(){function fa(t){_classCallCheck(this,fa);this.persistence=t,/**
         * Maps a target to the data about that target
         */this.al=new dt(function(t){return gt(t);},yt),/** The last received snapshot version. */this.lastRemoteSnapshotVersion=mt.min(),/** The highest numbered target ID encountered. */this.highestTargetId=0,/** The highest sequence number encountered. */this.cl=0,/**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */this.ul=new Br(),this.targetCount=0,this.hl=Tr.ma();}_createClass(fa,[{key:"De",value:function De(t,e){return this.al.forEach(function(t,n){return e(n);}),Cs.resolve();}},{key:"Ra",value:function Ra(t){return Cs.resolve(this.lastRemoteSnapshotVersion);}},{key:"ga",value:function ga(t){return Cs.resolve(this.cl);}},{key:"Ea",value:function Ea(t){return this.highestTargetId=this.hl.next(),Cs.resolve(this.highestTargetId);}},{key:"Pa",value:function Pa(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.cl&&(this.cl=e),Cs.resolve();}},{key:"Va",value:function Va(t){this.al.set(t.target,t);var e=t.targetId;e>this.highestTargetId&&(this.hl=new Tr(e),this.highestTargetId=e),t.sequenceNumber>this.cl&&(this.cl=t.sequenceNumber);}},{key:"ya",value:function ya(t,e){return this.Va(e),this.targetCount+=1,Cs.resolve();}},{key:"ba",value:function ba(t,e){return this.Va(e),Cs.resolve();}},{key:"va",value:function va(t,e){return this.al["delete"](e.target),this.ul.Wc(e.targetId),this.targetCount-=1,Cs.resolve();}},{key:"Vo",value:function Vo(t,e,n){var _this140=this;var s=0;var i=[];return this.al.forEach(function(r,o){o.sequenceNumber<=e&&null===n.get(o.targetId)&&(_this140.al["delete"](r),i.push(_this140.Sa(t,o.targetId)),s++);}),Cs.$n(i).next(function(){return s;});}},{key:"Da",value:function Da(t){return Cs.resolve(this.targetCount);}},{key:"Ca",value:function Ca(t,e){var n=this.al.get(e)||null;return Cs.resolve(n);}},{key:"Na",value:function Na(t,e,n){return this.ul.qc(e,n),Cs.resolve();}},{key:"$a",value:function $a(t,e,n){this.ul.Qc(e,n);var s=this.persistence.Co,i=[];return s&&e.forEach(function(e){i.push(s.Ko(t,e));}),Cs.$n(i);}},{key:"Sa",value:function Sa(t,e){return this.ul.Wc(e),Cs.resolve();}},{key:"ka",value:function ka(t,e){var n=this.ul.Kc(e);return Cs.resolve(n);}},{key:"zo",value:function zo(t,e){return Cs.resolve(this.ul.zo(e));}}]);return fa;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A memory-backed instance of Persistence. Data is stored only in RAM and
 * not persisted across sessions.
 */var da=/*#__PURE__*/function(){/**
     * The constructor accepts a factory for creating a reference delegate. This
     * allows both the delegate and this instance to have strong references to
     * each other without having nullable fields that would then need to be
     * checked or asserted on every access.
     */function da(t){var _this141=this;_classCallCheck(this,da);this.ll={},this.Ba=new ei(0),this.qa=!1,this.qa=!0,this.Co=t(this),this.Ha=new fa(this);this.Sr=new Yi(),this.br=new _a(this.Sr,function(t){return _this141.Co._l(t);});}_createClass(da,[{key:"start",value:function start(){return Promise.resolve();}},{key:"Si",value:function Si(){// No durable state to ensure is closed on shutdown.
return this.qa=!1,Promise.resolve();}},{key:"nc",value:function nc(){// No op.
}},{key:"sc",value:function sc(){// No op.
}},{key:"gc",value:function gc(){return this.Sr;}},{key:"Ic",value:function Ic(t){var e=this.ll[t.Zs()];return e||(e=new la(this.Sr,this.Co),this.ll[t.Zs()]=e),e;}},{key:"Ac",value:function Ac(){return this.Ha;}},{key:"Rc",value:function Rc(){return this.br;}},{key:"runTransaction",value:function runTransaction(t,e,n){var _this142=this;g("MemoryPersistence","Starting transaction:",t);var s=new wa(this.Ba.next());return this.Co.fl(),n(s).next(function(t){return _this142.Co.dl(s).next(function(){return t;});}).Nn().then(function(t){return s.pr(),t;});}},{key:"wl",value:function wl(t,e){return Cs.xn(Object.values(this.ll).map(function(n){return function(){return n.zo(t,e);};}));}},{key:"Ti",get:function get(){return this.qa;}}]);return da;}();/**
 * Memory persistence is not actually transactional, but future implementations
 * may have transaction-scoped state.
 */var wa=/*#__PURE__*/function(_mi2){_inherits(wa,_mi2);function wa(t){var _this143;_classCallCheck(this,wa);_this143=_possibleConstructorReturn(this,_getPrototypeOf(wa).call(this)),_this143.Ma=t;return _this143;}return wa;}(mi);var ma=/*#__PURE__*/function(){function ma(t){_classCallCheck(this,ma);this.persistence=t,/** Tracks all documents that are active in Query views. */this.ml=new Br(),/** The list of documents that are potentially GCed after each transaction. */this.Tl=null;}_createClass(ma,[{key:"Fa",value:function Fa(t,e,n){return this.ml.Fa(n,e),this.Il["delete"](n.toString()),Cs.resolve();}},{key:"xa",value:function xa(t,e,n){return this.ml.xa(n,e),this.Il.add(n.toString()),Cs.resolve();}},{key:"Ko",value:function Ko(t,e){return this.Il.add(e.toString()),Cs.resolve();}},{key:"removeTarget",value:function removeTarget(t,e){var _this144=this;this.ml.Wc(e.targetId).forEach(function(t){return _this144.Il.add(t.toString());});var n=this.persistence.Ac();return n.ka(t,e.targetId).next(function(t){t.forEach(function(t){return _this144.Il.add(t.toString());});}).next(function(){return n.va(t,e);});}},{key:"fl",value:function fl(){this.Tl=new Set();}},{key:"dl",value:function dl(t){var _this145=this;// Remove newly orphaned documents.
var e=this.persistence.Rc().aa();return Cs.forEach(this.Il,function(n){var s=k.D(n);return _this145.Al(t,s).next(function(t){t||e.Ir(s);});}).next(function(){return _this145.Tl=null,e.apply(t);});}},{key:"vc",value:function vc(t,e){var _this146=this;return this.Al(t,e).next(function(t){t?_this146.Il["delete"](e.toString()):_this146.Il.add(e.toString());});}},{key:"_l",value:function _l(t){// For eager GC, we don't care about the document size, there are no size thresholds.
return 0;}},{key:"Al",value:function Al(t,e){var _this147=this;return Cs.xn([function(){return Cs.resolve(_this147.ml.zo(e));},function(){return _this147.persistence.Ac().zo(t,e);},function(){return _this147.persistence.wl(t,e);}]);}},{key:"Il",get:function get(){if(this.Tl)return this.Tl;throw p();}}],[{key:"El",value:function El(t){return new ma(t);}}]);return ma;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides a simple helper class that implements the Stream interface to
 * bridge to other implementations that are streams but do not implement the
 * interface. The stream callbacks are invoked with the callOn... methods.
 */var Ta=/*#__PURE__*/function(){function Ta(t){_classCallCheck(this,Ta);this.Rl=t.Rl,this.gl=t.gl;}_createClass(Ta,[{key:"yu",value:function yu(t){this.Pl=t;}},{key:"Iu",value:function Iu(t){this.yl=t;}},{key:"onMessage",value:function onMessage(t){this.Vl=t;}},{key:"close",value:function close(){this.gl();}},{key:"send",value:function send(t){this.Rl(t);}},{key:"pl",value:function pl(){this.Pl();}},{key:"bl",value:function bl(t){this.yl(t);}},{key:"vl",value:function vl(t){this.Vl(t);}}]);return Ta;}();/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ea={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};/**
 * Maps RPC names to the corresponding REST endpoint name.
 *
 * We use array notation to avoid mangling.
 */var Ia=/*#__PURE__*/function(_ref17){_inherits(Ia,_ref17);function Ia(t){var _this148;_classCallCheck(this,Ia);_this148=_possibleConstructorReturn(this,_getPrototypeOf(Ia).call(this,t)),_this148.forceLongPolling=t.forceLongPolling;return _this148;}_createClass(Ia,[{key:"$l",value:function $l(t,e,n,s){return new Promise(function(i,r){var o=new _webchannelWrapper.XhrIo();o.listenOnce(_webchannelWrapper.EventType.COMPLETE,function(){try{switch(o.getLastErrorCode()){case _webchannelWrapper.ErrorCode.NO_ERROR:var _e67=o.getResponseJson();g("Connection","XHR received:",JSON.stringify(_e67)),i(_e67);break;case _webchannelWrapper.ErrorCode.TIMEOUT:g("Connection",'RPC "'+t+'" timed out'),r(new I(E.DEADLINE_EXCEEDED,"Request time out"));break;case _webchannelWrapper.ErrorCode.HTTP_ERROR:var _n60=o.getStatus();if(g("Connection",'RPC "'+t+'" failed with status:',_n60,"response text:",o.getResponseText()),_n60>0){var _t87=o.getResponseJson().error;if(_t87&&_t87.status&&_t87.message){var _e68=function(t){var e=t.toLowerCase().replace("_","-");return Object.values(E).indexOf(e)>=0?e:E.UNKNOWN;}(_t87.status);r(new I(_e68,_t87.message));}else r(new I(E.UNKNOWN,"Server responded with status "+o.getStatus()));}else// If we received an HTTP_ERROR but there's no status code,
// it's most probably a connection issue
r(new I(E.UNAVAILABLE,"Connection failed."));break;default:p();}}finally{g("Connection",'RPC "'+t+'" completed.');}});var a=JSON.stringify(s);o.send(e,"POST",a,n,15);});}},{key:"Vu",value:function Vu(t,e){var n=[this.Dl,"/","google.firestore.v1.Firestore","/",t,"/channel"],u=(0,_webchannelWrapper.createWebChannelTransport)(),h={// Required for backend stickiness, routing behavior is based on this
// parameter.
httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{// This param is used to improve routing and project isolation by the
// backend and must be included in every request.
database:"projects/".concat(this.U.projectId,"/databases/").concat(this.U.database)},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{// Override the default timeout (randomized between 10-20 seconds) since
// a large write batch on a slow internet connection may take a long
// time to send to the backend. Rather than have WebChannel impose a
// tight timeout which could lead to infinite timeouts and retries, we
// set it very large (5-10 minutes) and rely on the browser's builtin
// timeouts to kick in if the request isn't working.
forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling};this.Fl(h.initMessageHeaders,e),// Sending the custom headers we just added to request.initMessageHeaders
// (Authorization, etc.) will trigger the browser to make a CORS preflight
// request because the XHR will no longer meet the criteria for a "simple"
// CORS request:
// https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
// Therefore to avoid the CORS preflight request (an extra network
// roundtrip), we use the httpHeadersOverwriteParam option to specify that
// the headers should instead be encoded into a special "$httpHeaders" query
// parameter, which is recognized by the webchannel backend. This is
// formally defined here:
// https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
// TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
// doesn't have an Origin header. So we have to exclude a few browser environments that are
// known to (sometimes) not include an Origin. See
// https://github.com/firebase/firebase-js-sdk/issues/1491.
(0,_util.isMobileCordova)()||(0,_util.isReactNative)()||(0,_util.isElectron)()||(0,_util.isIE)()||(0,_util.isUWP)()||(0,_util.isBrowserExtension)()||(h.httpHeadersOverwriteParam="$httpHeaders");var l=n.join("");g("Connection","Creating WebChannel: "+l,h);var _=u.createWebChannel(l,h);// WebChannel supports sending the first message with the handshake - saving
// a network round trip. However, it will have to call send in the same
// JS event loop as open. In order to enforce this, we delay actually
// opening the WebChannel until send is called. Whether we have called
// open is tracked with this variable.
var f=!1,m=!1;// A flag to determine whether the stream was closed (by us or through an
// error/close event) to avoid delivering multiple close events or sending
// on a closed stream
var T=new Ta({Rl:function Rl(t){m?g("Connection","Not sending because WebChannel is closed:",t):(f||(g("Connection","Opening WebChannel transport."),_.open(),f=!0),g("Connection","WebChannel sending:",t),_.send(t));},gl:function gl(){return _.close();}}),A=function A(t,e){// TODO(dimond): closure typing seems broken because WebChannel does
// not implement goog.events.Listenable
_.listen(t,function(t){try{e(t);}catch(t){setTimeout(function(){throw t;},0);}});};// Closure events are guarded and exceptions are swallowed, so catch any
// exception and rethrow using a setTimeout so they become visible again.
// Note that eventually this function could go away if we are confident
// enough the code is exception free.
return A(_webchannelWrapper.WebChannel.EventType.OPEN,function(){m||g("Connection","WebChannel transport opened.");}),A(_webchannelWrapper.WebChannel.EventType.CLOSE,function(){m||(m=!0,g("Connection","WebChannel transport closed"),T.bl());}),A(_webchannelWrapper.WebChannel.EventType.ERROR,function(t){m||(m=!0,y("Connection","WebChannel transport errored:",t),T.bl(new I(E.UNAVAILABLE,"The operation could not be completed")));}),A(_webchannelWrapper.WebChannel.EventType.MESSAGE,function(t){var e;if(!m){var _n61=t.data[0];b(!!_n61);// TODO(b/35143891): There is a bug in One Platform that caused errors
// (and only errors) to be wrapped in an extra array. To be forward
// compatible with the bug we need to check either condition. The latter
// can be removed once the fix has been rolled out.
// Use any because msgData.error is not typed.
var _s51=_n61,_i31=_s51.error||(null===(e=_s51[0])||void 0===e?void 0:e.error);if(_i31){g("Connection","WebChannel received error:",_i31);// error.status will be a string like 'OK' or 'NOT_FOUND'.
var _t88=_i31.status;var _e69=function(t){// lookup by string
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var e=vt[t];if(void 0!==e)return Ct(e);}(_t88),_n62=_i31.message;void 0===_e69&&(_e69=E.INTERNAL,_n62="Unknown error status: "+_t88+" with message "+_i31.message),// Mark closed so no further events are propagated
m=!0,T.bl(new I(_e69,_n62)),_.close();}else g("Connection","WebChannel received:",_n61),T.vl(_n61);}}),setTimeout(function(){// Technically we could/should wait for the WebChannel opened event,
// but because we want to send the first message with the WebChannel
// handshake we pretend the channel opened here (asynchronously), and
// then delay the actual open until the first message is sent.
T.pl();},0),T;}}]);return Ia;}(/*#__PURE__*/ /**
 * Base class for all Rest-based connections to the backend (WebChannel and
 * HTTP).
 */function(){function _class6(t){_classCallCheck(this,_class6);this.Sl=t,this.U=t.U;var e=t.ssl?"https":"http";this.Dl=e+"://"+t.host,this.Cl="projects/"+this.U.projectId+"/databases/"+this.U.database+"/documents";}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */_createClass(_class6,[{key:"Mu",value:function Mu(t,e,n,s){var i=this.Nl(t,e);g("RestConnection","Sending: ",i,n);var r={};return this.Fl(r,s),this.$l(t,i,r,n).then(function(t){return g("RestConnection","Received: ",t),t;},function(e){throw y("RestConnection",t+" failed with error: ",e,"url: ",i,"request:",n),e;});}},{key:"Ou",value:function Ou(t,e,n,s){// The REST API automatically aggregates all of the streamed results, so we
// can just use the normal invoke() method.
return this.Mu(t,e,n,s);}/**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */},{key:"Fl",value:function Fl(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/7.22.0",// Content-Type: text/plain will avoid preflight requests which might
// mess with CORS and redirects by proxies. If we add custom headers
// we will need to change this code to potentially use the $httpOverwrite
// parameter supported by ESF to avoid triggering preflight requests.
t["Content-Type"]="text/plain",e)for(var n in e.zc){e.zc.hasOwnProperty(n)&&(t[n]=e.zc[n]);}}},{key:"Nl",value:function Nl(t,e){var n=Ea[t];return"".concat(this.Dl,"/v1/").concat(e,":").concat(n);}}]);return _class6;}());/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
/* eslint-disable no-restricted-globals */ /**
 * Browser implementation of ConnectivityMonitor.
 */var Aa=/*#__PURE__*/function(){function Aa(){var _this149=this;_classCallCheck(this,Aa);this.xl=function(){return _this149.kl();},this.Ml=function(){return _this149.Ol();},this.Ll=[],this.Bl();}_createClass(Aa,[{key:"eh",value:function eh(t){this.Ll.push(t);}},{key:"Si",value:function Si(){window.removeEventListener("online",this.xl),window.removeEventListener("offline",this.Ml);}},{key:"Bl",value:function Bl(){window.addEventListener("online",this.xl),window.addEventListener("offline",this.Ml);}},{key:"kl",value:function kl(){g("ConnectivityMonitor","Network connectivity changed: AVAILABLE");var _iteratorNormalCompletion62=true;var _didIteratorError62=false;var _iteratorError62=undefined;try{for(var _iterator62=this.Ll[Symbol.iterator](),_step62;!(_iteratorNormalCompletion62=(_step62=_iterator62.next()).done);_iteratorNormalCompletion62=true){var t=_step62.value;t(0/* AVAILABLE */);}}catch(err){_didIteratorError62=true;_iteratorError62=err;}finally{try{if(!_iteratorNormalCompletion62&&_iterator62["return"]!=null){_iterator62["return"]();}}finally{if(_didIteratorError62){throw _iteratorError62;}}}}},{key:"Ol",value:function Ol(){g("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");var _iteratorNormalCompletion63=true;var _didIteratorError63=false;var _iteratorError63=undefined;try{for(var _iterator63=this.Ll[Symbol.iterator](),_step63;!(_iteratorNormalCompletion63=(_step63=_iterator63.next()).done);_iteratorNormalCompletion63=true){var t=_step63.value;t(1/* UNAVAILABLE */);}}catch(err){_didIteratorError63=true;_iteratorError63=err;}finally{try{if(!_iteratorNormalCompletion63&&_iterator63["return"]!=null){_iterator63["return"]();}}finally{if(_didIteratorError63){throw _iteratorError63;}}}}// TODO(chenbrian): Consider passing in window either into this component or
// here for testing via FakeWindow.
/** Checks that all used attributes of window are available. */}],[{key:"On",value:function On(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener;}}]);return Aa;}();/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ra=/*#__PURE__*/function(){function Ra(){_classCallCheck(this,Ra);}_createClass(Ra,[{key:"eh",value:function eh(t){// No-op.
}},{key:"Si",value:function Si(){// No-op.
}}]);return Ra;}();/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Initializes the WebChannelConnection for the browser. */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function ga(t){return new pe(t,/* useProto3Json= */!0);}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Pa="You are using the memory-only build of Firestore. Persistence support is only available via the @firebase/firestore bundle or the firebase-firestore.js build.";/**
 * Provides all components needed for Firestore with in-memory persistence.
 * Uses EagerGC garbage collection.
 */var ya=/*#__PURE__*/function(){function ya(){_classCallCheck(this,ya);}_createClass(ya,[{key:"initialize",value:function initialize(t){return regeneratorRuntime.async(function initialize$(_context64){while(1){switch(_context64.prev=_context64.next){case 0:this.Ch=this.ql(t);this.persistence=this.Ul(t);_context64.next=4;return regeneratorRuntime.awrap(this.persistence.start());case 4:this.Ql=this.Wl(t);this.Gu=this.jl(t);case 6:case"end":return _context64.stop();}}},null,this);}},{key:"Wl",value:function Wl(t){return null;}},{key:"jl",value:function jl(t){/** Manages our in-memory or durable persistence. */return e=this.persistence,n=new ha(),s=t.Kl,new Dr(e,n,s);var e,n,s;}},{key:"Ul",value:function Ul(t){if(t.persistenceSettings.Gl)throw new I(E.FAILED_PRECONDITION,Pa);return new da(ma.El);}},{key:"ql",value:function ql(t){return new li();}},{key:"terminate",value:function terminate(){return regeneratorRuntime.async(function terminate$(_context65){while(1){switch(_context65.prev=_context65.next){case 0:this.Ql&&this.Ql.stop();_context65.next=3;return regeneratorRuntime.awrap(this.Ch.Si());case 3:_context65.next=5;return regeneratorRuntime.awrap(this.persistence.Si());case 5:case"end":return _context65.stop();}}},null,this);}},{key:"clearPersistence",value:function clearPersistence(t,e){throw new I(E.FAILED_PRECONDITION,Pa);}}]);return ya;}();/**
 * Provides all components needed for Firestore with IndexedDB persistence.
 */var Va=/*#__PURE__*/function(_ya){_inherits(Va,_ya);function Va(t){var _this150;_classCallCheck(this,Va);_this150=_possibleConstructorReturn(this,_getPrototypeOf(Va).call(this)),_this150.zl=t;return _this150;}_createClass(Va,[{key:"initialize",value:function initialize(t){return regeneratorRuntime.async(function initialize$(_context67){while(1){switch(_context67.prev=_context67.next){case 0:_context67.next=2;return regeneratorRuntime.awrap(_get(_getPrototypeOf(Va.prototype),"initialize",this).call(this,t));case 2:_context67.next=4;return regeneratorRuntime.awrap(function _callee18(t){var e,n;return regeneratorRuntime.async(function _callee18$(_context66){while(1){switch(_context66.prev=_context66.next){case 0:e=v(t),n=v(e.Fc);return _context66.abrupt("return",e.persistence.runTransaction("Synchronize last document change read time","readonly",function(t){return n.oa(t);}).then(function(t){e.Nc=t;}));case 2:case"end":return _context66.stop();}}});}(this.Gu));case 4:_context67.next=6;return regeneratorRuntime.awrap(this.zl.initialize(this,t));case 6:_context67.next=8;return regeneratorRuntime.awrap(ua(this.zl._i));case 8:_context67.next=10;return regeneratorRuntime.awrap(mo(this.zl.Sh));case 10:case"end":return _context67.stop();}}},null,this);}},{key:"Wl",value:function Wl(t){var e=this.persistence.Co["do"];return new Pi(e,t.os);}},{key:"Ul",value:function Ul(t){var e=Sr(t.Sl.U,t.Sl.persistenceKey),n=ga(t.Sl.U);return new yr(t.persistenceSettings.synchronizeTabs,e,t.clientId,gi.oo(t.persistenceSettings.cacheSizeBytes),t.os,qs(),Us(),n,this.Ch,t.persistenceSettings.La);}},{key:"ql",value:function ql(t){return new li();}},{key:"clearPersistence",value:function clearPersistence(t,e){return function _callee19(t){var e;return regeneratorRuntime.async(function _callee19$(_context68){while(1){switch(_context68.prev=_context68.next){case 0:if(Ns.On()){_context68.next=2;break;}return _context68.abrupt("return",Promise.resolve());case 2:e=t+"main";_context68.next=5;return regeneratorRuntime.awrap(Ns["delete"](e));case 5:case"end":return _context68.stop();}}});}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(Sr(t,e));}}]);return Va;}(ya);/**
 * Provides all components needed for Firestore with multi-tab IndexedDB
 * persistence.
 *
 * In the legacy client, this provider is used to provide both multi-tab and
 * non-multi-tab persistence since we cannot tell at build time whether
 * `synchronizeTabs` will be enabled.
 */var pa=/*#__PURE__*/function(_Va){_inherits(pa,_Va);function pa(){_classCallCheck(this,pa);return _possibleConstructorReturn(this,_getPrototypeOf(pa).apply(this,arguments));}_createClass(pa,[{key:"initialize",value:function initialize(t){var _this151=this;var e;return regeneratorRuntime.async(function initialize$(_context70){while(1){switch(_context70.prev=_context70.next){case 0:_context70.next=2;return regeneratorRuntime.awrap(_get(_getPrototypeOf(pa.prototype),"initialize",this).call(this,t));case 2:e=this.zl._i;_context70.t0=this.Ch instanceof hi;if(!_context70.t0){_context70.next=8;break;}this.Ch._i={tr:ea.bind(null,e),er:oa.bind(null,e),nr:aa.bind(null,e),Vi:ra.bind(null,e)};_context70.next=8;return regeneratorRuntime.awrap(this.Ch.start());case 8:_context70.next=10;return regeneratorRuntime.awrap(this.persistence.ec(function _callee20(t){return regeneratorRuntime.async(function _callee20$(_context69){while(1){switch(_context69.prev=_context69.next){case 0:_context69.next=2;return regeneratorRuntime.awrap(na(_this151.zl._i,t));case 2:_this151.Ql&&(t&&!_this151.Ql.Ti?_this151.Ql.start(_this151.Gu):t||_this151.Ql.stop());case 3:case"end":return _context69.stop();}}});}));case 10:case"end":return _context70.stop();}}},null,this);}},{key:"ql",value:function ql(t){if(t.persistenceSettings.Gl&&t.persistenceSettings.synchronizeTabs){var _e70=qs();if(!hi.On(_e70))throw new I(E.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");var n=Sr(t.Sl.U,t.Sl.persistenceKey);return new hi(_e70,t.os,n,t.clientId,t.Kl);}return new li();}}]);return pa;}(Va);/**
 * Initializes and wires the components that are needed to interface with the
 * network.
 */var ba=/*#__PURE__*/function(){function ba(){_classCallCheck(this,ba);}_createClass(ba,[{key:"initialize",value:function initialize(t,e){var _this152=this;return regeneratorRuntime.async(function initialize$(_context71){while(1){switch(_context71.prev=_context71.next){case 0:_context71.t0=this.Gu;if(_context71.t0){_context71.next=12;break;}this.Gu=t.Gu;this.Ch=t.Ch;this.zu=this.Hl(e);this.Sh=this.Yl(e);this.Dh=this.Jl(e);this._i=this.Xl(e);this.Ch.fi=function(t){return Lo(_this152._i,t,1/* SharedClientState */);};this.Sh.Hu.Zl=Xo.bind(null,this._i);_context71.next=12;return regeneratorRuntime.awrap(Vo(this.Sh,this._i.Wh));case 12:case"end":return _context71.stop();}}},null,this);}},{key:"Jl",value:function Jl(t){return new Gs();}},{key:"Hl",value:function Hl(t){var e=ga(t.Sl.U),n=(s=t.Sl,new Ia(s));var s;/** Return the Platform-specific connectivity monitor. */return function(t,e,n){return new Yr(t,e,n);}(t.credentials,n,e);}},{key:"Yl",value:function Yl(t){var _this153=this;return e=this.Gu,n=this.zu,s=t.os,i=function i(t){return Lo(_this153._i,t,0/* RemoteStore */);},r=Aa.On()?new Aa():new Ra(),new Xr(e,n,s,i,r);var e,n,s,i,r;/** Re-enables the network. Idempotent. */}},{key:"Xl",value:function Xl(t){return function(t,e,n,// PORTING NOTE: Manages state synchronization in multi-tab environments.
s,i,r,o){var a=new Fo(t,e,n,s,i,r);return o&&(a.Qh=!0),a;}(this.Gu,this.Sh,this.Dh,this.Ch,t.Kl,t.Nh,!t.persistenceSettings.Gl||!t.persistenceSettings.synchronizeTabs);}},{key:"terminate",value:function terminate(){return eo(this.Sh);}}]);return ba;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */var va=/*#__PURE__*/function(){function va(t){_classCallCheck(this,va);this.observer=t,/**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */this.muted=!1;}_createClass(va,[{key:"next",value:function next(t){this.observer.next&&this.t_(this.observer.next,t);}},{key:"error",value:function error(t){this.observer.error?this.t_(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t);}},{key:"e_",value:function e_(){this.muted=!0;}},{key:"t_",value:function t_(t,e){var _this154=this;this.muted||setTimeout(function(){_this154.muted||t(e);},0);}}]);return va;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
/**
 * A field class base class that is shared by the lite, full and legacy SDK,
 * which supports shared code that deals with FieldPaths.
 */ // Use underscore prefix to hide this class from our Public API.
// eslint-disable-next-line @typescript-eslint/naming-convention
var Sa=function Sa(t){_classCallCheck(this,Sa);!function(t,e,n,s){if(!(e instanceof Array)||e.length<s)throw new I(E.INVALID_ARGUMENT,"Function ".concat(t,"() requires its ").concat(n," argument to be an array with at least ")+nt(s,"element")+".");}("FieldPath",t,"fieldNames",1);for(var _e71=0;_e71<t.length;++_e71){if(q("FieldPath","string",_e71,t[_e71]),0===t[_e71].length)throw new I(E.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");}this.n_=new x(t);};/**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a list
 * of field names (referring to a nested field in the document).
 */var Da=/*#__PURE__*/function(_Sa){_inherits(Da,_Sa);/**
     * Creates a FieldPath from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames A list of field names.
     */function Da(){_classCallCheck(this,Da);for(var _len6=arguments.length,t=new Array(_len6),_key6=0;_key6<_len6;_key6++){t[_key6]=arguments[_key6];}return _possibleConstructorReturn(this,_getPrototypeOf(Da).call(this,t));}_createClass(Da,[{key:"isEqual",value:function isEqual(t){if(!(t instanceof Da))throw Z("isEqual","FieldPath",1,t);return this.n_.isEqual(t.n_);}}],[{key:"documentId",value:function documentId(){/**
         * Internal Note: The backend doesn't technically support querying by
         * document ID. Instead it queries by the entire document name (full path
         * included), but in the cases we currently support documentId(), the net
         * effect is the same.
         */return new Da(x.v().R());}}]);return Da;}(Sa);/**
 * Matches any characters in a field path string that are reserved.
 */var Ca=new RegExp("[~\\*/\\[\\]]");/**
 * Parses a field path string into a FieldPath, treating dots as separators.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */var Na=/**
     * @param _methodName The public API endpoint that returns this class.
     */function Na(t){_classCallCheck(this,Na);this.s_=t;};/**
 * Returns a sentinel for use with {@link updateDoc()} or
 * {@link setDoc `setDoc({}, { merge: true })`} to mark a field for deletion.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Fa=/*#__PURE__*/function(_Na){_inherits(Fa,_Na);function Fa(){_classCallCheck(this,Fa);return _possibleConstructorReturn(this,_getPrototypeOf(Fa).apply(this,arguments));}_createClass(Fa,[{key:"i_",value:function i_(t){if(2/* MergeSet */!==t.r_)throw 1/* Update */===t.r_?t.o_(this.s_+"() can only appear at the top level of your update data"):t.o_(this.s_+"() cannot be used with set() unless you pass {merge:true}");// No transform to add for a delete, but we need to add it to our
// fieldMask so it gets deleted.
return t.Qe.push(t.path),null;}},{key:"isEqual",value:function isEqual(t){return t instanceof Fa;}}]);return Fa;}(Na);/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue The sentinel FieldValue for which to create a child
 *     context.
 * @param context The parent context.
 * @param arrayElement Whether or not the FieldValue has an array.
 */function $a(t,e,n){return new Ka({r_:3/* Argument */,a_:e.settings.a_,methodName:t.s_,c_:n},e.U,e.serializer,e.ignoreUndefinedProperties);}var xa=/*#__PURE__*/function(_Na2){_inherits(xa,_Na2);function xa(){_classCallCheck(this,xa);return _possibleConstructorReturn(this,_getPrototypeOf(xa).apply(this,arguments));}_createClass(xa,[{key:"i_",value:function i_(t){return new gn(t.path,new fn());}},{key:"isEqual",value:function isEqual(t){return t instanceof xa;}}]);return xa;}(Na);var ka=/*#__PURE__*/function(_Na3){_inherits(ka,_Na3);function ka(t,e){var _this155;_classCallCheck(this,ka);_this155=_possibleConstructorReturn(this,_getPrototypeOf(ka).call(this,t)),_this155.u_=e;return _this155;}_createClass(ka,[{key:"i_",value:function i_(t){var e=$a(this,t,/*array=*/!0),n=this.u_.map(function(t){return Xa(t,e);}),s=new dn(n);return new gn(t.path,s);}},{key:"isEqual",value:function isEqual(t){// TODO(mrschmidt): Implement isEquals
return this===t;}}]);return ka;}(Na);var Ma=/*#__PURE__*/function(_Na4){_inherits(Ma,_Na4);function Ma(t,e){var _this156;_classCallCheck(this,Ma);_this156=_possibleConstructorReturn(this,_getPrototypeOf(Ma).call(this,t)),_this156.u_=e;return _this156;}_createClass(Ma,[{key:"i_",value:function i_(t){var e=$a(this,t,/*array=*/!0),n=this.u_.map(function(t){return Xa(t,e);}),s=new mn(n);return new gn(t.path,s);}},{key:"isEqual",value:function isEqual(t){// TODO(mrschmidt): Implement isEquals
return this===t;}}]);return Ma;}(Na);var Oa=/*#__PURE__*/function(_Na5){_inherits(Oa,_Na5);function Oa(t,e){var _this157;_classCallCheck(this,Oa);_this157=_possibleConstructorReturn(this,_getPrototypeOf(Oa).call(this,t)),_this157.h_=e;return _this157;}_createClass(Oa,[{key:"i_",value:function i_(t){var e=new En(t.serializer,Se(t.serializer,this.h_));return new gn(t.path,e);}},{key:"isEqual",value:function isEqual(t){// TODO(mrschmidt): Implement isEquals
return this===t;}}]);return Oa;}(Na);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing a geographic location in Firestore. The
 * location is represented as latitude/longitude pair.
 *
 * Latitude values are in the range of [-90, 90].
 * Longitude values are in the range of [-180, 180].
 */var La=/*#__PURE__*/function(){/**
     * Creates a new immutable `GeoPoint` object with the provided latitude and
     * longitude values.
     * @param latitude The latitude as number between -90 and 90.
     * @param longitude The longitude as number between -180 and 180.
     */function La(t,e){_classCallCheck(this,La);if(O("GeoPoint",arguments,2),q("GeoPoint","number",1,t),q("GeoPoint","number",2,e),!isFinite(t)||t<-90||t>90)throw new I(E.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new I(E.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this.l_=t,this.__=e;}/**
     * The latitude of this `GeoPoint` instance.
     */_createClass(La,[{key:"isEqual",/**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other The `GeoPoint` to compare against.
     * @return true if this `GeoPoint` is equal to the provided one.
     */value:function isEqual(t){return this.l_===t.l_&&this.__===t.__;}},{key:"toJSON",value:function toJSON(){return{latitude:this.l_,longitude:this.__};}/**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */},{key:"H",value:function H(t){return rt(this.l_,t.l_)||rt(this.__,t.__);}},{key:"latitude",get:function get(){return this.l_;}/**
     * The longitude of this `GeoPoint` instance.
     */},{key:"longitude",get:function get(){return this.__;}}]);return La;}();/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class implemented by all API types of the legacy Firestore API which
 * contains a reference to the API type in the firestore-exp API. All internal
 * code unwraps these references, which allows us to only use firestore-exp
 * types in the SDK.
 */var Ba=function Ba(t){_classCallCheck(this,Ba);this.f_=t;};/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var qa=/^__.*__$/;/**
 * A reference to a document in a Firebase project.
 *
 * This class serves as a common base class for the public DocumentReferences
 * exposed in the lite, full and legacy SDK.
 */ // Use underscore prefix to hide this class from our Public API.
// eslint-disable-next-line @typescript-eslint/naming-convention
var Ua=function Ua(t,e,n){_classCallCheck(this,Ua);this.d_=t,this.w_=e,this.m_=n;};/** The result of parsing document data (e.g. for a setData call). */var Qa=/*#__PURE__*/function(){function Qa(t,e,n){_classCallCheck(this,Qa);this.data=t,this.Qe=e,this.fieldTransforms=n;}_createClass(Qa,[{key:"T_",value:function T_(t,e){var n=[];return null!==this.Qe?n.push(new $n(t,this.data,this.Qe,e)):n.push(new Fn(t,this.data,e)),this.fieldTransforms.length>0&&n.push(new kn(t,this.fieldTransforms)),n;}}]);return Qa;}();/** The result of parsing "update" data (i.e. for an updateData call). */var Wa=/*#__PURE__*/function(){function Wa(t,e,n){_classCallCheck(this,Wa);this.data=t,this.Qe=e,this.fieldTransforms=n;}_createClass(Wa,[{key:"T_",value:function T_(t,e){var n=[new $n(t,this.data,this.Qe,e)];return this.fieldTransforms.length>0&&n.push(new kn(t,this.fieldTransforms)),n;}}]);return Wa;}();function ja(t){switch(t){case 0/* Set */:// fall through
case 2/* MergeSet */:// fall through
case 1/* Update */:return!0;case 3/* Argument */:case 4/* ArrayArgument */:return!1;default:throw p();}}/** A "context" object passed around while parsing user data. */var Ka=/*#__PURE__*/function(){/**
     * Initializes a ParseContext with the given source and path.
     *
     * @param settings The settings for the parser.
     * @param databaseId The database ID of the Firestore instance.
     * @param serializer The serializer to use to generate the Value proto.
     * @param ignoreUndefinedProperties Whether to ignore undefined properties
     * rather than throw.
     * @param fieldTransforms A mutable list of field transforms encountered while
     *     parsing the data.
     * @param fieldMask A mutable list of field paths encountered while parsing
     *     the data.
     *
     * TODO(b/34871131): We don't support array paths right now, so path can be
     * null to indicate the context represents any location within an array (in
     * which case certain features will not work and errors will be somewhat
     * compromised).
     */function Ka(t,e,n,s,i,r){_classCallCheck(this,Ka);this.settings=t,this.U=e,this.serializer=n,this.ignoreUndefinedProperties=s,// Minor hack: If fieldTransforms is undefined, we assume this is an
// external call and we need to validate the entire path.
void 0===i&&this.E_(),this.fieldTransforms=i||[],this.Qe=r||[];}_createClass(Ka,[{key:"I_",/** Returns a new context with the specified settings overwritten. */value:function I_(t){return new Ka(Object.assign(Object.assign({},this.settings),t),this.U,this.serializer,this.ignoreUndefinedProperties,this.fieldTransforms,this.Qe);}},{key:"A_",value:function A_(t){var e;var n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.I_({path:n,c_:!1});return s.R_(t),s;}},{key:"g_",value:function g_(t){var e;var n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.I_({path:n,c_:!1});return s.E_(),s;}},{key:"P_",value:function P_(t){// TODO(b/34871131): We don't support array paths right now; so make path
// undefined.
return this.I_({path:void 0,c_:!0});}},{key:"o_",value:function o_(t){return ic(t,this.settings.methodName,this.settings.y_||!1,this.path,this.settings.a_);}/** Returns 'true' if 'fieldPath' was traversed when creating this context. */},{key:"contains",value:function contains(t){return void 0!==this.Qe.find(function(e){return t.T(e);})||void 0!==this.fieldTransforms.find(function(e){return t.T(e.field);});}},{key:"E_",value:function E_(){// TODO(b/34871131): Remove null check once we have proper paths for fields
// within arrays.
if(this.path)for(var t=0;t<this.path.length;t++){this.R_(this.path.get(t));}}},{key:"R_",value:function R_(t){if(0===t.length)throw this.o_("Document fields must not be empty");if(ja(this.r_)&&qa.test(t))throw this.o_('Document fields cannot begin and end with "__"');}},{key:"path",get:function get(){return this.settings.path;}},{key:"r_",get:function get(){return this.settings.r_;}}]);return Ka;}();/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */var Ga=/*#__PURE__*/function(){function Ga(t,e,n){_classCallCheck(this,Ga);this.U=t,this.ignoreUndefinedProperties=e,this.serializer=n||ga(t);}/** Creates a new top-level parse context. */_createClass(Ga,[{key:"V_",value:function V_(t,e,n){var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:!1;return new Ka({r_:t,methodName:e,a_:n,path:x.P(),c_:!1,y_:s},this.U,this.serializer,this.ignoreUndefinedProperties);}}]);return Ga;}();/** Parse document data from a set() call. */function za(t,e,n,s,i){var r=arguments.length>5&&arguments[5]!==undefined?arguments[5]:{};var o=t.V_(r.merge||r.mergeFields?2/* MergeSet */:0/* Set */,e,n,i);ec("Data must be an object, but it was:",o,s);var a=Za(s,o);var c,u;if(r.merge)c=new Rn(o.Qe),u=o.fieldTransforms;else if(r.mergeFields){var _t89=[];var _iteratorNormalCompletion64=true;var _didIteratorError64=false;var _iteratorError64=undefined;try{for(var _iterator64=r.mergeFields[Symbol.iterator](),_step64;!(_iteratorNormalCompletion64=(_step64=_iterator64.next()).done);_iteratorNormalCompletion64=true){var _s52=_step64.value;var _i32=void 0;if(_s52 instanceof Sa)_i32=_s52.n_;else{if("string"!=typeof _s52)throw p();_i32=sc(e,_s52,n);}if(!o.contains(_i32))throw new I(E.INVALID_ARGUMENT,"Field '".concat(_i32,"' is specified in your field mask but missing from your input data."));rc(_t89,_i32)||_t89.push(_i32);}}catch(err){_didIteratorError64=true;_iteratorError64=err;}finally{try{if(!_iteratorNormalCompletion64&&_iterator64["return"]!=null){_iterator64["return"]();}}finally{if(_didIteratorError64){throw _iteratorError64;}}}c=new Rn(_t89),u=o.fieldTransforms.filter(function(t){return c.He(t.field);});}else c=null,u=o.fieldTransforms;return new Qa(new qn(a),c,u);}/** Parse update data from an update() call. */function Ha(t,e,n,s){var i=t.V_(1/* Update */,e,n);ec("Data must be an object, but it was:",i,s);var r=[],o=new Un();D(s,function(t,s){var a=sc(e,t,n),c=i.g_(a);if(s instanceof Fa||s instanceof Ba&&s.f_ instanceof Fa)// Add it to the field mask, but don't add anything to updateData.
r.push(a);else{var _t90=Xa(s,c);null!=_t90&&(r.push(a),o.set(a,_t90));}});var a=new Rn(r);return new Wa(o.Je(),a,i.fieldTransforms);}/** Parse update data from a list of field/value arguments. */function Ya(t,e,n,s,i,r){var o=t.V_(1/* Update */,e,n),a=[nc(e,s,n)],c=[i];if(r.length%2!=0)throw new I(E.INVALID_ARGUMENT,"Function ".concat(e,"() needs to be called with an even number of arguments that alternate between field names and values."));for(var _t91=0;_t91<r.length;_t91+=2){a.push(nc(e,r[_t91])),c.push(r[_t91+1]);}var u=[],h=new Un();// We iterate in reverse order to pick the last value for a field if the
// user specified the field multiple times.
for(var _t92=a.length-1;_t92>=0;--_t92){if(!rc(u,a[_t92])){var _e72=a[_t92],_n63=c[_t92],_s53=o.g_(_e72);if(_n63 instanceof Fa||_n63 instanceof Ba&&_n63.f_ instanceof Fa)// Add it to the field mask, but don't add anything to updateData.
u.push(_e72);else{var _t93=Xa(_n63,_s53);null!=_t93&&(u.push(_e72),h.set(_e72,_t93));}}}var l=new Rn(u);return new Wa(h.Je(),l,o.fieldTransforms);}/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */function Ja(t,e,n){var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:!1;return Xa(n,t.V_(s?4/* ArrayArgument */:3/* Argument */,e));}/**
 * Parses user data to Protobuf Values.
 *
 * @param input Data to be parsed.
 * @param context A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @return The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */function Xa(t,e){if(// Unwrap the API type from the Compat SDK. This will return the API type
// from firestore-exp.
t instanceof Ba&&(t=t.f_),tc(t))return ec("Unsupported field value:",e,t),Za(t,e);if(t instanceof Na)// FieldValues usually parse into transforms (except FieldValue.delete())
// in which case we do not want to include this field in our parsed data
// (as doing so will overwrite the field directly prior to the transform
// trying to transform it). So we don't add this location to
// context.fieldMask and we return null as our parsing result.
/**
 * "Parses" the provided FieldValueImpl, adding any necessary transforms to
 * context.fieldTransforms.
 */return function(t,e){// Sentinels are only supported with writes, and not within arrays.
if(!ja(e.r_))throw e.o_(t.s_+"() can only be used with update() and set()");if(!e.path)throw e.o_(t.s_+"() is not currently supported inside arrays");var n=t.i_(e);n&&e.fieldTransforms.push(n);}/**
 * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
 *
 * @return The parsed value
 */(t,e),null;if(// If context.path is null we are inside an array and we don't support
// field mask paths more granular than the top-level array.
e.path&&e.Qe.push(e.path),t instanceof Array){// TODO(b/34871131): Include the path containing the array in the error
// message.
// In the case of IN queries, the parsed data is an array (representing
// the set of values to be included for the IN query) that may directly
// contain additional arrays (each representing an individual field
// value), so we disable this validation.
if(e.settings.c_&&4/* ArrayArgument */!==e.r_)throw e.o_("Nested arrays are not supported");return function(t,e){var n=[];var s=0;var _iteratorNormalCompletion65=true;var _didIteratorError65=false;var _iteratorError65=undefined;try{for(var _iterator65=t[Symbol.iterator](),_step65;!(_iteratorNormalCompletion65=(_step65=_iterator65.next()).done);_iteratorNormalCompletion65=true){var _i33=_step65.value;var _t94=Xa(_i33,e.P_(s));null==_t94&&(// Just include nulls in the array for fields being replaced with a
// sentinel.
_t94={nullValue:"NULL_VALUE"}),n.push(_t94),s++;}}catch(err){_didIteratorError65=true;_iteratorError65=err;}finally{try{if(!_iteratorNormalCompletion65&&_iterator65["return"]!=null){_iterator65["return"]();}}finally{if(_didIteratorError65){throw _iteratorError65;}}}return{arrayValue:{values:n}};}(t,e);}return function(t,e){if(null===t)return{nullValue:"NULL_VALUE"};if("number"==typeof t)return Se(e.serializer,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){var n=wt.fromDate(t);return{timestampValue:De(e.serializer,n)};}if(t instanceof wt){// Firestore backend truncates precision down to microseconds. To ensure
// offline mode works the same with regards to truncation, perform the
// truncation immediately without waiting for the backend to do that.
var _n64=new wt(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:De(e.serializer,_n64)};}if(t instanceof La)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof ut)return{bytesValue:Ce(e.serializer,t.q)};if(t instanceof Ua){var _n65=e.U,_s54=t.d_;if(!_s54.isEqual(_n65))throw e.o_("Document reference is for database ".concat(_s54.projectId,"/").concat(_s54.database," but should be for database ").concat(_n65.projectId,"/").concat(_n65.database));return{referenceValue:$e(t.d_||e.U,t.w_.path)};}if(void 0===t&&e.ignoreUndefinedProperties)return null;throw e.o_("Unsupported field value: "+Y(t));}/**
 * Checks whether an object looks like a JSON object that should be converted
 * into a struct. Normal class/prototype instances are considered to look like
 * JSON objects since they should be converted to a struct value. Arrays, Dates,
 * GeoPoints, etc. are not considered to look like JSON objects since they map
 * to specific FieldValue types other than ObjectValue.
 */(t,e);}function Za(t,e){var n={};return C(t)?// If we encounter an empty object, we explicitly add it to the update
// mask to ensure that the server creates a map entry.
e.path&&e.path.length>0&&e.Qe.push(e.path):D(t,function(t,s){var i=Xa(s,e.A_(t));null!=i&&(n[t]=i);}),{mapValue:{fields:n}};}function tc(t){return!("object"!=_typeof(t)||null===t||t instanceof Array||t instanceof Date||t instanceof wt||t instanceof La||t instanceof ut||t instanceof Ua||t instanceof Na);}function ec(t,e,n){if(!tc(n)||!H(n)){var _s55=Y(n);throw"an object"===_s55?e.o_(t+" a custom object"):e.o_(t+" "+_s55);}}/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */function nc(t,e,n){if(e instanceof Sa)return e.n_;if("string"==typeof e)return sc(t,e);throw ic("Field path arguments must be of type string or FieldPath.",t,/* hasConverter= */!1,/* path= */void 0,n);}/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName The publicly visible method name
 * @param path The dot-separated string form of a field path which will be split
 * on dots.
 * @param targetDoc The document against which the field path will be evaluated.
 */function sc(t,e,n){try{return function(t){if(t.search(Ca)>=0)throw new I(E.INVALID_ARGUMENT,"Invalid field path (".concat(t,"). Paths must not contain '~', '*', '/', '[', or ']'"));try{return _construct(Da,_toConsumableArray(t.split(".")));}catch(e){throw new I(E.INVALID_ARGUMENT,"Invalid field path (".concat(t,"). Paths must not be empty, begin with '.', end with '.', or contain '..'"));}}(e).n_;}catch(e){throw ic((s=e)instanceof Error?s.message:s.toString(),t,/* hasConverter= */!1,/* path= */void 0,n);}/**
 * Extracts the message from a caught exception, which should be an Error object
 * though JS doesn't guarantee that.
 */var s;/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */}function ic(t,e,n,s,i){var r=s&&!s.m(),o=void 0!==i;var a="Function ".concat(e,"() called with invalid data");n&&(a+=" (via `toFirestore()`)"),a+=". ";var c="";return(r||o)&&(c+=" (found",r&&(c+=" in field "+s),o&&(c+=" in document "+i),c+=")"),new I(E.INVALID_ARGUMENT,a+t+c);}function rc(t,e){return t.some(function(t){return t.isEqual(e);});}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */var oc=/*#__PURE__*/function(){function oc(t){_classCallCheck(this,oc);this.zu=t,// The version of each document that was read during this transaction.
this.p_=new Map(),this.mutations=[],this.b_=!1,/**
         * A deferred usage error that occurred previously in this transaction that
         * will cause the transaction to fail once it actually commits.
         */this.v_=null,/**
         * Set of documents that have been written in the transaction.
         *
         * When there's more than one write to the same key in a transaction, any
         * writes after the first are handled differently.
         */this.S_=new Set();}_createClass(oc,[{key:"D_",value:function D_(t){var _this158=this;var e;return regeneratorRuntime.async(function D_$(_context73){while(1){switch(_context73.prev=_context73.next){case 0:if(!(this.C_(),this.mutations.length>0)){_context73.next=2;break;}throw new I(E.INVALID_ARGUMENT,"Firestore transactions require all reads to be executed before all writes.");case 2:_context73.next=4;return regeneratorRuntime.awrap(function _callee21(t,e){var n,s,i,r,o,a;return regeneratorRuntime.async(function _callee21$(_context72){while(1){switch(_context72.prev=_context72.next){case 0:n=v(t);s=Be(n.serializer)+"/documents";i={documents:e.map(function(t){return ke(n.serializer,t);})};_context72.next=5;return regeneratorRuntime.awrap(n.Ou("BatchGetDocuments",s,i));case 5:r=_context72.sent;o=new Map();r.forEach(function(t){var e=Qe(n.serializer,t);o.set(e.key.toString(),e);});a=[];return _context72.abrupt("return",(e.forEach(function(t){var e=o.get(t.toString());b(!!e),a.push(e);}),a));case 10:case"end":return _context72.stop();}}});}(this.zu,t));case 4:e=_context73.sent;return _context73.abrupt("return",(e.forEach(function(t){t instanceof Kn||t instanceof jn?_this158.N_(t):p();}),e));case 6:case"end":return _context73.stop();}}},null,this);}},{key:"set",value:function set(t,e){this.write(e.T_(t,this.Ke(t))),this.S_.add(t.toString());}},{key:"update",value:function update(t,e){try{this.write(e.T_(t,this.F_(t)));}catch(t){this.v_=t;}this.S_.add(t.toString());}},{key:"delete",value:function _delete(t){this.write([new Ln(t,this.Ke(t))]),this.S_.add(t.toString());}},{key:"commit",value:function commit(){var _this159=this;var t;return regeneratorRuntime.async(function commit$(_context75){while(1){switch(_context75.prev=_context75.next){case 0:if(!(this.C_(),this.v_)){_context75.next=2;break;}throw this.v_;case 2:t=this.p_;// For each mutation, note that the doc was written.
this.mutations.forEach(function(e){t["delete"](e.key.toString());});// For each document that was read but not written to, we want to perform
// a `verify` operation.
t.forEach(function(t,e){var n=k.D(e);_this159.mutations.push(new Bn(n,_this159.Ke(n)));});_context75.next=7;return regeneratorRuntime.awrap(function _callee22(t,e){var n,s,i;return regeneratorRuntime.async(function _callee22$(_context74){while(1){switch(_context74.prev=_context74.next){case 0:n=v(t),s=Be(n.serializer)+"/documents",i={writes:e.map(function(t){return je(n.serializer,t);})};_context74.next=3;return regeneratorRuntime.awrap(n.Mu("Commit",s,i));case 3:case"end":return _context74.stop();}}});}(this.zu,this.mutations));case 7:this.b_=!0;case 8:case"end":return _context75.stop();}}},null,this);}},{key:"N_",value:function N_(t){var e;if(t instanceof jn)e=t.version;else{if(!(t instanceof Kn))throw p();// For deleted docs, we must use baseVersion 0 when we overwrite them.
e=mt.min();}var n=this.p_.get(t.key.toString());if(n){if(!e.isEqual(n))// This transaction will fail no matter what.
throw new I(E.ABORTED,"Document version changed between two reads.");}else this.p_.set(t.key.toString(),e);}/**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */},{key:"Ke",value:function Ke(t){var e=this.p_.get(t.toString());return!this.S_.has(t.toString())&&e?Vn.updateTime(e):Vn.Ge();}/**
     * Returns the precondition for a document if the operation is an update.
     */},{key:"F_",value:function F_(t){var e=this.p_.get(t.toString());// The first time a document is written, we want to take into account the
// read time and existence
if(!this.S_.has(t.toString())&&e){if(e.isEqual(mt.min()))// The document doesn't exist, so fail the transaction.
// This has to be validated locally because you can't send a
// precondition that a document does not exist without changing the
// semantics of the backend write to be an insert. This is the reverse
// of what we want, since we want to assert that the document doesn't
// exist but then send the update and have it fail. Since we can't
// express that to the backend, we have to validate locally.
// Note: this can change once we can send separate verify writes in the
// transaction.
throw new I(E.INVALID_ARGUMENT,"Can't update a document that doesn't exist.");// Document exists, base precondition on document update time.
return Vn.updateTime(e);}// Document was not read, so we just use the preconditions for a blind
// update.
return Vn.exists(!0);}},{key:"write",value:function write(t){this.C_(),this.mutations=this.mutations.concat(t);}},{key:"C_",value:function C_(){}}]);return oc;}();/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */var ac=/*#__PURE__*/function(){function ac(t,e,n,s){_classCallCheck(this,ac);this.os=t,this.zu=e,this.updateFunction=n,this.hs=s,this.x_=5,this.Ps=new Ds(this.os,"transaction_retry"/* TransactionRetry */);}/** Runs the transaction and sets the result on deferred. */_createClass(ac,[{key:"run",value:function run(){this.k_();}},{key:"k_",value:function k_(){var _this160=this;this.Ps.Rn(function _callee23(){var t,e;return regeneratorRuntime.async(function _callee23$(_context76){while(1){switch(_context76.prev=_context76.next){case 0:t=new oc(_this160.zu),e=_this160.M_(t);e&&e.then(function(e){_this160.os.ds(function(){return t.commit().then(function(){_this160.hs.resolve(e);})["catch"](function(t){_this160.O_(t);});});})["catch"](function(t){_this160.O_(t);});case 2:case"end":return _context76.stop();}}});});}},{key:"M_",value:function M_(t){try{var _e73=this.updateFunction(t);return!Tt(_e73)&&_e73["catch"]&&_e73.then?_e73:(this.hs.reject(Error("Transaction callback must return a Promise")),null);}catch(t){// Do not retry errors thrown by user provided updateFunction.
return this.hs.reject(t),null;}}},{key:"O_",value:function O_(t){var _this161=this;this.x_>0&&this.L_(t)?(this.x_-=1,this.os.ds(function(){return _this161.k_(),Promise.resolve();})):this.hs.reject(t);}},{key:"L_",value:function L_(t){if("FirebaseError"===t.name){// In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
// non-matching document versions with ABORTED. These errors should be retried.
var _e74=t.code;return"aborted"===_e74||"failed-precondition"===_e74||!Dt(_e74);}return!1;}}]);return ac;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * FirestoreClient is a top-level class that constructs and owns all of the
 * pieces of the client SDK architecture. It is responsible for creating the
 * async queue that is shared by all of the other components in the system.
 */var cc=/*#__PURE__*/function(){function cc(t,/**
     * Asynchronous queue responsible for all of our internal processing. When
     * we get incoming work from the user (via public API) or the network
     * (incoming GRPC messages), we should always schedule onto this queue.
     * This ensures all of our work is properly serialized (e.g. we don't
     * start processing a new operation while the previous one is waiting for
     * an async I/O to complete).
     */e){_classCallCheck(this,cc);this.credentials=t,this.os=e,this.clientId=it.k(),// We defer our initialization until we get the current user from
// setChangeListener(). We block the async queue until we got the initial
// user and the initialization is completed. This will prevent any scheduled
// work from happening before initialization is completed.
// If initializationDone resolved then the FirestoreClient is in a usable
// state.
this.B_=new Ss();}/**
     * Starts up the FirestoreClient, returning only whether or not enabling
     * persistence succeeded.
     *
     * The intent here is to "do the right thing" as far as users are concerned.
     * Namely, in cases where offline persistence is requested and possible,
     * enable it, but otherwise fall back to persistence disabled. For the most
     * part we expect this to succeed one way or the other so we don't expect our
     * users to actually wait on the firestore.enablePersistence Promise since
     * they generally won't care.
     *
     * Of course some users actually do care about whether or not persistence
     * was successfully enabled, so the Promise returned from this method
     * indicates this outcome.
     *
     * This presents a problem though: even before enablePersistence resolves or
     * rejects, users may have made calls to e.g. firestore.collection() which
     * means that the FirestoreClient in there will be available and will be
     * enqueuing actions on the async queue.
     *
     * Meanwhile any failure of an operation on the async queue causes it to
     * panic and reject any further work, on the premise that unhandled errors
     * are fatal.
     *
     * Consequently the fallback is handled internally here in start, and if the
     * fallback succeeds we signal success to the async queue even though the
     * start() itself signals failure.
     *
     * @param databaseInfo The connection information for the current instance.
     * @param offlineComponentProvider Provider that returns all components
     * required for memory-only or IndexedDB persistence.
     * @param onlineComponentProvider Provider that returns all components
     * required for online support.
     * @param persistenceSettings Settings object to configure offline
     *     persistence.
     * @returns A deferred result indicating the user-visible result of enabling
     *     offline persistence. This method will reject this if IndexedDB fails to
     *     start for any reason. If usePersistence is false this is
     *     unconditionally resolved.
     */_createClass(cc,[{key:"start",value:function start(t,e,n,s){var _this162=this;this.q_(),this.Sl=t;// If usePersistence is true, certain classes of errors while starting are
// recoverable but only by falling back to persistence disabled.
// If there's an error in the first case but not in recovery we cannot
// reject the promise blocking the async queue because this will cause the
// async queue to panic.
var i=new Ss();var r=!1;// Return only the result of enabling persistence. Note that this does not
// need to await the completion of initializationDone because the result of
// this method should not reflect any other kind of failure to start.
return this.credentials.Jc(function(t){if(!r)return r=!0,g("FirestoreClient","Initializing. user=",t.uid),_this162.U_(e,n,s,t,i).then(_this162.B_.resolve,_this162.B_.reject);_this162.os.Ds(function(){return function _callee24(t,e){var n,s;return regeneratorRuntime.async(function _callee24$(_context77){while(1){switch(_context77.prev=_context77.next){case 0:n=v(t);n.os.Fs(),g("RemoteStore","RemoteStore received new credentials");s=co(n);// Tear down and re-create our network streams. This will ensure we get a
// fresh auth token for the new user and re-fill the write pipeline with
// new mutations from the LocalStore (since mutations are per-user).
n.Xu.add(3/* CredentialChange */);_context77.next=6;return regeneratorRuntime.awrap(to(n));case 6:s&&// Don't set the network status to Unknown if we are offline.
n.nh.set("Unknown"/* Unknown */);_context77.next=9;return regeneratorRuntime.awrap(n.Hu.Zl(e));case 9:n.Xu["delete"](3/* CredentialChange */);_context77.next=12;return regeneratorRuntime.awrap(Zr(n));case 12:case"end":return _context77.stop();}}});}(_this162.Sh,t);});}),// Block the async queue until initialization is done
this.os.ds(function(){return _this162.B_.promise;}),i.promise;}/** Enables the network connection and requeues all pending operations. */},{key:"enableNetwork",value:function enableNetwork(){var _this163=this;return this.q_(),this.os.enqueue(function(){return _this163.persistence.sc(!0),function(t){var e=v(t);return e.Xu["delete"](0/* UserDisabled */),Zr(e);}(_this163.Sh);});}/**
     * Initializes persistent storage, attempting to use IndexedDB if
     * usePersistence is true or memory-only if false.
     *
     * If IndexedDB fails because it's already open in another tab or because the
     * platform can't possibly support our implementation then this method rejects
     * the persistenceResult and falls back on memory-only persistence.
     *
     * @param offlineComponentProvider Provider that returns all components
     * required for memory-only or IndexedDB persistence.
     * @param onlineComponentProvider Provider that returns all components
     * required for online support.
     * @param persistenceSettings Settings object to configure offline persistence
     * @param user The initial user
     * @param persistenceResult A deferred result indicating the user-visible
     *     result of enabling offline persistence. This method will reject this if
     *     IndexedDB fails to start for any reason. If usePersistence is false
     *     this is unconditionally resolved.
     * @returns a Promise indicating whether or not initialization should
     *     continue, i.e. that one of the persistence implementations actually
     *     succeeded.
     */},{key:"U_",value:function U_(t,e,n,s,i){var _this164=this;var _r17;return regeneratorRuntime.async(function U_$(_context79){while(1){switch(_context79.prev=_context79.next){case 0:_context79.prev=0;_r17={os:this.os,Sl:this.Sl,clientId:this.clientId,credentials:this.credentials,Kl:s,Nh:100,persistenceSettings:n};_context79.next=4;return regeneratorRuntime.awrap(t.initialize(_r17));case 4:_context79.next=6;return regeneratorRuntime.awrap(e.initialize(t,_r17));case 6:this.persistence=t.persistence;this.Ch=t.Ch;this.Gu=t.Gu;this.Ql=t.Ql;this.zu=e.zu;this.Sh=e.Sh;this._i=e._i;this.Q_=e.Dh;this.Q_.qs=$o.bind(null,this._i);this.Q_.Ws=ko.bind(null,this._i);// When a user calls clearPersistence() in one client, all other clients
// need to be terminated to allow the delete to succeed.
this.persistence.nc(function _callee25(){return regeneratorRuntime.async(function _callee25$(_context78){while(1){switch(_context78.prev=_context78.next){case 0:_context78.next=2;return regeneratorRuntime.awrap(_this164.terminate());case 2:case"end":return _context78.stop();}}});});i.resolve();_context79.next=25;break;case 20:_context79.prev=20;_context79.t0=_context79["catch"](0);if(!(// Regardless of whether or not the retry succeeds, from an user
// perspective, offline persistence has failed.
i.reject(_context79.t0),!this.W_(_context79.t0))){_context79.next=24;break;}throw _context79.t0;case 24:return _context79.abrupt("return",(console.warn("Error enabling offline persistence. Falling back to persistence disabled: "+_context79.t0),this.U_(new ya(),new ba(),{Gl:!1},s,i)));case 25:case"end":return _context79.stop();}}},null,this,[[0,20]]);}/**
     * Decides whether the provided error allows us to gracefully disable
     * persistence (as opposed to crashing the client).
     */},{key:"W_",value:function W_(t){return"FirebaseError"===t.name?t.code===E.FAILED_PRECONDITION||t.code===E.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||// When the browser is out of quota we could get either quota exceeded
// or an aborted error depending on whether the error happened during
// schema migration.
22===t.code||20===t.code||// Firefox Private Browsing mode disables IndexedDb and returns
// INVALID_STATE for any usage.
11===t.code;}/**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */},{key:"q_",value:function q_(){if(this.os.Vs)throw new I(E.FAILED_PRECONDITION,"The client has already been terminated.");}/** Disables the network connection. Pending operations will not complete. */},{key:"disableNetwork",value:function disableNetwork(){var _this165=this;return this.q_(),this.os.enqueue(function(){return _this165.persistence.sc(!1),function _callee26(t){var e;return regeneratorRuntime.async(function _callee26$(_context80){while(1){switch(_context80.prev=_context80.next){case 0:e=v(t);e.Xu.add(0/* UserDisabled */);_context80.next=4;return regeneratorRuntime.awrap(to(e));case 4:// Set the OnlineState to Offline so get()s return from cache, etc.
e.nh.set("Offline"/* Offline */);case 5:case"end":return _context80.stop();}}});}(_this165.Sh);});}},{key:"terminate",value:function terminate(){var _this166=this;this.os.Ss();var t=new Ss();return this.os.ps(function _callee27(){var n;return regeneratorRuntime.async(function _callee27$(_context81){while(1){switch(_context81.prev=_context81.next){case 0:_context81.prev=0;_this166.Ql&&_this166.Ql.stop();_context81.next=4;return regeneratorRuntime.awrap(eo(_this166.Sh));case 4:_context81.next=6;return regeneratorRuntime.awrap(_this166.Ch.Si());case 6:_context81.next=8;return regeneratorRuntime.awrap(_this166.persistence.Si());case 8:// `removeChangeListener` must be called after shutting down the
// RemoteStore as it will prevent the RemoteStore from retrieving
// auth tokens.
_this166.credentials.Xc();t.resolve();_context81.next=16;break;case 12:_context81.prev=12;_context81.t0=_context81["catch"](0);n=js(_context81.t0,"Failed to shutdown persistence");t.reject(n);case 16:case"end":return _context81.stop();}}},null,null,[[0,12]]);}),t.promise;}/**
     * Returns a Promise that resolves when all writes that were pending at the time this
     * method was called received server acknowledgement. An acknowledgement can be either acceptance
     * or rejection.
     */},{key:"waitForPendingWrites",value:function waitForPendingWrites(){var _this167=this;this.q_();var t=new Ss();return this.os.ds(function(){return Qo(_this167._i,t);}),t.promise;}},{key:"listen",value:function listen(t,e,n){var _this168=this;this.q_();var s=new va(n),i=new Zs(t,s,e);return this.os.ds(function(){return zs(_this168.Q_,i);}),function(){s.e_(),_this168.os.ds(function(){return Hs(_this168.Q_,i);});};}},{key:"j_",value:function j_(t){var _this169=this;var e;return regeneratorRuntime.async(function j_$(_context83){while(1){switch(_context83.prev=_context83.next){case 0:this.q_();_context83.next=3;return regeneratorRuntime.awrap(this.B_.promise);case 3:e=new Ss();return _context83.abrupt("return",(this.os.ds(function(){return function _callee28(t,e,n){var _s56,_s57;return regeneratorRuntime.async(function _callee28$(_context82){while(1){switch(_context82.prev=_context82.next){case 0:_context82.prev=0;_context82.next=3;return regeneratorRuntime.awrap(function(t,e){var n=v(t);return n.persistence.runTransaction("read document","readonly",function(t){return n.$c.Dr(t,e);});}(t,e));case 3:_s56=_context82.sent;_s56 instanceof jn?n.resolve(_s56):_s56 instanceof Kn?n.resolve(null):n.reject(new I(E.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));_context82.next=11;break;case 7:_context82.prev=7;_context82.t0=_context82["catch"](0);_s57=js(_context82.t0,"Failed to get document '".concat(e," from cache"));n.reject(_s57);case 11:case"end":return _context82.stop();}}},null,null,[[0,7]]);}/**
 * Retrieves a latency-compensated document from the backend via a
 * SnapshotListener.
 */(_this169.Gu,t,e);}),e.promise));case 5:case"end":return _context83.stop();}}},null,this);}},{key:"K_",value:function K_(t){var _this170=this;var e,n,_args84=arguments;return regeneratorRuntime.async(function K_$(_context84){while(1){switch(_context84.prev=_context84.next){case 0:e=_args84.length>1&&_args84[1]!==undefined?_args84[1]:{};this.q_();_context84.next=4;return regeneratorRuntime.awrap(this.B_.promise);case 4:n=new Ss();return _context84.abrupt("return",(this.os.ds(function(){return function(t,e,n,s,i){var r=new va({next:function next(r){// Remove query first before passing event to user to avoid
// user actions affecting the now stale query.
e.ds(function(){return Hs(t,o);});var a=r.docs.has(n);!a&&r.fromCache?// TODO(dimond): If we're online and the document doesn't
// exist then we resolve with a doc.exists set to false. If
// we're offline however, we reject the Promise in this
// case. Two options: 1) Cache the negative response from
// the server so we can deliver that even when you're
// offline 2) Actually reject the Promise in the online case
// if the document doesn't exist.
i.reject(new I(E.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&r.fromCache&&s&&"server"===s.source?i.reject(new I(E.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(r);},error:function error(t){return i.reject(t);}}),o=new Zs(Yn(n.path),r,{includeMetadataChanges:!0,Js:!0});return zs(t,o);}(_this170.Q_,_this170.os,t,e,n);}),n.promise));case 6:case"end":return _context84.stop();}}},null,this);}},{key:"G_",value:function G_(t){var _this171=this;var e;return regeneratorRuntime.async(function G_$(_context86){while(1){switch(_context86.prev=_context86.next){case 0:this.q_();_context86.next=3;return regeneratorRuntime.awrap(this.B_.promise);case 3:e=new Ss();return _context86.abrupt("return",(this.os.ds(function(){return function _callee29(t,e,n){var _s58,_i34,_r18,_o11,_s59;return regeneratorRuntime.async(function _callee29$(_context85){while(1){switch(_context85.prev=_context85.next){case 0:_context85.prev=0;_context85.next=3;return regeneratorRuntime.awrap(Mr(t,e,/* usePreviousResults= */!0));case 3:_s58=_context85.sent;_i34=new Do(e,_s58.kc);_r18=_i34.Th(_s58.documents);_o11=_i34.Pr(_r18,/* updateLimboDocuments= */!1);n.resolve(_o11.snapshot);_context85.next=14;break;case 10:_context85.prev=10;_context85.t0=_context85["catch"](0);_s59=js(_context85.t0,"Failed to execute query '".concat(e," against cache"));n.reject(_s59);case 14:case"end":return _context85.stop();}}},null,null,[[0,10]]);}/**
 * Retrieves a latency-compensated query snapshot from the backend via a
 * SnapshotListener.
 */(_this171.Gu,t,e);}),e.promise));case 5:case"end":return _context86.stop();}}},null,this);}},{key:"z_",value:function z_(t){var _this172=this;var e,n,_args87=arguments;return regeneratorRuntime.async(function z_$(_context87){while(1){switch(_context87.prev=_context87.next){case 0:e=_args87.length>1&&_args87[1]!==undefined?_args87[1]:{};this.q_();_context87.next=4;return regeneratorRuntime.awrap(this.B_.promise);case 4:n=new Ss();return _context87.abrupt("return",(this.os.ds(function(){return function(t,e,n,s,i){var r=new va({next:function next(n){// Remove query first before passing event to user to avoid
// user actions affecting the now stale query.
e.ds(function(){return Hs(t,o);}),n.fromCache&&"server"===s.source?i.reject(new I(E.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n);},error:function error(t){return i.reject(t);}}),o=new Zs(n,r,{includeMetadataChanges:!0,Js:!0});return zs(t,o);}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(_this172.Q_,_this172.os,t,e,n);}),n.promise));case 6:case"end":return _context87.stop();}}},null,this);}},{key:"write",value:function write(t){var _this173=this;this.q_();var e=new Ss();return this.os.ds(function(){return Mo(_this173._i,t,e);}),e.promise;}},{key:"U",value:function U(){return this.Sl.U;}},{key:"H_",value:function H_(t){var _this174=this;this.q_();var e=new va(t);return this.os.ds(function _callee30(){return regeneratorRuntime.async(function _callee30$(_context88){while(1){switch(_context88.prev=_context88.next){case 0:return _context88.abrupt("return",function(t,e){v(t).Bs.add(e),// Immediately fire an initial event, indicating all existing listeners
// are in-sync.
e.next();}(_this174.Q_,e));case 1:case"end":return _context88.stop();}}});}),function(){e.e_(),_this174.os.ds(function _callee31(){return regeneratorRuntime.async(function _callee31$(_context89){while(1){switch(_context89.prev=_context89.next){case 0:return _context89.abrupt("return",function(t,e){v(t).Bs["delete"](e);}(_this174.Q_,e));case 1:case"end":return _context89.stop();}}});});};}},{key:"transaction",/**
     * Takes an updateFunction in which a set of reads and writes can be performed
     * atomically. In the updateFunction, the client can read and write values
     * using the supplied transaction object. After the updateFunction, all
     * changes will be committed. If a retryable error occurs (ex: some other
     * client has changed any of the data referenced), then the updateFunction
     * will be called again after a backoff. If the updateFunction still fails
     * after all retries, then the transaction will be rejected.
     *
     * The transaction object passed to the updateFunction contains methods for
     * accessing documents and collections. Unlike other datastore access, data
     * accessed with the transaction will not reflect local changes that have not
     * been committed. For this reason, it is required that all reads are
     * performed before any writes. Transactions must be performed while online.
     */value:function transaction(t){var _this175=this;this.q_();var e=new Ss();return this.os.ds(function(){return new ac(_this175.os,_this175.zu,t,e).run(),Promise.resolve();}),e.promise;}},{key:"Y_",get:function get(){// Technically, the asyncQueue is still running, but only accepting operations
// related to termination or supposed to be run after termination. It is effectively
// terminated to the eyes of users.
return this.os.Vs;}}]);return cc;}();function uc(t){/**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */return function(t,e){if("object"!=_typeof(t)||null===t)return!1;var n=t;var _iteratorNormalCompletion66=true;var _didIteratorError66=false;var _iteratorError66=undefined;try{for(var _iterator66=e[Symbol.iterator](),_step66;!(_iteratorNormalCompletion66=(_step66=_iterator66.next()).done);_iteratorNormalCompletion66=true){var _t95=_step66.value;if(_t95 in n&&"function"==typeof n[_t95])return!0;}}catch(err){_didIteratorError66=true;_iteratorError66=err;}finally{try{if(!_iteratorNormalCompletion66&&_iterator66["return"]!=null){_iterator66["return"]();}}finally{if(_didIteratorError66){throw _iteratorError66;}}}return!1;}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 */(t,["next","error","complete"]);}var hc=/*#__PURE__*/function(){function hc(t,e,n,s,i){_classCallCheck(this,hc);this.U=t,this.timestampsInSnapshots=e,this.J_=n,this.X_=s,this.Z_=i;}_createClass(hc,[{key:"tf",value:function tf(t){switch(ce(t)){case 0/* NullValue */:return null;case 1/* BooleanValue */:return t.booleanValue;case 2/* NumberValue */:return me(t.integerValue||t.doubleValue);case 3/* TimestampValue */:return this.ef(t.timestampValue);case 4/* ServerTimestampValue */:return this.nf(t);case 5/* StringValue */:return t.stringValue;case 6/* BlobValue */:return this.Z_(Te(t.bytesValue));case 7/* RefValue */:return this.sf(t.referenceValue);case 8/* GeoPointValue */:return this["if"](t.geoPointValue);case 9/* ArrayValue */:return this.rf(t.arrayValue);case 10/* ObjectValue */:return this.af(t.mapValue);default:throw p();}}},{key:"af",value:function af(t){var _this176=this;var e={};return D(t.fields||{},function(t,n){e[t]=_this176.tf(n);}),e;}},{key:"if",value:function _if(t){return new La(me(t.latitude),me(t.longitude));}},{key:"rf",value:function rf(t){var _this177=this;return(t.values||[]).map(function(t){return _this177.tf(t);});}},{key:"nf",value:function nf(t){switch(this.J_){case"previous":var _e75=function t(e){var n=e.mapValue.fields.__previous_value__;return re(n)?t(n):n;}(t);return null==_e75?null:this.tf(_e75);case"estimate":return this.ef(oe(t));default:return null;}}},{key:"ef",value:function ef(t){var e=we(t),n=new wt(e.seconds,e.nanos);return this.timestampsInSnapshots?n:n.toDate();}},{key:"sf",value:function sf(t){var e=F.g(t);b(cn(e));var n=new ft(e.get(1),e.get(3)),s=new k(e.u(5));return n.isEqual(this.U)||// TODO(b/64130202): Somehow support foreign references.
P("Document ".concat(s," contains a document reference within a different database (").concat(n.projectId,"/").concat(n.database,") which is not supported. It will be treated as a reference in the current database (").concat(this.U.projectId,"/").concat(this.U.database,") instead.")),this.X_(s);}}]);return hc;}();/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // settings() defaults:
var lc=gi.uo;/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied firestore.Settings object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */var _c=/*#__PURE__*/function(){function _c(t){_classCallCheck(this,_c);var e,n,s,i;if(void 0===t.host){if(void 0!==t.ssl)throw new I(E.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=true;}else Q("settings","non-empty string","host",t.host),this.host=t.host,W("settings","boolean","ssl",t.ssl),this.ssl=null===(e=t.ssl)||void 0===e||e;if(X("settings",t,["host","ssl","credentials","timestampsInSnapshots","cacheSizeBytes","experimentalForceLongPolling","ignoreUndefinedProperties"]),W("settings","object","credentials",t.credentials),this.credentials=t.credentials,W("settings","boolean","timestampsInSnapshots",t.timestampsInSnapshots),W("settings","boolean","ignoreUndefinedProperties",t.ignoreUndefinedProperties),// Nobody should set timestampsInSnapshots anymore, but the error depends on
// whether they set it to true or false...
!0===t.timestampsInSnapshots?P("The setting 'timestampsInSnapshots: true' is no longer required and should be removed."):!1===t.timestampsInSnapshots&&P("Support for 'timestampsInSnapshots: false' will be removed soon. You must update your code to handle Timestamp objects."),this.timestampsInSnapshots=null===(n=t.timestampsInSnapshots)||void 0===n||n,this.ignoreUndefinedProperties=null!==(s=t.ignoreUndefinedProperties)&&void 0!==s&&s,W("settings","number","cacheSizeBytes",t.cacheSizeBytes),void 0===t.cacheSizeBytes)this.cacheSizeBytes=gi.lo;else{if(t.cacheSizeBytes!==lc&&t.cacheSizeBytes<gi.ho)throw new I(E.INVALID_ARGUMENT,"cacheSizeBytes must be at least "+gi.ho);this.cacheSizeBytes=t.cacheSizeBytes;}W("settings","boolean","experimentalForceLongPolling",t.experimentalForceLongPolling),this.experimentalForceLongPolling=null!==(i=t.experimentalForceLongPolling)&&void 0!==i&&i;}_createClass(_c,[{key:"isEqual",value:function isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.timestampsInSnapshots===t.timestampsInSnapshots&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties;}}]);return _c;}();/**
 * The root reference to the database.
 */var fc=/*#__PURE__*/function(){// Note: We are using `MemoryComponentProvider` as a default
// ComponentProvider to ensure backwards compatibility with the format
// expected by the console build.
function fc(t,e){var _this178=this;var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new ya();var s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new ba();_classCallCheck(this,fc);if(this.cf=n,this.uf=s,this.hf=null,// Public for use in tests.
// TODO(mikelehen): Use modularized initialization instead.
this.lf=new Ws(),this.INTERNAL={"delete":function _delete(){return regeneratorRuntime.async(function _delete$(_context90){while(1){switch(_context90.prev=_context90.next){case 0:_this178._f();_context90.next=3;return regeneratorRuntime.awrap(_this178.ff.terminate());case 3:case"end":return _context90.stop();}}});}},"object"==_typeof(t.options)){// This is very likely a Firebase app object
// TODO(b/34177605): Can we somehow use instanceof?
var _n66=t;this.hf=_n66,this.d_=fc.df(_n66),this.wf=_n66.name,this.mf=new Wr(e);}else{var _e76=t;if(!_e76.projectId)throw new I(E.INVALID_ARGUMENT,"Must provide projectId");this.d_=new ft(_e76.projectId,_e76.database),// Use a default persistenceKey that lines up with FirebaseApp.
this.wf="[DEFAULT]",this.mf=new Qr();}this.Tf=new _c({});}_createClass(fc,[{key:"settings",value:function settings(t){O("Firestore.settings",arguments,1),q("Firestore.settings","object",1,t),t.merge&&// Remove the property from the settings once the merge is completed
delete(t=Object.assign(Object.assign({},this.Tf),t)).merge;var e=new _c(t);if(this.ff&&!this.Tf.isEqual(e))throw new I(E.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only call settings() before calling any other methods on a Firestore object.");this.Tf=e,void 0!==e.credentials&&(this.mf=function(t){if(!t)return new Qr();switch(t.type){case"gapi":var _e77=t.client;// Make sure this really is a Gapi client.
return b(!("object"!=_typeof(_e77)||null===_e77||!_e77.auth||!_e77.auth.getAuthHeaderValueForFirstParty)),new Kr(_e77,t.sessionIndex||"0");case"provider":return t.client;default:throw new I(E.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type");}}/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e.credentials));}},{key:"enableNetwork",value:function enableNetwork(){return this._f(),this.ff.enableNetwork();}},{key:"disableNetwork",value:function disableNetwork(){return this._f(),this.ff.disableNetwork();}},{key:"enablePersistence",value:function enablePersistence(t){var e,n;if(this.ff)throw new I(E.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only call enablePersistence() before calling any other methods on a Firestore object.");var s=!1,i=!1;if(t&&(void 0!==t.experimentalTabSynchronization&&P("The 'experimentalTabSynchronization' setting will be removed. Use 'synchronizeTabs' instead."),s=null!==(n=null!==(e=t.synchronizeTabs)&&void 0!==e?e:t.experimentalTabSynchronization)&&void 0!==n&&n,i=!!t.experimentalForceOwningTab&&t.experimentalForceOwningTab,s&&i))throw new I(E.INVALID_ARGUMENT,"The 'experimentalForceOwningTab' setting cannot be used with 'synchronizeTabs'.");return this.Af(this.cf,this.uf,{Gl:!0,cacheSizeBytes:this.Tf.cacheSizeBytes,synchronizeTabs:s,La:i});}},{key:"clearPersistence",value:function clearPersistence(){var _this179=this;var t;return regeneratorRuntime.async(function clearPersistence$(_context92){while(1){switch(_context92.prev=_context92.next){case 0:if(!(void 0!==this.ff&&!this.ff.Y_)){_context92.next=2;break;}throw new I(E.FAILED_PRECONDITION,"Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");case 2:t=new Ss();return _context92.abrupt("return",(this.lf.ps(function _callee32(){return regeneratorRuntime.async(function _callee32$(_context91){while(1){switch(_context91.prev=_context91.next){case 0:_context91.prev=0;_context91.next=3;return regeneratorRuntime.awrap(_this179.cf.clearPersistence(_this179.d_,_this179.wf));case 3:t.resolve();_context91.next=9;break;case 6:_context91.prev=6;_context91.t0=_context91["catch"](0);t.reject(_context91.t0);case 9:case"end":return _context91.stop();}}},null,null,[[0,6]]);}),t.promise));case 4:case"end":return _context92.stop();}}},null,this);}},{key:"terminate",value:function terminate(){return this.app._removeServiceInstance("firestore"),this.INTERNAL["delete"]();}},{key:"waitForPendingWrites",value:function waitForPendingWrites(){return this._f(),this.ff.waitForPendingWrites();}},{key:"onSnapshotsInSync",value:function onSnapshotsInSync(t){if(this._f(),uc(t))return this.ff.H_(t);{q("Firestore.onSnapshotsInSync","function",1,t);var _e78={next:t};return this.ff.H_(_e78);}}},{key:"_f",value:function _f(){return this.ff||// Kick off starting the client but don't actually wait for it.
// eslint-disable-next-line @typescript-eslint/no-floating-promises
this.Af(new ya(),new ba(),{Gl:!1}),this.ff;}},{key:"gf",value:function gf(){return new _t(this.d_,this.wf,this.Tf.host,this.Tf.ssl,this.Tf.experimentalForceLongPolling);}},{key:"Af",value:function Af(t,e,n){var s=this.gf();return this.ff=new cc(this.mf,this.lf),this.ff.start(s,t,e,n);}},{key:"collection",value:function collection(t){return O("Firestore.collection",arguments,1),q("Firestore.collection","non-empty string",1,t),this._f(),new vc(F.g(t),this,/* converter= */null);}},{key:"doc",value:function doc(t){return O("Firestore.doc",arguments,1),q("Firestore.doc","non-empty string",1,t),this._f(),mc.Pf(F.g(t),this,/* converter= */null);}},{key:"collectionGroup",value:function collectionGroup(t){if(O("Firestore.collectionGroup",arguments,1),q("Firestore.collectionGroup","non-empty string",1,t),t.indexOf("/")>=0)throw new I(E.INVALID_ARGUMENT,"Invalid collection ID '".concat(t,"' passed to function Firestore.collectionGroup(). Collection IDs must not contain '/'."));return this._f(),new pc(/**
 * Creates a new Query for a collection group query that matches all documents
 * within the provided collection group.
 */function(t){return new zn(F.P(),t);}(t),this,/* converter= */null);}},{key:"runTransaction",value:function runTransaction(t){var _this180=this;return O("Firestore.runTransaction",arguments,1),q("Firestore.runTransaction","function",1,t),this._f().transaction(function(e){return t(new dc(_this180,e));});}},{key:"batch",value:function batch(){return this._f(),new wc(this);}},{key:"yf",// Note: this is not a property because the minifier can't work correctly with
// the way TypeScript compiler outputs properties.
value:function yf(){return this.Tf.timestampsInSnapshots;}// Visible for testing.
},{key:"Vf",value:function Vf(){return this.Tf;}},{key:"Ef",get:function get(){return this.If||(// Lazy initialize UserDataReader once the settings are frozen
this.If=new Ga(this.d_,this.Tf.ignoreUndefinedProperties)),this.If;}},{key:"Rf",get:function get(){return this._f(),this.ff.Y_;}},{key:"app",get:function get(){if(!this.hf)throw new I(E.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this.hf;}}],[{key:"df",value:function df(t){if(e=t.options,n="projectId",!Object.prototype.hasOwnProperty.call(e,n))throw new I(E.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');var e,n;var s=t.options.projectId;if(!s||"string"!=typeof s)throw new I(E.INVALID_ARGUMENT,"projectId must be a string in FirebaseApp.options");return new ft(s);}},{key:"setLogLevel",value:function setLogLevel(t){var e;O("Firestore.setLogLevel",arguments,1),G("setLogLevel",["debug","error","silent","warn","info","verbose"],1,t),e=t,A.setLogLevel(e);}},{key:"logLevel",get:function get(){switch(R()){case _logger.LogLevel.DEBUG:return"debug";case _logger.LogLevel.ERROR:return"error";case _logger.LogLevel.SILENT:return"silent";case _logger.LogLevel.WARN:return"warn";case _logger.LogLevel.INFO:return"info";case _logger.LogLevel.VERBOSE:return"verbose";default:// The default log level is error
return"error";}}}]);return fc;}();/**
 * A reference to a transaction.
 */var dc=/*#__PURE__*/function(){function dc(t,e){_classCallCheck(this,dc);this.pf=t,this.bf=e;}_createClass(dc,[{key:"get",value:function get(t){var _this181=this;O("Transaction.get",arguments,1);var e=Nc("Transaction.get",t,this.pf);return this.bf.D_([e.w_]).then(function(t){if(!t||1!==t.length)return p();var n=t[0];if(n instanceof Kn)return new Ec(_this181.pf,e.w_,null,/* fromCache= */!1,/* hasPendingWrites= */!1,e.m_);if(n instanceof jn)return new Ec(_this181.pf,e.w_,n,/* fromCache= */!1,/* hasPendingWrites= */!1,e.m_);throw p();});}},{key:"set",value:function set(t,e,n){B("Transaction.set",arguments,2,3);var s=Nc("Transaction.set",t,this.pf);n=Sc("Transaction.set",n);var i=$c(s.m_,e,n),r=za(this.pf.Ef,"Transaction.set",s.w_,i,null!==s.m_,n);return this.bf.set(s.w_,r),this;}},{key:"update",value:function update(t,e,n){for(var _len7=arguments.length,s=new Array(_len7>3?_len7-3:0),_key7=3;_key7<_len7;_key7++){s[_key7-3]=arguments[_key7];}var i,r;return"string"==typeof e||e instanceof Da?(L("Transaction.update",arguments,3),i=Nc("Transaction.update",t,this.pf),r=Ya(this.pf.Ef,"Transaction.update",i.w_,e,n,s)):(O("Transaction.update",arguments,2),i=Nc("Transaction.update",t,this.pf),r=Ha(this.pf.Ef,"Transaction.update",i.w_,e)),this.bf.update(i.w_,r),this;}},{key:"delete",value:function _delete(t){O("Transaction.delete",arguments,1);var e=Nc("Transaction.delete",t,this.pf);return this.bf["delete"](e.w_),this;}}]);return dc;}();var wc=/*#__PURE__*/function(){function wc(t){_classCallCheck(this,wc);this.pf=t,this.vf=[],this.Sf=!1;}_createClass(wc,[{key:"set",value:function set(t,e,n){B("WriteBatch.set",arguments,2,3),this.Df();var s=Nc("WriteBatch.set",t,this.pf);n=Sc("WriteBatch.set",n);var i=$c(s.m_,e,n),r=za(this.pf.Ef,"WriteBatch.set",s.w_,i,null!==s.m_,n);return this.vf=this.vf.concat(r.T_(s.w_,Vn.Ge())),this;}},{key:"update",value:function update(t,e,n){for(var _len8=arguments.length,s=new Array(_len8>3?_len8-3:0),_key8=3;_key8<_len8;_key8++){s[_key8-3]=arguments[_key8];}var i,r;return this.Df(),"string"==typeof e||e instanceof Da?(L("WriteBatch.update",arguments,3),i=Nc("WriteBatch.update",t,this.pf),r=Ya(this.pf.Ef,"WriteBatch.update",i.w_,e,n,s)):(O("WriteBatch.update",arguments,2),i=Nc("WriteBatch.update",t,this.pf),r=Ha(this.pf.Ef,"WriteBatch.update",i.w_,e)),this.vf=this.vf.concat(r.T_(i.w_,Vn.exists(!0))),this;}},{key:"delete",value:function _delete(t){O("WriteBatch.delete",arguments,1),this.Df();var e=Nc("WriteBatch.delete",t,this.pf);return this.vf=this.vf.concat(new Ln(e.w_,Vn.Ge())),this;}},{key:"commit",value:function commit(){return this.Df(),this.Sf=!0,this.vf.length>0?this.pf._f().write(this.vf):Promise.resolve();}},{key:"Df",value:function Df(){if(this.Sf)throw new I(E.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.");}}]);return wc;}();/**
 * A reference to a particular document in a collection in the database.
 */var mc=/*#__PURE__*/function(_Ua){_inherits(mc,_Ua);function mc(t,e,n){var _this182;_classCallCheck(this,mc);_this182=_possibleConstructorReturn(this,_getPrototypeOf(mc).call(this,e.d_,t,n)),_this182.w_=t,_this182.firestore=e,_this182.m_=n,_this182.ff=_this182.firestore._f();return _this182;}_createClass(mc,[{key:"collection",value:function collection(t){if(O("DocumentReference.collection",arguments,1),q("DocumentReference.collection","non-empty string",1,t),!t)throw new I(E.INVALID_ARGUMENT,"Must provide a non-empty collection name to collection()");var e=F.g(t);return new vc(this.w_.path.child(e),this.firestore,/* converter= */null);}},{key:"isEqual",value:function isEqual(t){if(!(t instanceof mc))throw Z("isEqual","DocumentReference",1,t);return this.firestore===t.firestore&&this.w_.isEqual(t.w_)&&this.m_===t.m_;}},{key:"set",value:function set(t,e){B("DocumentReference.set",arguments,1,2),e=Sc("DocumentReference.set",e);var n=$c(this.m_,t,e),s=za(this.firestore.Ef,"DocumentReference.set",this.w_,n,null!==this.m_,e);return this.ff.write(s.T_(this.w_,Vn.Ge()));}},{key:"update",value:function update(t,e){for(var _len9=arguments.length,n=new Array(_len9>2?_len9-2:0),_key9=2;_key9<_len9;_key9++){n[_key9-2]=arguments[_key9];}var s;return"string"==typeof t||t instanceof Da?(L("DocumentReference.update",arguments,2),s=Ya(this.firestore.Ef,"DocumentReference.update",this.w_,t,e,n)):(O("DocumentReference.update",arguments,1),s=Ha(this.firestore.Ef,"DocumentReference.update",this.w_,t)),this.ff.write(s.T_(this.w_,Vn.exists(!0)));}},{key:"delete",value:function _delete(){return O("DocumentReference.delete",arguments,0),this.ff.write([new Ln(this.w_,Vn.Ge())]);}},{key:"onSnapshot",value:function onSnapshot(){var _this183=this;for(var _len10=arguments.length,t=new Array(_len10),_key10=0;_key10<_len10;_key10++){t[_key10]=arguments[_key10];}var e,n,s;B("DocumentReference.onSnapshot",arguments,1,4);var i={includeMetadataChanges:!1},r=0;"object"!=_typeof(t[r])||uc(t[r])||(i=t[r],X("DocumentReference.onSnapshot",i,["includeMetadataChanges"]),W("DocumentReference.onSnapshot","boolean","includeMetadataChanges",i.includeMetadataChanges),r++);var o={includeMetadataChanges:i.includeMetadataChanges};if(uc(t[r])){var _i35=t[r];t[r]=null===(e=_i35.next)||void 0===e?void 0:e.bind(_i35),t[r+1]=null===(n=_i35.error)||void 0===n?void 0:n.bind(_i35),t[r+2]=null===(s=_i35.complete)||void 0===s?void 0:s.bind(_i35);}else q("DocumentReference.onSnapshot","function",r,t[r]),U("DocumentReference.onSnapshot","function",r+1,t[r+1]),U("DocumentReference.onSnapshot","function",r+2,t[r+2]);var a={next:function next(e){t[r]&&t[r](_this183.Cf(e));},error:t[r+1],complete:t[r+2]};return this.ff.listen(Yn(this.w_.path),o,a);}},{key:"get",value:function get(t){var _this184=this;B("DocumentReference.get",arguments,0,1),Cc("DocumentReference.get",t);var e=this.firestore._f();return t&&"cache"===t.source?e.j_(this.w_).then(function(t){return new Ec(_this184.firestore,_this184.w_,t,/*fromCache=*/!0,t instanceof jn&&t.Ye,_this184.m_);}):e.K_(this.w_,t).then(function(t){return _this184.Cf(t);});}},{key:"withConverter",value:function withConverter(t){return new mc(this.w_,this.firestore,t);}/**
     * Converts a ViewSnapshot that contains the current document to a
     * DocumentSnapshot.
     */},{key:"Cf",value:function Cf(t){var e=t.docs.get(this.w_);return new Ec(this.firestore,this.w_,e,t.fromCache,t.hasPendingWrites,this.m_);}},{key:"id",get:function get(){return this.w_.path._();}},{key:"parent",get:function get(){return new vc(this.w_.path.h(),this.firestore,this.m_);}},{key:"path",get:function get(){return this.w_.path.R();}}],[{key:"Pf",value:function Pf(t,e,n){if(t.length%2!=0)throw new I(E.INVALID_ARGUMENT,"Invalid document reference. Document references must have an even number of segments, but ".concat(t.R()," has ").concat(t.length));return new mc(new k(t),e,n);}}]);return mc;}(Ua);/**
 * Metadata about a snapshot, describing the state of the snapshot.
 */var Tc=/*#__PURE__*/function(){function Tc(t,e){_classCallCheck(this,Tc);this.hasPendingWrites=t,this.fromCache=e;}/**
     * Returns true if this `SnapshotMetadata` is equal to the provided one.
     *
     * @param other The `SnapshotMetadata` to compare against.
     * @return true if this `SnapshotMetadata` is equal to the provided one.
     */_createClass(Tc,[{key:"isEqual",value:function isEqual(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache;}}]);return Tc;}();var Ec=/*#__PURE__*/function(){function Ec(t,e,n,s,i,r){_classCallCheck(this,Ec);this.pf=t,this.w_=e,this.Nf=n,this.Ff=s,this.$f=i,this.m_=r;}_createClass(Ec,[{key:"data",value:function data(t){var _this185=this;if(B("DocumentSnapshot.data",arguments,0,1),t=Dc("DocumentSnapshot.data",t),this.Nf){// We only want to use the converter and create a new DocumentSnapshot
// if a converter has been provided.
if(this.m_){var _e79=new Ic(this.pf,this.w_,this.Nf,this.Ff,this.$f,/* converter= */null);return this.m_.fromFirestore(_e79,t);}return new hc(this.pf.d_,this.pf.yf(),t.serverTimestamps||"none",function(t){return new mc(t,_this185.pf,/* converter= */null);},function(t){return new lt(t);}).tf(this.Nf.sn());}}},{key:"get",value:function get(t,e){var _this186=this;if(B("DocumentSnapshot.get",arguments,1,2),e=Dc("DocumentSnapshot.get",e),this.Nf){var n=this.Nf.data().field(nc("DocumentSnapshot.get",t,this.w_));if(null!==n){return new hc(this.pf.d_,this.pf.yf(),e.serverTimestamps||"none",function(t){return new mc(t,_this186.pf,_this186.m_);},function(t){return new lt(t);}).tf(n);}}}},{key:"isEqual",value:function isEqual(t){if(!(t instanceof Ec))throw Z("isEqual","DocumentSnapshot",1,t);return this.pf===t.pf&&this.Ff===t.Ff&&this.w_.isEqual(t.w_)&&(null===this.Nf?null===t.Nf:this.Nf.isEqual(t.Nf))&&this.m_===t.m_;}},{key:"id",get:function get(){return this.w_.path._();}},{key:"ref",get:function get(){return new mc(this.w_,this.pf,this.m_);}},{key:"exists",get:function get(){return null!==this.Nf;}},{key:"metadata",get:function get(){return new Tc(this.$f,this.Ff);}}]);return Ec;}();var Ic=/*#__PURE__*/function(_Ec){_inherits(Ic,_Ec);function Ic(){_classCallCheck(this,Ic);return _possibleConstructorReturn(this,_getPrototypeOf(Ic).apply(this,arguments));}_createClass(Ic,[{key:"data",value:function data(t){return _get(_getPrototypeOf(Ic.prototype),"data",this).call(this,t);}}]);return Ic;}(Ec);function Ac(t,e,n,s,i,r,o){var a;if(i.p()){if("array-contains"/* ARRAY_CONTAINS */===r||"array-contains-any"/* ARRAY_CONTAINS_ANY */===r)throw new I(E.INVALID_ARGUMENT,"Invalid Query. You can't perform '".concat(r,"' queries on FieldPath.documentId()."));if("in"/* IN */===r||"not-in"/* NOT_IN */===r){Pc(o,r);var _e80=[];var _iteratorNormalCompletion67=true;var _didIteratorError67=false;var _iteratorError67=undefined;try{for(var _iterator67=o[Symbol.iterator](),_step67;!(_iteratorNormalCompletion67=(_step67=_iterator67.next()).done);_iteratorNormalCompletion67=true){var _n67=_step67.value;_e80.push(gc(s,t,_n67));}}catch(err){_didIteratorError67=true;_iteratorError67=err;}finally{try{if(!_iteratorNormalCompletion67&&_iterator67["return"]!=null){_iterator67["return"]();}}finally{if(_didIteratorError67){throw _iteratorError67;}}}a={arrayValue:{values:_e80}};}else a=gc(s,t,o);}else"in"/* IN */!==r&&"not-in"/* NOT_IN */!==r&&"array-contains-any"/* ARRAY_CONTAINS_ANY */!==r||Pc(o,r),a=Ja(n,e,o,/* allowArrays= */"in"/* IN */===r||"not-in"/* NOT_IN */===r);var c=_s.create(i,r,a);return function(t,e){if(e.un()){var _n68=ts(t);if(null!==_n68&&!_n68.isEqual(e.field))throw new I(E.INVALID_ARGUMENT,"Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '".concat(_n68.toString(),"' and '").concat(e.field.toString(),"'"));var _s60=Zn(t);null!==_s60&&yc(t,e.field,_s60);}var n=function(t,e){var _iteratorNormalCompletion68=true;var _didIteratorError68=false;var _iteratorError68=undefined;try{for(var _iterator68=t.filters[Symbol.iterator](),_step68;!(_iteratorNormalCompletion68=(_step68=_iterator68.next()).done);_iteratorNormalCompletion68=true){var _n69=_step68.value;if(e.indexOf(_n69.op)>=0)return _n69.op;}}catch(err){_didIteratorError68=true;_iteratorError68=err;}finally{try{if(!_iteratorNormalCompletion68&&_iterator68["return"]!=null){_iterator68["return"]();}}finally{if(_didIteratorError68){throw _iteratorError68;}}}return null;}(t,/**
 * Given an operator, returns the set of operators that cannot be used with it.
 *
 * Operators in a query must adhere to the following set of rules:
 * 1. Only one array operator is allowed.
 * 2. Only one disjunctive operator is allowed.
 * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
 * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
 *
 * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
 * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
 */function(t){switch(t){case"!="/* NOT_EQUAL */:return["!="/* NOT_EQUAL */,"not-in"/* NOT_IN */];case"array-contains"/* ARRAY_CONTAINS */:return["array-contains"/* ARRAY_CONTAINS */,"array-contains-any"/* ARRAY_CONTAINS_ANY */,"not-in"/* NOT_IN */];case"in"/* IN */:return["array-contains-any"/* ARRAY_CONTAINS_ANY */,"in"/* IN */,"not-in"/* NOT_IN */];case"array-contains-any"/* ARRAY_CONTAINS_ANY */:return["array-contains"/* ARRAY_CONTAINS */,"array-contains-any"/* ARRAY_CONTAINS_ANY */,"in"/* IN */,"not-in"/* NOT_IN */];case"not-in"/* NOT_IN */:return["array-contains"/* ARRAY_CONTAINS */,"array-contains-any"/* ARRAY_CONTAINS_ANY */,"in"/* IN */,"not-in"/* NOT_IN */,"!="/* NOT_EQUAL */];default:return[];}}(e.op));if(null!==n)// Special case when it's a duplicate op to give a slightly clearer error message.
throw n===e.op?new I(E.INVALID_ARGUMENT,"Invalid query. You cannot use more than one '".concat(e.op.toString(),"' filter.")):new I(E.INVALID_ARGUMENT,"Invalid query. You cannot use '".concat(e.op.toString(),"' filters with '").concat(n.toString(),"' filters."));}(t,c),c;}function Rc(t,e,n){if(null!==t.startAt)throw new I(E.INVALID_ARGUMENT,"Invalid query. You must not call startAt() or startAfter() before calling orderBy().");if(null!==t.endAt)throw new I(E.INVALID_ARGUMENT,"Invalid query. You must not call endAt() or endBefore() before calling orderBy().");var s=new ps(e,n);return function(t,e){if(null===Zn(t)){// This is the first order by. It must match any inequality.
var _n70=ts(t);null!==_n70&&yc(t,_n70,e.field);}}(t,s),s;}/**
 * Create a Bound from a query and a document.
 *
 * Note that the Bound will always include the key of the document
 * and so only the provided document will compare equal to the returned
 * position.
 *
 * Will throw if the document does not contain all fields of the order by
 * of the query or if any of the fields in the order by are an uncommitted
 * server timestamp.
 */ /**
 * Parses the given documentIdValue into a ReferenceValue, throwing
 * appropriate errors if the value is anything other than a DocumentReference
 * or String, or if the string is malformed.
 */function gc(t,e,n){if("string"==typeof n){if(""===n)throw new I(E.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");if(!es(e)&&-1!==n.indexOf("/"))throw new I(E.INVALID_ARGUMENT,"Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '".concat(n,"' contains a '/' character."));var _s61=e.path.child(F.g(n));if(!k.F(_s61))throw new I(E.INVALID_ARGUMENT,"Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '".concat(_s61,"' is not because it has an odd number of segments (").concat(_s61.length,")."));return Ee(t,new k(_s61));}if(n instanceof Ua)return Ee(t,n.w_);throw new I(E.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: "+Y(n)+".");}/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */function Pc(t,e){if(!Array.isArray(t)||0===t.length)throw new I(E.INVALID_ARGUMENT,"Invalid Query. A non-empty array is required for '".concat(e.toString(),"' filters."));if(t.length>10)throw new I(E.INVALID_ARGUMENT,"Invalid Query. '".concat(e.toString(),"' filters support a maximum of 10 elements in the value array."));if("in"/* IN */===e||"array-contains-any"/* ARRAY_CONTAINS_ANY */===e){if(t.indexOf(null)>=0)throw new I(E.INVALID_ARGUMENT,"Invalid Query. '".concat(e.toString(),"' filters cannot contain 'null' in the value array."));if(t.filter(function(t){return Number.isNaN(t);}).length>0)throw new I(E.INVALID_ARGUMENT,"Invalid Query. '".concat(e.toString(),"' filters cannot contain 'NaN' in the value array."));}}function yc(t,e,n){if(!n.isEqual(e))throw new I(E.INVALID_ARGUMENT,"Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '".concat(e.toString(),"' and so you must also use '").concat(e.toString(),"' as your first orderBy(), but your first orderBy() is on field '").concat(n.toString(),"' instead."));}function Vc(t){if(Xn(t)&&0===t.rn.length)throw new I(E.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause");}var pc=/*#__PURE__*/function(){function pc(t,e,n){_classCallCheck(this,pc);this.xf=t,this.firestore=e,this.m_=n;}_createClass(pc,[{key:"where",value:function where(t,e,n){O("Query.where",arguments,3),J("Query.where",3,n);// Enumerated from the WhereFilterOp type in index.d.ts.
var s=G("Query.where",["<"/* LESS_THAN */,"<="/* LESS_THAN_OR_EQUAL */,"=="/* EQUAL */,"!="/* NOT_EQUAL */,">="/* GREATER_THAN_OR_EQUAL */,">"/* GREATER_THAN */,"array-contains"/* ARRAY_CONTAINS */,"in"/* IN */,"array-contains-any"/* ARRAY_CONTAINS_ANY */,"not-in"/* NOT_IN */],2,e),i=nc("Query.where",t),r=Ac(this.xf,"Query.where",this.firestore.Ef,this.firestore.d_,i,s,n);return new pc(function(t,e){var n=t.filters.concat([e]);return new zn(t.path,t.collectionGroup,t.rn.slice(),n,t.limit,t.on,t.startAt,t.endAt);}(this.xf,r),this.firestore,this.m_);}},{key:"orderBy",value:function orderBy(t,e){var n;if(B("Query.orderBy",arguments,1,2),U("Query.orderBy","non-empty string",2,e),void 0===e||"asc"===e)n="asc"/* ASCENDING */;else{if("desc"!==e)throw new I(E.INVALID_ARGUMENT,"Function Query.orderBy() has unknown direction '".concat(e,"', expected 'asc' or 'desc'."));n="desc"/* DESCENDING */;}var s=nc("Query.orderBy",t),i=Rc(this.xf,s,n);return new pc(function(t,e){// TODO(dimond): validate that orderBy does not list the same key twice.
var n=t.rn.concat([e]);return new zn(t.path,t.collectionGroup,n,t.filters.slice(),t.limit,t.on,t.startAt,t.endAt);}(this.xf,i),this.firestore,this.m_);}},{key:"limit",value:function limit(t){return O("Query.limit",arguments,1),q("Query.limit","number",1,t),tt("Query.limit",1,t),new pc(is(this.xf,t,"F"/* First */),this.firestore,this.m_);}},{key:"limitToLast",value:function limitToLast(t){return O("Query.limitToLast",arguments,1),q("Query.limitToLast","number",1,t),tt("Query.limitToLast",1,t),new pc(is(this.xf,t,"L"/* Last */),this.firestore,this.m_);}},{key:"startAt",value:function startAt(t){for(var _len11=arguments.length,e=new Array(_len11>1?_len11-1:0),_key11=1;_key11<_len11;_key11++){e[_key11-1]=arguments[_key11];}L("Query.startAt",arguments,1);var n=this.kf("Query.startAt",t,e,/*before=*/!0);return new pc(rs(this.xf,n),this.firestore,this.m_);}},{key:"startAfter",value:function startAfter(t){for(var _len12=arguments.length,e=new Array(_len12>1?_len12-1:0),_key12=1;_key12<_len12;_key12++){e[_key12-1]=arguments[_key12];}L("Query.startAfter",arguments,1);var n=this.kf("Query.startAfter",t,e,/*before=*/!1);return new pc(rs(this.xf,n),this.firestore,this.m_);}},{key:"endBefore",value:function endBefore(t){for(var _len13=arguments.length,e=new Array(_len13>1?_len13-1:0),_key13=1;_key13<_len13;_key13++){e[_key13-1]=arguments[_key13];}L("Query.endBefore",arguments,1);var n=this.kf("Query.endBefore",t,e,/*before=*/!0);return new pc(os(this.xf,n),this.firestore,this.m_);}},{key:"endAt",value:function endAt(t){for(var _len14=arguments.length,e=new Array(_len14>1?_len14-1:0),_key14=1;_key14<_len14;_key14++){e[_key14-1]=arguments[_key14];}L("Query.endAt",arguments,1);var n=this.kf("Query.endAt",t,e,/*before=*/!1);return new pc(os(this.xf,n),this.firestore,this.m_);}},{key:"isEqual",value:function isEqual(t){if(!(t instanceof pc))throw Z("isEqual","Query",1,t);return this.firestore===t.firestore&&as(this.xf,t.xf)&&this.m_===t.m_;}},{key:"withConverter",value:function withConverter(t){return new pc(this.xf,this.firestore,t);}/** Helper function to create a bound from a document or fields */},{key:"kf",value:function kf(t,e,n,s){if(J(t,1,e),e instanceof Ec)return O(t,[e].concat(_toConsumableArray(n)),1),function(t,e,n,s,i){if(!s)throw new I(E.NOT_FOUND,"Can't use a DocumentSnapshot that doesn't exist for "+n+"().");var r=[];// Because people expect to continue/end a query at the exact document
// provided, we need to use the implicit sort order rather than the explicit
// sort order, because it's guaranteed to contain the document key. That way
// the position becomes unambiguous and the query continues/ends exactly at
// the provided document. Without the key (by using the explicit sort
// orders), multiple documents could match the position, yielding duplicate
// results.
var _iteratorNormalCompletion69=true;var _didIteratorError69=false;var _iteratorError69=undefined;try{for(var _iterator69=ns(t)[Symbol.iterator](),_step69;!(_iteratorNormalCompletion69=(_step69=_iterator69.next()).done);_iteratorNormalCompletion69=true){var _n71=_step69.value;if(_n71.field.p())r.push(Ee(e,s.key));else{var _t96=s.field(_n71.field);if(re(_t96))throw new I(E.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+_n71.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===_t96){var _t97=_n71.field.R();throw new I(E.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a document for which the field '".concat(_t97,"' (used as the orderBy) does not exist."));}r.push(_t96);}}}catch(err){_didIteratorError69=true;_iteratorError69=err;}finally{try{if(!_iteratorNormalCompletion69&&_iterator69["return"]!=null){_iterator69["return"]();}}finally{if(_didIteratorError69){throw _iteratorError69;}}}return new gs(r,i);}/**
 * Converts a list of field values to a Bound for the given query.
 */(this.xf,this.firestore.d_,t,e.Nf,s);{var _i36=[e].concat(n);return function(t,e,n,s,i,r){// Use explicit order by's because it has to match the query the user made
var o=t.rn;if(i.length>o.length)throw new I(E.INVALID_ARGUMENT,"Too many arguments provided to ".concat(s,"(). The number of arguments must be less than or equal to the number of orderBy() clauses"));var a=[];for(var _r19=0;_r19<i.length;_r19++){var _c4=i[_r19];if(o[_r19].field.p()){if("string"!=typeof _c4)throw new I(E.INVALID_ARGUMENT,"Invalid query. Expected a string for document ID in ".concat(s,"(), but got a ").concat(_typeof(_c4)));if(!es(t)&&-1!==_c4.indexOf("/"))throw new I(E.INVALID_ARGUMENT,"Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ".concat(s,"() must be a plain document ID, but '").concat(_c4,"' contains a slash."));var _n72=t.path.child(F.g(_c4));if(!k.F(_n72))throw new I(E.INVALID_ARGUMENT,"Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ".concat(s,"() must result in a valid document path, but '").concat(_n72,"' is not because it contains an odd number of segments."));var _i37=new k(_n72);a.push(Ee(e,_i37));}else{var _t98=Ja(n,s,_c4);a.push(_t98);}}return new gs(a,r);}(this.xf,this.firestore.d_,this.firestore.Ef,t,_i36,s);}}},{key:"onSnapshot",value:function onSnapshot(){var _this187=this;for(var _len15=arguments.length,t=new Array(_len15),_key15=0;_key15<_len15;_key15++){t[_key15]=arguments[_key15];}var e,n,s;B("Query.onSnapshot",arguments,1,4);var i={},r=0;if("object"!=_typeof(t[r])||uc(t[r])||(i=t[r],X("Query.onSnapshot",i,["includeMetadataChanges"]),W("Query.onSnapshot","boolean","includeMetadataChanges",i.includeMetadataChanges),r++),uc(t[r])){var _i38=t[r];t[r]=null===(e=_i38.next)||void 0===e?void 0:e.bind(_i38),t[r+1]=null===(n=_i38.error)||void 0===n?void 0:n.bind(_i38),t[r+2]=null===(s=_i38.complete)||void 0===s?void 0:s.bind(_i38);}else q("Query.onSnapshot","function",r,t[r]),U("Query.onSnapshot","function",r+1,t[r+1]),U("Query.onSnapshot","function",r+2,t[r+2]);var o={next:function next(e){t[r]&&t[r](new bc(_this187.firestore,_this187.xf,e,_this187.m_));},error:t[r+1],complete:t[r+2]};Vc(this.xf);return this.firestore._f().listen(this.xf,i,o);}},{key:"get",value:function get(t){var _this188=this;B("Query.get",arguments,0,1),Cc("Query.get",t),Vc(this.xf);var e=this.firestore._f();return(t&&"cache"===t.source?e.G_(this.xf):e.z_(this.xf,t)).then(function(t){return new bc(_this188.firestore,_this188.xf,t,_this188.m_);});}}]);return pc;}();var bc=/*#__PURE__*/function(){function bc(t,e,n,s){_classCallCheck(this,bc);this.pf=t,this.Mf=e,this.Of=n,this.m_=s,this.Lf=null,this.Bf=null,this.metadata=new Tc(n.hasPendingWrites,n.fromCache);}_createClass(bc,[{key:"forEach",value:function forEach(t,e){var _this189=this;B("QuerySnapshot.forEach",arguments,1,2),q("QuerySnapshot.forEach","function",1,t),this.Of.docs.forEach(function(n){t.call(e,_this189.qf(n,_this189.metadata.fromCache,_this189.Of.Qt.has(n.key)));});}},{key:"docChanges",value:function docChanges(t){t&&(X("QuerySnapshot.docChanges",t,["includeMetadataChanges"]),W("QuerySnapshot.docChanges","boolean","includeMetadataChanges",t.includeMetadataChanges));var e=!(!t||!t.includeMetadataChanges);if(e&&this.Of.jt)throw new I(E.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this.Lf&&this.Bf===e||(this.Lf=/**
 * Calculates the array of DocumentChanges for a given ViewSnapshot.
 *
 * Exported for testing.
 *
 * @param snapshot The ViewSnapshot that represents the expected state.
 * @param includeMetadataChanges Whether to include metadata changes.
 * @param converter A factory function that returns a QueryDocumentSnapshot.
 * @return An object that matches the DocumentChange API.
 */function(t,e,n){if(t.Ut.m()){// Special case the first snapshot because index calculation is easy and
// fast
var _e81,_s62=0;return t.docChanges.map(function(i){var r=n(i.doc,t.fromCache,t.Qt.has(i.doc.key));return _e81=i.doc,{type:"added",doc:r,oldIndex:-1,newIndex:_s62++};});}{// A DocumentSet that is updated incrementally as changes are applied to use
// to lookup the index of a document.
var _s63=t.Ut;return t.docChanges.filter(function(t){return e||3/* Metadata */!==t.type;}).map(function(e){var i=n(e.doc,t.fromCache,t.Qt.has(e.doc.key));var r=-1,o=-1;return 0/* Added */!==e.type&&(r=_s63.indexOf(e.doc.key),_s63=_s63["delete"](e.doc.key)),1/* Removed */!==e.type&&(_s63=_s63.add(e.doc),o=_s63.indexOf(e.doc.key)),{type:Fc(e.type),doc:i,oldIndex:r,newIndex:o};});}}(this.Of,e,this.qf.bind(this)),this.Bf=e),this.Lf;}/** Check the equality. The call can be very expensive. */},{key:"isEqual",value:function isEqual(t){if(!(t instanceof bc))throw Z("isEqual","QuerySnapshot",1,t);return this.pf===t.pf&&as(this.Mf,t.Mf)&&this.Of.isEqual(t.Of)&&this.m_===t.m_;}},{key:"qf",value:function qf(t,e,n){return new Ic(this.pf,t.key,t,e,n,this.m_);}},{key:"docs",get:function get(){var t=[];return this.forEach(function(e){return t.push(e);}),t;}},{key:"empty",get:function get(){return this.Of.docs.m();}},{key:"size",get:function get(){return this.Of.docs.size;}},{key:"query",get:function get(){return new pc(this.Mf,this.pf,this.m_);}}]);return bc;}();var vc=/*#__PURE__*/function(_pc){_inherits(vc,_pc);function vc(t,e,n){var _this190;_classCallCheck(this,vc);if(_this190=_possibleConstructorReturn(this,_getPrototypeOf(vc).call(this,Yn(t),e,n)),_this190.Uf=t,t.length%2!=1)throw new I(E.INVALID_ARGUMENT,"Invalid collection reference. Collection references must have an odd number of segments, but ".concat(t.R()," has ").concat(t.length));return _possibleConstructorReturn(_this190);}_createClass(vc,[{key:"doc",value:function doc(t){B("CollectionReference.doc",arguments,0,1),// We allow omission of 'pathString' but explicitly prohibit passing in both
// 'undefined' and 'null'.
0===arguments.length&&(t=it.k()),q("CollectionReference.doc","non-empty string",1,t);var e=F.g(t);return mc.Pf(this.xf.path.child(e),this.firestore,this.m_);}},{key:"add",value:function add(t){O("CollectionReference.add",arguments,1);var e=this.m_?this.m_.toFirestore(t):t;q("CollectionReference.add","object",1,e);var n=this.doc();// Call set() with the converted value directly to avoid calling toFirestore() a second time.
return new mc(n.w_,this.firestore,null).set(e).then(function(){return n;});}},{key:"withConverter",value:function withConverter(t){return new vc(this.Uf,this.firestore,t);}},{key:"id",get:function get(){return this.xf.path._();}},{key:"parent",get:function get(){var t=this.xf.path.h();return t.m()?null:new mc(new k(t),this.firestore,/* converter= */null);}},{key:"path",get:function get(){return this.xf.path.R();}}]);return vc;}(pc);function Sc(t,e){if(void 0===e)return{merge:!1};if(X(t,e,["merge","mergeFields"]),W(t,"boolean","merge",e.merge),j(t,"mergeFields","a string or a FieldPath",e.mergeFields,function(t){return"string"==typeof t||t instanceof Da;}),void 0!==e.mergeFields&&void 0!==e.merge)throw new I(E.INVALID_ARGUMENT,"Invalid options passed to function ".concat(t,"(): You cannot specify both \"merge\" and \"mergeFields\"."));return e;}function Dc(t,e){return void 0===e?{}:(X(t,e,["serverTimestamps"]),K(t,0,"serverTimestamps",e.serverTimestamps,["estimate","previous","none"]),e);}function Cc(t,e){U(t,"object",1,e),e&&(X(t,e,["source"]),K(t,0,"source",e.source,["default","server","cache"]));}function Nc(t,e,n){if(e instanceof Ua){if(e.firestore!==n)throw new I(E.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return e;}throw Z(t,"DocumentReference",1,e);}function Fc(t){switch(t){case 0/* Added */:return"added";case 2/* Modified */:case 3/* Metadata */:return"modified";case 1/* Removed */:return"removed";default:return p();}}/**
 * Converts custom model object of type T into DocumentData by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to DocumentData
 * because we want to provide the user with a more specific error message if
 * their set() or fails due to invalid data originating from a toFirestore()
 * call.
 */function $c(t,e,n){var s;// Cast to `any` in order to satisfy the union type constraint on
// toFirestore().
// eslint-disable-next-line @typescript-eslint/no-explicit-any
return s=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,s;}/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var xc=/*#__PURE__*/function(_Ba){_inherits(xc,_Ba);function xc(){_classCallCheck(this,xc);return _possibleConstructorReturn(this,_getPrototypeOf(xc).apply(this,arguments));}_createClass(xc,[{key:"isEqual",value:function isEqual(t){return this.f_.isEqual(t.f_);}}],[{key:"serverTimestamp",value:function serverTimestamp(){M("FieldValue.serverTimestamp",arguments);var t=new xa("serverTimestamp");return t.s_="FieldValue.serverTimestamp",new xc(t);}},{key:"delete",value:function _delete(){M("FieldValue.delete",arguments);var t=new Fa("deleteField");return t.s_="FieldValue.delete",new xc(t);}},{key:"arrayUnion",value:function arrayUnion(){for(var _len16=arguments.length,t=new Array(_len16),_key16=0;_key16<_len16;_key16++){t[_key16]=arguments[_key16];}L("FieldValue.arrayUnion",arguments,1);var e=/**
 * Returns a special value that can be used with {@link setDoc()} or {@link
 * updateDoc()} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements The elements to union into the array.
 * @return The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */function(){for(var _len17=arguments.length,t=new Array(_len17),_key17=0;_key17<_len17;_key17++){t[_key17]=arguments[_key17];}// NOTE: We don't actually parse the data until it's used in set() or
// update() since we'd need the Firestore instance to do this.
return L("arrayUnion()",arguments,1),new ka("arrayUnion",t);}/**
 * Returns a special value that can be used with {@link setDoc()} or {@link
 * updateDoc()} that tells the server to remove the given elements from any
 * array value that already exists on the server. All instances of each element
 * specified will be removed from the array. If the field being modified is not
 * already an array it will be overwritten with an empty array.
 *
 * @param elements The elements to remove from the array.
 * @return The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */.apply(void 0,t);return e.s_="FieldValue.arrayUnion",new xc(e);}},{key:"arrayRemove",value:function arrayRemove(){for(var _len18=arguments.length,t=new Array(_len18),_key18=0;_key18<_len18;_key18++){t[_key18]=arguments[_key18];}L("FieldValue.arrayRemove",arguments,1);var e=function(){for(var _len19=arguments.length,t=new Array(_len19),_key19=0;_key19<_len19;_key19++){t[_key19]=arguments[_key19];}// NOTE: We don't actually parse the data until it's used in set() or
// update() since we'd need the Firestore instance to do this.
return L("arrayRemove()",arguments,1),new Ma("arrayRemove",t);}/**
 * Returns a special value that can be used with {@link setDoc()} or {@link
 * updateDoc()} that tells the server to increment the field's current value by
 * the given value.
 *
 * If either the operand or the current field value uses floating point
 * precision, all arithmetic follows IEEE 754 semantics. If both values are
 * integers, values outside of JavaScript's safe number range
 * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
 * precision loss. Furthermore, once processed by the Firestore backend, all
 * integer operations are capped between -2^63 and 2^63-1.
 *
 * If the current field value is not of type `number`, or if the field does not
 * yet exist, the transformation sets the field to the given value.
 *
 * @param n The value to increment by.
 * @return The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */.apply(void 0,t);return e.s_="FieldValue.arrayRemove",new xc(e);}},{key:"increment",value:function increment(t){q("FieldValue.increment","number",1,t),O("FieldValue.increment",arguments,1);var e=function(t){return new Oa("increment",t);}(t);return e.s_="FieldValue.increment",new xc(e);}}]);return xc;}(Ba);/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var kc={Firestore:fc,GeoPoint:La,Timestamp:wt,Blob:lt,Transaction:dc,WriteBatch:wc,DocumentReference:mc,DocumentSnapshot:Ec,Query:pc,QueryDocumentSnapshot:Ic,QuerySnapshot:bc,CollectionReference:vc,FieldPath:Da,FieldValue:xc,setLogLevel:fc.setLogLevel,CACHE_SIZE_UNLIMITED:lc};/**
 * Configures Firestore as part of the Firebase SDK by calling registerService.
 *
 * @param firebase The FirebaseNamespace to register Firestore with
 * @param firestoreFactory A factory function that returns a new Firestore
 *    instance.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Registers the main Firestore ReactNative build with the components framework.
 * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
 */function Mc(t){!function(t,e){t.INTERNAL.registerComponent(new _component.Component("firestore",function(t){var n=t.getProvider("app").getImmediate();return e(n,t.getProvider("auth-internal"));},"PUBLIC"/* PUBLIC */).setServiceProps(Object.assign({},kc)));}(t,function(t,e){var n=new ba(),s=new pa(n);return new fc(t,e,s,n);}),t.registerVersion("@firebase/firestore","1.17.2","rn");}Mc(_app["default"]);