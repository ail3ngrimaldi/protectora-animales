'use strict';

module.exports.disposer = disposer;

function disposer(creatorFn, disposerFn, fn) {
  var runDisposer = function runDisposer(resource, result) {
    var shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return disposerFn(resource).then( // disposer resolved, do something with original fn's promise
    function () {
      if (shouldThrow) {
        throw result;
      }

      return result;
    }, // Disposer fn failed, crash process
    function (err) {
      throw err; // Or process.exit?
    });
  };

  return creatorFn.then(function (resource) {
    // fn(resource) can throw, so wrap in a promise here
    return Promise.resolve().then(function () {
      return fn(resource);
    }).then(function (result) {
      return runDisposer(resource, result);
    })["catch"](function (err) {
      return runDisposer(resource, err, true);
    });
  });
}