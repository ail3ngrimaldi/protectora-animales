'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LRU = require('lru-cache');

var MAX_SIZE = 50 * 1024 * 1024; // 50MB

var MAX_AGE = 3 * 60 * 1000;
var MEMOIZED = new LRU({
  max: MAX_SIZE,
  maxAge: MAX_AGE,
  length: function length(entry, key) {
    return key.startsWith('key:') ? entry.data.length : entry.length;
  }
});
module.exports.clearMemoized = clearMemoized;

function clearMemoized() {
  var old = {};
  MEMOIZED.forEach(function (v, k) {
    old[k] = v;
  });
  MEMOIZED.reset();
  return old;
}

module.exports.put = put;

function put(cache, entry, data, opts) {
  pickMem(opts).set("key:".concat(cache, ":").concat(entry.key), {
    entry: entry,
    data: data
  });
  putDigest(cache, entry.integrity, data, opts);
}

module.exports.put.byDigest = putDigest;

function putDigest(cache, integrity, data, opts) {
  pickMem(opts).set("digest:".concat(cache, ":").concat(integrity), data);
}

module.exports.get = get;

function get(cache, key, opts) {
  return pickMem(opts).get("key:".concat(cache, ":").concat(key));
}

module.exports.get.byDigest = getDigest;

function getDigest(cache, integrity, opts) {
  return pickMem(opts).get("digest:".concat(cache, ":").concat(integrity));
}

var ObjProxy =
/*#__PURE__*/
function () {
  function ObjProxy(obj) {
    _classCallCheck(this, ObjProxy);

    this.obj = obj;
  }

  _createClass(ObjProxy, [{
    key: "get",
    value: function get(key) {
      return this.obj[key];
    }
  }, {
    key: "set",
    value: function set(key, val) {
      this.obj[key] = val;
    }
  }]);

  return ObjProxy;
}();

function pickMem(opts) {
  if (!opts || !opts.memoize) {
    return MEMOIZED;
  } else if (opts.memoize.get && opts.memoize.set) {
    return opts.memoize;
  } else if (_typeof(opts.memoize) === 'object') {
    return new ObjProxy(opts.memoize);
  } else {
    return MEMOIZED;
  }
}