'use strict';

var figgyPudding = require('figgy-pudding');

var index = require('./lib/entry-index');

var memo = require('./lib/memoization');

var write = require('./lib/content/write');

var Flush = require('minipass-flush');

var _require = require('minipass-collect'),
    PassThrough = _require.PassThrough;

var Pipeline = require('minipass-pipeline');

var PutOpts = figgyPudding({
  algorithms: {
    "default": ['sha512']
  },
  integrity: {},
  memoize: {},
  metadata: {},
  pickAlgorithm: {},
  size: {},
  tmpPrefix: {},
  single: {},
  sep: {},
  error: {},
  strict: {}
});
module.exports = putData;

function putData(cache, key, data, opts) {
  opts = PutOpts(opts);
  return write(cache, data, opts).then(function (res) {
    return index.insert(cache, key, res.integrity, opts.concat({
      size: res.size
    })).then(function (entry) {
      if (opts.memoize) {
        memo.put(cache, entry, data, opts);
      }

      return res.integrity;
    });
  });
}

module.exports.stream = putStream;

function putStream(cache, key, opts) {
  opts = PutOpts(opts);
  var integrity;
  var size;
  var memoData;
  var pipeline = new Pipeline(); // first item in the pipeline is the memoizer, because we need
  // that to end first and get the collected data.

  if (opts.memoize) {
    var memoizer = new PassThrough().on('collect', function (data) {
      memoData = data;
    });
    pipeline.push(memoizer);
  } // contentStream is a write-only, not a passthrough
  // no data comes out of it.


  var contentStream = write.stream(cache, opts).on('integrity', function (_int) {
    integrity = _int;
  }).on('size', function (s) {
    size = s;
  });
  pipeline.push(contentStream); // last but not least, we write the index and emit hash and size,
  // and memoize if we're doing that

  pipeline.push(new Flush({
    flush: function flush() {
      return index.insert(cache, key, integrity, opts.concat({
        size: size
      })).then(function (entry) {
        if (opts.memoize && memoData) {
          memo.put(cache, entry, memoData, opts);
        }

        if (integrity) {
          pipeline.emit('integrity', integrity);
        }

        if (size) {
          pipeline.emit('size', size);
        }
      });
    }
  }));
  return pipeline;
}