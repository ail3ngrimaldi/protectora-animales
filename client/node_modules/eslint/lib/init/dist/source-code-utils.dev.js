/**
 * @fileoverview Tools for obtaining SourceCode objects.
 * @author Ian VanSchooten
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("../cli-engine"),
    CLIEngine = _require.CLIEngine;
/*
 * This is used for:
 *
 * 1. Enumerate target file because we have not expose such a API on `CLIEngine`
 *    (https://github.com/eslint/eslint/issues/11222).
 * 2. Create `SourceCode` instances. Because we don't have any function which
 *    instantiate `SourceCode` so it needs to take the created `SourceCode`
 *    instance out after linting.
 *
 * TODO1: Expose the API that enumerates target files.
 * TODO2: Extract the creation logic of `SourceCode` from `Linter` class.
 */


var _require2 = require("../cli-engine/cli-engine"),
    getCLIEngineInternalSlots = _require2.getCLIEngineInternalSlots; // eslint-disable-line no-restricted-modules


var debug = require("debug")("eslint:source-code-utils"); //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Get the SourceCode object for a single file
 * @param   {string}     filename The fully resolved filename to get SourceCode from.
 * @param   {Object}     engine  A CLIEngine.
 * @returns {Array}               Array of the SourceCode object representing the file
 *                                and fatal error message.
 */


function getSourceCodeOfFile(filename, engine) {
  debug("getting sourceCode of", filename);
  var results = engine.executeOnFiles([filename]);

  if (results && results.results[0] && results.results[0].messages[0] && results.results[0].messages[0].fatal) {
    var msg = results.results[0].messages[0];
    throw new Error("(".concat(filename, ":").concat(msg.line, ":").concat(msg.column, ") ").concat(msg.message));
  } // TODO: extract the logic that creates source code objects to `SourceCode#parse(text, options)` or something like.


  var _getCLIEngineInternal = getCLIEngineInternalSlots(engine),
      linter = _getCLIEngineInternal.linter;

  var sourceCode = linter.getSourceCode();
  return sourceCode;
} //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * This callback is used to measure execution status in a progress bar
 * @callback progressCallback
 * @param {number} The total number of times the callback will be called.
 */

/**
 * Gets the SourceCode of a single file, or set of files.
 * @param {string[]|string} patterns A filename, directory name, or glob, or an array of them
 * @param {Object} options A CLIEngine options object. If not provided, the default cli options will be used.
 * @param {progressCallback} callback Callback for reporting execution status
 * @returns {Object} The SourceCode of all processed files.
 */


function getSourceCodeOfFiles(patterns, options, callback) {
  var sourceCodes = {};
  var globPatternsList = typeof patterns === "string" ? [patterns] : patterns;
  var engine = new CLIEngine(_objectSpread({}, options, {
    rules: {}
  })); // TODO: make file iteration as a public API and use it.

  var _getCLIEngineInternal2 = getCLIEngineInternalSlots(engine),
      fileEnumerator = _getCLIEngineInternal2.fileEnumerator;

  var filenames = Array.from(fileEnumerator.iterateFiles(globPatternsList)).filter(function (entry) {
    return !entry.ignored;
  }).map(function (entry) {
    return entry.filePath;
  });

  if (filenames.length === 0) {
    debug("Did not find any files matching pattern(s): ".concat(globPatternsList));
  }

  filenames.forEach(function (filename) {
    var sourceCode = getSourceCodeOfFile(filename, engine);

    if (sourceCode) {
      debug("got sourceCode of", filename);
      sourceCodes[filename] = sourceCode;
    }

    if (callback) {
      callback(filenames.length); // eslint-disable-line callback-return
    }
  });
  return sourceCodes;
}

module.exports = {
  getSourceCodeOfFiles: getSourceCodeOfFiles
};