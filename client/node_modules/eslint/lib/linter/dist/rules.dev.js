/**
 * @fileoverview Defines a storage for rules.
 * @author Nicholas C. Zakas
 * @author aladdin-add
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var builtInRules = require("../rules"); //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Normalizes a rule module to the new-style API
 * @param {(Function|{create: Function})} rule A rule object, which can either be a function
 * ("old-style") or an object with a `create` method ("new-style")
 * @returns {{create: Function}} A new-style rule.
 */


function normalizeRule(rule) {
  return typeof rule === "function" ? Object.assign({
    create: rule
  }, rule) : rule;
} //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------


var Rules =
/*#__PURE__*/
function () {
  function Rules() {
    _classCallCheck(this, Rules);

    this._rules = Object.create(null);
  }
  /**
   * Registers a rule module for rule id in storage.
   * @param {string} ruleId Rule id (file name).
   * @param {Function} ruleModule Rule handler.
   * @returns {void}
   */


  _createClass(Rules, [{
    key: "define",
    value: function define(ruleId, ruleModule) {
      this._rules[ruleId] = normalizeRule(ruleModule);
    }
    /**
     * Access rule handler by id (file name).
     * @param {string} ruleId Rule id (file name).
     * @returns {{create: Function, schema: JsonSchema[]}}
     * A rule. This is normalized to always have the new-style shape with a `create` method.
     */

  }, {
    key: "get",
    value: function get(ruleId) {
      if (typeof this._rules[ruleId] === "string") {
        this.define(ruleId, require(this._rules[ruleId]));
      }

      if (this._rules[ruleId]) {
        return this._rules[ruleId];
      }

      if (builtInRules.has(ruleId)) {
        return builtInRules.get(ruleId);
      }

      return null;
    }
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var _i, _Object$keys, ruleId;

      return regeneratorRuntime.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(builtInRules, "t0", 1);

            case 1:
              _i = 0, _Object$keys = Object.keys(this._rules);

            case 2:
              if (!(_i < _Object$keys.length)) {
                _context.next = 9;
                break;
              }

              ruleId = _Object$keys[_i];
              _context.next = 6;
              return [ruleId, this.get(ruleId)];

            case 6:
              _i++;
              _context.next = 2;
              break;

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, value, this);
    })
  }]);

  return Rules;
}();

module.exports = Rules;