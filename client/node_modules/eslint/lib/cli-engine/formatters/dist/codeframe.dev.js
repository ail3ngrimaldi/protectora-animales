/**
 * @fileoverview Codeframe reporter
 * @author Vitor Balocco
 */
"use strict";

var chalk = require("chalk");

var _require = require("@babel/code-frame"),
    codeFrameColumns = _require.codeFrameColumns;

var path = require("path"); //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Given a word and a count, append an s if count is not one.
 * @param   {string} word  A word in its singular form.
 * @param   {number} count A number controlling whether word should be pluralized.
 * @returns {string}       The original word with an s on the end if count is not one.
 */


function pluralize(word, count) {
  return count === 1 ? word : "".concat(word, "s");
}
/**
 * Gets a formatted relative file path from an absolute path and a line/column in the file.
 * @param   {string} filePath The absolute file path to format.
 * @param   {number} line     The line from the file to use for formatting.
 * @param   {number} column   The column from the file to use for formatting.
 * @returns {string}          The formatted file path.
 */


function formatFilePath(filePath, line, column) {
  var relPath = path.relative(process.cwd(), filePath);

  if (line && column) {
    relPath += ":".concat(line, ":").concat(column);
  }

  return chalk.green(relPath);
}
/**
 * Gets the formatted output for a given message.
 * @param   {Object} message      The object that represents this message.
 * @param   {Object} parentResult The result object that this message belongs to.
 * @returns {string}              The formatted output.
 */


function formatMessage(message, parentResult) {
  var type = message.fatal || message.severity === 2 ? chalk.red("error") : chalk.yellow("warning");
  var msg = "".concat(chalk.bold(message.message.replace(/((?:[\0-\x1F!-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))\.$/, "$1")));
  var ruleId = message.fatal ? "" : chalk.dim("(".concat(message.ruleId, ")"));
  var filePath = formatFilePath(parentResult.filePath, message.line, message.column);
  var sourceCode = parentResult.output ? parentResult.output : parentResult.source;
  var firstLine = ["".concat(type, ":"), "".concat(msg), ruleId ? "".concat(ruleId) : "", sourceCode ? "at ".concat(filePath, ":") : "at ".concat(filePath)].filter(String).join(" ");
  var result = [firstLine];

  if (sourceCode) {
    result.push(codeFrameColumns(sourceCode, {
      start: {
        line: message.line,
        column: message.column
      }
    }, {
      highlightCode: false
    }));
  }

  return result.join("\n");
}
/**
 * Gets the formatted output summary for a given number of errors and warnings.
 * @param   {number} errors   The number of errors.
 * @param   {number} warnings The number of warnings.
 * @param   {number} fixableErrors The number of fixable errors.
 * @param   {number} fixableWarnings The number of fixable warnings.
 * @returns {string}          The formatted output summary.
 */


function formatSummary(errors, warnings, fixableErrors, fixableWarnings) {
  var summaryColor = errors > 0 ? "red" : "yellow";
  var summary = [];
  var fixablesSummary = [];

  if (errors > 0) {
    summary.push("".concat(errors, " ").concat(pluralize("error", errors)));
  }

  if (warnings > 0) {
    summary.push("".concat(warnings, " ").concat(pluralize("warning", warnings)));
  }

  if (fixableErrors > 0) {
    fixablesSummary.push("".concat(fixableErrors, " ").concat(pluralize("error", fixableErrors)));
  }

  if (fixableWarnings > 0) {
    fixablesSummary.push("".concat(fixableWarnings, " ").concat(pluralize("warning", fixableWarnings)));
  }

  var output = chalk[summaryColor].bold("".concat(summary.join(" and "), " found."));

  if (fixableErrors || fixableWarnings) {
    output += chalk[summaryColor].bold("\n".concat(fixablesSummary.join(" and "), " potentially fixable with the `--fix` option."));
  }

  return output;
} //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------


module.exports = function (results) {
  var errors = 0;
  var warnings = 0;
  var fixableErrors = 0;
  var fixableWarnings = 0;
  var resultsWithMessages = results.filter(function (result) {
    return result.messages.length > 0;
  });
  var output = resultsWithMessages.reduce(function (resultsOutput, result) {
    var messages = result.messages.map(function (message) {
      return "".concat(formatMessage(message, result), "\n\n");
    });
    errors += result.errorCount;
    warnings += result.warningCount;
    fixableErrors += result.fixableErrorCount;
    fixableWarnings += result.fixableWarningCount;
    return resultsOutput.concat(messages);
  }, []).join("\n");
  output += "\n";
  output += formatSummary(errors, warnings, fixableErrors, fixableWarnings);
  return errors + warnings > 0 ? output : "";
};