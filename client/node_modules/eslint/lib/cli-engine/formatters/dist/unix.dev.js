/**
 * @fileoverview unix-style formatter.
 * @author oshi-shinobu
 */
"use strict"; //------------------------------------------------------------------------------
// Helper Functions
//------------------------------------------------------------------------------

/**
 * Returns a canonical error level string based upon the error message passed in.
 * @param {Object} message Individual error message provided by eslint
 * @returns {string} Error level string
 */

function getMessageType(message) {
  if (message.fatal || message.severity === 2) {
    return "Error";
  }

  return "Warning";
} //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------


module.exports = function (results) {
  var output = "",
      total = 0;
  results.forEach(function (result) {
    var messages = result.messages;
    total += messages.length;
    messages.forEach(function (message) {
      output += "".concat(result.filePath, ":");
      output += "".concat(message.line || 0, ":");
      output += "".concat(message.column || 0, ":");
      output += " ".concat(message.message, " ");
      output += "[".concat(getMessageType(message)).concat(message.ruleId ? "/".concat(message.ruleId) : "", "]");
      output += "\n";
    });
  });

  if (total > 0) {
    output += "\n".concat(total, " problem").concat(total !== 1 ? "s" : "");
  }

  return output;
};