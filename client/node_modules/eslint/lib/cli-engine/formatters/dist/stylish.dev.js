/**
 * @fileoverview Stylish reporter
 * @author Sindre Sorhus
 */
"use strict";

var chalk = require("chalk"),
    stripAnsi = require("strip-ansi"),
    table = require("text-table"); //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Given a word and a count, append an s if count is not one.
 * @param {string} word A word in its singular form.
 * @param {int} count A number controlling whether word should be pluralized.
 * @returns {string} The original word with an s on the end if count is not one.
 */


function pluralize(word, count) {
  return count === 1 ? word : "".concat(word, "s");
} //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------


module.exports = function (results) {
  var output = "\n",
      errorCount = 0,
      warningCount = 0,
      fixableErrorCount = 0,
      fixableWarningCount = 0,
      summaryColor = "yellow";
  results.forEach(function (result) {
    var messages = result.messages;

    if (messages.length === 0) {
      return;
    }

    errorCount += result.errorCount;
    warningCount += result.warningCount;
    fixableErrorCount += result.fixableErrorCount;
    fixableWarningCount += result.fixableWarningCount;
    output += "".concat(chalk.underline(result.filePath), "\n");
    output += "".concat(table(messages.map(function (message) {
      var messageType;

      if (message.fatal || message.severity === 2) {
        messageType = chalk.red("error");
        summaryColor = "red";
      } else {
        messageType = chalk.yellow("warning");
      }

      return ["", message.line || 0, message.column || 0, messageType, message.message.replace(/((?:[\0-\x1F!-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))\.$/, "$1"), chalk.dim(message.ruleId || "")];
    }), {
      align: ["", "r", "l"],
      stringLength: function stringLength(str) {
        return stripAnsi(str).length;
      }
    }).split("\n").map(function (el) {
      return el.replace(/([0-9]+)[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+([0-9]+)/, function (m, p1, p2) {
        return chalk.dim("".concat(p1, ":").concat(p2));
      });
    }).join("\n"), "\n\n");
  });
  var total = errorCount + warningCount;

  if (total > 0) {
    output += chalk[summaryColor].bold(["\u2716 ", total, pluralize(" problem", total), " (", errorCount, pluralize(" error", errorCount), ", ", warningCount, pluralize(" warning", warningCount), ")\n"].join(""));

    if (fixableErrorCount > 0 || fixableWarningCount > 0) {
      output += chalk[summaryColor].bold(["  ", fixableErrorCount, pluralize(" error", fixableErrorCount), " and ", fixableWarningCount, pluralize(" warning", fixableWarningCount), " potentially fixable with the `--fix` option.\n"].join(""));
    }
  } // Resets output color, for prevent change on top level


  return total > 0 ? chalk.reset(output) : "";
};