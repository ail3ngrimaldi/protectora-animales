/**
 * @fileoverview `ConfigArray` class.
 *
 * `ConfigArray` class expresses the full of a configuration. It has the entry
 * config file, base config files that were extended, loaded parsers, and loaded
 * plugins.
 *
 * `ConfigArray` class provies three properties and two methods.
 *
 * - `pluginEnvironments`
 * - `pluginProcessors`
 * - `pluginRules`
 *      The `Map` objects that contain the members of all plugins that this
 *      config array contains. Those map objects don't have mutation methods.
 *      Those keys are the member ID such as `pluginId/memberName`.
 * - `isRoot()`
 *      If `true` then this configuration has `root:true` property.
 * - `extractConfig(filePath)`
 *      Extract the final configuration for a given file. This means merging
 *      every config array element which that `criteria` property matched. The
 *      `filePath` argument must be an absolute path.
 *
 * `ConfigArrayFactory` provides the loading logic of config files.
 *
 * @author Toru Nagashima <https://github.com/mysticatea>
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require("./extracted-config"),
    ExtractedConfig = _require.ExtractedConfig;

var _require2 = require("./ignore-pattern"),
    IgnorePattern = _require2.IgnorePattern; //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------
// Define types for VSCode IntelliSense.

/** @typedef {import("../../shared/types").Environment} Environment */

/** @typedef {import("../../shared/types").GlobalConf} GlobalConf */

/** @typedef {import("../../shared/types").RuleConf} RuleConf */

/** @typedef {import("../../shared/types").Rule} Rule */

/** @typedef {import("../../shared/types").Plugin} Plugin */

/** @typedef {import("../../shared/types").Processor} Processor */

/** @typedef {import("./config-dependency").DependentParser} DependentParser */

/** @typedef {import("./config-dependency").DependentPlugin} DependentPlugin */

/** @typedef {import("./override-tester")["OverrideTester"]} OverrideTester */

/**
 * @typedef {Object} ConfigArrayElement
 * @property {string} name The name of this config element.
 * @property {string} filePath The path to the source file of this config element.
 * @property {InstanceType<OverrideTester>|null} criteria The tester for the `files` and `excludedFiles` of this config element.
 * @property {Record<string, boolean>|undefined} env The environment settings.
 * @property {Record<string, GlobalConf>|undefined} globals The global variable settings.
 * @property {IgnorePattern|undefined} ignorePattern The ignore patterns.
 * @property {boolean|undefined} noInlineConfig The flag that disables directive comments.
 * @property {DependentParser|undefined} parser The parser loader.
 * @property {Object|undefined} parserOptions The parser options.
 * @property {Record<string, DependentPlugin>|undefined} plugins The plugin loaders.
 * @property {string|undefined} processor The processor name to refer plugin's processor.
 * @property {boolean|undefined} reportUnusedDisableDirectives The flag to report unused `eslint-disable` comments.
 * @property {boolean|undefined} root The flag to express root.
 * @property {Record<string, RuleConf>|undefined} rules The rule settings
 * @property {Object|undefined} settings The shared settings.
 */

/**
 * @typedef {Object} ConfigArrayInternalSlots
 * @property {Map<string, ExtractedConfig>} cache The cache to extract configs.
 * @property {ReadonlyMap<string, Environment>|null} envMap The map from environment ID to environment definition.
 * @property {ReadonlyMap<string, Processor>|null} processorMap The map from processor ID to environment definition.
 * @property {ReadonlyMap<string, Rule>|null} ruleMap The map from rule ID to rule definition.
 */

/** @type {WeakMap<ConfigArray, ConfigArrayInternalSlots>} */


var internalSlotsMap = new (
/*#__PURE__*/
function (_WeakMap) {
  _inherits(_class, _WeakMap);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
  }

  _createClass(_class, [{
    key: "get",
    value: function get(key) {
      var value = _get(_getPrototypeOf(_class.prototype), "get", this).call(this, key);

      if (!value) {
        value = {
          cache: new Map(),
          envMap: null,
          processorMap: null,
          ruleMap: null
        };

        _get(_getPrototypeOf(_class.prototype), "set", this).call(this, key, value);
      }

      return value;
    }
  }]);

  return _class;
}(_wrapNativeSuper(WeakMap)))();
/**
 * Get the indices which are matched to a given file.
 * @param {ConfigArrayElement[]} elements The elements.
 * @param {string} filePath The path to a target file.
 * @returns {number[]} The indices.
 */

function getMatchedIndices(elements, filePath) {
  var indices = [];

  for (var i = elements.length - 1; i >= 0; --i) {
    var element = elements[i];

    if (!element.criteria || element.criteria.test(filePath)) {
      indices.push(i);
    }
  }

  return indices;
}
/**
 * Check if a value is a non-null object.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is a non-null object.
 */


function isNonNullObject(x) {
  return _typeof(x) === "object" && x !== null;
}
/**
 * Merge two objects.
 *
 * Assign every property values of `y` to `x` if `x` doesn't have the property.
 * If `x`'s property value is an object, it does recursive.
 * @param {Object} target The destination to merge
 * @param {Object|undefined} source The source to merge.
 * @returns {void}
 */


function mergeWithoutOverwrite(target, source) {
  if (!isNonNullObject(source)) {
    return;
  }

  for (var _i = 0, _Object$keys = Object.keys(source); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];

    if (key === "__proto__") {
      continue;
    }

    if (isNonNullObject(target[key])) {
      mergeWithoutOverwrite(target[key], source[key]);
    } else if (target[key] === void 0) {
      if (isNonNullObject(source[key])) {
        target[key] = Array.isArray(source[key]) ? [] : {};
        mergeWithoutOverwrite(target[key], source[key]);
      } else if (source[key] !== void 0) {
        target[key] = source[key];
      }
    }
  }
}
/**
 * Merge plugins.
 * `target`'s definition is prior to `source`'s.
 * @param {Record<string, DependentPlugin>} target The destination to merge
 * @param {Record<string, DependentPlugin>|undefined} source The source to merge.
 * @returns {void}
 */


function mergePlugins(target, source) {
  if (!isNonNullObject(source)) {
    return;
  }

  for (var _i2 = 0, _Object$keys2 = Object.keys(source); _i2 < _Object$keys2.length; _i2++) {
    var key = _Object$keys2[_i2];

    if (key === "__proto__") {
      continue;
    }

    var targetValue = target[key];
    var sourceValue = source[key]; // Adopt the plugin which was found at first.

    if (targetValue === void 0) {
      if (sourceValue.error) {
        throw sourceValue.error;
      }

      target[key] = sourceValue;
    }
  }
}
/**
 * Merge rule configs.
 * `target`'s definition is prior to `source`'s.
 * @param {Record<string, Array>} target The destination to merge
 * @param {Record<string, RuleConf>|undefined} source The source to merge.
 * @returns {void}
 */


function mergeRuleConfigs(target, source) {
  if (!isNonNullObject(source)) {
    return;
  }

  for (var _i3 = 0, _Object$keys3 = Object.keys(source); _i3 < _Object$keys3.length; _i3++) {
    var key = _Object$keys3[_i3];

    if (key === "__proto__") {
      continue;
    }

    var targetDef = target[key];
    var sourceDef = source[key]; // Adopt the rule config which was found at first.

    if (targetDef === void 0) {
      if (Array.isArray(sourceDef)) {
        target[key] = _toConsumableArray(sourceDef);
      } else {
        target[key] = [sourceDef];
      }
      /*
       * If the first found rule config is severity only and the current rule
       * config has options, merge the severity and the options.
       */

    } else if (targetDef.length === 1 && Array.isArray(sourceDef) && sourceDef.length >= 2) {
      targetDef.push.apply(targetDef, _toConsumableArray(sourceDef.slice(1)));
    }
  }
}
/**
 * Create the extracted config.
 * @param {ConfigArray} instance The config elements.
 * @param {number[]} indices The indices to use.
 * @returns {ExtractedConfig} The extracted config.
 */


function createConfig(instance, indices) {
  var config = new ExtractedConfig();
  var ignorePatterns = []; // Merge elements.

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = indices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var index = _step.value;
      var element = instance[index]; // Adopt the parser which was found at first.

      if (!config.parser && element.parser) {
        if (element.parser.error) {
          throw element.parser.error;
        }

        config.parser = element.parser;
      } // Adopt the processor which was found at first.


      if (!config.processor && element.processor) {
        config.processor = element.processor;
      } // Adopt the noInlineConfig which was found at first.


      if (config.noInlineConfig === void 0 && element.noInlineConfig !== void 0) {
        config.noInlineConfig = element.noInlineConfig;
        config.configNameOfNoInlineConfig = element.name;
      } // Adopt the reportUnusedDisableDirectives which was found at first.


      if (config.reportUnusedDisableDirectives === void 0 && element.reportUnusedDisableDirectives !== void 0) {
        config.reportUnusedDisableDirectives = element.reportUnusedDisableDirectives;
      } // Collect ignorePatterns


      if (element.ignorePattern) {
        ignorePatterns.push(element.ignorePattern);
      } // Merge others.


      mergeWithoutOverwrite(config.env, element.env);
      mergeWithoutOverwrite(config.globals, element.globals);
      mergeWithoutOverwrite(config.parserOptions, element.parserOptions);
      mergeWithoutOverwrite(config.settings, element.settings);
      mergePlugins(config.plugins, element.plugins);
      mergeRuleConfigs(config.rules, element.rules);
    } // Create the predicate function for ignore patterns.

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (ignorePatterns.length > 0) {
    config.ignores = IgnorePattern.createIgnore(ignorePatterns.reverse());
  }

  return config;
}
/**
 * Collect definitions.
 * @template T, U
 * @param {string} pluginId The plugin ID for prefix.
 * @param {Record<string,T>} defs The definitions to collect.
 * @param {Map<string, U>} map The map to output.
 * @param {function(T): U} [normalize] The normalize function for each value.
 * @returns {void}
 */


function collect(pluginId, defs, map, normalize) {
  if (defs) {
    var prefix = pluginId && "".concat(pluginId, "/");

    for (var _i4 = 0, _Object$entries = Object.entries(defs); _i4 < _Object$entries.length; _i4++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      map.set("".concat(prefix).concat(key), normalize ? normalize(value) : value);
    }
  }
}
/**
 * Normalize a rule definition.
 * @param {Function|Rule} rule The rule definition to normalize.
 * @returns {Rule} The normalized rule definition.
 */


function normalizePluginRule(rule) {
  return typeof rule === "function" ? {
    create: rule
  } : rule;
}
/**
 * Delete the mutation methods from a given map.
 * @param {Map<any, any>} map The map object to delete.
 * @returns {void}
 */


function deleteMutationMethods(map) {
  Object.defineProperties(map, {
    clear: {
      configurable: true,
      value: void 0
    },
    "delete": {
      configurable: true,
      value: void 0
    },
    set: {
      configurable: true,
      value: void 0
    }
  });
}
/**
 * Create `envMap`, `processorMap`, `ruleMap` with the plugins in the config array.
 * @param {ConfigArrayElement[]} elements The config elements.
 * @param {ConfigArrayInternalSlots} slots The internal slots.
 * @returns {void}
 */


function initPluginMemberMaps(elements, slots) {
  var processed = new Set();
  slots.envMap = new Map();
  slots.processorMap = new Map();
  slots.ruleMap = new Map();
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = elements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var element = _step2.value;

      if (!element.plugins) {
        continue;
      }

      for (var _i5 = 0, _Object$entries2 = Object.entries(element.plugins); _i5 < _Object$entries2.length; _i5++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i5], 2),
            pluginId = _Object$entries2$_i[0],
            value = _Object$entries2$_i[1];

        var plugin = value.definition;

        if (!plugin || processed.has(pluginId)) {
          continue;
        }

        processed.add(pluginId);
        collect(pluginId, plugin.environments, slots.envMap);
        collect(pluginId, plugin.processors, slots.processorMap);
        collect(pluginId, plugin.rules, slots.ruleMap, normalizePluginRule);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  deleteMutationMethods(slots.envMap);
  deleteMutationMethods(slots.processorMap);
  deleteMutationMethods(slots.ruleMap);
}
/**
 * Create `envMap`, `processorMap`, `ruleMap` with the plugins in the config array.
 * @param {ConfigArray} instance The config elements.
 * @returns {ConfigArrayInternalSlots} The extracted config.
 */


function ensurePluginMemberMaps(instance) {
  var slots = internalSlotsMap.get(instance);

  if (!slots.ruleMap) {
    initPluginMemberMaps(instance, slots);
  }

  return slots;
} //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * The Config Array.
 *
 * `ConfigArray` instance contains all settings, parsers, and plugins.
 * You need to call `ConfigArray#extractConfig(filePath)` method in order to
 * extract, merge and get only the config data which is related to an arbitrary
 * file.
 * @extends {Array<ConfigArrayElement>}
 */


var ConfigArray =
/*#__PURE__*/
function (_Array) {
  _inherits(ConfigArray, _Array);

  function ConfigArray() {
    _classCallCheck(this, ConfigArray);

    return _possibleConstructorReturn(this, _getPrototypeOf(ConfigArray).apply(this, arguments));
  }

  _createClass(ConfigArray, [{
    key: "isRoot",

    /**
     * Check if this config has `root` flag.
     * @returns {boolean} `true` if this config array is root.
     */
    value: function isRoot() {
      for (var i = this.length - 1; i >= 0; --i) {
        var root = this[i].root;

        if (typeof root === "boolean") {
          return root;
        }
      }

      return false;
    }
    /**
     * Extract the config data which is related to a given file.
     * @param {string} filePath The absolute path to the target file.
     * @returns {ExtractedConfig} The extracted config data.
     */

  }, {
    key: "extractConfig",
    value: function extractConfig(filePath) {
      var _internalSlotsMap$get = internalSlotsMap.get(this),
          cache = _internalSlotsMap$get.cache;

      var indices = getMatchedIndices(this, filePath);
      var cacheKey = indices.join(",");

      if (!cache.has(cacheKey)) {
        cache.set(cacheKey, createConfig(this, indices));
      }

      return cache.get(cacheKey);
    }
  }, {
    key: "pluginEnvironments",

    /**
     * Get the plugin environments.
     * The returned map cannot be mutated.
     * @type {ReadonlyMap<string, Environment>} The plugin environments.
     */
    get: function get() {
      return ensurePluginMemberMaps(this).envMap;
    }
    /**
     * Get the plugin processors.
     * The returned map cannot be mutated.
     * @type {ReadonlyMap<string, Processor>} The plugin processors.
     */

  }, {
    key: "pluginProcessors",
    get: function get() {
      return ensurePluginMemberMaps(this).processorMap;
    }
    /**
     * Get the plugin rules.
     * The returned map cannot be mutated.
     * @returns {ReadonlyMap<string, Rule>} The plugin rules.
     */

  }, {
    key: "pluginRules",
    get: function get() {
      return ensurePluginMemberMaps(this).ruleMap;
    }
  }]);

  return ConfigArray;
}(_wrapNativeSuper(Array));

var exportObject = {
  ConfigArray: ConfigArray,

  /**
   * Get the used extracted configs.
   * CLIEngine will use this method to collect used deprecated rules.
   * @param {ConfigArray} instance The config array object to get.
   * @returns {ExtractedConfig[]} The used extracted configs.
   * @private
   */
  getUsedExtractedConfigs: function getUsedExtractedConfigs(instance) {
    var _internalSlotsMap$get2 = internalSlotsMap.get(instance),
        cache = _internalSlotsMap$get2.cache;

    return Array.from(cache.values());
  }
};
module.exports = exportObject;