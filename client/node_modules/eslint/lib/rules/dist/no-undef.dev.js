/**
 * @fileoverview Rule to flag references to undeclared variables.
 * @author Mark Macdonald
 */
"use strict"; //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks if the given node is the argument of a typeof operator.
 * @param {ASTNode} node The AST node being checked.
 * @returns {boolean} Whether or not the node is the argument of a typeof operator.
 */

function hasTypeOfOperator(node) {
  var parent = node.parent;
  return parent.type === "UnaryExpression" && parent.operator === "typeof";
} //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
      category: "Variables",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-undef"
    },
    schema: [{
      type: "object",
      properties: {
        "typeof": {
          type: "boolean",
          "default": false
        }
      },
      additionalProperties: false
    }],
    messages: {
      undef: "'{{name}}' is not defined."
    }
  },
  create: function create(context) {
    var options = context.options[0];
    var considerTypeOf = options && options["typeof"] === true || false;
    return {
      "Program:exit": function ProgramExit()
      /* node */
      {
        var globalScope = context.getScope();
        globalScope.through.forEach(function (ref) {
          var identifier = ref.identifier;

          if (!considerTypeOf && hasTypeOfOperator(identifier)) {
            return;
          }

          context.report({
            node: identifier,
            messageId: "undef",
            data: identifier
          });
        });
      }
    };
  }
};