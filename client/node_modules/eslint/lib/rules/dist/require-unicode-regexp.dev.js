/**
 * @fileoverview Rule to enforce the use of `u` flag on RegExp.
 * @author Toru Nagashima
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("eslint-utils"),
    CALL = _require.CALL,
    CONSTRUCT = _require.CONSTRUCT,
    ReferenceTracker = _require.ReferenceTracker,
    getStringIfConstant = _require.getStringIfConstant; //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce the use of `u` flag on RegExp",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/require-unicode-regexp"
    },
    messages: {
      requireUFlag: "Use the 'u' flag."
    },
    schema: []
  },
  create: function create(context) {
    return {
      "Literal[regex]": function LiteralRegex(node) {
        var flags = node.regex.flags || "";

        if (!flags.includes("u")) {
          context.report({
            node: node,
            messageId: "requireUFlag"
          });
        }
      },
      Program: function Program() {
        var _RegExp;

        var scope = context.getScope();
        var tracker = new ReferenceTracker(scope);
        var trackMap = {
          RegExp: (_RegExp = {}, _defineProperty(_RegExp, CALL, true), _defineProperty(_RegExp, CONSTRUCT, true), _RegExp)
        };
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = tracker.iterateGlobalReferences(trackMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var node = _step.value.node;
            var flagsNode = node.arguments[1];
            var flags = getStringIfConstant(flagsNode, scope);

            if (!flagsNode || typeof flags === "string" && !flags.includes("u")) {
              context.report({
                node: node,
                messageId: "requireUFlag"
              });
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    };
  }
};