/**
 * @fileoverview Rule to enforce the position of line comments
 * @author Alberto Rodr√≠guez
 */
"use strict";

var astUtils = require("./utils/ast-utils"); //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce position of line comments",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/line-comment-position"
    },
    schema: [{
      oneOf: [{
        "enum": ["above", "beside"]
      }, {
        type: "object",
        properties: {
          position: {
            "enum": ["above", "beside"]
          },
          ignorePattern: {
            type: "string"
          },
          applyDefaultPatterns: {
            type: "boolean"
          },
          applyDefaultIgnorePatterns: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      above: "Expected comment to be above code.",
      beside: "Expected comment to be beside code."
    }
  },
  create: function create(context) {
    var options = context.options[0];
    var above,
        ignorePattern,
        applyDefaultIgnorePatterns = true;

    if (!options || typeof options === "string") {
      above = !options || options === "above";
    } else {
      above = !options.position || options.position === "above";
      ignorePattern = options.ignorePattern;

      if (Object.prototype.hasOwnProperty.call(options, "applyDefaultIgnorePatterns")) {
        applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;
      } else {
        applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;
      }
    }

    var defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;
    var fallThroughRegExp = /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*falls?[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]?through/;
    var customIgnoreRegExp = new RegExp(ignorePattern, "u");
    var sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------

    return {
      Program: function Program() {
        var comments = sourceCode.getAllComments();
        comments.filter(function (token) {
          return token.type === "Line";
        }).forEach(function (node) {
          if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {
            return;
          }

          if (ignorePattern && customIgnoreRegExp.test(node.value)) {
            return;
          }

          var previous = sourceCode.getTokenBefore(node, {
            includeComments: true
          });
          var isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;

          if (above) {
            if (isOnSameLine) {
              context.report({
                node: node,
                messageId: "above"
              });
            }
          } else {
            if (!isOnSameLine) {
              context.report({
                node: node,
                messageId: "beside"
              });
            }
          }
        });
      }
    };
  }
};