/**
 * @fileoverview Rule to flag use of unary increment and decrement operators.
 * @author Ian Christian Myers
 * @author Brody McKee (github.com/mrmckeb)
 */
"use strict"; //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the unary operators `++` and `--`",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-plusplus"
    },
    schema: [{
      type: "object",
      properties: {
        allowForLoopAfterthoughts: {
          type: "boolean",
          "default": false
        }
      },
      additionalProperties: false
    }]
  },
  create: function create(context) {
    var config = context.options[0];
    var allowInForAfterthought = false;

    if (_typeof(config) === "object") {
      allowInForAfterthought = config.allowForLoopAfterthoughts === true;
    }

    return {
      UpdateExpression: function UpdateExpression(node) {
        if (allowInForAfterthought && node.parent.type === "ForStatement") {
          return;
        }

        context.report({
          node: node,
          message: "Unary operator '{{operator}}' used.",
          data: {
            operator: node.operator
          }
        });
      }
    };
  }
};