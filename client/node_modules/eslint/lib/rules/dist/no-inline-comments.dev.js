/**
 * @fileoverview Enforces or disallows inline comments.
 * @author Greg Cochard
 */
"use strict";

var astUtils = require("./utils/ast-utils"); //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow inline comments after code",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-inline-comments"
    },
    schema: []
  },
  create: function create(context) {
    var sourceCode = context.getSourceCode();
    /**
     * Will check that comments are not on lines starting with or ending with code
     * @param {ASTNode} node The comment node to check
     * @private
     * @returns {void}
     */

    function testCodeAroundComment(node) {
      var startLine = String(sourceCode.lines[node.loc.start.line - 1]),
          endLine = String(sourceCode.lines[node.loc.end.line - 1]),
          preamble = startLine.slice(0, node.loc.start.column).trim(),
          postamble = endLine.slice(node.loc.end.column).trim(),
          isPreambleEmpty = !preamble,
          isPostambleEmpty = !postamble; // Nothing on both sides

      if (isPreambleEmpty && isPostambleEmpty) {
        return;
      } // JSX Exception


      if ((isPreambleEmpty || preamble === "{") && (isPostambleEmpty || postamble === "}")) {
        var enclosingNode = sourceCode.getNodeByRangeIndex(node.range[0]);

        if (enclosingNode && enclosingNode.type === "JSXEmptyExpression") {
          return;
        }
      } // Don't report ESLint directive comments


      if (astUtils.isDirectiveComment(node)) {
        return;
      }

      context.report({
        node: node,
        message: "Unexpected comment inline with code."
      });
    } //--------------------------------------------------------------------------
    // Public
    //--------------------------------------------------------------------------


    return {
      Program: function Program() {
        var comments = sourceCode.getAllComments();
        comments.filter(function (token) {
          return token.type !== "Shebang";
        }).forEach(testCodeAroundComment);
      }
    };
  }
};