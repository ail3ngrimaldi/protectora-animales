/**
 * @fileoverview Rule to enforce requiring named capture groups in regular expression.
 * @author Pig Fang <https://github.com/g-plane>
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require("eslint-utils"),
    CALL = _require.CALL,
    CONSTRUCT = _require.CONSTRUCT,
    ReferenceTracker = _require.ReferenceTracker,
    getStringIfConstant = _require.getStringIfConstant;

var regexpp = require("regexpp"); //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------


var parser = new regexpp.RegExpParser(); //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce using named capture group in regular expression",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-named-capture-group"
    },
    schema: [],
    messages: {
      required: "Capture group '{{group}}' should be converted to a named or non-capturing group."
    }
  },
  create: function create(context) {
    /**
     * Function to check regular expression.
     * @param {string} pattern The regular expression pattern to be check.
     * @param {ASTNode} node AST node which contains regular expression.
     * @param {boolean} uFlag Flag indicates whether unicode mode is enabled or not.
     * @returns {void}
     */
    function checkRegex(pattern, node, uFlag) {
      var ast;

      try {
        ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);
      } catch (_) {
        // ignore regex syntax errors
        return;
      }

      regexpp.visitRegExpAST(ast, {
        onCapturingGroupEnter: function onCapturingGroupEnter(group) {
          if (!group.name) {
            context.report({
              node: node,
              messageId: "required",
              data: {
                group: group.raw
              }
            });
          }
        }
      });
    }

    return {
      Literal: function Literal(node) {
        if (node.regex) {
          checkRegex(node.regex.pattern, node, node.regex.flags.includes("u"));
        }
      },
      Program: function Program() {
        var _RegExp;

        var scope = context.getScope();
        var tracker = new ReferenceTracker(scope);
        var traceMap = {
          RegExp: (_RegExp = {}, _defineProperty(_RegExp, CALL, true), _defineProperty(_RegExp, CONSTRUCT, true), _RegExp)
        };
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = tracker.iterateGlobalReferences(traceMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var node = _step.value.node;
            var regex = getStringIfConstant(node.arguments[0]);
            var flags = getStringIfConstant(node.arguments[1]);

            if (regex) {
              checkRegex(regex, node, flags && flags.includes("u"));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    };
  }
};