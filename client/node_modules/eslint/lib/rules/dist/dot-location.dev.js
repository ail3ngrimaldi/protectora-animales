/**
 * @fileoverview Validates newlines before and after dots
 * @author Greg Cochard
 */
"use strict";

var astUtils = require("./utils/ast-utils"); //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent newlines before and after dots",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/dot-location"
    },
    schema: [{
      "enum": ["object", "property"]
    }],
    fixable: "code",
    messages: {
      expectedDotAfterObject: "Expected dot to be on same line as object.",
      expectedDotBeforeProperty: "Expected dot to be on same line as property."
    }
  },
  create: function create(context) {
    var config = context.options[0]; // default to onObject if no preference is passed

    var onObject = config === "object" || !config;
    var sourceCode = context.getSourceCode();
    /**
     * Reports if the dot between object and property is on the correct loccation.
     * @param {ASTNode} node The `MemberExpression` node.
     * @returns {void}
     */

    function checkDotLocation(node) {
      var property = node.property;
      var dot = sourceCode.getTokenBefore(property); // `obj` expression can be parenthesized, but those paren tokens are not a part of the `obj` node.

      var tokenBeforeDot = sourceCode.getTokenBefore(dot);
      var textBeforeDot = sourceCode.getText().slice(tokenBeforeDot.range[1], dot.range[0]);
      var textAfterDot = sourceCode.getText().slice(dot.range[1], property.range[0]);

      if (onObject) {
        if (!astUtils.isTokenOnSameLine(tokenBeforeDot, dot)) {
          var neededTextAfterToken = astUtils.isDecimalIntegerNumericToken(tokenBeforeDot) ? " " : "";
          context.report({
            node: node,
            loc: dot.loc,
            messageId: "expectedDotAfterObject",
            fix: function fix(fixer) {
              return fixer.replaceTextRange([tokenBeforeDot.range[1], property.range[0]], "".concat(neededTextAfterToken, ".").concat(textBeforeDot).concat(textAfterDot));
            }
          });
        }
      } else if (!astUtils.isTokenOnSameLine(dot, property)) {
        context.report({
          node: node,
          loc: dot.loc,
          messageId: "expectedDotBeforeProperty",
          fix: function fix(fixer) {
            return fixer.replaceTextRange([tokenBeforeDot.range[1], property.range[0]], "".concat(textBeforeDot).concat(textAfterDot, "."));
          }
        });
      }
    }
    /**
     * Checks the spacing of the dot within a member expression.
     * @param {ASTNode} node The node to check.
     * @returns {void}
     */


    function checkNode(node) {
      if (!node.computed) {
        checkDotLocation(node);
      }
    }

    return {
      MemberExpression: checkNode
    };
  }
};