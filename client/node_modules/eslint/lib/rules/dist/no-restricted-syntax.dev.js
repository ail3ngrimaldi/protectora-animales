/**
 * @fileoverview Rule to flag use of certain node types
 * @author Burak Yigit Kaya
 */
"use strict"; //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow specified syntax",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-restricted-syntax"
    },
    schema: {
      type: "array",
      items: {
        oneOf: [{
          type: "string"
        }, {
          type: "object",
          properties: {
            selector: {
              type: "string"
            },
            message: {
              type: "string"
            }
          },
          required: ["selector"],
          additionalProperties: false
        }]
      },
      uniqueItems: true,
      minItems: 0
    }
  },
  create: function create(context) {
    return context.options.reduce(function (result, selectorOrObject) {
      var isStringFormat = typeof selectorOrObject === "string";
      var hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);
      var selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;
      var message = hasCustomMessage ? selectorOrObject.message : "Using '{{selector}}' is not allowed.";
      return Object.assign(result, _defineProperty({}, selector, function (node) {
        context.report({
          node: node,
          message: message,
          data: hasCustomMessage ? {} : {
            selector: selector
          }
        });
      }));
    }, {});
  }
};