/**
 * @fileoverview Rule to control spacing within function calls
 * @author Matt DuVall <http://www.mattduvall.com>
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var astUtils = require("./utils/ast-utils"); //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow spacing between function identifiers and their invocations",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/func-call-spacing"
    },
    fixable: "whitespace",
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          "enum": ["never"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          "enum": ["always"]
        }, {
          type: "object",
          properties: {
            allowNewlines: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    messages: {
      unexpected: "Unexpected newline between function name and paren.",
      missing: "Missing space between function name and paren."
    }
  },
  create: function create(context) {
    var never = context.options[0] !== "always";
    var allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;
    var sourceCode = context.getSourceCode();
    var text = sourceCode.getText();
    /**
     * Check if open space is present in a function name
     * @param {ASTNode} node node to evaluate
     * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.
     * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.
     * @returns {void}
     * @private
     */

    function checkSpacing(node, leftToken, rightToken) {
      var textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\/\*(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\*\//g, "");
      var hasWhitespace = /[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/.test(textBetweenTokens);
      var hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);
      /*
       * never allowNewlines hasWhitespace hasNewline message
       * F     F             F             F          Missing space between function name and paren.
       * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)
       * F     F             T             T          Unexpected newline between function name and paren.
       * F     F             T             F          (OK)
       * F     T             T             F          (OK)
       * F     T             T             T          (OK)
       * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)
       * F     T             F             F          Missing space between function name and paren.
       * T     T             F             F          (Invalid `never && allowNewlines`)
       * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)
       * T     T             T             T          (Invalid `never && allowNewlines`)
       * T     T             T             F          (Invalid `never && allowNewlines`)
       * T     F             T             F          Unexpected space between function name and paren.
       * T     F             T             T          Unexpected space between function name and paren.
       * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)
       * T     F             F             F          (OK)
       *
       * T                   T                        Unexpected space between function name and paren.
       * F                   F                        Missing space between function name and paren.
       * F     F                           T          Unexpected newline between function name and paren.
       */

      if (never && hasWhitespace) {
        context.report({
          node: node,
          loc: leftToken.loc.start,
          messageId: "unexpected",
          fix: function fix(fixer) {
            /*
             * Only autofix if there is no newline
             * https://github.com/eslint/eslint/issues/7787
             */
            if (!hasNewline) {
              return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);
            }

            return null;
          }
        });
      } else if (!never && !hasWhitespace) {
        context.report({
          node: node,
          loc: leftToken.loc.start,
          messageId: "missing",
          fix: function fix(fixer) {
            return fixer.insertTextBefore(rightToken, " ");
          }
        });
      } else if (!never && !allowNewlines && hasNewline) {
        context.report({
          node: node,
          loc: leftToken.loc.start,
          messageId: "unexpected",
          fix: function fix(fixer) {
            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], " ");
          }
        });
      }
    }

    return {
      "CallExpression, NewExpression": function CallExpressionNewExpression(node) {
        var lastToken = sourceCode.getLastToken(node);
        var lastCalleeToken = sourceCode.getLastToken(node.callee);
        var parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);
        var prevToken = parenToken && sourceCode.getTokenBefore(parenToken); // Parens in NewExpression are optional

        if (!(parenToken && parenToken.range[1] < node.range[1])) {
          return;
        }

        checkSpacing(node, prevToken, parenToken);
      },
      ImportExpression: function ImportExpression(node) {
        var leftToken = sourceCode.getFirstToken(node);
        var rightToken = sourceCode.getTokenAfter(leftToken);
        checkSpacing(node, leftToken, rightToken);
      }
    };
  }
};