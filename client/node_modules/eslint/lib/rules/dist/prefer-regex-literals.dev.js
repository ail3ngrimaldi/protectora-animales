/**
 * @fileoverview Rule to disallow use of the `RegExp` constructor in favor of regular expression literals
 * @author Milos Djermanovic
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var astUtils = require("./utils/ast-utils");

var _require = require("eslint-utils"),
    CALL = _require.CALL,
    CONSTRUCT = _require.CONSTRUCT,
    ReferenceTracker = _require.ReferenceTracker,
    findVariable = _require.findVariable; //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Determines whether the given node is a string literal.
 * @param {ASTNode} node Node to check.
 * @returns {boolean} True if the node is a string literal.
 */


function isStringLiteral(node) {
  return node.type === "Literal" && typeof node.value === "string";
}
/**
 * Determines whether the given node is a template literal without expressions.
 * @param {ASTNode} node Node to check.
 * @returns {boolean} True if the node is a template literal without expressions.
 */


function isStaticTemplateLiteral(node) {
  return node.type === "TemplateLiteral" && node.expressions.length === 0;
} //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow use of the `RegExp` constructor in favor of regular expression literals",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-regex-literals"
    },
    schema: [],
    messages: {
      unexpectedRegExp: "Use a regular expression literal instead of the 'RegExp' constructor."
    }
  },
  create: function create(context) {
    /**
     * Determines whether the given identifier node is a reference to a global variable.
     * @param {ASTNode} node `Identifier` node to check.
     * @returns {boolean} True if the identifier is a reference to a global variable.
     */
    function isGlobalReference(node) {
      var scope = context.getScope();
      var variable = findVariable(scope, node);
      return variable !== null && variable.scope.type === "global" && variable.defs.length === 0;
    }
    /**
     * Determines whether the given node is a String.raw`` tagged template expression
     * with a static template literal.
     * @param {ASTNode} node Node to check.
     * @returns {boolean} True if the node is String.raw`` with a static template.
     */


    function isStringRawTaggedStaticTemplateLiteral(node) {
      return node.type === "TaggedTemplateExpression" && node.tag.type === "MemberExpression" && node.tag.object.type === "Identifier" && node.tag.object.name === "String" && isGlobalReference(node.tag.object) && astUtils.getStaticPropertyName(node.tag) === "raw" && isStaticTemplateLiteral(node.quasi);
    }
    /**
     * Determines whether the given node is considered to be a static string by the logic of this rule.
     * @param {ASTNode} node Node to check.
     * @returns {boolean} True if the node is a static string.
     */


    function isStaticString(node) {
      return isStringLiteral(node) || isStaticTemplateLiteral(node) || isStringRawTaggedStaticTemplateLiteral(node);
    }

    return {
      Program: function Program() {
        var _RegExp;

        var scope = context.getScope();
        var tracker = new ReferenceTracker(scope);
        var traceMap = {
          RegExp: (_RegExp = {}, _defineProperty(_RegExp, CALL, true), _defineProperty(_RegExp, CONSTRUCT, true), _RegExp)
        };
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = tracker.iterateGlobalReferences(traceMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var node = _step.value.node;
            var args = node.arguments;

            if ((args.length === 1 || args.length === 2) && args.every(isStaticString)) {
              context.report({
                node: node,
                messageId: "unexpectedRegExp"
              });
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    };
  }
};