/**
 * @fileoverview Rule to flag use of alert, confirm, prompt
 * @author Nicholas C. Zakas
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var getPropertyName = require("./utils/ast-utils").getStaticPropertyName; //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks if the given name is a prohibited identifier.
 * @param {string} name The name to check
 * @returns {boolean} Whether or not the name is prohibited.
 */


function isProhibitedIdentifier(name) {
  return /^(alert|confirm|prompt)$/.test(name);
}
/**
 * Finds the eslint-scope reference in the given scope.
 * @param {Object} scope The scope to search.
 * @param {ASTNode} node The identifier node.
 * @returns {Reference|null} Returns the found reference or null if none were found.
 */


function findReference(scope, node) {
  var references = scope.references.filter(function (reference) {
    return reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1];
  });

  if (references.length === 1) {
    return references[0];
  }

  return null;
}
/**
 * Checks if the given identifier node is shadowed in the given scope.
 * @param {Object} scope The current scope.
 * @param {string} node The identifier node to check
 * @returns {boolean} Whether or not the name is shadowed.
 */


function isShadowed(scope, node) {
  var reference = findReference(scope, node);
  return reference && reference.resolved && reference.resolved.defs.length > 0;
}
/**
 * Checks if the given identifier node is a ThisExpression in the global scope or the global window property.
 * @param {Object} scope The current scope.
 * @param {string} node The identifier node to check
 * @returns {boolean} Whether or not the node is a reference to the global object.
 */


function isGlobalThisReferenceOrGlobalWindow(scope, node) {
  if (scope.type === "global" && node.type === "ThisExpression") {
    return true;
  }

  if (node.name === "window") {
    return !isShadowed(scope, node);
  }

  return false;
} //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------


module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `alert`, `confirm`, and `prompt`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-alert"
    },
    schema: [],
    messages: {
      unexpected: "Unexpected {{name}}."
    }
  },
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        var callee = node.callee,
            currentScope = context.getScope(); // without window.

        if (callee.type === "Identifier") {
          var name = callee.name;

          if (!isShadowed(currentScope, callee) && isProhibitedIdentifier(callee.name)) {
            context.report({
              node: node,
              messageId: "unexpected",
              data: {
                name: name
              }
            });
          }
        } else if (callee.type === "MemberExpression" && isGlobalThisReferenceOrGlobalWindow(currentScope, callee.object)) {
          var _name = getPropertyName(callee);

          if (isProhibitedIdentifier(_name)) {
            context.report({
              node: node,
              messageId: "unexpected",
              data: {
                name: _name
              }
            });
          }
        }
      }
    };
  }
};