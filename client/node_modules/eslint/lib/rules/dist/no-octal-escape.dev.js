/**
 * @fileoverview Rule to flag octal escape sequences in string literals.
 * @author Ian Christian Myers
 */
"use strict"; //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow octal escape sequences in string literals",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-octal-escape"
    },
    schema: [],
    messages: {
      octalEscapeSequence: "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead."
    }
  },
  create: function create(context) {
    return {
      Literal: function Literal(node) {
        if (typeof node.value !== "string") {
          return;
        } // \0 represents a valid NULL character if it isn't followed by a digit.


        var match = node.raw.match(/^(?:(?:[\0-\[\]-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\\(?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))*?\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/);

        if (match) {
          context.report({
            node: node,
            messageId: "octalEscapeSequence",
            data: {
              sequence: match[1]
            }
          });
        }
      }
    };
  }
};