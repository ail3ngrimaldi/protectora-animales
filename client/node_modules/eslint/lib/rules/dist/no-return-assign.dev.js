/**
 * @fileoverview Rule to flag when return statement contains assignment
 * @author Ilya Volodin
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var astUtils = require("./utils/ast-utils"); //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------


var SENTINEL_TYPE = /^(?:[A-Za-z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/; //------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow assignment operators in `return` statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-return-assign"
    },
    schema: [{
      "enum": ["except-parens", "always"]
    }]
  },
  create: function create(context) {
    var always = (context.options[0] || "except-parens") !== "except-parens";
    var sourceCode = context.getSourceCode();
    return {
      AssignmentExpression: function AssignmentExpression(node) {
        if (!always && astUtils.isParenthesised(sourceCode, node)) {
          return;
        }

        var currentChild = node;
        var parent = currentChild.parent; // Find ReturnStatement or ArrowFunctionExpression in ancestors.

        while (parent && !SENTINEL_TYPE.test(parent.type)) {
          currentChild = parent;
          parent = parent.parent;
        } // Reports.


        if (parent && parent.type === "ReturnStatement") {
          context.report({
            node: parent,
            message: "Return statement should not contain assignment."
          });
        } else if (parent && parent.type === "ArrowFunctionExpression" && parent.body === currentChild) {
          context.report({
            node: parent,
            message: "Arrow function should not return assignment."
          });
        }
      }
    };
  }
};