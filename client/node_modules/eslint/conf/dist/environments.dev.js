/**
 * @fileoverview Defines environment settings and globals.
 * @author Elan Shanker
 */
"use strict"; //------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var globals = require("globals"); //------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Get the object that has differentce.
 * @param {Record<string,boolean>} current The newer object.
 * @param {Record<string,boolean>} prev The older object.
 * @returns {Record<string,boolean>} The difference object.
 */


function getDiff(current, prev) {
  var retv = {};

  for (var _i = 0, _Object$entries = Object.entries(current); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    if (!Object.hasOwnProperty.call(prev, key)) {
      retv[key] = value;
    }
  }

  return retv;
}

var newGlobals2015 = getDiff(globals.es2015, globals.es5); // 19 variables such as Promise, Map, ...

var newGlobals2017 = {
  Atomics: false,
  SharedArrayBuffer: false
};
var newGlobals2020 = {
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false
}; //------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/** @type {Map<string, import("../lib/shared/types").Environment>} */

module.exports = new Map(Object.entries({
  // Language
  builtin: {
    globals: globals.es5
  },
  es6: {
    globals: newGlobals2015,
    parserOptions: {
      ecmaVersion: 6
    }
  },
  es2015: {
    globals: newGlobals2015,
    parserOptions: {
      ecmaVersion: 6
    }
  },
  es2017: {
    globals: _objectSpread({}, newGlobals2015, {}, newGlobals2017),
    parserOptions: {
      ecmaVersion: 8
    }
  },
  es2020: {
    globals: _objectSpread({}, newGlobals2015, {}, newGlobals2017, {}, newGlobals2020),
    parserOptions: {
      ecmaVersion: 11
    }
  },
  // Platforms
  browser: {
    globals: globals.browser
  },
  node: {
    globals: globals.node,
    parserOptions: {
      ecmaFeatures: {
        globalReturn: true
      }
    }
  },
  "shared-node-browser": {
    globals: globals["shared-node-browser"]
  },
  worker: {
    globals: globals.worker
  },
  serviceworker: {
    globals: globals.serviceworker
  },
  // Frameworks
  commonjs: {
    globals: globals.commonjs,
    parserOptions: {
      ecmaFeatures: {
        globalReturn: true
      }
    }
  },
  amd: {
    globals: globals.amd
  },
  mocha: {
    globals: globals.mocha
  },
  jasmine: {
    globals: globals.jasmine
  },
  jest: {
    globals: globals.jest
  },
  phantomjs: {
    globals: globals.phantomjs
  },
  jquery: {
    globals: globals.jquery
  },
  qunit: {
    globals: globals.qunit
  },
  prototypejs: {
    globals: globals.prototypejs
  },
  shelljs: {
    globals: globals.shelljs
  },
  meteor: {
    globals: globals.meteor
  },
  mongo: {
    globals: globals.mongo
  },
  protractor: {
    globals: globals.protractor
  },
  applescript: {
    globals: globals.applescript
  },
  nashorn: {
    globals: globals.nashorn
  },
  atomtest: {
    globals: globals.atomtest
  },
  embertest: {
    globals: globals.embertest
  },
  webextensions: {
    globals: globals.webextensions
  },
  greasemonkey: {
    globals: globals.greasemonkey
  }
}));