#!/usr/bin/env node
"use strict";

var fs = require('fs');

var prefersColorScheme = require('./postcss');

if (process.argv.length < 3) {
  console.log(['Prefers Color Scheme\n', '  Transforms CSS with @media (prefers-color-scheme) {}\n', 'Usage:\n', '  css-prefers-color-scheme source.css transformed.css', '  css-prefers-color-scheme --in=source.css --out=transformed.css --opts={}', '  echo "@media (prefers-color-scheme: dark) {}" | css-prefers-color-scheme\n'].join('\n'));
  process.exit(0);
} // get process and plugin options from the command line


var fileRegExp = /^[\w\/.]+$/;
var argRegExp = /^--(\w+)=("|')?(.+)\2$/;
var relaxedJsonRegExp = /(['"])?([a-z0-9A-Z_]+)(['"])?:/g;
var argo = process.argv.slice(2).reduce(function (object, arg) {
  var argMatch = arg.match(argRegExp);
  var fileMatch = arg.match(fileRegExp);

  if (argMatch) {
    object[argMatch[1]] = argMatch[3];
  } else if (fileMatch) {
    if (object.from === '<stdin>') {
      object.from = arg;
    } else if (object.to === '<stdout>') {
      object.to = arg;
    }
  }

  return object;
}, {
  from: '<stdin>',
  to: '<stdout>',
  opts: 'null'
}); // get css from command line arguments or stdin

(argo.from === '<stdin>' ? getStdin() : readFile(argo.from)).then(function (css) {
  var pluginOpts = JSON.parse(argo.opts.replace(relaxedJsonRegExp, '"$2": '));
  var processOptions = Object.assign({
    from: argo.from,
    to: argo.to || argo.from
  }, argo.map ? {
    map: JSON.parse(argo.map)
  } : {});
  var result = prefersColorScheme.process(css, processOptions, pluginOpts);

  if (argo.to === '<stdout>') {
    return result.css;
  } else {
    return writeFile(argo.to, result.css).then(function () {
      return "CSS was written to \"".concat(argo.to, "\"");
    });
  }
}).then(function (result) {
  console.log(result);
  process.exit(0);
}, function (error) {
  console.error(error);
  process.exit(1);
});

function readFile(pathname) {
  return new Promise(function (resolve, reject) {
    fs.readFile(pathname, 'utf8', function (error, data) {
      if (error) {
        reject(error);
      } else {
        resolve(data);
      }
    });
  });
}

function writeFile(pathname, data) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(pathname, data, function (error, content) {
      if (error) {
        reject(error);
      } else {
        resolve(content);
      }
    });
  });
}

function getStdin() {
  return new Promise(function (resolve) {
    var data = '';

    if (process.stdin.isTTY) {
      resolve(data);
    } else {
      process.stdin.setEncoding('utf8');
      process.stdin.on('readable', function () {
        var chunk;

        while (chunk = process.stdin.read()) {
          data += chunk;
        }
      });
      process.stdin.on('end', function () {
        resolve(data);
      });
    }
  });
}