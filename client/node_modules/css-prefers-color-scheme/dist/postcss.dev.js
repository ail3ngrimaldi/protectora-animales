'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(ex) {
  return ex && _typeof(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var postcss = _interopDefault(require('postcss'));

var mediaRegExp = /^media$/i;
var prefersInterfaceRegExp = /\(\s*prefers-color-scheme\s*:\s*(dark|light|no-preference)\s*\)/i;
var colorIndexByStyle = {
  dark: 48,
  light: 70,
  'no-preference': 22
};

var prefersInterfaceReplacer = function prefersInterfaceReplacer($0, style) {
  return "(color-index: ".concat(colorIndexByStyle[style.toLowerCase()], ")");
};

var postcss$1 = postcss.plugin('postcss-prefers-color-scheme', function (opts) {
  var preserve = 'preserve' in Object(opts) ? opts.preserve : true;
  return function (root) {
    root.walkAtRules(mediaRegExp, function (atRule) {
      var params = atRule.params;
      var altParams = params.replace(prefersInterfaceRegExp, prefersInterfaceReplacer);

      if (params !== altParams) {
        if (preserve) {
          atRule.cloneBefore({
            params: altParams
          });
        } else {
          atRule.params = altParams;
        }
      }
    });
  };
});
module.exports = postcss$1;